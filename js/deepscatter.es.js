var xhtml = "http://www.w3.org/1999/xhtml";

var namespaces = {
  svg: "http://www.w3.org/2000/svg",
  xhtml: xhtml,
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace",
  xmlns: "http://www.w3.org/2000/xmlns/"
};

function namespace(name) {
  var prefix = name += "", i = prefix.indexOf(":");
  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
  return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name; // eslint-disable-line no-prototype-builtins
}

function creatorInherit(name) {
  return function() {
    var document = this.ownerDocument,
        uri = this.namespaceURI;
    return uri === xhtml && document.documentElement.namespaceURI === xhtml
        ? document.createElement(name)
        : document.createElementNS(uri, name);
  };
}

function creatorFixed(fullname) {
  return function() {
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
  };
}

function creator(name) {
  var fullname = namespace(name);
  return (fullname.local
      ? creatorFixed
      : creatorInherit)(fullname);
}

function none() {}

function selector(selector) {
  return selector == null ? none : function() {
    return this.querySelector(selector);
  };
}

function selection_select(select) {
  if (typeof select !== "function") select = selector(select);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
      }
    }
  }

  return new Selection$1(subgroups, this._parents);
}

// Given something array like (or null), returns something that is strictly an
// array. This is used to ensure that array-like objects passed to d3.selectAll
// or selection.selectAll are converted into proper arrays when creating a
// selection; we don’t ever want to create a selection backed by a live
// HTMLCollection or NodeList. However, note that selection.selectAll will use a
// static NodeList as a group, since it safely derived from querySelectorAll.
function array(x) {
  return x == null ? [] : Array.isArray(x) ? x : Array.from(x);
}

function empty() {
  return [];
}

function selectorAll(selector) {
  return selector == null ? empty : function() {
    return this.querySelectorAll(selector);
  };
}

function arrayAll(select) {
  return function() {
    return array(select.apply(this, arguments));
  };
}

function selection_selectAll(select) {
  if (typeof select === "function") select = arrayAll(select);
  else select = selectorAll(select);

  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        subgroups.push(select.call(node, node.__data__, i, group));
        parents.push(node);
      }
    }
  }

  return new Selection$1(subgroups, parents);
}

function matcher(selector) {
  return function() {
    return this.matches(selector);
  };
}

function childMatcher(selector) {
  return function(node) {
    return node.matches(selector);
  };
}

var find = Array.prototype.find;

function childFind(match) {
  return function() {
    return find.call(this.children, match);
  };
}

function childFirst() {
  return this.firstElementChild;
}

function selection_selectChild(match) {
  return this.select(match == null ? childFirst
      : childFind(typeof match === "function" ? match : childMatcher(match)));
}

var filter = Array.prototype.filter;

function children() {
  return Array.from(this.children);
}

function childrenFilter(match) {
  return function() {
    return filter.call(this.children, match);
  };
}

function selection_selectChildren(match) {
  return this.selectAll(match == null ? children
      : childrenFilter(typeof match === "function" ? match : childMatcher(match)));
}

function selection_filter(match) {
  if (typeof match !== "function") match = matcher(match);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }

  return new Selection$1(subgroups, this._parents);
}

function sparse(update) {
  return new Array(update.length);
}

function selection_enter() {
  return new Selection$1(this._enter || this._groups.map(sparse), this._parents);
}

function EnterNode(parent, datum) {
  this.ownerDocument = parent.ownerDocument;
  this.namespaceURI = parent.namespaceURI;
  this._next = null;
  this._parent = parent;
  this.__data__ = datum;
}

EnterNode.prototype = {
  constructor: EnterNode,
  appendChild: function(child) { return this._parent.insertBefore(child, this._next); },
  insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },
  querySelector: function(selector) { return this._parent.querySelector(selector); },
  querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }
};

function constant$2(x) {
  return function() {
    return x;
  };
}

function bindIndex(parent, group, enter, update, exit, data) {
  var i = 0,
      node,
      groupLength = group.length,
      dataLength = data.length;

  // Put any non-null nodes that fit into update.
  // Put any null nodes into enter.
  // Put any remaining data into enter.
  for (; i < dataLength; ++i) {
    if (node = group[i]) {
      node.__data__ = data[i];
      update[i] = node;
    } else {
      enter[i] = new EnterNode(parent, data[i]);
    }
  }

  // Put any non-null nodes that don’t fit into exit.
  for (; i < groupLength; ++i) {
    if (node = group[i]) {
      exit[i] = node;
    }
  }
}

function bindKey(parent, group, enter, update, exit, data, key) {
  var i,
      node,
      nodeByKeyValue = new Map,
      groupLength = group.length,
      dataLength = data.length,
      keyValues = new Array(groupLength),
      keyValue;

  // Compute the key for each node.
  // If multiple nodes have the same key, the duplicates are added to exit.
  for (i = 0; i < groupLength; ++i) {
    if (node = group[i]) {
      keyValues[i] = keyValue = key.call(node, node.__data__, i, group) + "";
      if (nodeByKeyValue.has(keyValue)) {
        exit[i] = node;
      } else {
        nodeByKeyValue.set(keyValue, node);
      }
    }
  }

  // Compute the key for each datum.
  // If there a node associated with this key, join and add it to update.
  // If there is not (or the key is a duplicate), add it to enter.
  for (i = 0; i < dataLength; ++i) {
    keyValue = key.call(parent, data[i], i, data) + "";
    if (node = nodeByKeyValue.get(keyValue)) {
      update[i] = node;
      node.__data__ = data[i];
      nodeByKeyValue.delete(keyValue);
    } else {
      enter[i] = new EnterNode(parent, data[i]);
    }
  }

  // Add any remaining nodes that were not bound to data to exit.
  for (i = 0; i < groupLength; ++i) {
    if ((node = group[i]) && (nodeByKeyValue.get(keyValues[i]) === node)) {
      exit[i] = node;
    }
  }
}

function datum(node) {
  return node.__data__;
}

function selection_data(value, key) {
  if (!arguments.length) return Array.from(this, datum);

  var bind = key ? bindKey : bindIndex,
      parents = this._parents,
      groups = this._groups;

  if (typeof value !== "function") value = constant$2(value);

  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
    var parent = parents[j],
        group = groups[j],
        groupLength = group.length,
        data = arraylike(value.call(parent, parent && parent.__data__, j, parents)),
        dataLength = data.length,
        enterGroup = enter[j] = new Array(dataLength),
        updateGroup = update[j] = new Array(dataLength),
        exitGroup = exit[j] = new Array(groupLength);

    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);

    // Now connect the enter nodes to their following update node, such that
    // appendChild can insert the materialized enter node before this node,
    // rather than at the end of the parent node.
    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
      if (previous = enterGroup[i0]) {
        if (i0 >= i1) i1 = i0 + 1;
        while (!(next = updateGroup[i1]) && ++i1 < dataLength);
        previous._next = next || null;
      }
    }
  }

  update = new Selection$1(update, parents);
  update._enter = enter;
  update._exit = exit;
  return update;
}

// Given some data, this returns an array-like view of it: an object that
// exposes a length property and allows numeric indexing. Note that unlike
// selectAll, this isn’t worried about “live” collections because the resulting
// array will only be used briefly while data is being bound. (It is possible to
// cause the data to change while iterating by using a key function, but please
// don’t; we’d rather avoid a gratuitous copy.)
function arraylike(data) {
  return typeof data === "object" && "length" in data
    ? data // Array, TypedArray, NodeList, array-like
    : Array.from(data); // Map, Set, iterable, string, or anything else
}

function selection_exit() {
  return new Selection$1(this._exit || this._groups.map(sparse), this._parents);
}

function selection_join(onenter, onupdate, onexit) {
  var enter = this.enter(), update = this, exit = this.exit();
  if (typeof onenter === "function") {
    enter = onenter(enter);
    if (enter) enter = enter.selection();
  } else {
    enter = enter.append(onenter + "");
  }
  if (onupdate != null) {
    update = onupdate(update);
    if (update) update = update.selection();
  }
  if (onexit == null) exit.remove(); else onexit(exit);
  return enter && update ? enter.merge(update).order() : update;
}

function selection_merge(context) {
  var selection = context.selection ? context.selection() : context;

  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }

  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }

  return new Selection$1(merges, this._parents);
}

function selection_order() {

  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
      if (node = group[i]) {
        if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);
        next = node;
      }
    }
  }

  return this;
}

function selection_sort(compare) {
  if (!compare) compare = ascending$1;

  function compareNode(a, b) {
    return a && b ? compare(a.__data__, b.__data__) : !a - !b;
  }

  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        sortgroup[i] = node;
      }
    }
    sortgroup.sort(compareNode);
  }

  return new Selection$1(sortgroups, this._parents).order();
}

function ascending$1(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}

function selection_call() {
  var callback = arguments[0];
  arguments[0] = this;
  callback.apply(null, arguments);
  return this;
}

function selection_nodes() {
  return Array.from(this);
}

function selection_node() {

  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
      var node = group[i];
      if (node) return node;
    }
  }

  return null;
}

function selection_size() {
  let size = 0;
  for (const node of this) ++size; // eslint-disable-line no-unused-vars
  return size;
}

function selection_empty() {
  return !this.node();
}

function selection_each(callback) {

  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i]) callback.call(node, node.__data__, i, group);
    }
  }

  return this;
}

function attrRemove$1(name) {
  return function() {
    this.removeAttribute(name);
  };
}

function attrRemoveNS$1(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}

function attrConstant$1(name, value) {
  return function() {
    this.setAttribute(name, value);
  };
}

function attrConstantNS$1(fullname, value) {
  return function() {
    this.setAttributeNS(fullname.space, fullname.local, value);
  };
}

function attrFunction$1(name, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttribute(name);
    else this.setAttribute(name, v);
  };
}

function attrFunctionNS$1(fullname, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);
    else this.setAttributeNS(fullname.space, fullname.local, v);
  };
}

function selection_attr(name, value) {
  var fullname = namespace(name);

  if (arguments.length < 2) {
    var node = this.node();
    return fullname.local
        ? node.getAttributeNS(fullname.space, fullname.local)
        : node.getAttribute(fullname);
  }

  return this.each((value == null
      ? (fullname.local ? attrRemoveNS$1 : attrRemove$1) : (typeof value === "function"
      ? (fullname.local ? attrFunctionNS$1 : attrFunction$1)
      : (fullname.local ? attrConstantNS$1 : attrConstant$1)))(fullname, value));
}

function defaultView(node) {
  return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node
      || (node.document && node) // node is a Window
      || node.defaultView; // node is a Document
}

function styleRemove$1(name) {
  return function() {
    this.style.removeProperty(name);
  };
}

function styleConstant$1(name, value, priority) {
  return function() {
    this.style.setProperty(name, value, priority);
  };
}

function styleFunction$1(name, value, priority) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.style.removeProperty(name);
    else this.style.setProperty(name, v, priority);
  };
}

function selection_style(name, value, priority) {
  return arguments.length > 1
      ? this.each((value == null
            ? styleRemove$1 : typeof value === "function"
            ? styleFunction$1
            : styleConstant$1)(name, value, priority == null ? "" : priority))
      : styleValue(this.node(), name);
}

function styleValue(node, name) {
  return node.style.getPropertyValue(name)
      || defaultView(node).getComputedStyle(node, null).getPropertyValue(name);
}

function propertyRemove(name) {
  return function() {
    delete this[name];
  };
}

function propertyConstant(name, value) {
  return function() {
    this[name] = value;
  };
}

function propertyFunction(name, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) delete this[name];
    else this[name] = v;
  };
}

function selection_property(name, value) {
  return arguments.length > 1
      ? this.each((value == null
          ? propertyRemove : typeof value === "function"
          ? propertyFunction
          : propertyConstant)(name, value))
      : this.node()[name];
}

function classArray(string) {
  return string.trim().split(/^|\s+/);
}

function classList(node) {
  return node.classList || new ClassList(node);
}

function ClassList(node) {
  this._node = node;
  this._names = classArray(node.getAttribute("class") || "");
}

ClassList.prototype = {
  add: function(name) {
    var i = this._names.indexOf(name);
    if (i < 0) {
      this._names.push(name);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  remove: function(name) {
    var i = this._names.indexOf(name);
    if (i >= 0) {
      this._names.splice(i, 1);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  contains: function(name) {
    return this._names.indexOf(name) >= 0;
  }
};

function classedAdd(node, names) {
  var list = classList(node), i = -1, n = names.length;
  while (++i < n) list.add(names[i]);
}

function classedRemove(node, names) {
  var list = classList(node), i = -1, n = names.length;
  while (++i < n) list.remove(names[i]);
}

function classedTrue(names) {
  return function() {
    classedAdd(this, names);
  };
}

function classedFalse(names) {
  return function() {
    classedRemove(this, names);
  };
}

function classedFunction(names, value) {
  return function() {
    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
  };
}

function selection_classed(name, value) {
  var names = classArray(name + "");

  if (arguments.length < 2) {
    var list = classList(this.node()), i = -1, n = names.length;
    while (++i < n) if (!list.contains(names[i])) return false;
    return true;
  }

  return this.each((typeof value === "function"
      ? classedFunction : value
      ? classedTrue
      : classedFalse)(names, value));
}

function textRemove() {
  this.textContent = "";
}

function textConstant$1(value) {
  return function() {
    this.textContent = value;
  };
}

function textFunction$1(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.textContent = v == null ? "" : v;
  };
}

function selection_text(value) {
  return arguments.length
      ? this.each(value == null
          ? textRemove : (typeof value === "function"
          ? textFunction$1
          : textConstant$1)(value))
      : this.node().textContent;
}

function htmlRemove() {
  this.innerHTML = "";
}

function htmlConstant(value) {
  return function() {
    this.innerHTML = value;
  };
}

function htmlFunction(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.innerHTML = v == null ? "" : v;
  };
}

function selection_html(value) {
  return arguments.length
      ? this.each(value == null
          ? htmlRemove : (typeof value === "function"
          ? htmlFunction
          : htmlConstant)(value))
      : this.node().innerHTML;
}

function raise() {
  if (this.nextSibling) this.parentNode.appendChild(this);
}

function selection_raise() {
  return this.each(raise);
}

function lower() {
  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
}

function selection_lower() {
  return this.each(lower);
}

function selection_append(name) {
  var create = typeof name === "function" ? name : creator(name);
  return this.select(function() {
    return this.appendChild(create.apply(this, arguments));
  });
}

function constantNull() {
  return null;
}

function selection_insert(name, before) {
  var create = typeof name === "function" ? name : creator(name),
      select = before == null ? constantNull : typeof before === "function" ? before : selector(before);
  return this.select(function() {
    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
  });
}

function remove() {
  var parent = this.parentNode;
  if (parent) parent.removeChild(this);
}

function selection_remove() {
  return this.each(remove);
}

function selection_cloneShallow() {
  var clone = this.cloneNode(false), parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}

function selection_cloneDeep() {
  var clone = this.cloneNode(true), parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}

function selection_clone(deep) {
  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
}

function selection_datum(value) {
  return arguments.length
      ? this.property("__data__", value)
      : this.node().__data__;
}

function contextListener(listener) {
  return function(event) {
    listener.call(this, event, this.__data__);
  };
}

function parseTypenames$1(typenames) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name = "", i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    return {type: t, name: name};
  });
}

function onRemove(typename) {
  return function() {
    var on = this.__on;
    if (!on) return;
    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.options);
      } else {
        on[++i] = o;
      }
    }
    if (++i) on.length = i;
    else delete this.__on;
  };
}

function onAdd(typename, value, options) {
  return function() {
    var on = this.__on, o, listener = contextListener(value);
    if (on) for (var j = 0, m = on.length; j < m; ++j) {
      if ((o = on[j]).type === typename.type && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.options);
        this.addEventListener(o.type, o.listener = listener, o.options = options);
        o.value = value;
        return;
      }
    }
    this.addEventListener(typename.type, listener, options);
    o = {type: typename.type, name: typename.name, value: value, listener: listener, options: options};
    if (!on) this.__on = [o];
    else on.push(o);
  };
}

function selection_on(typename, value, options) {
  var typenames = parseTypenames$1(typename + ""), i, n = typenames.length, t;

  if (arguments.length < 2) {
    var on = this.node().__on;
    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
      for (i = 0, o = on[j]; i < n; ++i) {
        if ((t = typenames[i]).type === o.type && t.name === o.name) {
          return o.value;
        }
      }
    }
    return;
  }

  on = value ? onAdd : onRemove;
  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, options));
  return this;
}

function dispatchEvent(node, type, params) {
  var window = defaultView(node),
      event = window.CustomEvent;

  if (typeof event === "function") {
    event = new event(type, params);
  } else {
    event = window.document.createEvent("Event");
    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
    else event.initEvent(type, false, false);
  }

  node.dispatchEvent(event);
}

function dispatchConstant(type, params) {
  return function() {
    return dispatchEvent(this, type, params);
  };
}

function dispatchFunction(type, params) {
  return function() {
    return dispatchEvent(this, type, params.apply(this, arguments));
  };
}

function selection_dispatch(type, params) {
  return this.each((typeof params === "function"
      ? dispatchFunction
      : dispatchConstant)(type, params));
}

function* selection_iterator() {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i]) yield node;
    }
  }
}

var root = [null];

function Selection$1(groups, parents) {
  this._groups = groups;
  this._parents = parents;
}

function selection() {
  return new Selection$1([[document.documentElement]], root);
}

function selection_selection() {
  return this;
}

Selection$1.prototype = selection.prototype = {
  constructor: Selection$1,
  select: selection_select,
  selectAll: selection_selectAll,
  selectChild: selection_selectChild,
  selectChildren: selection_selectChildren,
  filter: selection_filter,
  data: selection_data,
  enter: selection_enter,
  exit: selection_exit,
  join: selection_join,
  merge: selection_merge,
  selection: selection_selection,
  order: selection_order,
  sort: selection_sort,
  call: selection_call,
  nodes: selection_nodes,
  node: selection_node,
  size: selection_size,
  empty: selection_empty,
  each: selection_each,
  attr: selection_attr,
  style: selection_style,
  property: selection_property,
  classed: selection_classed,
  text: selection_text,
  html: selection_html,
  raise: selection_raise,
  lower: selection_lower,
  append: selection_append,
  insert: selection_insert,
  remove: selection_remove,
  clone: selection_clone,
  datum: selection_datum,
  on: selection_on,
  dispatch: selection_dispatch,
  [Symbol.iterator]: selection_iterator
};

function select(selector) {
  return typeof selector === "string"
      ? new Selection$1([[document.querySelector(selector)]], [document.documentElement])
      : new Selection$1([[selector]], root);
}

function create$1(name) {
  return select(creator(name).call(document.documentElement));
}

function sourceEvent(event) {
  let sourceEvent;
  while (sourceEvent = event.sourceEvent) event = sourceEvent;
  return event;
}

function pointer(event, node) {
  event = sourceEvent(event);
  if (node === undefined) node = event.currentTarget;
  if (node) {
    var svg = node.ownerSVGElement || node;
    if (svg.createSVGPoint) {
      var point = svg.createSVGPoint();
      point.x = event.clientX, point.y = event.clientY;
      point = point.matrixTransform(node.getScreenCTM().inverse());
      return [point.x, point.y];
    }
    if (node.getBoundingClientRect) {
      var rect = node.getBoundingClientRect();
      return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
    }
  }
  return [event.pageX, event.pageY];
}

function ascending(a, b) {
  return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}

function bisector(f) {
  let delta = f;
  let compare1 = f;
  let compare2 = f;

  if (f.length !== 2) {
    delta = (d, x) => f(d) - x;
    compare1 = ascending;
    compare2 = (d, x) => ascending(f(d), x);
  }

  function left(a, x, lo = 0, hi = a.length) {
    if (lo < hi) {
      if (compare1(x, x) !== 0) return hi;
      do {
        const mid = (lo + hi) >>> 1;
        if (compare2(a[mid], x) < 0) lo = mid + 1;
        else hi = mid;
      } while (lo < hi);
    }
    return lo;
  }

  function right(a, x, lo = 0, hi = a.length) {
    if (lo < hi) {
      if (compare1(x, x) !== 0) return hi;
      do {
        const mid = (lo + hi) >>> 1;
        if (compare2(a[mid], x) <= 0) lo = mid + 1;
        else hi = mid;
      } while (lo < hi);
    }
    return lo;
  }

  function center(a, x, lo = 0, hi = a.length) {
    const i = left(a, x, lo, hi - 1);
    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
  }

  return {left, center, right};
}

function number$1(x) {
  return x === null ? NaN : +x;
}

const ascendingBisect = bisector(ascending);
const bisectRight = ascendingBisect.right;
const bisectLeft = ascendingBisect.left;
bisector(number$1).center;

function extent(values, valueof) {
  let min;
  let max;
  if (valueof === undefined) {
    for (const value of values) {
      if (value != null) {
        if (min === undefined) {
          if (value >= value) min = max = value;
        } else {
          if (min > value) min = value;
          if (max < value) max = value;
        }
      }
    }
  } else {
    let index = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null) {
        if (min === undefined) {
          if (value >= value) min = max = value;
        } else {
          if (min > value) min = value;
          if (max < value) max = value;
        }
      }
    }
  }
  return [min, max];
}

// https://github.com/python/cpython/blob/a74eea238f5baba15797e2e8b570d153bc8690a7/Modules/mathmodule.c#L1423
class Adder {
  constructor() {
    this._partials = new Float64Array(32);
    this._n = 0;
  }
  add(x) {
    const p = this._partials;
    let i = 0;
    for (let j = 0; j < this._n && j < 32; j++) {
      const y = p[j],
        hi = x + y,
        lo = Math.abs(x) < Math.abs(y) ? x - (hi - y) : y - (hi - x);
      if (lo) p[i++] = lo;
      x = hi;
    }
    p[i] = x;
    this._n = i + 1;
    return this;
  }
  valueOf() {
    const p = this._partials;
    let n = this._n, x, y, lo, hi = 0;
    if (n > 0) {
      hi = p[--n];
      while (n > 0) {
        x = hi;
        y = p[--n];
        hi = x + y;
        lo = y - (hi - x);
        if (lo) break;
      }
      if (n > 0 && ((lo < 0 && p[n - 1] < 0) || (lo > 0 && p[n - 1] > 0))) {
        y = lo * 2;
        x = hi + y;
        if (y == x - hi) hi = x;
      }
    }
    return hi;
  }
}

class InternMap extends Map {
  constructor(entries, key = keyof) {
    super();
    Object.defineProperties(this, {_intern: {value: new Map()}, _key: {value: key}});
    if (entries != null) for (const [key, value] of entries) this.set(key, value);
  }
  get(key) {
    return super.get(intern_get(this, key));
  }
  has(key) {
    return super.has(intern_get(this, key));
  }
  set(key, value) {
    return super.set(intern_set(this, key), value);
  }
  delete(key) {
    return super.delete(intern_delete(this, key));
  }
}

function intern_get({_intern, _key}, value) {
  const key = _key(value);
  return _intern.has(key) ? _intern.get(key) : value;
}

function intern_set({_intern, _key}, value) {
  const key = _key(value);
  if (_intern.has(key)) return _intern.get(key);
  _intern.set(key, value);
  return value;
}

function intern_delete({_intern, _key}, value) {
  const key = _key(value);
  if (_intern.has(key)) {
    value = _intern.get(value);
    _intern.delete(key);
  }
  return value;
}

function keyof(value) {
  return value !== null && typeof value === "object" ? value.valueOf() : value;
}

var e10 = Math.sqrt(50),
    e5 = Math.sqrt(10),
    e2 = Math.sqrt(2);

function ticks(start, stop, count) {
  var reverse,
      i = -1,
      n,
      ticks,
      step;

  stop = +stop, start = +start, count = +count;
  if (start === stop && count > 0) return [start];
  if (reverse = stop < start) n = start, start = stop, stop = n;
  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

  if (step > 0) {
    let r0 = Math.round(start / step), r1 = Math.round(stop / step);
    if (r0 * step < start) ++r0;
    if (r1 * step > stop) --r1;
    ticks = new Array(n = r1 - r0 + 1);
    while (++i < n) ticks[i] = (r0 + i) * step;
  } else {
    step = -step;
    let r0 = Math.round(start * step), r1 = Math.round(stop * step);
    if (r0 / step < start) ++r0;
    if (r1 / step > stop) --r1;
    ticks = new Array(n = r1 - r0 + 1);
    while (++i < n) ticks[i] = (r0 + i) / step;
  }

  if (reverse) ticks.reverse();

  return ticks;
}

function tickIncrement(start, stop, count) {
  var step = (stop - start) / Math.max(0, count),
      power = Math.floor(Math.log(step) / Math.LN10),
      error = step / Math.pow(10, power);
  return power >= 0
      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)
      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
}

function tickStep(start, stop, count) {
  var step0 = Math.abs(stop - start) / Math.max(0, count),
      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
      error = step0 / step1;
  if (error >= e10) step1 *= 10;
  else if (error >= e5) step1 *= 5;
  else if (error >= e2) step1 *= 2;
  return stop < start ? -step1 : step1;
}

function max(values, valueof) {
  let max;
  if (valueof === undefined) {
    for (const value of values) {
      if (value != null
          && (max < value || (max === undefined && value >= value))) {
        max = value;
      }
    }
  } else {
    let index = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null
          && (max < value || (max === undefined && value >= value))) {
        max = value;
      }
    }
  }
  return max;
}

function min(values, valueof) {
  let min;
  if (valueof === undefined) {
    for (const value of values) {
      if (value != null
          && (min > value || (min === undefined && value >= value))) {
        min = value;
      }
    }
  } else {
    let index = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null
          && (min > value || (min === undefined && value >= value))) {
        min = value;
      }
    }
  }
  return min;
}

function mean(values, valueof) {
  let count = 0;
  let sum = 0;
  if (valueof === undefined) {
    for (let value of values) {
      if (value != null && (value = +value) >= value) {
        ++count, sum += value;
      }
    }
  } else {
    let index = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
        ++count, sum += value;
      }
    }
  }
  if (count) return sum / count;
}

function* flatten(arrays) {
  for (const array of arrays) {
    yield* array;
  }
}

function merge$1(arrays) {
  return Array.from(flatten(arrays));
}

function range(start, stop, step) {
  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;

  var i = -1,
      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
      range = new Array(n);

  while (++i < n) {
    range[i] = start + i * step;
  }

  return range;
}

var shuffle = shuffler(Math.random);

function shuffler(random) {
  return function shuffle(array, i0 = 0, i1 = array.length) {
    let m = i1 - (i0 = +i0);
    while (m) {
      const i = random() * m-- | 0, t = array[m + i0];
      array[m + i0] = array[i + i0];
      array[i + i0] = t;
    }
    return array;
  };
}

function sum$1(values, valueof) {
  let sum = 0;
  if (valueof === undefined) {
    for (let value of values) {
      if (value = +value) {
        sum += value;
      }
    }
  } else {
    let index = -1;
    for (let value of values) {
      if (value = +valueof(value, ++index, values)) {
        sum += value;
      }
    }
  }
  return sum;
}

var epsilon = 1e-6;
var pi = Math.PI;
var tau = pi * 2;

var degrees$2 = 180 / pi;
var radians$1 = pi / 180;

var abs = Math.abs;
var cos = Math.cos;
var sin = Math.sin;
var sqrt$1 = Math.sqrt;

function noop$1() {}

function streamGeometry(geometry, stream) {
  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
    streamGeometryType[geometry.type](geometry, stream);
  }
}

var streamObjectType = {
  Feature: function(object, stream) {
    streamGeometry(object.geometry, stream);
  },
  FeatureCollection: function(object, stream) {
    var features = object.features, i = -1, n = features.length;
    while (++i < n) streamGeometry(features[i].geometry, stream);
  }
};

var streamGeometryType = {
  Sphere: function(object, stream) {
    stream.sphere();
  },
  Point: function(object, stream) {
    object = object.coordinates;
    stream.point(object[0], object[1], object[2]);
  },
  MultiPoint: function(object, stream) {
    var coordinates = object.coordinates, i = -1, n = coordinates.length;
    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);
  },
  LineString: function(object, stream) {
    streamLine(object.coordinates, stream, 0);
  },
  MultiLineString: function(object, stream) {
    var coordinates = object.coordinates, i = -1, n = coordinates.length;
    while (++i < n) streamLine(coordinates[i], stream, 0);
  },
  Polygon: function(object, stream) {
    streamPolygon(object.coordinates, stream);
  },
  MultiPolygon: function(object, stream) {
    var coordinates = object.coordinates, i = -1, n = coordinates.length;
    while (++i < n) streamPolygon(coordinates[i], stream);
  },
  GeometryCollection: function(object, stream) {
    var geometries = object.geometries, i = -1, n = geometries.length;
    while (++i < n) streamGeometry(geometries[i], stream);
  }
};

function streamLine(coordinates, stream, closed) {
  var i = -1, n = coordinates.length - closed, coordinate;
  stream.lineStart();
  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
  stream.lineEnd();
}

function streamPolygon(coordinates, stream) {
  var i = -1, n = coordinates.length;
  stream.polygonStart();
  while (++i < n) streamLine(coordinates[i], stream, 1);
  stream.polygonEnd();
}

function geoStream(object, stream) {
  if (object && streamObjectType.hasOwnProperty(object.type)) {
    streamObjectType[object.type](object, stream);
  } else {
    streamGeometry(object, stream);
  }
}

function clipBuffer() {
  var lines = [],
      line;
  return {
    point: function(x, y, m) {
      line.push([x, y, m]);
    },
    lineStart: function() {
      lines.push(line = []);
    },
    lineEnd: noop$1,
    rejoin: function() {
      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
    },
    result: function() {
      var result = lines;
      lines = [];
      line = null;
      return result;
    }
  };
}

function pointEqual(a, b) {
  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;
}

function Intersection(point, points, other, entry) {
  this.x = point;
  this.z = points;
  this.o = other; // another intersection
  this.e = entry; // is an entry?
  this.v = false; // visited
  this.n = this.p = null; // next & previous
}

// A generalized polygon clipping algorithm: given a polygon that has been cut
// into its visible line segments, and rejoins the segments by interpolating
// along the clip edge.
function clipRejoin(segments, compareIntersection, startInside, interpolate, stream) {
  var subject = [],
      clip = [],
      i,
      n;

  segments.forEach(function(segment) {
    if ((n = segment.length - 1) <= 0) return;
    var n, p0 = segment[0], p1 = segment[n], x;

    if (pointEqual(p0, p1)) {
      if (!p0[2] && !p1[2]) {
        stream.lineStart();
        for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);
        stream.lineEnd();
        return;
      }
      // handle degenerate cases by moving the point
      p1[0] += 2 * epsilon;
    }

    subject.push(x = new Intersection(p0, segment, null, true));
    clip.push(x.o = new Intersection(p0, null, x, false));
    subject.push(x = new Intersection(p1, segment, null, false));
    clip.push(x.o = new Intersection(p1, null, x, true));
  });

  if (!subject.length) return;

  clip.sort(compareIntersection);
  link(subject);
  link(clip);

  for (i = 0, n = clip.length; i < n; ++i) {
    clip[i].e = startInside = !startInside;
  }

  var start = subject[0],
      points,
      point;

  while (1) {
    // Find first unvisited intersection.
    var current = start,
        isSubject = true;
    while (current.v) if ((current = current.n) === start) return;
    points = current.z;
    stream.lineStart();
    do {
      current.v = current.o.v = true;
      if (current.e) {
        if (isSubject) {
          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);
        } else {
          interpolate(current.x, current.n.x, 1, stream);
        }
        current = current.n;
      } else {
        if (isSubject) {
          points = current.p.z;
          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);
        } else {
          interpolate(current.x, current.p.x, -1, stream);
        }
        current = current.p;
      }
      current = current.o;
      points = current.z;
      isSubject = !isSubject;
    } while (!current.v);
    stream.lineEnd();
  }
}

function link(array) {
  if (!(n = array.length)) return;
  var n,
      i = 0,
      a = array[0],
      b;
  while (++i < n) {
    a.n = b = array[i];
    b.p = a;
    a = b;
  }
  a.n = b = array[0];
  b.p = a;
}

function clipLine(a, b, x0, y0, x1, y1) {
  var ax = a[0],
      ay = a[1],
      bx = b[0],
      by = b[1],
      t0 = 0,
      t1 = 1,
      dx = bx - ax,
      dy = by - ay,
      r;

  r = x0 - ax;
  if (!dx && r > 0) return;
  r /= dx;
  if (dx < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dx > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = x1 - ax;
  if (!dx && r < 0) return;
  r /= dx;
  if (dx < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dx > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  r = y0 - ay;
  if (!dy && r > 0) return;
  r /= dy;
  if (dy < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dy > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = y1 - ay;
  if (!dy && r < 0) return;
  r /= dy;
  if (dy < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dy > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
  return true;
}

var clipMax = 1e9, clipMin = -clipMax;

// TODO Use d3-polygon’s polygonContains here for the ring check?
// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?

function clipRectangle(x0, y0, x1, y1) {

  function visible(x, y) {
    return x0 <= x && x <= x1 && y0 <= y && y <= y1;
  }

  function interpolate(from, to, direction, stream) {
    var a = 0, a1 = 0;
    if (from == null
        || (a = corner(from, direction)) !== (a1 = corner(to, direction))
        || comparePoint(from, to) < 0 ^ direction > 0) {
      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
      while ((a = (a + direction + 4) % 4) !== a1);
    } else {
      stream.point(to[0], to[1]);
    }
  }

  function corner(p, direction) {
    return abs(p[0] - x0) < epsilon ? direction > 0 ? 0 : 3
        : abs(p[0] - x1) < epsilon ? direction > 0 ? 2 : 1
        : abs(p[1] - y0) < epsilon ? direction > 0 ? 1 : 0
        : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
  }

  function compareIntersection(a, b) {
    return comparePoint(a.x, b.x);
  }

  function comparePoint(a, b) {
    var ca = corner(a, 1),
        cb = corner(b, 1);
    return ca !== cb ? ca - cb
        : ca === 0 ? b[1] - a[1]
        : ca === 1 ? a[0] - b[0]
        : ca === 2 ? a[1] - b[1]
        : b[0] - a[0];
  }

  return function(stream) {
    var activeStream = stream,
        bufferStream = clipBuffer(),
        segments,
        polygon,
        ring,
        x__, y__, v__, // first point
        x_, y_, v_, // previous point
        first,
        clean;

    var clipStream = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: polygonStart,
      polygonEnd: polygonEnd
    };

    function point(x, y) {
      if (visible(x, y)) activeStream.point(x, y);
    }

    function polygonInside() {
      var winding = 0;

      for (var i = 0, n = polygon.length; i < n; ++i) {
        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];
          if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }
          else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }
        }
      }

      return winding;
    }

    // Buffer geometry within a polygon and then clip it en masse.
    function polygonStart() {
      activeStream = bufferStream, segments = [], polygon = [], clean = true;
    }

    function polygonEnd() {
      var startInside = polygonInside(),
          cleanInside = clean && startInside,
          visible = (segments = merge$1(segments)).length;
      if (cleanInside || visible) {
        stream.polygonStart();
        if (cleanInside) {
          stream.lineStart();
          interpolate(null, null, 1, stream);
          stream.lineEnd();
        }
        if (visible) {
          clipRejoin(segments, compareIntersection, startInside, interpolate, stream);
        }
        stream.polygonEnd();
      }
      activeStream = stream, segments = polygon = ring = null;
    }

    function lineStart() {
      clipStream.point = linePoint;
      if (polygon) polygon.push(ring = []);
      first = true;
      v_ = false;
      x_ = y_ = NaN;
    }

    // TODO rather than special-case polygons, simply handle them separately.
    // Ideally, coincident intersection points should be jittered to avoid
    // clipping issues.
    function lineEnd() {
      if (segments) {
        linePoint(x__, y__);
        if (v__ && v_) bufferStream.rejoin();
        segments.push(bufferStream.result());
      }
      clipStream.point = point;
      if (v_) activeStream.lineEnd();
    }

    function linePoint(x, y) {
      var v = visible(x, y);
      if (polygon) ring.push([x, y]);
      if (first) {
        x__ = x, y__ = y, v__ = v;
        first = false;
        if (v) {
          activeStream.lineStart();
          activeStream.point(x, y);
        }
      } else {
        if (v && v_) activeStream.point(x, y);
        else {
          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],
              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];
          if (clipLine(a, b, x0, y0, x1, y1)) {
            if (!v_) {
              activeStream.lineStart();
              activeStream.point(a[0], a[1]);
            }
            activeStream.point(b[0], b[1]);
            if (!v) activeStream.lineEnd();
            clean = false;
          } else if (v) {
            activeStream.lineStart();
            activeStream.point(x, y);
            clean = false;
          }
        }
      }
      x_ = x, y_ = y, v_ = v;
    }

    return clipStream;
  };
}

var identity$5 = x => x;

var areaSum = new Adder(),
    areaRingSum = new Adder(),
    x00$2,
    y00$2,
    x0$3,
    y0$3;

var areaStream = {
  point: noop$1,
  lineStart: noop$1,
  lineEnd: noop$1,
  polygonStart: function() {
    areaStream.lineStart = areaRingStart;
    areaStream.lineEnd = areaRingEnd;
  },
  polygonEnd: function() {
    areaStream.lineStart = areaStream.lineEnd = areaStream.point = noop$1;
    areaSum.add(abs(areaRingSum));
    areaRingSum = new Adder();
  },
  result: function() {
    var area = areaSum / 2;
    areaSum = new Adder();
    return area;
  }
};

function areaRingStart() {
  areaStream.point = areaPointFirst;
}

function areaPointFirst(x, y) {
  areaStream.point = areaPoint;
  x00$2 = x0$3 = x, y00$2 = y0$3 = y;
}

function areaPoint(x, y) {
  areaRingSum.add(y0$3 * x - x0$3 * y);
  x0$3 = x, y0$3 = y;
}

function areaRingEnd() {
  areaPoint(x00$2, y00$2);
}

var pathArea = areaStream;

var x0$2 = Infinity,
    y0$2 = x0$2,
    x1 = -x0$2,
    y1 = x1;

var boundsStream = {
  point: boundsPoint,
  lineStart: noop$1,
  lineEnd: noop$1,
  polygonStart: noop$1,
  polygonEnd: noop$1,
  result: function() {
    var bounds = [[x0$2, y0$2], [x1, y1]];
    x1 = y1 = -(y0$2 = x0$2 = Infinity);
    return bounds;
  }
};

function boundsPoint(x, y) {
  if (x < x0$2) x0$2 = x;
  if (x > x1) x1 = x;
  if (y < y0$2) y0$2 = y;
  if (y > y1) y1 = y;
}

var boundsStream$1 = boundsStream;

// TODO Enforce positive area for exterior, negative area for interior?

var X0$1 = 0,
    Y0$1 = 0,
    Z0 = 0,
    X1 = 0,
    Y1 = 0,
    Z1 = 0,
    X2 = 0,
    Y2 = 0,
    Z2 = 0,
    x00$1,
    y00$1,
    x0$1,
    y0$1;

var centroidStream = {
  point: centroidPoint,
  lineStart: centroidLineStart,
  lineEnd: centroidLineEnd,
  polygonStart: function() {
    centroidStream.lineStart = centroidRingStart;
    centroidStream.lineEnd = centroidRingEnd;
  },
  polygonEnd: function() {
    centroidStream.point = centroidPoint;
    centroidStream.lineStart = centroidLineStart;
    centroidStream.lineEnd = centroidLineEnd;
  },
  result: function() {
    var centroid = Z2 ? [X2 / Z2, Y2 / Z2]
        : Z1 ? [X1 / Z1, Y1 / Z1]
        : Z0 ? [X0$1 / Z0, Y0$1 / Z0]
        : [NaN, NaN];
    X0$1 = Y0$1 = Z0 =
    X1 = Y1 = Z1 =
    X2 = Y2 = Z2 = 0;
    return centroid;
  }
};

function centroidPoint(x, y) {
  X0$1 += x;
  Y0$1 += y;
  ++Z0;
}

function centroidLineStart() {
  centroidStream.point = centroidPointFirstLine;
}

function centroidPointFirstLine(x, y) {
  centroidStream.point = centroidPointLine;
  centroidPoint(x0$1 = x, y0$1 = y);
}

function centroidPointLine(x, y) {
  var dx = x - x0$1, dy = y - y0$1, z = sqrt$1(dx * dx + dy * dy);
  X1 += z * (x0$1 + x) / 2;
  Y1 += z * (y0$1 + y) / 2;
  Z1 += z;
  centroidPoint(x0$1 = x, y0$1 = y);
}

function centroidLineEnd() {
  centroidStream.point = centroidPoint;
}

function centroidRingStart() {
  centroidStream.point = centroidPointFirstRing;
}

function centroidRingEnd() {
  centroidPointRing(x00$1, y00$1);
}

function centroidPointFirstRing(x, y) {
  centroidStream.point = centroidPointRing;
  centroidPoint(x00$1 = x0$1 = x, y00$1 = y0$1 = y);
}

function centroidPointRing(x, y) {
  var dx = x - x0$1,
      dy = y - y0$1,
      z = sqrt$1(dx * dx + dy * dy);

  X1 += z * (x0$1 + x) / 2;
  Y1 += z * (y0$1 + y) / 2;
  Z1 += z;

  z = y0$1 * x - x0$1 * y;
  X2 += z * (x0$1 + x);
  Y2 += z * (y0$1 + y);
  Z2 += z * 3;
  centroidPoint(x0$1 = x, y0$1 = y);
}

var pathCentroid = centroidStream;

function PathContext(context) {
  this._context = context;
}

PathContext.prototype = {
  _radius: 4.5,
  pointRadius: function(_) {
    return this._radius = _, this;
  },
  polygonStart: function() {
    this._line = 0;
  },
  polygonEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line === 0) this._context.closePath();
    this._point = NaN;
  },
  point: function(x, y) {
    switch (this._point) {
      case 0: {
        this._context.moveTo(x, y);
        this._point = 1;
        break;
      }
      case 1: {
        this._context.lineTo(x, y);
        break;
      }
      default: {
        this._context.moveTo(x + this._radius, y);
        this._context.arc(x, y, this._radius, 0, tau);
        break;
      }
    }
  },
  result: noop$1
};

var lengthSum = new Adder(),
    lengthRing,
    x00,
    y00,
    x0,
    y0;

var lengthStream = {
  point: noop$1,
  lineStart: function() {
    lengthStream.point = lengthPointFirst;
  },
  lineEnd: function() {
    if (lengthRing) lengthPoint(x00, y00);
    lengthStream.point = noop$1;
  },
  polygonStart: function() {
    lengthRing = true;
  },
  polygonEnd: function() {
    lengthRing = null;
  },
  result: function() {
    var length = +lengthSum;
    lengthSum = new Adder();
    return length;
  }
};

function lengthPointFirst(x, y) {
  lengthStream.point = lengthPoint;
  x00 = x0 = x, y00 = y0 = y;
}

function lengthPoint(x, y) {
  x0 -= x, y0 -= y;
  lengthSum.add(sqrt$1(x0 * x0 + y0 * y0));
  x0 = x, y0 = y;
}

var pathMeasure = lengthStream;

function PathString() {
  this._string = [];
}

PathString.prototype = {
  _radius: 4.5,
  _circle: circle(4.5),
  pointRadius: function(_) {
    if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;
    return this;
  },
  polygonStart: function() {
    this._line = 0;
  },
  polygonEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line === 0) this._string.push("Z");
    this._point = NaN;
  },
  point: function(x, y) {
    switch (this._point) {
      case 0: {
        this._string.push("M", x, ",", y);
        this._point = 1;
        break;
      }
      case 1: {
        this._string.push("L", x, ",", y);
        break;
      }
      default: {
        if (this._circle == null) this._circle = circle(this._radius);
        this._string.push("M", x, ",", y, this._circle);
        break;
      }
    }
  },
  result: function() {
    if (this._string.length) {
      var result = this._string.join("");
      this._string = [];
      return result;
    } else {
      return null;
    }
  }
};

function circle(radius) {
  return "m0," + radius
      + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius
      + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius
      + "z";
}

function geoPath(projection, context) {
  var pointRadius = 4.5,
      projectionStream,
      contextStream;

  function path(object) {
    if (object) {
      if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
      geoStream(object, projectionStream(contextStream));
    }
    return contextStream.result();
  }

  path.area = function(object) {
    geoStream(object, projectionStream(pathArea));
    return pathArea.result();
  };

  path.measure = function(object) {
    geoStream(object, projectionStream(pathMeasure));
    return pathMeasure.result();
  };

  path.bounds = function(object) {
    geoStream(object, projectionStream(boundsStream$1));
    return boundsStream$1.result();
  };

  path.centroid = function(object) {
    geoStream(object, projectionStream(pathCentroid));
    return pathCentroid.result();
  };

  path.projection = function(_) {
    return arguments.length ? (projectionStream = _ == null ? (projection = null, identity$5) : (projection = _).stream, path) : projection;
  };

  path.context = function(_) {
    if (!arguments.length) return context;
    contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);
    if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
    return path;
  };

  path.pointRadius = function(_) {
    if (!arguments.length) return pointRadius;
    pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
    return path;
  };

  return path.projection(projection).context(context);
}

function transformer$2(methods) {
  return function(stream) {
    var s = new TransformStream;
    for (var key in methods) s[key] = methods[key];
    s.stream = stream;
    return s;
  };
}

function TransformStream() {}

TransformStream.prototype = {
  constructor: TransformStream,
  point: function(x, y) { this.stream.point(x, y); },
  sphere: function() { this.stream.sphere(); },
  lineStart: function() { this.stream.lineStart(); },
  lineEnd: function() { this.stream.lineEnd(); },
  polygonStart: function() { this.stream.polygonStart(); },
  polygonEnd: function() { this.stream.polygonEnd(); }
};

function fit(projection, fitBounds, object) {
  var clip = projection.clipExtent && projection.clipExtent();
  projection.scale(150).translate([0, 0]);
  if (clip != null) projection.clipExtent(null);
  geoStream(object, projection.stream(boundsStream$1));
  fitBounds(boundsStream$1.result());
  if (clip != null) projection.clipExtent(clip);
  return projection;
}

function fitExtent(projection, extent, object) {
  return fit(projection, function(b) {
    var w = extent[1][0] - extent[0][0],
        h = extent[1][1] - extent[0][1],
        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),
        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,
        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;
    projection.scale(150 * k).translate([x, y]);
  }, object);
}

function fitSize(projection, size, object) {
  return fitExtent(projection, [[0, 0], size], object);
}

function fitWidth(projection, width, object) {
  return fit(projection, function(b) {
    var w = +width,
        k = w / (b[1][0] - b[0][0]),
        x = (w - k * (b[1][0] + b[0][0])) / 2,
        y = -k * b[0][1];
    projection.scale(150 * k).translate([x, y]);
  }, object);
}

function fitHeight(projection, height, object) {
  return fit(projection, function(b) {
    var h = +height,
        k = h / (b[1][1] - b[0][1]),
        x = -k * b[0][0],
        y = (h - k * (b[1][1] + b[0][1])) / 2;
    projection.scale(150 * k).translate([x, y]);
  }, object);
}

function geoIdentity() {
  var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, // scale, translate and reflect
      alpha = 0, ca, sa, // angle
      x0 = null, y0, x1, y1, // clip extent
      kx = 1, ky = 1,
      transform = transformer$2({
        point: function(x, y) {
          var p = projection([x, y]);
          this.stream.point(p[0], p[1]);
        }
      }),
      postclip = identity$5,
      cache,
      cacheStream;

  function reset() {
    kx = k * sx;
    ky = k * sy;
    cache = cacheStream = null;
    return projection;
  }

  function projection (p) {
    var x = p[0] * kx, y = p[1] * ky;
    if (alpha) {
      var t = y * ca - x * sa;
      x = x * ca + y * sa;
      y = t;
    }    
    return [x + tx, y + ty];
  }
  projection.invert = function(p) {
    var x = p[0] - tx, y = p[1] - ty;
    if (alpha) {
      var t = y * ca + x * sa;
      x = x * ca - y * sa;
      y = t;
    }
    return [x / kx, y / ky];
  };
  projection.stream = function(stream) {
    return cache && cacheStream === stream ? cache : cache = transform(postclip(cacheStream = stream));
  };
  projection.postclip = function(_) {
    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
  };
  projection.clipExtent = function(_) {
    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$5) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
  };
  projection.scale = function(_) {
    return arguments.length ? (k = +_, reset()) : k;
  };
  projection.translate = function(_) {
    return arguments.length ? (tx = +_[0], ty = +_[1], reset()) : [tx, ty];
  };
  projection.angle = function(_) {
    return arguments.length ? (alpha = _ % 360 * radians$1, sa = sin(alpha), ca = cos(alpha), reset()) : alpha * degrees$2;
  };
  projection.reflectX = function(_) {
    return arguments.length ? (sx = _ ? -1 : 1, reset()) : sx < 0;
  };
  projection.reflectY = function(_) {
    return arguments.length ? (sy = _ ? -1 : 1, reset()) : sy < 0;
  };
  projection.fitExtent = function(extent, object) {
    return fitExtent(projection, extent, object);
  };
  projection.fitSize = function(size, object) {
    return fitSize(projection, size, object);
  };
  projection.fitWidth = function(width, object) {
    return fitWidth(projection, width, object);
  };
  projection.fitHeight = function(height, object) {
    return fitHeight(projection, height, object);
  };

  return projection;
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getAugmentedNamespace(n) {
	if (n.__esModule) return n;
	var a = Object.defineProperty({}, '__esModule', {value: true});
	Object.keys(n).forEach(function (k) {
		var d = Object.getOwnPropertyDescriptor(n, k);
		Object.defineProperty(a, k, d.get ? d : {
			enumerable: true,
			get: function () {
				return n[k];
			}
		});
	});
	return a;
}

var lodash_merge = {exports: {}};

/**
 * Lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

(function (module, exports) {
/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used to detect hot functions by number of calls within a span of milliseconds. */
var HOT_COUNT = 800,
    HOT_SPAN = 16;

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    asyncTag = '[object AsyncFunction]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    nullTag = '[object Null]',
    objectTag = '[object Object]',
    proxyTag = '[object Proxy]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    undefinedTag = '[object Undefined]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Detect free variable `exports`. */
var freeExports = exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule && freeModule.require && freeModule.require('util').types;

    if (types) {
      return types;
    }

    // Legacy `process.binding('util')` for Node.js < 10.
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/** Used for built-in method references. */
var arrayProto = Array.prototype,
    funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined,
    Symbol = root.Symbol,
    Uint8Array = root.Uint8Array,
    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
    getPrototype = overArg(Object.getPrototypeOf, Object),
    objectCreate = Object.create,
    propertyIsEnumerable = objectProto.propertyIsEnumerable,
    splice = arrayProto.splice,
    symToStringTag = Symbol ? Symbol.toStringTag : undefined;

var defineProperty = (function() {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
    nativeMax = Math.max,
    nativeNow = Date.now;

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map'),
    nativeCreate = getNative(Object, 'create');

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */
var baseCreate = (function() {
  function object() {}
  return function(proto) {
    if (!isObject(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result = new object;
    object.prototype = undefined;
    return result;
  };
}());

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
}

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * This function is like `assignValue` except that it doesn't assign
 * `undefined` values.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignMergeValue(object, key, value) {
  if ((value !== undefined && !eq(object[key], value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && defineProperty) {
    defineProperty(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeysIn(object) {
  if (!isObject(object)) {
    return nativeKeysIn(object);
  }
  var isProto = isPrototype(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * The base implementation of `_.merge` without support for multiple sources.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} [customizer] The function to customize merged values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMerge(object, source, srcIndex, customizer, stack) {
  if (object === source) {
    return;
  }
  baseFor(source, function(srcValue, key) {
    stack || (stack = new Stack);
    if (isObject(srcValue)) {
      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
    }
    else {
      var newValue = customizer
        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
        : undefined;

      if (newValue === undefined) {
        newValue = srcValue;
      }
      assignMergeValue(object, key, newValue);
    }
  }, keysIn);
}

/**
 * A specialized version of `baseMerge` for arrays and objects which performs
 * deep merges and tracks traversed objects enabling objects with circular
 * references to be merged.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {string} key The key of the value to merge.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} mergeFunc The function to merge values.
 * @param {Function} [customizer] The function to customize assigned values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
  var objValue = safeGet(object, key),
      srcValue = safeGet(source, key),
      stacked = stack.get(srcValue);

  if (stacked) {
    assignMergeValue(object, key, stacked);
    return;
  }
  var newValue = customizer
    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
    : undefined;

  var isCommon = newValue === undefined;

  if (isCommon) {
    var isArr = isArray(srcValue),
        isBuff = !isArr && isBuffer(srcValue),
        isTyped = !isArr && !isBuff && isTypedArray(srcValue);

    newValue = srcValue;
    if (isArr || isBuff || isTyped) {
      if (isArray(objValue)) {
        newValue = objValue;
      }
      else if (isArrayLikeObject(objValue)) {
        newValue = copyArray(objValue);
      }
      else if (isBuff) {
        isCommon = false;
        newValue = cloneBuffer(srcValue, true);
      }
      else if (isTyped) {
        isCommon = false;
        newValue = cloneTypedArray(srcValue, true);
      }
      else {
        newValue = [];
      }
    }
    else if (isPlainObject(srcValue) || isArguments(srcValue)) {
      newValue = objValue;
      if (isArguments(objValue)) {
        newValue = toPlainObject(objValue);
      }
      else if (!isObject(objValue) || isFunction(objValue)) {
        newValue = initCloneObject(srcValue);
      }
    }
    else {
      isCommon = false;
    }
  }
  if (isCommon) {
    // Recursively merge objects and arrays (susceptible to call stack limits).
    stack.set(srcValue, newValue);
    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
    stack['delete'](srcValue);
  }
  assignMergeValue(object, key, newValue);
}

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  return setToString(overRest(func, start, identity), func + '');
}

/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var baseSetToString = !defineProperty ? identity : function(func, string) {
  return defineProperty(func, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': constant(string),
    'writable': true
  });
};

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var length = buffer.length,
      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

  buffer.copy(result);
  return result;
}

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
  return result;
}

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue(object, key, newValue);
    } else {
      assignValue(object, key, newValue);
    }
  }
  return object;
}

/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */
function createAssigner(assigner) {
  return baseRest(function(object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;

    customizer = (assigner.length > 3 && typeof customizer == 'function')
      ? (length--, customizer)
      : undefined;

    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, index, customizer);
      }
    }
    return object;
  });
}

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
  return (typeof object.constructor == 'function' && !isPrototype(object))
    ? baseCreate(getPrototype(object))
    : {};
}

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */
function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number'
        ? (isArrayLike(object) && isIndex(index, object.length))
        : (type == 'string' && index in object)
      ) {
    return eq(object[index], value);
  }
  return false;
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */
function overRest(func, start, transform) {
  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array);
    return apply(func, this, otherArgs);
  };
}

/**
 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function safeGet(object, key) {
  if (key === 'constructor' && typeof object[key] === 'function') {
    return;
  }

  if (key == '__proto__') {
    return;
  }

  return object[key];
}

/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var setToString = shortOut(baseSetToString);

/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */
function shortOut(func) {
  var count = 0,
      lastCalled = 0;

  return function() {
    var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);

    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(undefined, arguments);
  };
}

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject(value) {
  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
    return false;
  }
  var proto = getPrototype(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
    funcToString.call(Ctor) == objectCtorString;
}

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

/**
 * Converts `value` to a plain object flattening inherited enumerable string
 * keyed properties of `value` to own properties of the plain object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Object} Returns the converted plain object.
 * @example
 *
 * function Foo() {
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.assign({ 'a': 1 }, new Foo);
 * // => { 'a': 1, 'b': 2 }
 *
 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
 * // => { 'a': 1, 'b': 2, 'c': 3 }
 */
function toPlainObject(value) {
  return copyObject(value, keysIn(value));
}

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn(object) {
  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}

/**
 * This method is like `_.assign` except that it recursively merges own and
 * inherited enumerable string keyed properties of source objects into the
 * destination object. Source properties that resolve to `undefined` are
 * skipped if a destination value exists. Array and plain object properties
 * are merged recursively. Other objects and value types are overridden by
 * assignment. Source objects are applied from left to right. Subsequent
 * sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 0.5.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = {
 *   'a': [{ 'b': 2 }, { 'd': 4 }]
 * };
 *
 * var other = {
 *   'a': [{ 'c': 3 }, { 'e': 5 }]
 * };
 *
 * _.merge(object, other);
 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
 */
var merge = createAssigner(function(object, source, srcIndex) {
  baseMerge(object, source, srcIndex);
});

/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */
function constant(value) {
  return function() {
    return value;
  };
}

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = merge;
}(lodash_merge, lodash_merge.exports));

var merge = lodash_merge.exports;

var frame = 0, // is an animation frame pending?
    timeout$1 = 0, // is a timeout pending?
    interval$2 = 0, // are any timers active?
    pokeDelay = 1000, // how frequently we check for clock skew
    taskHead,
    taskTail,
    clockLast = 0,
    clockNow = 0,
    clockSkew = 0,
    clock = typeof performance === "object" && performance.now ? performance : Date,
    setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) { setTimeout(f, 17); };

function now() {
  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
}

function clearNow() {
  clockNow = 0;
}

function Timer() {
  this._call =
  this._time =
  this._next = null;
}

Timer.prototype = timer.prototype = {
  constructor: Timer,
  restart: function(callback, delay, time) {
    if (typeof callback !== "function") throw new TypeError("callback is not a function");
    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
    if (!this._next && taskTail !== this) {
      if (taskTail) taskTail._next = this;
      else taskHead = this;
      taskTail = this;
    }
    this._call = callback;
    this._time = time;
    sleep();
  },
  stop: function() {
    if (this._call) {
      this._call = null;
      this._time = Infinity;
      sleep();
    }
  }
};

function timer(callback, delay, time) {
  var t = new Timer;
  t.restart(callback, delay, time);
  return t;
}

function timerFlush() {
  now(); // Get the current time, if not already set.
  ++frame; // Pretend we’ve set an alarm, if we haven’t already.
  var t = taskHead, e;
  while (t) {
    if ((e = clockNow - t._time) >= 0) t._call.call(undefined, e);
    t = t._next;
  }
  --frame;
}

function wake() {
  clockNow = (clockLast = clock.now()) + clockSkew;
  frame = timeout$1 = 0;
  try {
    timerFlush();
  } finally {
    frame = 0;
    nap();
    clockNow = 0;
  }
}

function poke() {
  var now = clock.now(), delay = now - clockLast;
  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
}

function nap() {
  var t0, t1 = taskHead, t2, time = Infinity;
  while (t1) {
    if (t1._call) {
      if (time > t1._time) time = t1._time;
      t0 = t1, t1 = t1._next;
    } else {
      t2 = t1._next, t1._next = null;
      t1 = t0 ? t0._next = t2 : taskHead = t2;
    }
  }
  taskTail = t0;
  sleep(time);
}

function sleep(time) {
  if (frame) return; // Soonest alarm already set, or will be.
  if (timeout$1) timeout$1 = clearTimeout(timeout$1);
  var delay = time - clockNow; // Strictly less than if we recomputed clockNow.
  if (delay > 24) {
    if (time < Infinity) timeout$1 = setTimeout(wake, time - clock.now() - clockSkew);
    if (interval$2) interval$2 = clearInterval(interval$2);
  } else {
    if (!interval$2) clockLast = clock.now(), interval$2 = setInterval(poke, pokeDelay);
    frame = 1, setFrame(wake);
  }
}

function timeout(callback, delay, time) {
  var t = new Timer;
  delay = delay == null ? 0 : +delay;
  t.restart(elapsed => {
    t.stop();
    callback(elapsed + delay);
  }, delay, time);
  return t;
}

var noop = {value: () => {}};

function dispatch() {
  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
    if (!(t = arguments[i] + "") || (t in _) || /[\s.]/.test(t)) throw new Error("illegal type: " + t);
    _[t] = [];
  }
  return new Dispatch(_);
}

function Dispatch(_) {
  this._ = _;
}

function parseTypenames(typenames, types) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name = "", i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
    return {type: t, name: name};
  });
}

Dispatch.prototype = dispatch.prototype = {
  constructor: Dispatch,
  on: function(typename, callback) {
    var _ = this._,
        T = parseTypenames(typename + "", _),
        t,
        i = -1,
        n = T.length;

    // If no callback was specified, return the callback of the given type and name.
    if (arguments.length < 2) {
      while (++i < n) if ((t = (typename = T[i]).type) && (t = get$2(_[t], typename.name))) return t;
      return;
    }

    // If a type was specified, set the callback for the given type and name.
    // Otherwise, if a null callback was specified, remove callbacks of the given name.
    if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);
    while (++i < n) {
      if (t = (typename = T[i]).type) _[t] = set$2(_[t], typename.name, callback);
      else if (callback == null) for (t in _) _[t] = set$2(_[t], typename.name, null);
    }

    return this;
  },
  copy: function() {
    var copy = {}, _ = this._;
    for (var t in _) copy[t] = _[t].slice();
    return new Dispatch(copy);
  },
  call: function(type, that) {
    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
  },
  apply: function(type, that, args) {
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
  }
};

function get$2(type, name) {
  for (var i = 0, n = type.length, c; i < n; ++i) {
    if ((c = type[i]).name === name) {
      return c.value;
    }
  }
}

function set$2(type, name, callback) {
  for (var i = 0, n = type.length; i < n; ++i) {
    if (type[i].name === name) {
      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));
      break;
    }
  }
  if (callback != null) type.push({name: name, value: callback});
  return type;
}

// These are typically used in conjunction with noevent to ensure that we can
const nonpassivecapture = {capture: true, passive: false};

function noevent$1(event) {
  event.preventDefault();
  event.stopImmediatePropagation();
}

function dragDisable(view) {
  var root = view.document.documentElement,
      selection = select(view).on("dragstart.drag", noevent$1, nonpassivecapture);
  if ("onselectstart" in root) {
    selection.on("selectstart.drag", noevent$1, nonpassivecapture);
  } else {
    root.__noselect = root.style.MozUserSelect;
    root.style.MozUserSelect = "none";
  }
}

function yesdrag(view, noclick) {
  var root = view.document.documentElement,
      selection = select(view).on("dragstart.drag", null);
  if (noclick) {
    selection.on("click.drag", noevent$1, nonpassivecapture);
    setTimeout(function() { selection.on("click.drag", null); }, 0);
  }
  if ("onselectstart" in root) {
    selection.on("selectstart.drag", null);
  } else {
    root.style.MozUserSelect = root.__noselect;
    delete root.__noselect;
  }
}

function define(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}

function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition) prototype[key] = definition[key];
  return prototype;
}

function Color$1() {}

var darker = 0.7;
var brighter = 1 / darker;

var reI = "\\s*([+-]?\\d+)\\s*",
    reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
    reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
    reHex = /^#([0-9a-f]{3,8})$/,
    reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
    reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
    reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
    reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
    reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
    reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");

var named = {
  aliceblue: 0xf0f8ff,
  antiquewhite: 0xfaebd7,
  aqua: 0x00ffff,
  aquamarine: 0x7fffd4,
  azure: 0xf0ffff,
  beige: 0xf5f5dc,
  bisque: 0xffe4c4,
  black: 0x000000,
  blanchedalmond: 0xffebcd,
  blue: 0x0000ff,
  blueviolet: 0x8a2be2,
  brown: 0xa52a2a,
  burlywood: 0xdeb887,
  cadetblue: 0x5f9ea0,
  chartreuse: 0x7fff00,
  chocolate: 0xd2691e,
  coral: 0xff7f50,
  cornflowerblue: 0x6495ed,
  cornsilk: 0xfff8dc,
  crimson: 0xdc143c,
  cyan: 0x00ffff,
  darkblue: 0x00008b,
  darkcyan: 0x008b8b,
  darkgoldenrod: 0xb8860b,
  darkgray: 0xa9a9a9,
  darkgreen: 0x006400,
  darkgrey: 0xa9a9a9,
  darkkhaki: 0xbdb76b,
  darkmagenta: 0x8b008b,
  darkolivegreen: 0x556b2f,
  darkorange: 0xff8c00,
  darkorchid: 0x9932cc,
  darkred: 0x8b0000,
  darksalmon: 0xe9967a,
  darkseagreen: 0x8fbc8f,
  darkslateblue: 0x483d8b,
  darkslategray: 0x2f4f4f,
  darkslategrey: 0x2f4f4f,
  darkturquoise: 0x00ced1,
  darkviolet: 0x9400d3,
  deeppink: 0xff1493,
  deepskyblue: 0x00bfff,
  dimgray: 0x696969,
  dimgrey: 0x696969,
  dodgerblue: 0x1e90ff,
  firebrick: 0xb22222,
  floralwhite: 0xfffaf0,
  forestgreen: 0x228b22,
  fuchsia: 0xff00ff,
  gainsboro: 0xdcdcdc,
  ghostwhite: 0xf8f8ff,
  gold: 0xffd700,
  goldenrod: 0xdaa520,
  gray: 0x808080,
  green: 0x008000,
  greenyellow: 0xadff2f,
  grey: 0x808080,
  honeydew: 0xf0fff0,
  hotpink: 0xff69b4,
  indianred: 0xcd5c5c,
  indigo: 0x4b0082,
  ivory: 0xfffff0,
  khaki: 0xf0e68c,
  lavender: 0xe6e6fa,
  lavenderblush: 0xfff0f5,
  lawngreen: 0x7cfc00,
  lemonchiffon: 0xfffacd,
  lightblue: 0xadd8e6,
  lightcoral: 0xf08080,
  lightcyan: 0xe0ffff,
  lightgoldenrodyellow: 0xfafad2,
  lightgray: 0xd3d3d3,
  lightgreen: 0x90ee90,
  lightgrey: 0xd3d3d3,
  lightpink: 0xffb6c1,
  lightsalmon: 0xffa07a,
  lightseagreen: 0x20b2aa,
  lightskyblue: 0x87cefa,
  lightslategray: 0x778899,
  lightslategrey: 0x778899,
  lightsteelblue: 0xb0c4de,
  lightyellow: 0xffffe0,
  lime: 0x00ff00,
  limegreen: 0x32cd32,
  linen: 0xfaf0e6,
  magenta: 0xff00ff,
  maroon: 0x800000,
  mediumaquamarine: 0x66cdaa,
  mediumblue: 0x0000cd,
  mediumorchid: 0xba55d3,
  mediumpurple: 0x9370db,
  mediumseagreen: 0x3cb371,
  mediumslateblue: 0x7b68ee,
  mediumspringgreen: 0x00fa9a,
  mediumturquoise: 0x48d1cc,
  mediumvioletred: 0xc71585,
  midnightblue: 0x191970,
  mintcream: 0xf5fffa,
  mistyrose: 0xffe4e1,
  moccasin: 0xffe4b5,
  navajowhite: 0xffdead,
  navy: 0x000080,
  oldlace: 0xfdf5e6,
  olive: 0x808000,
  olivedrab: 0x6b8e23,
  orange: 0xffa500,
  orangered: 0xff4500,
  orchid: 0xda70d6,
  palegoldenrod: 0xeee8aa,
  palegreen: 0x98fb98,
  paleturquoise: 0xafeeee,
  palevioletred: 0xdb7093,
  papayawhip: 0xffefd5,
  peachpuff: 0xffdab9,
  peru: 0xcd853f,
  pink: 0xffc0cb,
  plum: 0xdda0dd,
  powderblue: 0xb0e0e6,
  purple: 0x800080,
  rebeccapurple: 0x663399,
  red: 0xff0000,
  rosybrown: 0xbc8f8f,
  royalblue: 0x4169e1,
  saddlebrown: 0x8b4513,
  salmon: 0xfa8072,
  sandybrown: 0xf4a460,
  seagreen: 0x2e8b57,
  seashell: 0xfff5ee,
  sienna: 0xa0522d,
  silver: 0xc0c0c0,
  skyblue: 0x87ceeb,
  slateblue: 0x6a5acd,
  slategray: 0x708090,
  slategrey: 0x708090,
  snow: 0xfffafa,
  springgreen: 0x00ff7f,
  steelblue: 0x4682b4,
  tan: 0xd2b48c,
  teal: 0x008080,
  thistle: 0xd8bfd8,
  tomato: 0xff6347,
  turquoise: 0x40e0d0,
  violet: 0xee82ee,
  wheat: 0xf5deb3,
  white: 0xffffff,
  whitesmoke: 0xf5f5f5,
  yellow: 0xffff00,
  yellowgreen: 0x9acd32
};

define(Color$1, color, {
  copy: function(channels) {
    return Object.assign(new this.constructor, this, channels);
  },
  displayable: function() {
    return this.rgb().displayable();
  },
  hex: color_formatHex, // Deprecated! Use color.formatHex.
  formatHex: color_formatHex,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});

function color_formatHex() {
  return this.rgb().formatHex();
}

function color_formatHsl() {
  return hslConvert(this).formatHsl();
}

function color_formatRgb() {
  return this.rgb().formatRgb();
}

function color(format) {
  var m, l;
  format = (format + "").trim().toLowerCase();
  return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000
      : l === 3 ? new Rgb((m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1) // #f00
      : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
      : l === 4 ? rgba((m >> 12 & 0xf) | (m >> 8 & 0xf0), (m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), (((m & 0xf) << 4) | (m & 0xf)) / 0xff) // #f000
      : null) // invalid hex
      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
      : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
      : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)
      : null;
}

function rgbn(n) {
  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
}

function rgba(r, g, b, a) {
  if (a <= 0) r = g = b = NaN;
  return new Rgb(r, g, b, a);
}

function rgbConvert(o) {
  if (!(o instanceof Color$1)) o = color(o);
  if (!o) return new Rgb;
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}

function rgb(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}

function Rgb(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}

define(Rgb, rgb, extend(Color$1, {
  brighter: function(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  darker: function(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  rgb: function() {
    return this;
  },
  displayable: function() {
    return (-0.5 <= this.r && this.r < 255.5)
        && (-0.5 <= this.g && this.g < 255.5)
        && (-0.5 <= this.b && this.b < 255.5)
        && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex, // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));

function rgb_formatHex() {
  return "#" + hex(this.r) + hex(this.g) + hex(this.b);
}

function rgb_formatRgb() {
  var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
  return (a === 1 ? "rgb(" : "rgba(")
      + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", "
      + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", "
      + Math.max(0, Math.min(255, Math.round(this.b) || 0))
      + (a === 1 ? ")" : ", " + a + ")");
}

function hex(value) {
  value = Math.max(0, Math.min(255, Math.round(value) || 0));
  return (value < 16 ? "0" : "") + value.toString(16);
}

function hsla(h, s, l, a) {
  if (a <= 0) h = s = l = NaN;
  else if (l <= 0 || l >= 1) h = s = NaN;
  else if (s <= 0) h = NaN;
  return new Hsl(h, s, l, a);
}

function hslConvert(o) {
  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color$1)) o = color(o);
  if (!o) return new Hsl;
  if (o instanceof Hsl) return o;
  o = o.rgb();
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      min = Math.min(r, g, b),
      max = Math.max(r, g, b),
      h = NaN,
      s = max - min,
      l = (max + min) / 2;
  if (s) {
    if (r === max) h = (g - b) / s + (g < b) * 6;
    else if (g === max) h = (b - r) / s + 2;
    else h = (r - g) / s + 4;
    s /= l < 0.5 ? max + min : 2 - max - min;
    h *= 60;
  } else {
    s = l > 0 && l < 1 ? 0 : h;
  }
  return new Hsl(h, s, l, o.opacity);
}

function hsl(h, s, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
}

function Hsl(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}

define(Hsl, hsl, extend(Color$1, {
  brighter: function(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function() {
    var h = this.h % 360 + (this.h < 0) * 360,
        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
        l = this.l,
        m2 = l + (l < 0.5 ? l : 1 - l) * s,
        m1 = 2 * l - m2;
    return new Rgb(
      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
      hsl2rgb(h, m1, m2),
      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
      this.opacity
    );
  },
  displayable: function() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s))
        && (0 <= this.l && this.l <= 1)
        && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl: function() {
    var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
    return (a === 1 ? "hsl(" : "hsla(")
        + (this.h || 0) + ", "
        + (this.s || 0) * 100 + "%, "
        + (this.l || 0) * 100 + "%"
        + (a === 1 ? ")" : ", " + a + ")");
  }
}));

/* From FvD 13.37, CSS Color Module Level 3 */
function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60
      : h < 180 ? m2
      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
      : m1) * 255;
}

const radians = Math.PI / 180;
const degrees$1 = 180 / Math.PI;

var A = -0.14861,
    B = +1.78277,
    C = -0.29227,
    D = -0.90649,
    E = +1.97294,
    ED = E * D,
    EB = E * B,
    BC_DA = B * C - D * A;

function cubehelixConvert(o) {
  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Rgb)) o = rgbConvert(o);
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
      bl = b - l,
      k = (E * (g - l) - C * bl) / D,
      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1
      h = s ? Math.atan2(k, bl) * degrees$1 - 120 : NaN;
  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
}

function cubehelix$2(h, s, l, opacity) {
  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
}

function Cubehelix(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}

define(Cubehelix, cubehelix$2, extend(Color$1, {
  brighter: function(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function() {
    var h = isNaN(this.h) ? 0 : (this.h + 120) * radians,
        l = +this.l,
        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
        cosh = Math.cos(h),
        sinh = Math.sin(h);
    return new Rgb(
      255 * (l + a * (A * cosh + B * sinh)),
      255 * (l + a * (C * cosh + D * sinh)),
      255 * (l + a * (E * cosh)),
      this.opacity
    );
  }
}));

function basis(t1, v0, v1, v2, v3) {
  var t2 = t1 * t1, t3 = t2 * t1;
  return ((1 - 3 * t1 + 3 * t2 - t3) * v0
      + (4 - 6 * t2 + 3 * t3) * v1
      + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2
      + t3 * v3) / 6;
}

function basis$1(values) {
  var n = values.length - 1;
  return function(t) {
    var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
        v1 = values[i],
        v2 = values[i + 1],
        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
}

var constant$1 = x => () => x;

function linear$1(a, d) {
  return function(t) {
    return a + t * d;
  };
}

function exponential(a, b, y) {
  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
    return Math.pow(a + t * b, y);
  };
}

function hue(a, b) {
  var d = b - a;
  return d ? linear$1(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant$1(isNaN(a) ? b : a);
}

function gamma(y) {
  return (y = +y) === 1 ? nogamma : function(a, b) {
    return b - a ? exponential(a, b, y) : constant$1(isNaN(a) ? b : a);
  };
}

function nogamma(a, b) {
  var d = b - a;
  return d ? linear$1(a, d) : constant$1(isNaN(a) ? b : a);
}

var interpolateRgb = (function rgbGamma(y) {
  var color = gamma(y);

  function rgb$1(start, end) {
    var r = color((start = rgb(start)).r, (end = rgb(end)).r),
        g = color(start.g, end.g),
        b = color(start.b, end.b),
        opacity = nogamma(start.opacity, end.opacity);
    return function(t) {
      start.r = r(t);
      start.g = g(t);
      start.b = b(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }

  rgb$1.gamma = rgbGamma;

  return rgb$1;
})(1);

function rgbSpline(spline) {
  return function(colors) {
    var n = colors.length,
        r = new Array(n),
        g = new Array(n),
        b = new Array(n),
        i, color;
    for (i = 0; i < n; ++i) {
      color = rgb(colors[i]);
      r[i] = color.r || 0;
      g[i] = color.g || 0;
      b[i] = color.b || 0;
    }
    r = spline(r);
    g = spline(g);
    b = spline(b);
    color.opacity = 1;
    return function(t) {
      color.r = r(t);
      color.g = g(t);
      color.b = b(t);
      return color + "";
    };
  };
}

var rgbBasis = rgbSpline(basis$1);

function numberArray(a, b) {
  if (!b) b = [];
  var n = a ? Math.min(b.length, a.length) : 0,
      c = b.slice(),
      i;
  return function(t) {
    for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;
    return c;
  };
}

function isNumberArray(x) {
  return ArrayBuffer.isView(x) && !(x instanceof DataView);
}

function genericArray(a, b) {
  var nb = b ? b.length : 0,
      na = a ? Math.min(nb, a.length) : 0,
      x = new Array(na),
      c = new Array(nb),
      i;

  for (i = 0; i < na; ++i) x[i] = interpolate$1(a[i], b[i]);
  for (; i < nb; ++i) c[i] = b[i];

  return function(t) {
    for (i = 0; i < na; ++i) c[i] = x[i](t);
    return c;
  };
}

function date$2(a, b) {
  var d = new Date;
  return a = +a, b = +b, function(t) {
    return d.setTime(a * (1 - t) + b * t), d;
  };
}

function interpolateNumber(a, b) {
  return a = +a, b = +b, function(t) {
    return a * (1 - t) + b * t;
  };
}

function object(a, b) {
  var i = {},
      c = {},
      k;

  if (a === null || typeof a !== "object") a = {};
  if (b === null || typeof b !== "object") b = {};

  for (k in b) {
    if (k in a) {
      i[k] = interpolate$1(a[k], b[k]);
    } else {
      c[k] = b[k];
    }
  }

  return function(t) {
    for (k in i) c[k] = i[k](t);
    return c;
  };
}

var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
    reB = new RegExp(reA.source, "g");

function zero(b) {
  return function() {
    return b;
  };
}

function one(b) {
  return function(t) {
    return b(t) + "";
  };
}

function interpolateString(a, b) {
  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b
      am, // current match in a
      bm, // current match in b
      bs, // string preceding current number in b, if any
      i = -1, // index in s
      s = [], // string constants and placeholders
      q = []; // number interpolators

  // Coerce inputs to strings.
  a = a + "", b = b + "";

  // Interpolate pairs of numbers in a & b.
  while ((am = reA.exec(a))
      && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) { // a string precedes the next number in b
      bs = b.slice(bi, bs);
      if (s[i]) s[i] += bs; // coalesce with previous string
      else s[++i] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match
      if (s[i]) s[i] += bm; // coalesce with previous string
      else s[++i] = bm;
    } else { // interpolate non-matching numbers
      s[++i] = null;
      q.push({i: i, x: interpolateNumber(am, bm)});
    }
    bi = reB.lastIndex;
  }

  // Add remains of b.
  if (bi < b.length) {
    bs = b.slice(bi);
    if (s[i]) s[i] += bs; // coalesce with previous string
    else s[++i] = bs;
  }

  // Special optimization for only a single match.
  // Otherwise, interpolate each of the numbers and rejoin the string.
  return s.length < 2 ? (q[0]
      ? one(q[0].x)
      : zero(b))
      : (b = q.length, function(t) {
          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
          return s.join("");
        });
}

function interpolate$1(a, b) {
  var t = typeof b, c;
  return b == null || t === "boolean" ? constant$1(b)
      : (t === "number" ? interpolateNumber
      : t === "string" ? ((c = color(b)) ? (b = c, interpolateRgb) : interpolateString)
      : b instanceof color ? interpolateRgb
      : b instanceof Date ? date$2
      : isNumberArray(b) ? numberArray
      : Array.isArray(b) ? genericArray
      : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object
      : interpolateNumber)(a, b);
}

function interpolateRound(a, b) {
  return a = +a, b = +b, function(t) {
    return Math.round(a * (1 - t) + b * t);
  };
}

var degrees = 180 / Math.PI;

var identity$4 = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};

function decompose(a, b, c, d, e, f) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e,
    translateY: f,
    rotate: Math.atan2(b, a) * degrees,
    skewX: Math.atan(skewX) * degrees,
    scaleX: scaleX,
    scaleY: scaleY
  };
}

var svgNode;

/* eslint-disable no-undef */
function parseCss(value) {
  const m = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
  return m.isIdentity ? identity$4 : decompose(m.a, m.b, m.c, m.d, m.e, m.f);
}

function parseSvg(value) {
  if (value == null) return identity$4;
  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate())) return identity$4;
  value = value.matrix;
  return decompose(value.a, value.b, value.c, value.d, value.e, value.f);
}

function interpolateTransform(parse, pxComma, pxParen, degParen) {

  function pop(s) {
    return s.length ? s.pop() + " " : "";
  }

  function translate(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push("translate(", null, pxComma, null, pxParen);
      q.push({i: i - 4, x: interpolateNumber(xa, xb)}, {i: i - 2, x: interpolateNumber(ya, yb)});
    } else if (xb || yb) {
      s.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }

  function rotate(a, b, s, q) {
    if (a !== b) {
      if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path
      q.push({i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: interpolateNumber(a, b)});
    } else if (b) {
      s.push(pop(s) + "rotate(" + b + degParen);
    }
  }

  function skewX(a, b, s, q) {
    if (a !== b) {
      q.push({i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: interpolateNumber(a, b)});
    } else if (b) {
      s.push(pop(s) + "skewX(" + b + degParen);
    }
  }

  function scale(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
      q.push({i: i - 4, x: interpolateNumber(xa, xb)}, {i: i - 2, x: interpolateNumber(ya, yb)});
    } else if (xb !== 1 || yb !== 1) {
      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
    }
  }

  return function(a, b) {
    var s = [], // string constants and placeholders
        q = []; // number interpolators
    a = parse(a), b = parse(b);
    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
    rotate(a.rotate, b.rotate, s, q);
    skewX(a.skewX, b.skewX, s, q);
    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
    a = b = null; // gc
    return function(t) {
      var i = -1, n = q.length, o;
      while (++i < n) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    };
  };
}

var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

var epsilon2 = 1e-12;

function cosh(x) {
  return ((x = Math.exp(x)) + 1 / x) / 2;
}

function sinh(x) {
  return ((x = Math.exp(x)) - 1 / x) / 2;
}

function tanh(x) {
  return ((x = Math.exp(2 * x)) - 1) / (x + 1);
}

var interpolateZoom = (function zoomRho(rho, rho2, rho4) {

  // p0 = [ux0, uy0, w0]
  // p1 = [ux1, uy1, w1]
  function zoom(p0, p1) {
    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2],
        ux1 = p1[0], uy1 = p1[1], w1 = p1[2],
        dx = ux1 - ux0,
        dy = uy1 - uy0,
        d2 = dx * dx + dy * dy,
        i,
        S;

    // Special case for u0 ≅ u1.
    if (d2 < epsilon2) {
      S = Math.log(w1 / w0) / rho;
      i = function(t) {
        return [
          ux0 + t * dx,
          uy0 + t * dy,
          w0 * Math.exp(rho * t * S)
        ];
      };
    }

    // General case.
    else {
      var d1 = Math.sqrt(d2),
          b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
          b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
          r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
          r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
      S = (r1 - r0) / rho;
      i = function(t) {
        var s = t * S,
            coshr0 = cosh(r0),
            u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
        return [
          ux0 + u * dx,
          uy0 + u * dy,
          w0 * coshr0 / cosh(rho * s + r0)
        ];
      };
    }

    i.duration = S * 1000 * rho / Math.SQRT2;

    return i;
  }

  zoom.rho = function(_) {
    var _1 = Math.max(1e-3, +_), _2 = _1 * _1, _4 = _2 * _2;
    return zoomRho(_1, _2, _4);
  };

  return zoom;
})(Math.SQRT2, 2, 4);

function cubehelix$1(hue) {
  return (function cubehelixGamma(y) {
    y = +y;

    function cubehelix(start, end) {
      var h = hue((start = cubehelix$2(start)).h, (end = cubehelix$2(end)).h),
          s = nogamma(start.s, end.s),
          l = nogamma(start.l, end.l),
          opacity = nogamma(start.opacity, end.opacity);
      return function(t) {
        start.h = h(t);
        start.s = s(t);
        start.l = l(Math.pow(t, y));
        start.opacity = opacity(t);
        return start + "";
      };
    }

    cubehelix.gamma = cubehelixGamma;

    return cubehelix;
  })(1);
}

cubehelix$1(hue);
var cubehelixLong = cubehelix$1(nogamma);

var emptyOn = dispatch("start", "end", "cancel", "interrupt");
var emptyTween = [];

var CREATED = 0;
var SCHEDULED = 1;
var STARTING = 2;
var STARTED = 3;
var RUNNING = 4;
var ENDING = 5;
var ENDED = 6;

function schedule(node, name, id, index, group, timing) {
  var schedules = node.__transition;
  if (!schedules) node.__transition = {};
  else if (id in schedules) return;
  create(node, id, {
    name: name,
    index: index, // For context during callback.
    group: group, // For context during callback.
    on: emptyOn,
    tween: emptyTween,
    time: timing.time,
    delay: timing.delay,
    duration: timing.duration,
    ease: timing.ease,
    timer: null,
    state: CREATED
  });
}

function init(node, id) {
  var schedule = get$1(node, id);
  if (schedule.state > CREATED) throw new Error("too late; already scheduled");
  return schedule;
}

function set$1(node, id) {
  var schedule = get$1(node, id);
  if (schedule.state > STARTED) throw new Error("too late; already running");
  return schedule;
}

function get$1(node, id) {
  var schedule = node.__transition;
  if (!schedule || !(schedule = schedule[id])) throw new Error("transition not found");
  return schedule;
}

function create(node, id, self) {
  var schedules = node.__transition,
      tween;

  // Initialize the self timer when the transition is created.
  // Note the actual delay is not known until the first callback!
  schedules[id] = self;
  self.timer = timer(schedule, 0, self.time);

  function schedule(elapsed) {
    self.state = SCHEDULED;
    self.timer.restart(start, self.delay, self.time);

    // If the elapsed delay is less than our first sleep, start immediately.
    if (self.delay <= elapsed) start(elapsed - self.delay);
  }

  function start(elapsed) {
    var i, j, n, o;

    // If the state is not SCHEDULED, then we previously errored on start.
    if (self.state !== SCHEDULED) return stop();

    for (i in schedules) {
      o = schedules[i];
      if (o.name !== self.name) continue;

      // While this element already has a starting transition during this frame,
      // defer starting an interrupting transition until that transition has a
      // chance to tick (and possibly end); see d3/d3-transition#54!
      if (o.state === STARTED) return timeout(start);

      // Interrupt the active transition, if any.
      if (o.state === RUNNING) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("interrupt", node, node.__data__, o.index, o.group);
        delete schedules[i];
      }

      // Cancel any pre-empted transitions.
      else if (+i < id) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("cancel", node, node.__data__, o.index, o.group);
        delete schedules[i];
      }
    }

    // Defer the first tick to end of the current frame; see d3/d3#1576.
    // Note the transition may be canceled after start and before the first tick!
    // Note this must be scheduled before the start event; see d3/d3-transition#16!
    // Assuming this is successful, subsequent callbacks go straight to tick.
    timeout(function() {
      if (self.state === STARTED) {
        self.state = RUNNING;
        self.timer.restart(tick, self.delay, self.time);
        tick(elapsed);
      }
    });

    // Dispatch the start event.
    // Note this must be done before the tween are initialized.
    self.state = STARTING;
    self.on.call("start", node, node.__data__, self.index, self.group);
    if (self.state !== STARTING) return; // interrupted
    self.state = STARTED;

    // Initialize the tween, deleting null tween.
    tween = new Array(n = self.tween.length);
    for (i = 0, j = -1; i < n; ++i) {
      if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
        tween[++j] = o;
      }
    }
    tween.length = j + 1;
  }

  function tick(elapsed) {
    var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),
        i = -1,
        n = tween.length;

    while (++i < n) {
      tween[i].call(node, t);
    }

    // Dispatch the end event.
    if (self.state === ENDING) {
      self.on.call("end", node, node.__data__, self.index, self.group);
      stop();
    }
  }

  function stop() {
    self.state = ENDED;
    self.timer.stop();
    delete schedules[id];
    for (var i in schedules) return; // eslint-disable-line no-unused-vars
    delete node.__transition;
  }
}

function interrupt(node, name) {
  var schedules = node.__transition,
      schedule,
      active,
      empty = true,
      i;

  if (!schedules) return;

  name = name == null ? null : name + "";

  for (i in schedules) {
    if ((schedule = schedules[i]).name !== name) { empty = false; continue; }
    active = schedule.state > STARTING && schedule.state < ENDING;
    schedule.state = ENDED;
    schedule.timer.stop();
    schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);
    delete schedules[i];
  }

  if (empty) delete node.__transition;
}

function selection_interrupt(name) {
  return this.each(function() {
    interrupt(this, name);
  });
}

function tweenRemove(id, name) {
  var tween0, tween1;
  return function() {
    var schedule = set$1(this, id),
        tween = schedule.tween;

    // If this node shared tween with the previous node,
    // just assign the updated shared tween and we’re done!
    // Otherwise, copy-on-write.
    if (tween !== tween0) {
      tween1 = tween0 = tween;
      for (var i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1 = tween1.slice();
          tween1.splice(i, 1);
          break;
        }
      }
    }

    schedule.tween = tween1;
  };
}

function tweenFunction(id, name, value) {
  var tween0, tween1;
  if (typeof value !== "function") throw new Error;
  return function() {
    var schedule = set$1(this, id),
        tween = schedule.tween;

    // If this node shared tween with the previous node,
    // just assign the updated shared tween and we’re done!
    // Otherwise, copy-on-write.
    if (tween !== tween0) {
      tween1 = (tween0 = tween).slice();
      for (var t = {name: name, value: value}, i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1[i] = t;
          break;
        }
      }
      if (i === n) tween1.push(t);
    }

    schedule.tween = tween1;
  };
}

function transition_tween(name, value) {
  var id = this._id;

  name += "";

  if (arguments.length < 2) {
    var tween = get$1(this.node(), id).tween;
    for (var i = 0, n = tween.length, t; i < n; ++i) {
      if ((t = tween[i]).name === name) {
        return t.value;
      }
    }
    return null;
  }

  return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));
}

function tweenValue(transition, name, value) {
  var id = transition._id;

  transition.each(function() {
    var schedule = set$1(this, id);
    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
  });

  return function(node) {
    return get$1(node, id).value[name];
  };
}

function interpolate(a, b) {
  var c;
  return (typeof b === "number" ? interpolateNumber
      : b instanceof color ? interpolateRgb
      : (c = color(b)) ? (b = c, interpolateRgb)
      : interpolateString)(a, b);
}

function attrRemove(name) {
  return function() {
    this.removeAttribute(name);
  };
}

function attrRemoveNS(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}

function attrConstant(name, interpolate, value1) {
  var string00,
      string1 = value1 + "",
      interpolate0;
  return function() {
    var string0 = this.getAttribute(name);
    return string0 === string1 ? null
        : string0 === string00 ? interpolate0
        : interpolate0 = interpolate(string00 = string0, value1);
  };
}

function attrConstantNS(fullname, interpolate, value1) {
  var string00,
      string1 = value1 + "",
      interpolate0;
  return function() {
    var string0 = this.getAttributeNS(fullname.space, fullname.local);
    return string0 === string1 ? null
        : string0 === string00 ? interpolate0
        : interpolate0 = interpolate(string00 = string0, value1);
  };
}

function attrFunction(name, interpolate, value) {
  var string00,
      string10,
      interpolate0;
  return function() {
    var string0, value1 = value(this), string1;
    if (value1 == null) return void this.removeAttribute(name);
    string0 = this.getAttribute(name);
    string1 = value1 + "";
    return string0 === string1 ? null
        : string0 === string00 && string1 === string10 ? interpolate0
        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}

function attrFunctionNS(fullname, interpolate, value) {
  var string00,
      string10,
      interpolate0;
  return function() {
    var string0, value1 = value(this), string1;
    if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);
    string0 = this.getAttributeNS(fullname.space, fullname.local);
    string1 = value1 + "";
    return string0 === string1 ? null
        : string0 === string00 && string1 === string10 ? interpolate0
        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}

function transition_attr(name, value) {
  var fullname = namespace(name), i = fullname === "transform" ? interpolateTransformSvg : interpolate;
  return this.attrTween(name, typeof value === "function"
      ? (fullname.local ? attrFunctionNS : attrFunction)(fullname, i, tweenValue(this, "attr." + name, value))
      : value == null ? (fullname.local ? attrRemoveNS : attrRemove)(fullname)
      : (fullname.local ? attrConstantNS : attrConstant)(fullname, i, value));
}

function attrInterpolate(name, i) {
  return function(t) {
    this.setAttribute(name, i.call(this, t));
  };
}

function attrInterpolateNS(fullname, i) {
  return function(t) {
    this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));
  };
}

function attrTweenNS(fullname, value) {
  var t0, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t0 = (i0 = i) && attrInterpolateNS(fullname, i);
    return t0;
  }
  tween._value = value;
  return tween;
}

function attrTween(name, value) {
  var t0, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t0 = (i0 = i) && attrInterpolate(name, i);
    return t0;
  }
  tween._value = value;
  return tween;
}

function transition_attrTween(name, value) {
  var key = "attr." + name;
  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error;
  var fullname = namespace(name);
  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
}

function delayFunction(id, value) {
  return function() {
    init(this, id).delay = +value.apply(this, arguments);
  };
}

function delayConstant(id, value) {
  return value = +value, function() {
    init(this, id).delay = value;
  };
}

function transition_delay(value) {
  var id = this._id;

  return arguments.length
      ? this.each((typeof value === "function"
          ? delayFunction
          : delayConstant)(id, value))
      : get$1(this.node(), id).delay;
}

function durationFunction(id, value) {
  return function() {
    set$1(this, id).duration = +value.apply(this, arguments);
  };
}

function durationConstant(id, value) {
  return value = +value, function() {
    set$1(this, id).duration = value;
  };
}

function transition_duration(value) {
  var id = this._id;

  return arguments.length
      ? this.each((typeof value === "function"
          ? durationFunction
          : durationConstant)(id, value))
      : get$1(this.node(), id).duration;
}

function easeConstant(id, value) {
  if (typeof value !== "function") throw new Error;
  return function() {
    set$1(this, id).ease = value;
  };
}

function transition_ease(value) {
  var id = this._id;

  return arguments.length
      ? this.each(easeConstant(id, value))
      : get$1(this.node(), id).ease;
}

function easeVarying(id, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (typeof v !== "function") throw new Error;
    set$1(this, id).ease = v;
  };
}

function transition_easeVarying(value) {
  if (typeof value !== "function") throw new Error;
  return this.each(easeVarying(this._id, value));
}

function transition_filter(match) {
  if (typeof match !== "function") match = matcher(match);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }

  return new Transition(subgroups, this._parents, this._name, this._id);
}

function transition_merge(transition) {
  if (transition._id !== this._id) throw new Error;

  for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }

  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }

  return new Transition(merges, this._parents, this._name, this._id);
}

function start(name) {
  return (name + "").trim().split(/^|\s+/).every(function(t) {
    var i = t.indexOf(".");
    if (i >= 0) t = t.slice(0, i);
    return !t || t === "start";
  });
}

function onFunction(id, name, listener) {
  var on0, on1, sit = start(name) ? init : set$1;
  return function() {
    var schedule = sit(this, id),
        on = schedule.on;

    // If this node shared a dispatch with the previous node,
    // just assign the updated shared dispatch and we’re done!
    // Otherwise, copy-on-write.
    if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);

    schedule.on = on1;
  };
}

function transition_on(name, listener) {
  var id = this._id;

  return arguments.length < 2
      ? get$1(this.node(), id).on.on(name)
      : this.each(onFunction(id, name, listener));
}

function removeFunction(id) {
  return function() {
    var parent = this.parentNode;
    for (var i in this.__transition) if (+i !== id) return;
    if (parent) parent.removeChild(this);
  };
}

function transition_remove() {
  return this.on("end.remove", removeFunction(this._id));
}

function transition_select(select) {
  var name = this._name,
      id = this._id;

  if (typeof select !== "function") select = selector(select);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
        schedule(subgroup[i], name, id, i, subgroup, get$1(node, id));
      }
    }
  }

  return new Transition(subgroups, this._parents, name, id);
}

function transition_selectAll(select) {
  var name = this._name,
      id = this._id;

  if (typeof select !== "function") select = selectorAll(select);

  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        for (var children = select.call(node, node.__data__, i, group), child, inherit = get$1(node, id), k = 0, l = children.length; k < l; ++k) {
          if (child = children[k]) {
            schedule(child, name, id, k, children, inherit);
          }
        }
        subgroups.push(children);
        parents.push(node);
      }
    }
  }

  return new Transition(subgroups, parents, name, id);
}

var Selection = selection.prototype.constructor;

function transition_selection() {
  return new Selection(this._groups, this._parents);
}

function styleNull(name, interpolate) {
  var string00,
      string10,
      interpolate0;
  return function() {
    var string0 = styleValue(this, name),
        string1 = (this.style.removeProperty(name), styleValue(this, name));
    return string0 === string1 ? null
        : string0 === string00 && string1 === string10 ? interpolate0
        : interpolate0 = interpolate(string00 = string0, string10 = string1);
  };
}

function styleRemove(name) {
  return function() {
    this.style.removeProperty(name);
  };
}

function styleConstant(name, interpolate, value1) {
  var string00,
      string1 = value1 + "",
      interpolate0;
  return function() {
    var string0 = styleValue(this, name);
    return string0 === string1 ? null
        : string0 === string00 ? interpolate0
        : interpolate0 = interpolate(string00 = string0, value1);
  };
}

function styleFunction(name, interpolate, value) {
  var string00,
      string10,
      interpolate0;
  return function() {
    var string0 = styleValue(this, name),
        value1 = value(this),
        string1 = value1 + "";
    if (value1 == null) string1 = value1 = (this.style.removeProperty(name), styleValue(this, name));
    return string0 === string1 ? null
        : string0 === string00 && string1 === string10 ? interpolate0
        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}

function styleMaybeRemove(id, name) {
  var on0, on1, listener0, key = "style." + name, event = "end." + key, remove;
  return function() {
    var schedule = set$1(this, id),
        on = schedule.on,
        listener = schedule.value[key] == null ? remove || (remove = styleRemove(name)) : undefined;

    // If this node shared a dispatch with the previous node,
    // just assign the updated shared dispatch and we’re done!
    // Otherwise, copy-on-write.
    if (on !== on0 || listener0 !== listener) (on1 = (on0 = on).copy()).on(event, listener0 = listener);

    schedule.on = on1;
  };
}

function transition_style(name, value, priority) {
  var i = (name += "") === "transform" ? interpolateTransformCss : interpolate;
  return value == null ? this
      .styleTween(name, styleNull(name, i))
      .on("end.style." + name, styleRemove(name))
    : typeof value === "function" ? this
      .styleTween(name, styleFunction(name, i, tweenValue(this, "style." + name, value)))
      .each(styleMaybeRemove(this._id, name))
    : this
      .styleTween(name, styleConstant(name, i, value), priority)
      .on("end.style." + name, null);
}

function styleInterpolate(name, i, priority) {
  return function(t) {
    this.style.setProperty(name, i.call(this, t), priority);
  };
}

function styleTween(name, value, priority) {
  var t, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t = (i0 = i) && styleInterpolate(name, i, priority);
    return t;
  }
  tween._value = value;
  return tween;
}

function transition_styleTween(name, value, priority) {
  var key = "style." + (name += "");
  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error;
  return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
}

function textConstant(value) {
  return function() {
    this.textContent = value;
  };
}

function textFunction(value) {
  return function() {
    var value1 = value(this);
    this.textContent = value1 == null ? "" : value1;
  };
}

function transition_text(value) {
  return this.tween("text", typeof value === "function"
      ? textFunction(tweenValue(this, "text", value))
      : textConstant(value == null ? "" : value + ""));
}

function textInterpolate(i) {
  return function(t) {
    this.textContent = i.call(this, t);
  };
}

function textTween(value) {
  var t0, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t0 = (i0 = i) && textInterpolate(i);
    return t0;
  }
  tween._value = value;
  return tween;
}

function transition_textTween(value) {
  var key = "text";
  if (arguments.length < 1) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error;
  return this.tween(key, textTween(value));
}

function transition_transition() {
  var name = this._name,
      id0 = this._id,
      id1 = newId();

  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        var inherit = get$1(node, id0);
        schedule(node, name, id1, i, group, {
          time: inherit.time + inherit.delay + inherit.duration,
          delay: 0,
          duration: inherit.duration,
          ease: inherit.ease
        });
      }
    }
  }

  return new Transition(groups, this._parents, name, id1);
}

function transition_end() {
  var on0, on1, that = this, id = that._id, size = that.size();
  return new Promise(function(resolve, reject) {
    var cancel = {value: reject},
        end = {value: function() { if (--size === 0) resolve(); }};

    that.each(function() {
      var schedule = set$1(this, id),
          on = schedule.on;

      // If this node shared a dispatch with the previous node,
      // just assign the updated shared dispatch and we’re done!
      // Otherwise, copy-on-write.
      if (on !== on0) {
        on1 = (on0 = on).copy();
        on1._.cancel.push(cancel);
        on1._.interrupt.push(cancel);
        on1._.end.push(end);
      }

      schedule.on = on1;
    });

    // The selection was empty, resolve end immediately
    if (size === 0) resolve();
  });
}

var id = 0;

function Transition(groups, parents, name, id) {
  this._groups = groups;
  this._parents = parents;
  this._name = name;
  this._id = id;
}

function newId() {
  return ++id;
}

var selection_prototype = selection.prototype;

Transition.prototype = {
  constructor: Transition,
  select: transition_select,
  selectAll: transition_selectAll,
  selectChild: selection_prototype.selectChild,
  selectChildren: selection_prototype.selectChildren,
  filter: transition_filter,
  merge: transition_merge,
  selection: transition_selection,
  transition: transition_transition,
  call: selection_prototype.call,
  nodes: selection_prototype.nodes,
  node: selection_prototype.node,
  size: selection_prototype.size,
  empty: selection_prototype.empty,
  each: selection_prototype.each,
  on: transition_on,
  attr: transition_attr,
  attrTween: transition_attrTween,
  style: transition_style,
  styleTween: transition_styleTween,
  text: transition_text,
  textTween: transition_textTween,
  remove: transition_remove,
  tween: transition_tween,
  delay: transition_delay,
  duration: transition_duration,
  ease: transition_ease,
  easeVarying: transition_easeVarying,
  end: transition_end,
  [Symbol.iterator]: selection_prototype[Symbol.iterator]
};

function cubicInOut(t) {
  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
}

var defaultTiming = {
  time: null, // Set on use.
  delay: 0,
  duration: 250,
  ease: cubicInOut
};

function inherit(node, id) {
  var timing;
  while (!(timing = node.__transition) || !(timing = timing[id])) {
    if (!(node = node.parentNode)) {
      throw new Error(`transition ${id} not found`);
    }
  }
  return timing;
}

function selection_transition(name) {
  var id,
      timing;

  if (name instanceof Transition) {
    id = name._id, name = name._name;
  } else {
    id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + "";
  }

  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        schedule(node, name, id, i, group, timing || inherit(node, id));
      }
    }
  }

  return new Transition(groups, this._parents, name, id);
}

selection.prototype.interrupt = selection_interrupt;
selection.prototype.transition = selection_transition;

var constant = x => () => x;

function ZoomEvent(type, {
  sourceEvent,
  target,
  transform,
  dispatch
}) {
  Object.defineProperties(this, {
    type: {value: type, enumerable: true, configurable: true},
    sourceEvent: {value: sourceEvent, enumerable: true, configurable: true},
    target: {value: target, enumerable: true, configurable: true},
    transform: {value: transform, enumerable: true, configurable: true},
    _: {value: dispatch}
  });
}

function Transform(k, x, y) {
  this.k = k;
  this.x = x;
  this.y = y;
}

Transform.prototype = {
  constructor: Transform,
  scale: function(k) {
    return k === 1 ? this : new Transform(this.k * k, this.x, this.y);
  },
  translate: function(x, y) {
    return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);
  },
  apply: function(point) {
    return [point[0] * this.k + this.x, point[1] * this.k + this.y];
  },
  applyX: function(x) {
    return x * this.k + this.x;
  },
  applyY: function(y) {
    return y * this.k + this.y;
  },
  invert: function(location) {
    return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];
  },
  invertX: function(x) {
    return (x - this.x) / this.k;
  },
  invertY: function(y) {
    return (y - this.y) / this.k;
  },
  rescaleX: function(x) {
    return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));
  },
  rescaleY: function(y) {
    return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));
  },
  toString: function() {
    return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
  }
};

var identity$3 = new Transform(1, 0, 0);

function nopropagation(event) {
  event.stopImmediatePropagation();
}

function noevent(event) {
  event.preventDefault();
  event.stopImmediatePropagation();
}

// Ignore right-click, since that should open the context menu.
// except for pinch-to-zoom, which is sent as a wheel+ctrlKey event
function defaultFilter(event) {
  return (!event.ctrlKey || event.type === 'wheel') && !event.button;
}

function defaultExtent() {
  var e = this;
  if (e instanceof SVGElement) {
    e = e.ownerSVGElement || e;
    if (e.hasAttribute("viewBox")) {
      e = e.viewBox.baseVal;
      return [[e.x, e.y], [e.x + e.width, e.y + e.height]];
    }
    return [[0, 0], [e.width.baseVal.value, e.height.baseVal.value]];
  }
  return [[0, 0], [e.clientWidth, e.clientHeight]];
}

function defaultTransform() {
  return this.__zoom || identity$3;
}

function defaultWheelDelta(event) {
  return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 0.002) * (event.ctrlKey ? 10 : 1);
}

function defaultTouchable() {
  return navigator.maxTouchPoints || ("ontouchstart" in this);
}

function defaultConstrain(transform, extent, translateExtent) {
  var dx0 = transform.invertX(extent[0][0]) - translateExtent[0][0],
      dx1 = transform.invertX(extent[1][0]) - translateExtent[1][0],
      dy0 = transform.invertY(extent[0][1]) - translateExtent[0][1],
      dy1 = transform.invertY(extent[1][1]) - translateExtent[1][1];
  return transform.translate(
    dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1),
    dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1)
  );
}

function zoom() {
  var filter = defaultFilter,
      extent = defaultExtent,
      constrain = defaultConstrain,
      wheelDelta = defaultWheelDelta,
      touchable = defaultTouchable,
      scaleExtent = [0, Infinity],
      translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]],
      duration = 250,
      interpolate = interpolateZoom,
      listeners = dispatch("start", "zoom", "end"),
      touchstarting,
      touchfirst,
      touchending,
      touchDelay = 500,
      wheelDelay = 150,
      clickDistance2 = 0,
      tapDistance = 10;

  function zoom(selection) {
    selection
        .property("__zoom", defaultTransform)
        .on("wheel.zoom", wheeled, {passive: false})
        .on("mousedown.zoom", mousedowned)
        .on("dblclick.zoom", dblclicked)
      .filter(touchable)
        .on("touchstart.zoom", touchstarted)
        .on("touchmove.zoom", touchmoved)
        .on("touchend.zoom touchcancel.zoom", touchended)
        .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }

  zoom.transform = function(collection, transform, point, event) {
    var selection = collection.selection ? collection.selection() : collection;
    selection.property("__zoom", defaultTransform);
    if (collection !== selection) {
      schedule(collection, transform, point, event);
    } else {
      selection.interrupt().each(function() {
        gesture(this, arguments)
          .event(event)
          .start()
          .zoom(null, typeof transform === "function" ? transform.apply(this, arguments) : transform)
          .end();
      });
    }
  };

  zoom.scaleBy = function(selection, k, p, event) {
    zoom.scaleTo(selection, function() {
      var k0 = this.__zoom.k,
          k1 = typeof k === "function" ? k.apply(this, arguments) : k;
      return k0 * k1;
    }, p, event);
  };

  zoom.scaleTo = function(selection, k, p, event) {
    zoom.transform(selection, function() {
      var e = extent.apply(this, arguments),
          t0 = this.__zoom,
          p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p,
          p1 = t0.invert(p0),
          k1 = typeof k === "function" ? k.apply(this, arguments) : k;
      return constrain(translate(scale(t0, k1), p0, p1), e, translateExtent);
    }, p, event);
  };

  zoom.translateBy = function(selection, x, y, event) {
    zoom.transform(selection, function() {
      return constrain(this.__zoom.translate(
        typeof x === "function" ? x.apply(this, arguments) : x,
        typeof y === "function" ? y.apply(this, arguments) : y
      ), extent.apply(this, arguments), translateExtent);
    }, null, event);
  };

  zoom.translateTo = function(selection, x, y, p, event) {
    zoom.transform(selection, function() {
      var e = extent.apply(this, arguments),
          t = this.__zoom,
          p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p;
      return constrain(identity$3.translate(p0[0], p0[1]).scale(t.k).translate(
        typeof x === "function" ? -x.apply(this, arguments) : -x,
        typeof y === "function" ? -y.apply(this, arguments) : -y
      ), e, translateExtent);
    }, p, event);
  };

  function scale(transform, k) {
    k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k));
    return k === transform.k ? transform : new Transform(k, transform.x, transform.y);
  }

  function translate(transform, p0, p1) {
    var x = p0[0] - p1[0] * transform.k, y = p0[1] - p1[1] * transform.k;
    return x === transform.x && y === transform.y ? transform : new Transform(transform.k, x, y);
  }

  function centroid(extent) {
    return [(+extent[0][0] + +extent[1][0]) / 2, (+extent[0][1] + +extent[1][1]) / 2];
  }

  function schedule(transition, transform, point, event) {
    transition
        .on("start.zoom", function() { gesture(this, arguments).event(event).start(); })
        .on("interrupt.zoom end.zoom", function() { gesture(this, arguments).event(event).end(); })
        .tween("zoom", function() {
          var that = this,
              args = arguments,
              g = gesture(that, args).event(event),
              e = extent.apply(that, args),
              p = point == null ? centroid(e) : typeof point === "function" ? point.apply(that, args) : point,
              w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]),
              a = that.__zoom,
              b = typeof transform === "function" ? transform.apply(that, args) : transform,
              i = interpolate(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));
          return function(t) {
            if (t === 1) t = b; // Avoid rounding error on end.
            else { var l = i(t), k = w / l[2]; t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k); }
            g.zoom(null, t);
          };
        });
  }

  function gesture(that, args, clean) {
    return (!clean && that.__zooming) || new Gesture(that, args);
  }

  function Gesture(that, args) {
    this.that = that;
    this.args = args;
    this.active = 0;
    this.sourceEvent = null;
    this.extent = extent.apply(that, args);
    this.taps = 0;
  }

  Gesture.prototype = {
    event: function(event) {
      if (event) this.sourceEvent = event;
      return this;
    },
    start: function() {
      if (++this.active === 1) {
        this.that.__zooming = this;
        this.emit("start");
      }
      return this;
    },
    zoom: function(key, transform) {
      if (this.mouse && key !== "mouse") this.mouse[1] = transform.invert(this.mouse[0]);
      if (this.touch0 && key !== "touch") this.touch0[1] = transform.invert(this.touch0[0]);
      if (this.touch1 && key !== "touch") this.touch1[1] = transform.invert(this.touch1[0]);
      this.that.__zoom = transform;
      this.emit("zoom");
      return this;
    },
    end: function() {
      if (--this.active === 0) {
        delete this.that.__zooming;
        this.emit("end");
      }
      return this;
    },
    emit: function(type) {
      var d = select(this.that).datum();
      listeners.call(
        type,
        this.that,
        new ZoomEvent(type, {
          sourceEvent: this.sourceEvent,
          target: zoom,
          type,
          transform: this.that.__zoom,
          dispatch: listeners
        }),
        d
      );
    }
  };

  function wheeled(event, ...args) {
    if (!filter.apply(this, arguments)) return;
    var g = gesture(this, args).event(event),
        t = this.__zoom,
        k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))),
        p = pointer(event);

    // If the mouse is in the same location as before, reuse it.
    // If there were recent wheel events, reset the wheel idle timeout.
    if (g.wheel) {
      if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {
        g.mouse[1] = t.invert(g.mouse[0] = p);
      }
      clearTimeout(g.wheel);
    }

    // If this wheel event won’t trigger a transform change, ignore it.
    else if (t.k === k) return;

    // Otherwise, capture the mouse point and location at the start.
    else {
      g.mouse = [p, t.invert(p)];
      interrupt(this);
      g.start();
    }

    noevent(event);
    g.wheel = setTimeout(wheelidled, wheelDelay);
    g.zoom("mouse", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent, translateExtent));

    function wheelidled() {
      g.wheel = null;
      g.end();
    }
  }

  function mousedowned(event, ...args) {
    if (touchending || !filter.apply(this, arguments)) return;
    var currentTarget = event.currentTarget,
        g = gesture(this, args, true).event(event),
        v = select(event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true),
        p = pointer(event, currentTarget),
        x0 = event.clientX,
        y0 = event.clientY;

    dragDisable(event.view);
    nopropagation(event);
    g.mouse = [p, this.__zoom.invert(p)];
    interrupt(this);
    g.start();

    function mousemoved(event) {
      noevent(event);
      if (!g.moved) {
        var dx = event.clientX - x0, dy = event.clientY - y0;
        g.moved = dx * dx + dy * dy > clickDistance2;
      }
      g.event(event)
       .zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = pointer(event, currentTarget), g.mouse[1]), g.extent, translateExtent));
    }

    function mouseupped(event) {
      v.on("mousemove.zoom mouseup.zoom", null);
      yesdrag(event.view, g.moved);
      noevent(event);
      g.event(event).end();
    }
  }

  function dblclicked(event, ...args) {
    if (!filter.apply(this, arguments)) return;
    var t0 = this.__zoom,
        p0 = pointer(event.changedTouches ? event.changedTouches[0] : event, this),
        p1 = t0.invert(p0),
        k1 = t0.k * (event.shiftKey ? 0.5 : 2),
        t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, args), translateExtent);

    noevent(event);
    if (duration > 0) select(this).transition().duration(duration).call(schedule, t1, p0, event);
    else select(this).call(zoom.transform, t1, p0, event);
  }

  function touchstarted(event, ...args) {
    if (!filter.apply(this, arguments)) return;
    var touches = event.touches,
        n = touches.length,
        g = gesture(this, args, event.changedTouches.length === n).event(event),
        started, i, t, p;

    nopropagation(event);
    for (i = 0; i < n; ++i) {
      t = touches[i], p = pointer(t, this);
      p = [p, this.__zoom.invert(p), t.identifier];
      if (!g.touch0) g.touch0 = p, started = true, g.taps = 1 + !!touchstarting;
      else if (!g.touch1 && g.touch0[2] !== p[2]) g.touch1 = p, g.taps = 0;
    }

    if (touchstarting) touchstarting = clearTimeout(touchstarting);

    if (started) {
      if (g.taps < 2) touchfirst = p[0], touchstarting = setTimeout(function() { touchstarting = null; }, touchDelay);
      interrupt(this);
      g.start();
    }
  }

  function touchmoved(event, ...args) {
    if (!this.__zooming) return;
    var g = gesture(this, args).event(event),
        touches = event.changedTouches,
        n = touches.length, i, t, p, l;

    noevent(event);
    for (i = 0; i < n; ++i) {
      t = touches[i], p = pointer(t, this);
      if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;
      else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;
    }
    t = g.that.__zoom;
    if (g.touch1) {
      var p0 = g.touch0[0], l0 = g.touch0[1],
          p1 = g.touch1[0], l1 = g.touch1[1],
          dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp,
          dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
      t = scale(t, Math.sqrt(dp / dl));
      p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
      l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
    }
    else if (g.touch0) p = g.touch0[0], l = g.touch0[1];
    else return;

    g.zoom("touch", constrain(translate(t, p, l), g.extent, translateExtent));
  }

  function touchended(event, ...args) {
    if (!this.__zooming) return;
    var g = gesture(this, args).event(event),
        touches = event.changedTouches,
        n = touches.length, i, t;

    nopropagation(event);
    if (touchending) clearTimeout(touchending);
    touchending = setTimeout(function() { touchending = null; }, touchDelay);
    for (i = 0; i < n; ++i) {
      t = touches[i];
      if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;
      else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;
    }
    if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;
    if (g.touch0) g.touch0[1] = this.__zoom.invert(g.touch0[0]);
    else {
      g.end();
      // If this was a dbltap, reroute to the (optional) dblclick.zoom handler.
      if (g.taps === 2) {
        t = pointer(t, this);
        if (Math.hypot(touchfirst[0] - t[0], touchfirst[1] - t[1]) < tapDistance) {
          var p = select(this).on("dblclick.zoom");
          if (p) p.apply(this, arguments);
        }
      }
    }
  }

  zoom.wheelDelta = function(_) {
    return arguments.length ? (wheelDelta = typeof _ === "function" ? _ : constant(+_), zoom) : wheelDelta;
  };

  zoom.filter = function(_) {
    return arguments.length ? (filter = typeof _ === "function" ? _ : constant(!!_), zoom) : filter;
  };

  zoom.touchable = function(_) {
    return arguments.length ? (touchable = typeof _ === "function" ? _ : constant(!!_), zoom) : touchable;
  };

  zoom.extent = function(_) {
    return arguments.length ? (extent = typeof _ === "function" ? _ : constant([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;
  };

  zoom.scaleExtent = function(_) {
    return arguments.length ? (scaleExtent[0] = +_[0], scaleExtent[1] = +_[1], zoom) : [scaleExtent[0], scaleExtent[1]];
  };

  zoom.translateExtent = function(_) {
    return arguments.length ? (translateExtent[0][0] = +_[0][0], translateExtent[1][0] = +_[1][0], translateExtent[0][1] = +_[0][1], translateExtent[1][1] = +_[1][1], zoom) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];
  };

  zoom.constrain = function(_) {
    return arguments.length ? (constrain = _, zoom) : constrain;
  };

  zoom.duration = function(_) {
    return arguments.length ? (duration = +_, zoom) : duration;
  };

  zoom.interpolate = function(_) {
    return arguments.length ? (interpolate = _, zoom) : interpolate;
  };

  zoom.on = function() {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? zoom : value;
  };

  zoom.clickDistance = function(_) {
    return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom) : Math.sqrt(clickDistance2);
  };

  zoom.tapDistance = function(_) {
    return arguments.length ? (tapDistance = +_, zoom) : tapDistance;
  };

  return zoom;
}

function initRange(domain, range) {
  switch (arguments.length) {
    case 0: break;
    case 1: this.range(domain); break;
    default: this.range(range).domain(domain); break;
  }
  return this;
}

function initInterpolator(domain, interpolator) {
  switch (arguments.length) {
    case 0: break;
    case 1: {
      if (typeof domain === "function") this.interpolator(domain);
      else this.range(domain);
      break;
    }
    default: {
      this.domain(domain);
      if (typeof interpolator === "function") this.interpolator(interpolator);
      else this.range(interpolator);
      break;
    }
  }
  return this;
}

const implicit = Symbol("implicit");

function ordinal() {
  var index = new InternMap(),
      domain = [],
      range = [],
      unknown = implicit;

  function scale(d) {
    let i = index.get(d);
    if (i === undefined) {
      if (unknown !== implicit) return unknown;
      index.set(d, i = domain.push(d) - 1);
    }
    return range[i % range.length];
  }

  scale.domain = function(_) {
    if (!arguments.length) return domain.slice();
    domain = [], index = new InternMap();
    for (const value of _) {
      if (index.has(value)) continue;
      index.set(value, domain.push(value) - 1);
    }
    return scale;
  };

  scale.range = function(_) {
    return arguments.length ? (range = Array.from(_), scale) : range.slice();
  };

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function() {
    return ordinal(domain, range).unknown(unknown);
  };

  initRange.apply(scale, arguments);

  return scale;
}

function constants(x) {
  return function() {
    return x;
  };
}

function number(x) {
  return +x;
}

var unit = [0, 1];

function identity$2(x) {
  return x;
}

function normalize(a, b) {
  return (b -= (a = +a))
      ? function(x) { return (x - a) / b; }
      : constants(isNaN(b) ? NaN : 0.5);
}

function clamper(a, b) {
  var t;
  if (a > b) t = a, a = b, b = t;
  return function(x) { return Math.max(a, Math.min(b, x)); };
}

// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].
function bimap(domain, range, interpolate) {
  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];
  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);
  else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
  return function(x) { return r0(d0(x)); };
}

function polymap(domain, range, interpolate) {
  var j = Math.min(domain.length, range.length) - 1,
      d = new Array(j),
      r = new Array(j),
      i = -1;

  // Reverse descending domains.
  if (domain[j] < domain[0]) {
    domain = domain.slice().reverse();
    range = range.slice().reverse();
  }

  while (++i < j) {
    d[i] = normalize(domain[i], domain[i + 1]);
    r[i] = interpolate(range[i], range[i + 1]);
  }

  return function(x) {
    var i = bisectRight(domain, x, 1, j) - 1;
    return r[i](d[i](x));
  };
}

function copy$1(source, target) {
  return target
      .domain(source.domain())
      .range(source.range())
      .interpolate(source.interpolate())
      .clamp(source.clamp())
      .unknown(source.unknown());
}

function transformer$1() {
  var domain = unit,
      range = unit,
      interpolate = interpolate$1,
      transform,
      untransform,
      unknown,
      clamp = identity$2,
      piecewise,
      output,
      input;

  function rescale() {
    var n = Math.min(domain.length, range.length);
    if (clamp !== identity$2) clamp = clamper(domain[0], domain[n - 1]);
    piecewise = n > 2 ? polymap : bimap;
    output = input = null;
    return scale;
  }

  function scale(x) {
    return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));
  }

  scale.invert = function(y) {
    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)));
  };

  scale.domain = function(_) {
    return arguments.length ? (domain = Array.from(_, number), rescale()) : domain.slice();
  };

  scale.range = function(_) {
    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
  };

  scale.rangeRound = function(_) {
    return range = Array.from(_), interpolate = interpolateRound, rescale();
  };

  scale.clamp = function(_) {
    return arguments.length ? (clamp = _ ? true : identity$2, rescale()) : clamp !== identity$2;
  };

  scale.interpolate = function(_) {
    return arguments.length ? (interpolate = _, rescale()) : interpolate;
  };

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  return function(t, u) {
    transform = t, untransform = u;
    return rescale();
  };
}

function continuous() {
  return transformer$1()(identity$2, identity$2);
}

function formatDecimal(x) {
  return Math.abs(x = Math.round(x)) >= 1e21
      ? x.toLocaleString("en").replace(/,/g, "")
      : x.toString(10);
}

// Computes the decimal coefficient and exponent of the specified number x with
// significant digits p, where x is positive and p is in [1, 21] or undefined.
// For example, formatDecimalParts(1.23) returns ["123", 0].
function formatDecimalParts(x, p) {
  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
  var i, coefficient = x.slice(0, i);

  // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
  // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x.slice(i + 1)
  ];
}

function exponent(x) {
  return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;
}

function formatGroup(grouping, thousands) {
  return function(value, width) {
    var i = value.length,
        t = [],
        j = 0,
        g = grouping[0],
        length = 0;

    while (i > 0 && g > 0) {
      if (length + g + 1 > width) g = Math.max(1, width - length);
      t.push(value.substring(i -= g, i + g));
      if ((length += g + 1) > width) break;
      g = grouping[j = (j + 1) % grouping.length];
    }

    return t.reverse().join(thousands);
  };
}

function formatNumerals(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i) {
      return numerals[+i];
    });
  };
}

// [[fill]align][sign][symbol][0][width][,][.precision][~][type]
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;

function formatSpecifier(specifier) {
  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}

formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

function FormatSpecifier(specifier) {
  this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
  this.align = specifier.align === undefined ? ">" : specifier.align + "";
  this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === undefined ? undefined : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === undefined ? "" : specifier.type + "";
}

FormatSpecifier.prototype.toString = function() {
  return this.fill
      + this.align
      + this.sign
      + this.symbol
      + (this.zero ? "0" : "")
      + (this.width === undefined ? "" : Math.max(1, this.width | 0))
      + (this.comma ? "," : "")
      + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0))
      + (this.trim ? "~" : "")
      + this.type;
};

// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
function formatTrim(s) {
  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
    switch (s[i]) {
      case ".": i0 = i1 = i; break;
      case "0": if (i0 === 0) i0 = i; i1 = i; break;
      default: if (!+s[i]) break out; if (i0 > 0) i0 = 0; break;
    }
  }
  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
}

var prefixExponent;

function formatPrefixAuto(x, p) {
  var d = formatDecimalParts(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1],
      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
      n = coefficient.length;
  return i === n ? coefficient
      : i > n ? coefficient + new Array(i - n + 1).join("0")
      : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i)
      : "0." + new Array(1 - i).join("0") + formatDecimalParts(x, Math.max(0, p + i - 1))[0]; // less than 1y!
}

function formatRounded(x, p) {
  var d = formatDecimalParts(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient
      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1)
      : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}

var formatTypes = {
  "%": (x, p) => (x * 100).toFixed(p),
  "b": (x) => Math.round(x).toString(2),
  "c": (x) => x + "",
  "d": formatDecimal,
  "e": (x, p) => x.toExponential(p),
  "f": (x, p) => x.toFixed(p),
  "g": (x, p) => x.toPrecision(p),
  "o": (x) => Math.round(x).toString(8),
  "p": (x, p) => formatRounded(x * 100, p),
  "r": formatRounded,
  "s": formatPrefixAuto,
  "X": (x) => Math.round(x).toString(16).toUpperCase(),
  "x": (x) => Math.round(x).toString(16)
};

function identity$1(x) {
  return x;
}

var map$3 = Array.prototype.map,
    prefixes = ["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];

function formatLocale(locale) {
  var group = locale.grouping === undefined || locale.thousands === undefined ? identity$1 : formatGroup(map$3.call(locale.grouping, Number), locale.thousands + ""),
      currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "",
      currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "",
      decimal = locale.decimal === undefined ? "." : locale.decimal + "",
      numerals = locale.numerals === undefined ? identity$1 : formatNumerals(map$3.call(locale.numerals, String)),
      percent = locale.percent === undefined ? "%" : locale.percent + "",
      minus = locale.minus === undefined ? "−" : locale.minus + "",
      nan = locale.nan === undefined ? "NaN" : locale.nan + "";

  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);

    var fill = specifier.fill,
        align = specifier.align,
        sign = specifier.sign,
        symbol = specifier.symbol,
        zero = specifier.zero,
        width = specifier.width,
        comma = specifier.comma,
        precision = specifier.precision,
        trim = specifier.trim,
        type = specifier.type;

    // The "n" type is an alias for ",g".
    if (type === "n") comma = true, type = "g";

    // The "" type, and any invalid type, is an alias for ".12~g".
    else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = "g";

    // If zero fill is specified, padding goes after sign and before digits.
    if (zero || (fill === "0" && align === "=")) zero = true, fill = "0", align = "=";

    // Compute the prefix and suffix.
    // For SI-prefix, the suffix is lazily computed.
    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
        suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";

    // What format function should we use?
    // Is this an integer type?
    // Can this type generate exponential notation?
    var formatType = formatTypes[type],
        maybeSuffix = /[defgprs%]/.test(type);

    // Set the default precision if not specified,
    // or clamp the specified precision to the supported range.
    // For significant precision, it must be in [1, 21].
    // For fixed precision, it must be in [0, 20].
    precision = precision === undefined ? 6
        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))
        : Math.max(0, Math.min(20, precision));

    function format(value) {
      var valuePrefix = prefix,
          valueSuffix = suffix,
          i, n, c;

      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;

        // Determine the sign. -0 is not less than 0, but 1 / -0 is!
        var valueNegative = value < 0 || 1 / value < 0;

        // Perform the initial formatting.
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);

        // Trim insignificant zeros.
        if (trim) value = formatTrim(value);

        // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.
        if (valueNegative && +value === 0 && sign !== "+") valueNegative = false;

        // Compute the prefix and suffix.
        valuePrefix = (valueNegative ? (sign === "(" ? sign : minus) : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");

        // Break the formatted value into the integer “value” part that can be
        // grouped, and fractional or exponential “suffix” part that is not.
        if (maybeSuffix) {
          i = -1, n = value.length;
          while (++i < n) {
            if (c = value.charCodeAt(i), 48 > c || c > 57) {
              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
              value = value.slice(0, i);
              break;
            }
          }
        }
      }

      // If the fill character is not "0", grouping is applied before padding.
      if (comma && !zero) value = group(value, Infinity);

      // Compute the padding.
      var length = valuePrefix.length + value.length + valueSuffix.length,
          padding = length < width ? new Array(width - length + 1).join(fill) : "";

      // If the fill character is "0", grouping is applied after padding.
      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";

      // Reconstruct the final output based on the desired alignment.
      switch (align) {
        case "<": value = valuePrefix + value + valueSuffix + padding; break;
        case "=": value = valuePrefix + padding + value + valueSuffix; break;
        case "^": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;
        default: value = padding + valuePrefix + value + valueSuffix; break;
      }

      return numerals(value);
    }

    format.toString = function() {
      return specifier + "";
    };

    return format;
  }

  function formatPrefix(specifier, value) {
    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,
        k = Math.pow(10, -e),
        prefix = prefixes[8 + e / 3];
    return function(value) {
      return f(k * value) + prefix;
    };
  }

  return {
    format: newFormat,
    formatPrefix: formatPrefix
  };
}

var locale;
var format;
var formatPrefix;

defaultLocale({
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});

function defaultLocale(definition) {
  locale = formatLocale(definition);
  format = locale.format;
  formatPrefix = locale.formatPrefix;
  return locale;
}

function precisionFixed(step) {
  return Math.max(0, -exponent(Math.abs(step)));
}

function precisionPrefix(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));
}

function precisionRound(step, max) {
  step = Math.abs(step), max = Math.abs(max) - step;
  return Math.max(0, exponent(max) - exponent(step)) + 1;
}

function tickFormat(start, stop, count, specifier) {
  var step = tickStep(start, stop, count),
      precision;
  specifier = formatSpecifier(specifier == null ? ",f" : specifier);
  switch (specifier.type) {
    case "s": {
      var value = Math.max(Math.abs(start), Math.abs(stop));
      if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;
      return formatPrefix(specifier, value);
    }
    case "":
    case "e":
    case "g":
    case "p":
    case "r": {
      if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
      break;
    }
    case "f":
    case "%": {
      if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
      break;
    }
  }
  return format(specifier);
}

function linearish(scale) {
  var domain = scale.domain;

  scale.ticks = function(count) {
    var d = domain();
    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);
  };

  scale.tickFormat = function(count, specifier) {
    var d = domain();
    return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
  };

  scale.nice = function(count) {
    if (count == null) count = 10;

    var d = domain();
    var i0 = 0;
    var i1 = d.length - 1;
    var start = d[i0];
    var stop = d[i1];
    var prestep;
    var step;
    var maxIter = 10;

    if (stop < start) {
      step = start, start = stop, stop = step;
      step = i0, i0 = i1, i1 = step;
    }
    
    while (maxIter-- > 0) {
      step = tickIncrement(start, stop, count);
      if (step === prestep) {
        d[i0] = start;
        d[i1] = stop;
        return domain(d);
      } else if (step > 0) {
        start = Math.floor(start / step) * step;
        stop = Math.ceil(stop / step) * step;
      } else if (step < 0) {
        start = Math.ceil(start * step) / step;
        stop = Math.floor(stop * step) / step;
      } else {
        break;
      }
      prestep = step;
    }

    return scale;
  };

  return scale;
}

function linear() {
  var scale = continuous();

  scale.copy = function() {
    return copy$1(scale, linear());
  };

  initRange.apply(scale, arguments);

  return linearish(scale);
}

function identity(domain) {
  var unknown;

  function scale(x) {
    return x == null || isNaN(x = +x) ? unknown : x;
  }

  scale.invert = scale;

  scale.domain = scale.range = function(_) {
    return arguments.length ? (domain = Array.from(_, number), scale) : domain.slice();
  };

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function() {
    return identity(domain).unknown(unknown);
  };

  domain = arguments.length ? Array.from(domain, number) : [0, 1];

  return linearish(scale);
}

function nice(domain, interval) {
  domain = domain.slice();

  var i0 = 0,
      i1 = domain.length - 1,
      x0 = domain[i0],
      x1 = domain[i1],
      t;

  if (x1 < x0) {
    t = i0, i0 = i1, i1 = t;
    t = x0, x0 = x1, x1 = t;
  }

  domain[i0] = interval.floor(x0);
  domain[i1] = interval.ceil(x1);
  return domain;
}

function transformLog(x) {
  return Math.log(x);
}

function transformExp(x) {
  return Math.exp(x);
}

function transformLogn(x) {
  return -Math.log(-x);
}

function transformExpn(x) {
  return -Math.exp(-x);
}

function pow10(x) {
  return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
}

function powp(base) {
  return base === 10 ? pow10
      : base === Math.E ? Math.exp
      : x => Math.pow(base, x);
}

function logp(base) {
  return base === Math.E ? Math.log
      : base === 10 && Math.log10
      || base === 2 && Math.log2
      || (base = Math.log(base), x => Math.log(x) / base);
}

function reflect(f) {
  return (x, k) => -f(-x, k);
}

function loggish(transform) {
  const scale = transform(transformLog, transformExp);
  const domain = scale.domain;
  let base = 10;
  let logs;
  let pows;

  function rescale() {
    logs = logp(base), pows = powp(base);
    if (domain()[0] < 0) {
      logs = reflect(logs), pows = reflect(pows);
      transform(transformLogn, transformExpn);
    } else {
      transform(transformLog, transformExp);
    }
    return scale;
  }

  scale.base = function(_) {
    return arguments.length ? (base = +_, rescale()) : base;
  };

  scale.domain = function(_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };

  scale.ticks = count => {
    const d = domain();
    let u = d[0];
    let v = d[d.length - 1];
    const r = v < u;

    if (r) ([u, v] = [v, u]);

    let i = logs(u);
    let j = logs(v);
    let k;
    let t;
    const n = count == null ? 10 : +count;
    let z = [];

    if (!(base % 1) && j - i < n) {
      i = Math.floor(i), j = Math.ceil(j);
      if (u > 0) for (; i <= j; ++i) {
        for (k = 1; k < base; ++k) {
          t = i < 0 ? k / pows(-i) : k * pows(i);
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      } else for (; i <= j; ++i) {
        for (k = base - 1; k >= 1; --k) {
          t = i > 0 ? k / pows(-i) : k * pows(i);
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      }
      if (z.length * 2 < n) z = ticks(u, v, n);
    } else {
      z = ticks(i, j, Math.min(j - i, n)).map(pows);
    }
    return r ? z.reverse() : z;
  };

  scale.tickFormat = (count, specifier) => {
    if (count == null) count = 10;
    if (specifier == null) specifier = base === 10 ? "s" : ",";
    if (typeof specifier !== "function") {
      if (!(base % 1) && (specifier = formatSpecifier(specifier)).precision == null) specifier.trim = true;
      specifier = format(specifier);
    }
    if (count === Infinity) return specifier;
    const k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?
    return d => {
      let i = d / pows(Math.round(logs(d)));
      if (i * base < base - 0.5) i *= base;
      return i <= k ? specifier(d) : "";
    };
  };

  scale.nice = () => {
    return domain(nice(domain(), {
      floor: x => pows(Math.floor(logs(x))),
      ceil: x => pows(Math.ceil(logs(x)))
    }));
  };

  return scale;
}

function log() {
  const scale = loggish(transformer$1()).domain([1, 10]);
  scale.copy = () => copy$1(scale, log()).base(scale.base());
  initRange.apply(scale, arguments);
  return scale;
}

function transformPow(exponent) {
  return function(x) {
    return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
  };
}

function transformSqrt(x) {
  return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);
}

function transformSquare(x) {
  return x < 0 ? -x * x : x * x;
}

function powish(transform) {
  var scale = transform(identity$2, identity$2),
      exponent = 1;

  function rescale() {
    return exponent === 1 ? transform(identity$2, identity$2)
        : exponent === 0.5 ? transform(transformSqrt, transformSquare)
        : transform(transformPow(exponent), transformPow(1 / exponent));
  }

  scale.exponent = function(_) {
    return arguments.length ? (exponent = +_, rescale()) : exponent;
  };

  return linearish(scale);
}

function pow() {
  var scale = powish(transformer$1());

  scale.copy = function() {
    return copy$1(scale, pow()).exponent(scale.exponent());
  };

  initRange.apply(scale, arguments);

  return scale;
}

function sqrt() {
  return pow.apply(null, arguments).exponent(0.5);
}

function transformer() {
  var x0 = 0,
      x1 = 1,
      t0,
      t1,
      k10,
      transform,
      interpolator = identity$2,
      clamp = false,
      unknown;

  function scale(x) {
    return x == null || isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));
  }

  scale.domain = function(_) {
    return arguments.length ? ([x0, x1] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [x0, x1];
  };

  scale.clamp = function(_) {
    return arguments.length ? (clamp = !!_, scale) : clamp;
  };

  scale.interpolator = function(_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };

  function range(interpolate) {
    return function(_) {
      var r0, r1;
      return arguments.length ? ([r0, r1] = _, interpolator = interpolate(r0, r1), scale) : [interpolator(0), interpolator(1)];
    };
  }

  scale.range = range(interpolate$1);

  scale.rangeRound = range(interpolateRound);

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  return function(t) {
    transform = t, t0 = t(x0), t1 = t(x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0);
    return scale;
  };
}

function copy(source, target) {
  return target
      .domain(source.domain())
      .interpolator(source.interpolator())
      .clamp(source.clamp())
      .unknown(source.unknown());
}

function sequential() {
  var scale = linearish(transformer()(identity$2));

  scale.copy = function() {
    return copy(scale, sequential());
  };

  return initInterpolator.apply(scale, arguments);
}

function sequentialLog() {
  var scale = loggish(transformer()).domain([1, 10]);

  scale.copy = function() {
    return copy(scale, sequentialLog()).base(scale.base());
  };

  return initInterpolator.apply(scale, arguments);
}

function sequentialPow() {
  var scale = powish(transformer());

  scale.copy = function() {
    return copy(scale, sequentialPow()).exponent(scale.exponent());
  };

  return initInterpolator.apply(scale, arguments);
}

/* eslint-disable no-underscore-dangle */
// import { annotation, annotationLabel } from 'd3-svg-annotation';

class Zoom {
  constructor(selector, prefs) {
    // There can be many canvases that display the zoom, but
    // this is initialized with the topmost most one that
    // also registers events.

    this.prefs = prefs;
    this.canvas = select(selector);
    this.width = +this.canvas.attr('width');
    this.height = +this.canvas.attr('height');

    // A zoom keeps track of all the renderers
    // that it's in charge of adjusting.

    this.renderers = new Map();
  }

  attach_tiles(tiles) {
    this.tileSet = tiles;
    this.tileSet._zoom = this;
    return this;
  }

  attach_renderer(key, renderer) {
    this.renderers.set(key, renderer);
    renderer.bind_zoom(this);
    renderer.zoom.initialize_zoom();
    return this;
  }

  zoom_to(k, x = null, y = null, duration = 4000) {
    const scales = this.scales();
    const {
      canvas, zoomer, width, height,
    } = this;

    const t = identity$3
      .translate(width / 2, height / 2)
      .scale(k)
      .translate(-scales.x(x), -scales.y(y));

    canvas
      .transition()
      .duration(duration)
      .call(zoomer.transform, t);
  }

  html_annotation(points) {
    const div = this.canvas.node().parentNode.parentNode;

    const els = select(div)
      .selectAll('div.tooltip')
      .data(points)
      .join(
        (enter) => enter
          .append('div')
          .attr('class', 'tooltip')
          .style('top', 0)
          .style('left', 0)
          .style('position', 'absolute')
          .style('z-index', 100)
          .style('border-radius', '8px')
          .style('padding', '10px')
          .style('background', 'ivory')
          .style('opacity', 0.75),
        (update) => update
          .html((d) => {
            if (d === undefined) {
              return
            }
            this.tooltip_html(d.data);
          }),
        (exit) => exit.call((e) => e.remove())
      );

    els
      .html((d) => this.tooltip_html(d.data))
      .style('transform', (d) => {
        const t = `translate(${+d.x + d.dx}px, ${+d.y + d.dy}px)`;
        return t;
      });
  }

  get tooltip_html() {
    // a function that
    if (this._tooltip_html === undefined) {
      return label_from_point
    } else {
      return this._tooltip_html
    }
  }

  zoom_to_bbox(corners, duration = 4) {
    // Zooms to two points.
    const scales = this.scales();
    const [x0, x1] = corners.x.map(scales.x);
    const [y0, y1] = corners.y.map(scales.y);

    const {
      canvas, zoomer, width, height,
    } = this;

    const t = identity$3
      .translate(width / 2, height / 2)
      .scale(0.9 / Math.max((x1 - x0) / width, (y1 - y0) / height))
      .translate(-(x0 + x1) / 2, -(y0 + y1) / 2);

    canvas
      .transition()
      .duration(duration * 1000)
      .call(zoomer.transform, t);
  }

  initialize_zoom() {
    const { width, height, canvas } = this;
    this.transform = identity$3;

    const zoomer = zoom()
      .scaleExtent([1 / 3, 100000])
      .extent([[0, 0], [width, height]])
      .on('zoom', (event) => {
        this.transform = event.transform;
        this.restart_timer(10 * 1000);
      });

    canvas.call(zoomer);

    this.add_mouseover();

    this.zoomer = zoomer;
  }

  add_mouseover() {
    let last_fired = 0;

    const renderer = this.renderers.get('regl');
    const x_aes = renderer.aes.x.current;
    const y_aes = renderer.aes.y.current;

    this.canvas.on('mousemove', (event) => {
      // Debouncing this is really important, it turns out.
      if (Date.now() - last_fired < 1000 / 20) {
        return;
      }
      last_fired = Date.now();
      const p = renderer.color_pick(event.layerX, event.layerY);
      const data = p ? [p] : [];
      const d = data[0];
      const annotations = d ? [
        {
          x: event.layerX,
          y: event.layerY,
          data: d,
          dx: 0,
          dy: 30,
        },
      ] : [];

      const { x_, y_ } = this.scales();

      this.html_annotation(annotations);

      select('#deepscatter-svg')
        .selectAll('circle.label')
        .data(data, (d_) => d_.ix)
        .join(
          (enter) => enter
            .append('circle')
            .attr('class', 'label')
            .attr('stroke', '#110022')
            .attr('r', 12)
            .attr('fill', (dd) => this.renderers.get('regl').aes.color.current.apply(dd))
            .attr('cx', (datum) => x_(x_aes.value_for(datum)))
            .attr('cy', (datum) => y_(y_aes.value_for(datum))),
          (update) => update
            .attr('fill', (dd) => this.renderers.get('regl').aes.color.current.apply(dd)),
          (exit) => exit.call((e) => e.remove())
        )
        .on('click', (ev, dd) => {
          this.renderers.get('regl').click_function(dd, ev);
        });
    });
  }

  current_corners() {
    // The corners of the current zoom transform, in data coordinates.
    const { width, height } = this;

    // Use the rescaled versions of the scales.
    const scales = this.scales();
    if (scales === undefined) {
      return undefined;
    }
    const { x_, y_ } = scales;

    return {
      x: [x_.invert(0), x_.invert(width)],
      y: [y_.invert(0), y_.invert(height)],
    };
  }

  current_center() {
    const { x, y } = this.current_corners();

    return [
      (x[0] + x[1]) / 2,
      (y[0] + y[1]) / 2,
    ];
  }

  restart_timer(run_at_least = 10000) {
    // Restart the timer and run it for
    // run_at_least milliseconds or the current timeout,
    // whichever is greater.
    let stop_at = Date.now() + run_at_least;
    if (this._timer) {
      if (this._timer.stop_at > stop_at) {
        stop_at = this._timer.stop_at;
      }
      this._timer.stop();
    }

    const t = timer(this.tick.bind(this));

    this._timer = t;

    this._timer.stop_at = stop_at;

    return this._timer;
  }

  data(dataset) {
    if (data === undefined) {
      return this.tileSet;
    }
    this.tileSet = dataset;
    return this;
  }

  scales(equal_units = true) {
    // General x and y scales that map from data space
    // to pixel coordinates, and also
    // rescaled ones that describe the current zoom.
    // The base scales are called 'x' and 'y',
    // and the zoomed ones are called 'x_' and 'y_'.

    // equal_units: should a point of x be the same as a point of y?

    if (this._scales) {
      this._scales.x_ = this.transform.rescaleX(this._scales.x);
      this._scales.y_ = this.transform.rescaleY(this._scales.y);
      return this._scales;
    }

    const { width, height, tileSet } = this;

    const { extent } = this.tileSet;

    const scales = {};
    if (extent === undefined) {
      return undefined;
    }

    const scale_dat = { x: {}, y: {} };

    for (const [name, dim] of [['x', width], ['y', height]]) {
      const limits = extent[name];
      scale_dat[name].limits = limits;
      scale_dat[name].size_range = limits[1] - limits[0];
      scale_dat[name].pixels_per_unit = dim / scale_dat[name].size_range;
    }

    const data_aspect_ratio = scale_dat.x.pixels_per_unit / scale_dat.y.pixels_per_unit;

    let x_buffer_size = 0; let y_buffer_size = 0;
    let x_target_size = width; let
      y_target_size = height;
    if (data_aspect_ratio > 1) {
      // There are more pixels in the x dimension, so we need a buffer
      // around it.
      x_target_size = width / data_aspect_ratio;
      x_buffer_size = (width - x_target_size) / 2;
    } else {
      y_target_size = height * data_aspect_ratio;
      y_buffer_size = (height - y_target_size) / 2;
    }

    scales.x = linear()
      .domain(scale_dat.x.limits)
      .range([x_buffer_size, width - x_buffer_size]);

    scales.y = linear()
      .domain(scale_dat.y.limits)
      .range([y_buffer_size, height - y_buffer_size]);

    scales.x_ = this.transform.rescaleX(scales.x);
    scales.y_ = this.transform.rescaleY(scales.y);

    this._scales = scales;
    return scales;
  }

  webgl_scale(flatten = true) {
    const { x, y } = this.scales();
    const transform = window_transform(x, y).flat();
    return transform;
  }

  tick(force = false) {
    this._start = this._start || Date.now();

    // Force indicates that the tick must run even the timer metadata
    // says we are not animating.

    if (force !== true) {
      if (this._timer) {
        if (this._timer.stop_at <= Date.now()) {
          console.log('Timer ending');
          this._timer.stop();
        }
      }
    }
    /*
    for (const renderer of this.renderers.values()) {
      try {
        // renderer.tick()
      } catch (err) {
        this._timer.stop();
        throw err;
      }
    } */
  }
}

function window_transform(x_scale, y_scale) {
  // width and height are svg parameters; x and y scales project from the data x and y into the
  // the webgl space.

  // Given two d3 scales in coordinate space, create two matrices that project from the original
  // space into [-1, 1] webgl space.

  function gap(array) {
    // Return the magnitude of a scale.
    return array[1] - array[0];
  }

  const x_mid = mean(x_scale.domain());
  const y_mid = mean(y_scale.domain());

  const xmulti = gap(x_scale.range()) / gap(x_scale.domain());
  const ymulti = gap(y_scale.range()) / gap(y_scale.domain());

  // translates from data space to scaled space.
  const m1 = [
    // transform by the scale;
    [xmulti, 0, -xmulti * x_mid + mean(x_scale.range())],
    [0, ymulti, -ymulti * y_mid + mean(y_scale.range())],
    [0, 0, 1],
  ];

  // Note--at the end, you need to multiply by this matrix.
  // I calculate it directly on the GPU.
  // translate from scaled space to webgl space.
  // The '2' here is because webgl space runs from -1 to 1.
  /* const m2 = [
    [2 / width, 0, -1],
    [0, - 2 / height, 1],
    [0, 0, 1]
  ] */

  return m1;
}

function label_from_point(point, defaults) {
  // defaults: a Set of keys to include.
  let output = '<dl>';
  const nope = new Set([
    'x', 'y', 'ix', 'bookstack', null, 'tile_key',
  ]);

  for (const [k, v] of point.entries()) {
    if (defaults) {
      if (!defaults.has(k)) {
        continue;
      }
    } else {
      if (nope.has(k)) { continue; }
      // Private value.
      if (k.match(/_dict_index/)) { continue; }
      // Don't show missing data.
      if (v === null) { continue; }
      // Don't show empty data.
      if (v === '') { continue; }
    }
    output += `<dt>${k}</dt>`;
    output += `<dd>${v}<dd>`;
  }
  return `${output}</dl>`;
}

var regl = {exports: {}};

(function (module, exports) {
(function (global, factory) {
    module.exports = factory() ;
}(commonjsGlobal, (function () {
var isTypedArray = function (x) {
  return (
    x instanceof Uint8Array ||
    x instanceof Uint16Array ||
    x instanceof Uint32Array ||
    x instanceof Int8Array ||
    x instanceof Int16Array ||
    x instanceof Int32Array ||
    x instanceof Float32Array ||
    x instanceof Float64Array ||
    x instanceof Uint8ClampedArray
  )
};

var extend = function (base, opts) {
  var keys = Object.keys(opts);
  for (var i = 0; i < keys.length; ++i) {
    base[keys[i]] = opts[keys[i]];
  }
  return base
};

// Error checking and parameter validation.
//
// Statements for the form `check.someProcedure(...)` get removed by
// a browserify transform for optimized/minified bundles.
//
/* globals atob */
var endl = '\n';

// only used for extracting shader names.  if atob not present, then errors
// will be slightly crappier
function decodeB64 (str) {
  if (typeof atob !== 'undefined') {
    return atob(str)
  }
  return 'base64:' + str
}

function raise (message) {
  var error = new Error('(regl) ' + message);
  console.error(error);
  throw error
}

function check (pred, message) {
  if (!pred) {
    raise(message);
  }
}

function encolon (message) {
  if (message) {
    return ': ' + message
  }
  return ''
}

function checkParameter (param, possibilities, message) {
  if (!(param in possibilities)) {
    raise('unknown parameter (' + param + ')' + encolon(message) +
          '. possible values: ' + Object.keys(possibilities).join());
  }
}

function checkIsTypedArray (data, message) {
  if (!isTypedArray(data)) {
    raise(
      'invalid parameter type' + encolon(message) +
      '. must be a typed array');
  }
}

function standardTypeEh (value, type) {
  switch (type) {
    case 'number': return typeof value === 'number'
    case 'object': return typeof value === 'object'
    case 'string': return typeof value === 'string'
    case 'boolean': return typeof value === 'boolean'
    case 'function': return typeof value === 'function'
    case 'undefined': return typeof value === 'undefined'
    case 'symbol': return typeof value === 'symbol'
  }
}

function checkTypeOf (value, type, message) {
  if (!standardTypeEh(value, type)) {
    raise(
      'invalid parameter type' + encolon(message) +
      '. expected ' + type + ', got ' + (typeof value));
  }
}

function checkNonNegativeInt (value, message) {
  if (!((value >= 0) &&
        ((value | 0) === value))) {
    raise('invalid parameter type, (' + value + ')' + encolon(message) +
          '. must be a nonnegative integer');
  }
}

function checkOneOf (value, list, message) {
  if (list.indexOf(value) < 0) {
    raise('invalid value' + encolon(message) + '. must be one of: ' + list);
  }
}

var constructorKeys = [
  'gl',
  'canvas',
  'container',
  'attributes',
  'pixelRatio',
  'extensions',
  'optionalExtensions',
  'profile',
  'onDone'
];

function checkConstructor (obj) {
  Object.keys(obj).forEach(function (key) {
    if (constructorKeys.indexOf(key) < 0) {
      raise('invalid regl constructor argument "' + key + '". must be one of ' + constructorKeys);
    }
  });
}

function leftPad (str, n) {
  str = str + '';
  while (str.length < n) {
    str = ' ' + str;
  }
  return str
}

function ShaderFile () {
  this.name = 'unknown';
  this.lines = [];
  this.index = {};
  this.hasErrors = false;
}

function ShaderLine (number, line) {
  this.number = number;
  this.line = line;
  this.errors = [];
}

function ShaderError (fileNumber, lineNumber, message) {
  this.file = fileNumber;
  this.line = lineNumber;
  this.message = message;
}

function guessCommand () {
  var error = new Error();
  var stack = (error.stack || error).toString();
  var pat = /compileProcedure.*\n\s*at.*\((.*)\)/.exec(stack);
  if (pat) {
    return pat[1]
  }
  var pat2 = /compileProcedure.*\n\s*at\s+(.*)(\n|$)/.exec(stack);
  if (pat2) {
    return pat2[1]
  }
  return 'unknown'
}

function guessCallSite () {
  var error = new Error();
  var stack = (error.stack || error).toString();
  var pat = /at REGLCommand.*\n\s+at.*\((.*)\)/.exec(stack);
  if (pat) {
    return pat[1]
  }
  var pat2 = /at REGLCommand.*\n\s+at\s+(.*)\n/.exec(stack);
  if (pat2) {
    return pat2[1]
  }
  return 'unknown'
}

function parseSource (source, command) {
  var lines = source.split('\n');
  var lineNumber = 1;
  var fileNumber = 0;
  var files = {
    unknown: new ShaderFile(),
    0: new ShaderFile()
  };
  files.unknown.name = files[0].name = command || guessCommand();
  files.unknown.lines.push(new ShaderLine(0, ''));
  for (var i = 0; i < lines.length; ++i) {
    var line = lines[i];
    var parts = /^\s*#\s*(\w+)\s+(.+)\s*$/.exec(line);
    if (parts) {
      switch (parts[1]) {
        case 'line':
          var lineNumberInfo = /(\d+)(\s+\d+)?/.exec(parts[2]);
          if (lineNumberInfo) {
            lineNumber = lineNumberInfo[1] | 0;
            if (lineNumberInfo[2]) {
              fileNumber = lineNumberInfo[2] | 0;
              if (!(fileNumber in files)) {
                files[fileNumber] = new ShaderFile();
              }
            }
          }
          break
        case 'define':
          var nameInfo = /SHADER_NAME(_B64)?\s+(.*)$/.exec(parts[2]);
          if (nameInfo) {
            files[fileNumber].name = (nameInfo[1]
              ? decodeB64(nameInfo[2])
              : nameInfo[2]);
          }
          break
      }
    }
    files[fileNumber].lines.push(new ShaderLine(lineNumber++, line));
  }
  Object.keys(files).forEach(function (fileNumber) {
    var file = files[fileNumber];
    file.lines.forEach(function (line) {
      file.index[line.number] = line;
    });
  });
  return files
}

function parseErrorLog (errLog) {
  var result = [];
  errLog.split('\n').forEach(function (errMsg) {
    if (errMsg.length < 5) {
      return
    }
    var parts = /^ERROR:\s+(\d+):(\d+):\s*(.*)$/.exec(errMsg);
    if (parts) {
      result.push(new ShaderError(
        parts[1] | 0,
        parts[2] | 0,
        parts[3].trim()));
    } else if (errMsg.length > 0) {
      result.push(new ShaderError('unknown', 0, errMsg));
    }
  });
  return result
}

function annotateFiles (files, errors) {
  errors.forEach(function (error) {
    var file = files[error.file];
    if (file) {
      var line = file.index[error.line];
      if (line) {
        line.errors.push(error);
        file.hasErrors = true;
        return
      }
    }
    files.unknown.hasErrors = true;
    files.unknown.lines[0].errors.push(error);
  });
}

function checkShaderError (gl, shader, source, type, command) {
  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
    var errLog = gl.getShaderInfoLog(shader);
    var typeName = type === gl.FRAGMENT_SHADER ? 'fragment' : 'vertex';
    checkCommandType(source, 'string', typeName + ' shader source must be a string', command);
    var files = parseSource(source, command);
    var errors = parseErrorLog(errLog);
    annotateFiles(files, errors);

    Object.keys(files).forEach(function (fileNumber) {
      var file = files[fileNumber];
      if (!file.hasErrors) {
        return
      }

      var strings = [''];
      var styles = [''];

      function push (str, style) {
        strings.push(str);
        styles.push(style || '');
      }

      push('file number ' + fileNumber + ': ' + file.name + '\n', 'color:red;text-decoration:underline;font-weight:bold');

      file.lines.forEach(function (line) {
        if (line.errors.length > 0) {
          push(leftPad(line.number, 4) + '|  ', 'background-color:yellow; font-weight:bold');
          push(line.line + endl, 'color:red; background-color:yellow; font-weight:bold');

          // try to guess token
          var offset = 0;
          line.errors.forEach(function (error) {
            var message = error.message;
            var token = /^\s*'(.*)'\s*:\s*(.*)$/.exec(message);
            if (token) {
              var tokenPat = token[1];
              message = token[2];
              switch (tokenPat) {
                case 'assign':
                  tokenPat = '=';
                  break
              }
              offset = Math.max(line.line.indexOf(tokenPat, offset), 0);
            } else {
              offset = 0;
            }

            push(leftPad('| ', 6));
            push(leftPad('^^^', offset + 3) + endl, 'font-weight:bold');
            push(leftPad('| ', 6));
            push(message + endl, 'font-weight:bold');
          });
          push(leftPad('| ', 6) + endl);
        } else {
          push(leftPad(line.number, 4) + '|  ');
          push(line.line + endl, 'color:red');
        }
      });
      if (typeof document !== 'undefined' && !window.chrome) {
        styles[0] = strings.join('%c');
        console.log.apply(console, styles);
      } else {
        console.log(strings.join(''));
      }
    });

    check.raise('Error compiling ' + typeName + ' shader, ' + files[0].name);
  }
}

function checkLinkError (gl, program, fragShader, vertShader, command) {
  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
    var errLog = gl.getProgramInfoLog(program);
    var fragParse = parseSource(fragShader, command);
    var vertParse = parseSource(vertShader, command);

    var header = 'Error linking program with vertex shader, "' +
      vertParse[0].name + '", and fragment shader "' + fragParse[0].name + '"';

    if (typeof document !== 'undefined') {
      console.log('%c' + header + endl + '%c' + errLog,
        'color:red;text-decoration:underline;font-weight:bold',
        'color:red');
    } else {
      console.log(header + endl + errLog);
    }
    check.raise(header);
  }
}

function saveCommandRef (object) {
  object._commandRef = guessCommand();
}

function saveDrawCommandInfo (opts, uniforms, attributes, stringStore) {
  saveCommandRef(opts);

  function id (str) {
    if (str) {
      return stringStore.id(str)
    }
    return 0
  }
  opts._fragId = id(opts.static.frag);
  opts._vertId = id(opts.static.vert);

  function addProps (dict, set) {
    Object.keys(set).forEach(function (u) {
      dict[stringStore.id(u)] = true;
    });
  }

  var uniformSet = opts._uniformSet = {};
  addProps(uniformSet, uniforms.static);
  addProps(uniformSet, uniforms.dynamic);

  var attributeSet = opts._attributeSet = {};
  addProps(attributeSet, attributes.static);
  addProps(attributeSet, attributes.dynamic);

  opts._hasCount = (
    'count' in opts.static ||
    'count' in opts.dynamic ||
    'elements' in opts.static ||
    'elements' in opts.dynamic);
}

function commandRaise (message, command) {
  var callSite = guessCallSite();
  raise(message +
    ' in command ' + (command || guessCommand()) +
    (callSite === 'unknown' ? '' : ' called from ' + callSite));
}

function checkCommand (pred, message, command) {
  if (!pred) {
    commandRaise(message, command || guessCommand());
  }
}

function checkParameterCommand (param, possibilities, message, command) {
  if (!(param in possibilities)) {
    commandRaise(
      'unknown parameter (' + param + ')' + encolon(message) +
      '. possible values: ' + Object.keys(possibilities).join(),
      command || guessCommand());
  }
}

function checkCommandType (value, type, message, command) {
  if (!standardTypeEh(value, type)) {
    commandRaise(
      'invalid parameter type' + encolon(message) +
      '. expected ' + type + ', got ' + (typeof value),
      command || guessCommand());
  }
}

function checkOptional (block) {
  block();
}

function checkFramebufferFormat (attachment, texFormats, rbFormats) {
  if (attachment.texture) {
    checkOneOf(
      attachment.texture._texture.internalformat,
      texFormats,
      'unsupported texture format for attachment');
  } else {
    checkOneOf(
      attachment.renderbuffer._renderbuffer.format,
      rbFormats,
      'unsupported renderbuffer format for attachment');
  }
}

var GL_CLAMP_TO_EDGE = 0x812F;

var GL_NEAREST = 0x2600;
var GL_NEAREST_MIPMAP_NEAREST = 0x2700;
var GL_LINEAR_MIPMAP_NEAREST = 0x2701;
var GL_NEAREST_MIPMAP_LINEAR = 0x2702;
var GL_LINEAR_MIPMAP_LINEAR = 0x2703;

var GL_BYTE = 5120;
var GL_UNSIGNED_BYTE = 5121;
var GL_SHORT = 5122;
var GL_UNSIGNED_SHORT = 5123;
var GL_INT = 5124;
var GL_UNSIGNED_INT = 5125;
var GL_FLOAT = 5126;

var GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
var GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
var GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
var GL_UNSIGNED_INT_24_8_WEBGL = 0x84FA;

var GL_HALF_FLOAT_OES = 0x8D61;

var TYPE_SIZE = {};

TYPE_SIZE[GL_BYTE] =
TYPE_SIZE[GL_UNSIGNED_BYTE] = 1;

TYPE_SIZE[GL_SHORT] =
TYPE_SIZE[GL_UNSIGNED_SHORT] =
TYPE_SIZE[GL_HALF_FLOAT_OES] =
TYPE_SIZE[GL_UNSIGNED_SHORT_5_6_5] =
TYPE_SIZE[GL_UNSIGNED_SHORT_4_4_4_4] =
TYPE_SIZE[GL_UNSIGNED_SHORT_5_5_5_1] = 2;

TYPE_SIZE[GL_INT] =
TYPE_SIZE[GL_UNSIGNED_INT] =
TYPE_SIZE[GL_FLOAT] =
TYPE_SIZE[GL_UNSIGNED_INT_24_8_WEBGL] = 4;

function pixelSize (type, channels) {
  if (type === GL_UNSIGNED_SHORT_5_5_5_1 ||
      type === GL_UNSIGNED_SHORT_4_4_4_4 ||
      type === GL_UNSIGNED_SHORT_5_6_5) {
    return 2
  } else if (type === GL_UNSIGNED_INT_24_8_WEBGL) {
    return 4
  } else {
    return TYPE_SIZE[type] * channels
  }
}

function isPow2 (v) {
  return !(v & (v - 1)) && (!!v)
}

function checkTexture2D (info, mipData, limits) {
  var i;
  var w = mipData.width;
  var h = mipData.height;
  var c = mipData.channels;

  // Check texture shape
  check(w > 0 && w <= limits.maxTextureSize &&
        h > 0 && h <= limits.maxTextureSize,
  'invalid texture shape');

  // check wrap mode
  if (info.wrapS !== GL_CLAMP_TO_EDGE || info.wrapT !== GL_CLAMP_TO_EDGE) {
    check(isPow2(w) && isPow2(h),
      'incompatible wrap mode for texture, both width and height must be power of 2');
  }

  if (mipData.mipmask === 1) {
    if (w !== 1 && h !== 1) {
      check(
        info.minFilter !== GL_NEAREST_MIPMAP_NEAREST &&
        info.minFilter !== GL_NEAREST_MIPMAP_LINEAR &&
        info.minFilter !== GL_LINEAR_MIPMAP_NEAREST &&
        info.minFilter !== GL_LINEAR_MIPMAP_LINEAR,
        'min filter requires mipmap');
    }
  } else {
    // texture must be power of 2
    check(isPow2(w) && isPow2(h),
      'texture must be a square power of 2 to support mipmapping');
    check(mipData.mipmask === (w << 1) - 1,
      'missing or incomplete mipmap data');
  }

  if (mipData.type === GL_FLOAT) {
    if (limits.extensions.indexOf('oes_texture_float_linear') < 0) {
      check(info.minFilter === GL_NEAREST && info.magFilter === GL_NEAREST,
        'filter not supported, must enable oes_texture_float_linear');
    }
    check(!info.genMipmaps,
      'mipmap generation not supported with float textures');
  }

  // check image complete
  var mipimages = mipData.images;
  for (i = 0; i < 16; ++i) {
    if (mipimages[i]) {
      var mw = w >> i;
      var mh = h >> i;
      check(mipData.mipmask & (1 << i), 'missing mipmap data');

      var img = mipimages[i];

      check(
        img.width === mw &&
        img.height === mh,
        'invalid shape for mip images');

      check(
        img.format === mipData.format &&
        img.internalformat === mipData.internalformat &&
        img.type === mipData.type,
        'incompatible type for mip image');

      if (img.compressed) ; else if (img.data) {
        // check(img.data.byteLength === mw * mh *
        // Math.max(pixelSize(img.type, c), img.unpackAlignment),
        var rowSize = Math.ceil(pixelSize(img.type, c) * mw / img.unpackAlignment) * img.unpackAlignment;
        check(img.data.byteLength === rowSize * mh,
          'invalid data for image, buffer size is inconsistent with image format');
      } else if (img.element) ; else if (img.copy) ;
    } else if (!info.genMipmaps) {
      check((mipData.mipmask & (1 << i)) === 0, 'extra mipmap data');
    }
  }

  if (mipData.compressed) {
    check(!info.genMipmaps,
      'mipmap generation for compressed images not supported');
  }
}

function checkTextureCube (texture, info, faces, limits) {
  var w = texture.width;
  var h = texture.height;
  var c = texture.channels;

  // Check texture shape
  check(
    w > 0 && w <= limits.maxTextureSize && h > 0 && h <= limits.maxTextureSize,
    'invalid texture shape');
  check(
    w === h,
    'cube map must be square');
  check(
    info.wrapS === GL_CLAMP_TO_EDGE && info.wrapT === GL_CLAMP_TO_EDGE,
    'wrap mode not supported by cube map');

  for (var i = 0; i < faces.length; ++i) {
    var face = faces[i];
    check(
      face.width === w && face.height === h,
      'inconsistent cube map face shape');

    if (info.genMipmaps) {
      check(!face.compressed,
        'can not generate mipmap for compressed textures');
      check(face.mipmask === 1,
        'can not specify mipmaps and generate mipmaps');
    }

    var mipmaps = face.images;
    for (var j = 0; j < 16; ++j) {
      var img = mipmaps[j];
      if (img) {
        var mw = w >> j;
        var mh = h >> j;
        check(face.mipmask & (1 << j), 'missing mipmap data');
        check(
          img.width === mw &&
          img.height === mh,
          'invalid shape for mip images');
        check(
          img.format === texture.format &&
          img.internalformat === texture.internalformat &&
          img.type === texture.type,
          'incompatible type for mip image');

        if (img.compressed) ; else if (img.data) {
          check(img.data.byteLength === mw * mh *
            Math.max(pixelSize(img.type, c), img.unpackAlignment),
          'invalid data for image, buffer size is inconsistent with image format');
        } else if (img.element) ; else if (img.copy) ;
      }
    }
  }
}

var check$1 = extend(check, {
  optional: checkOptional,
  raise: raise,
  commandRaise: commandRaise,
  command: checkCommand,
  parameter: checkParameter,
  commandParameter: checkParameterCommand,
  constructor: checkConstructor,
  type: checkTypeOf,
  commandType: checkCommandType,
  isTypedArray: checkIsTypedArray,
  nni: checkNonNegativeInt,
  oneOf: checkOneOf,
  shaderError: checkShaderError,
  linkError: checkLinkError,
  callSite: guessCallSite,
  saveCommandRef: saveCommandRef,
  saveDrawInfo: saveDrawCommandInfo,
  framebufferFormat: checkFramebufferFormat,
  guessCommand: guessCommand,
  texture2D: checkTexture2D,
  textureCube: checkTextureCube
});

var VARIABLE_COUNTER = 0;

var DYN_FUNC = 0;
var DYN_CONSTANT = 5;
var DYN_ARRAY = 6;

function DynamicVariable (type, data) {
  this.id = (VARIABLE_COUNTER++);
  this.type = type;
  this.data = data;
}

function escapeStr (str) {
  return str.replace(/\\/g, '\\\\').replace(/"/g, '\\"')
}

function splitParts (str) {
  if (str.length === 0) {
    return []
  }

  var firstChar = str.charAt(0);
  var lastChar = str.charAt(str.length - 1);

  if (str.length > 1 &&
      firstChar === lastChar &&
      (firstChar === '"' || firstChar === "'")) {
    return ['"' + escapeStr(str.substr(1, str.length - 2)) + '"']
  }

  var parts = /\[(false|true|null|\d+|'[^']*'|"[^"]*")\]/.exec(str);
  if (parts) {
    return (
      splitParts(str.substr(0, parts.index))
        .concat(splitParts(parts[1]))
        .concat(splitParts(str.substr(parts.index + parts[0].length)))
    )
  }

  var subparts = str.split('.');
  if (subparts.length === 1) {
    return ['"' + escapeStr(str) + '"']
  }

  var result = [];
  for (var i = 0; i < subparts.length; ++i) {
    result = result.concat(splitParts(subparts[i]));
  }
  return result
}

function toAccessorString (str) {
  return '[' + splitParts(str).join('][') + ']'
}

function defineDynamic (type, data) {
  return new DynamicVariable(type, toAccessorString(data + ''))
}

function isDynamic (x) {
  return (typeof x === 'function' && !x._reglType) || (x instanceof DynamicVariable)
}

function unbox (x, path) {
  if (typeof x === 'function') {
    return new DynamicVariable(DYN_FUNC, x)
  } else if (typeof x === 'number' || typeof x === 'boolean') {
    return new DynamicVariable(DYN_CONSTANT, x)
  } else if (Array.isArray(x)) {
    return new DynamicVariable(DYN_ARRAY, x.map(function (y, i) { return unbox(y, path + '[' + i + ']') }))
  } else if (x instanceof DynamicVariable) {
    return x
  }
  check$1(false, 'invalid option type in uniform ' + path);
}

var dynamic = {
  DynamicVariable: DynamicVariable,
  define: defineDynamic,
  isDynamic: isDynamic,
  unbox: unbox,
  accessor: toAccessorString
};

/* globals requestAnimationFrame, cancelAnimationFrame */
var raf = {
  next: typeof requestAnimationFrame === 'function'
    ? function (cb) { return requestAnimationFrame(cb) }
    : function (cb) { return setTimeout(cb, 16) },
  cancel: typeof cancelAnimationFrame === 'function'
    ? function (raf) { return cancelAnimationFrame(raf) }
    : clearTimeout
};

/* globals performance */
var clock = (typeof performance !== 'undefined' && performance.now)
    ? function () { return performance.now() }
    : function () { return +(new Date()) };

function createStringStore () {
  var stringIds = { '': 0 };
  var stringValues = [''];
  return {
    id: function (str) {
      var result = stringIds[str];
      if (result) {
        return result
      }
      result = stringIds[str] = stringValues.length;
      stringValues.push(str);
      return result
    },

    str: function (id) {
      return stringValues[id]
    }
  }
}

// Context and canvas creation helper functions
function createCanvas (element, onDone, pixelRatio) {
  var canvas = document.createElement('canvas');
  extend(canvas.style, {
    border: 0,
    margin: 0,
    padding: 0,
    top: 0,
    left: 0,
    width: '100%',
    height: '100%'
  });
  element.appendChild(canvas);

  if (element === document.body) {
    canvas.style.position = 'absolute';
    extend(element.style, {
      margin: 0,
      padding: 0
    });
  }

  function resize () {
    var w = window.innerWidth;
    var h = window.innerHeight;
    if (element !== document.body) {
      var bounds = canvas.getBoundingClientRect();
      w = bounds.right - bounds.left;
      h = bounds.bottom - bounds.top;
    }
    canvas.width = pixelRatio * w;
    canvas.height = pixelRatio * h;
  }

  var resizeObserver;
  if (element !== document.body && typeof ResizeObserver === 'function') {
    // ignore 'ResizeObserver' is not defined
    // eslint-disable-next-line
    resizeObserver = new ResizeObserver(function () {
      // setTimeout to avoid flicker
      setTimeout(resize);
    });
    resizeObserver.observe(element);
  } else {
    window.addEventListener('resize', resize, false);
  }

  function onDestroy () {
    if (resizeObserver) {
      resizeObserver.disconnect();
    } else {
      window.removeEventListener('resize', resize);
    }
    element.removeChild(canvas);
  }

  resize();

  return {
    canvas: canvas,
    onDestroy: onDestroy
  }
}

function createContext (canvas, contextAttributes) {
  function get (name) {
    try {
      return canvas.getContext(name, contextAttributes)
    } catch (e) {
      return null
    }
  }
  return (
    get('webgl') ||
    get('experimental-webgl') ||
    get('webgl-experimental')
  )
}

function isHTMLElement (obj) {
  return (
    typeof obj.nodeName === 'string' &&
    typeof obj.appendChild === 'function' &&
    typeof obj.getBoundingClientRect === 'function'
  )
}

function isWebGLContext (obj) {
  return (
    typeof obj.drawArrays === 'function' ||
    typeof obj.drawElements === 'function'
  )
}

function parseExtensions (input) {
  if (typeof input === 'string') {
    return input.split()
  }
  check$1(Array.isArray(input), 'invalid extension array');
  return input
}

function getElement (desc) {
  if (typeof desc === 'string') {
    check$1(typeof document !== 'undefined', 'not supported outside of DOM');
    return document.querySelector(desc)
  }
  return desc
}

function parseArgs (args_) {
  var args = args_ || {};
  var element, container, canvas, gl;
  var contextAttributes = {};
  var extensions = [];
  var optionalExtensions = [];
  var pixelRatio = (typeof window === 'undefined' ? 1 : window.devicePixelRatio);
  var profile = false;
  var onDone = function (err) {
    if (err) {
      check$1.raise(err);
    }
  };
  var onDestroy = function () {};
  if (typeof args === 'string') {
    check$1(
      typeof document !== 'undefined',
      'selector queries only supported in DOM enviroments');
    element = document.querySelector(args);
    check$1(element, 'invalid query string for element');
  } else if (typeof args === 'object') {
    if (isHTMLElement(args)) {
      element = args;
    } else if (isWebGLContext(args)) {
      gl = args;
      canvas = gl.canvas;
    } else {
      check$1.constructor(args);
      if ('gl' in args) {
        gl = args.gl;
      } else if ('canvas' in args) {
        canvas = getElement(args.canvas);
      } else if ('container' in args) {
        container = getElement(args.container);
      }
      if ('attributes' in args) {
        contextAttributes = args.attributes;
        check$1.type(contextAttributes, 'object', 'invalid context attributes');
      }
      if ('extensions' in args) {
        extensions = parseExtensions(args.extensions);
      }
      if ('optionalExtensions' in args) {
        optionalExtensions = parseExtensions(args.optionalExtensions);
      }
      if ('onDone' in args) {
        check$1.type(
          args.onDone, 'function',
          'invalid or missing onDone callback');
        onDone = args.onDone;
      }
      if ('profile' in args) {
        profile = !!args.profile;
      }
      if ('pixelRatio' in args) {
        pixelRatio = +args.pixelRatio;
        check$1(pixelRatio > 0, 'invalid pixel ratio');
      }
    }
  } else {
    check$1.raise('invalid arguments to regl');
  }

  if (element) {
    if (element.nodeName.toLowerCase() === 'canvas') {
      canvas = element;
    } else {
      container = element;
    }
  }

  if (!gl) {
    if (!canvas) {
      check$1(
        typeof document !== 'undefined',
        'must manually specify webgl context outside of DOM environments');
      var result = createCanvas(container || document.body, onDone, pixelRatio);
      if (!result) {
        return null
      }
      canvas = result.canvas;
      onDestroy = result.onDestroy;
    }
    // workaround for chromium bug, premultiplied alpha value is platform dependent
    if (contextAttributes.premultipliedAlpha === undefined) contextAttributes.premultipliedAlpha = true;
    gl = createContext(canvas, contextAttributes);
  }

  if (!gl) {
    onDestroy();
    onDone('webgl not supported, try upgrading your browser or graphics drivers http://get.webgl.org');
    return null
  }

  return {
    gl: gl,
    canvas: canvas,
    container: container,
    extensions: extensions,
    optionalExtensions: optionalExtensions,
    pixelRatio: pixelRatio,
    profile: profile,
    onDone: onDone,
    onDestroy: onDestroy
  }
}

function createExtensionCache (gl, config) {
  var extensions = {};

  function tryLoadExtension (name_) {
    check$1.type(name_, 'string', 'extension name must be string');
    var name = name_.toLowerCase();
    var ext;
    try {
      ext = extensions[name] = gl.getExtension(name);
    } catch (e) {}
    return !!ext
  }

  for (var i = 0; i < config.extensions.length; ++i) {
    var name = config.extensions[i];
    if (!tryLoadExtension(name)) {
      config.onDestroy();
      config.onDone('"' + name + '" extension is not supported by the current WebGL context, try upgrading your system or a different browser');
      return null
    }
  }

  config.optionalExtensions.forEach(tryLoadExtension);

  return {
    extensions: extensions,
    restore: function () {
      Object.keys(extensions).forEach(function (name) {
        if (extensions[name] && !tryLoadExtension(name)) {
          throw new Error('(regl): error restoring extension ' + name)
        }
      });
    }
  }
}

function loop (n, f) {
  var result = Array(n);
  for (var i = 0; i < n; ++i) {
    result[i] = f(i);
  }
  return result
}

var GL_BYTE$1 = 5120;
var GL_UNSIGNED_BYTE$2 = 5121;
var GL_SHORT$1 = 5122;
var GL_UNSIGNED_SHORT$1 = 5123;
var GL_INT$1 = 5124;
var GL_UNSIGNED_INT$1 = 5125;
var GL_FLOAT$2 = 5126;

function nextPow16 (v) {
  for (var i = 16; i <= (1 << 28); i *= 16) {
    if (v <= i) {
      return i
    }
  }
  return 0
}

function log2 (v) {
  var r, shift;
  r = (v > 0xFFFF) << 4;
  v >>>= r;
  shift = (v > 0xFF) << 3;
  v >>>= shift; r |= shift;
  shift = (v > 0xF) << 2;
  v >>>= shift; r |= shift;
  shift = (v > 0x3) << 1;
  v >>>= shift; r |= shift;
  return r | (v >> 1)
}

function createPool () {
  var bufferPool = loop(8, function () {
    return []
  });

  function alloc (n) {
    var sz = nextPow16(n);
    var bin = bufferPool[log2(sz) >> 2];
    if (bin.length > 0) {
      return bin.pop()
    }
    return new ArrayBuffer(sz)
  }

  function free (buf) {
    bufferPool[log2(buf.byteLength) >> 2].push(buf);
  }

  function allocType (type, n) {
    var result = null;
    switch (type) {
      case GL_BYTE$1:
        result = new Int8Array(alloc(n), 0, n);
        break
      case GL_UNSIGNED_BYTE$2:
        result = new Uint8Array(alloc(n), 0, n);
        break
      case GL_SHORT$1:
        result = new Int16Array(alloc(2 * n), 0, n);
        break
      case GL_UNSIGNED_SHORT$1:
        result = new Uint16Array(alloc(2 * n), 0, n);
        break
      case GL_INT$1:
        result = new Int32Array(alloc(4 * n), 0, n);
        break
      case GL_UNSIGNED_INT$1:
        result = new Uint32Array(alloc(4 * n), 0, n);
        break
      case GL_FLOAT$2:
        result = new Float32Array(alloc(4 * n), 0, n);
        break
      default:
        return null
    }
    if (result.length !== n) {
      return result.subarray(0, n)
    }
    return result
  }

  function freeType (array) {
    free(array.buffer);
  }

  return {
    alloc: alloc,
    free: free,
    allocType: allocType,
    freeType: freeType
  }
}

var pool = createPool();

// zero pool for initial zero data
pool.zero = createPool();

var GL_SUBPIXEL_BITS = 0x0D50;
var GL_RED_BITS = 0x0D52;
var GL_GREEN_BITS = 0x0D53;
var GL_BLUE_BITS = 0x0D54;
var GL_ALPHA_BITS = 0x0D55;
var GL_DEPTH_BITS = 0x0D56;
var GL_STENCIL_BITS = 0x0D57;

var GL_ALIASED_POINT_SIZE_RANGE = 0x846D;
var GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;

var GL_MAX_TEXTURE_SIZE = 0x0D33;
var GL_MAX_VIEWPORT_DIMS = 0x0D3A;
var GL_MAX_VERTEX_ATTRIBS = 0x8869;
var GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
var GL_MAX_VARYING_VECTORS = 0x8DFC;
var GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
var GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
var GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
var GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
var GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
var GL_MAX_RENDERBUFFER_SIZE = 0x84E8;

var GL_VENDOR = 0x1F00;
var GL_RENDERER = 0x1F01;
var GL_VERSION = 0x1F02;
var GL_SHADING_LANGUAGE_VERSION = 0x8B8C;

var GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF;

var GL_MAX_COLOR_ATTACHMENTS_WEBGL = 0x8CDF;
var GL_MAX_DRAW_BUFFERS_WEBGL = 0x8824;

var GL_TEXTURE_2D = 0x0DE1;
var GL_TEXTURE_CUBE_MAP = 0x8513;
var GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
var GL_TEXTURE0 = 0x84C0;
var GL_RGBA = 0x1908;
var GL_FLOAT$1 = 0x1406;
var GL_UNSIGNED_BYTE$1 = 0x1401;
var GL_FRAMEBUFFER = 0x8D40;
var GL_FRAMEBUFFER_COMPLETE = 0x8CD5;
var GL_COLOR_ATTACHMENT0 = 0x8CE0;
var GL_COLOR_BUFFER_BIT$1 = 0x4000;

var wrapLimits = function (gl, extensions) {
  var maxAnisotropic = 1;
  if (extensions.ext_texture_filter_anisotropic) {
    maxAnisotropic = gl.getParameter(GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT);
  }

  var maxDrawbuffers = 1;
  var maxColorAttachments = 1;
  if (extensions.webgl_draw_buffers) {
    maxDrawbuffers = gl.getParameter(GL_MAX_DRAW_BUFFERS_WEBGL);
    maxColorAttachments = gl.getParameter(GL_MAX_COLOR_ATTACHMENTS_WEBGL);
  }

  // detect if reading float textures is available (Safari doesn't support)
  var readFloat = !!extensions.oes_texture_float;
  if (readFloat) {
    var readFloatTexture = gl.createTexture();
    gl.bindTexture(GL_TEXTURE_2D, readFloatTexture);
    gl.texImage2D(GL_TEXTURE_2D, 0, GL_RGBA, 1, 1, 0, GL_RGBA, GL_FLOAT$1, null);

    var fbo = gl.createFramebuffer();
    gl.bindFramebuffer(GL_FRAMEBUFFER, fbo);
    gl.framebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, readFloatTexture, 0);
    gl.bindTexture(GL_TEXTURE_2D, null);

    if (gl.checkFramebufferStatus(GL_FRAMEBUFFER) !== GL_FRAMEBUFFER_COMPLETE) readFloat = false;

    else {
      gl.viewport(0, 0, 1, 1);
      gl.clearColor(1.0, 0.0, 0.0, 1.0);
      gl.clear(GL_COLOR_BUFFER_BIT$1);
      var pixels = pool.allocType(GL_FLOAT$1, 4);
      gl.readPixels(0, 0, 1, 1, GL_RGBA, GL_FLOAT$1, pixels);

      if (gl.getError()) readFloat = false;
      else {
        gl.deleteFramebuffer(fbo);
        gl.deleteTexture(readFloatTexture);

        readFloat = pixels[0] === 1.0;
      }

      pool.freeType(pixels);
    }
  }

  // detect non power of two cube textures support (IE doesn't support)
  var isIE = typeof navigator !== 'undefined' && (/MSIE/.test(navigator.userAgent) || /Trident\//.test(navigator.appVersion) || /Edge/.test(navigator.userAgent));

  var npotTextureCube = true;

  if (!isIE) {
    var cubeTexture = gl.createTexture();
    var data = pool.allocType(GL_UNSIGNED_BYTE$1, 36);
    gl.activeTexture(GL_TEXTURE0);
    gl.bindTexture(GL_TEXTURE_CUBE_MAP, cubeTexture);
    gl.texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X, 0, GL_RGBA, 3, 3, 0, GL_RGBA, GL_UNSIGNED_BYTE$1, data);
    pool.freeType(data);
    gl.bindTexture(GL_TEXTURE_CUBE_MAP, null);
    gl.deleteTexture(cubeTexture);
    npotTextureCube = !gl.getError();
  }

  return {
    // drawing buffer bit depth
    colorBits: [
      gl.getParameter(GL_RED_BITS),
      gl.getParameter(GL_GREEN_BITS),
      gl.getParameter(GL_BLUE_BITS),
      gl.getParameter(GL_ALPHA_BITS)
    ],
    depthBits: gl.getParameter(GL_DEPTH_BITS),
    stencilBits: gl.getParameter(GL_STENCIL_BITS),
    subpixelBits: gl.getParameter(GL_SUBPIXEL_BITS),

    // supported extensions
    extensions: Object.keys(extensions).filter(function (ext) {
      return !!extensions[ext]
    }),

    // max aniso samples
    maxAnisotropic: maxAnisotropic,

    // max draw buffers
    maxDrawbuffers: maxDrawbuffers,
    maxColorAttachments: maxColorAttachments,

    // point and line size ranges
    pointSizeDims: gl.getParameter(GL_ALIASED_POINT_SIZE_RANGE),
    lineWidthDims: gl.getParameter(GL_ALIASED_LINE_WIDTH_RANGE),
    maxViewportDims: gl.getParameter(GL_MAX_VIEWPORT_DIMS),
    maxCombinedTextureUnits: gl.getParameter(GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS),
    maxCubeMapSize: gl.getParameter(GL_MAX_CUBE_MAP_TEXTURE_SIZE),
    maxRenderbufferSize: gl.getParameter(GL_MAX_RENDERBUFFER_SIZE),
    maxTextureUnits: gl.getParameter(GL_MAX_TEXTURE_IMAGE_UNITS),
    maxTextureSize: gl.getParameter(GL_MAX_TEXTURE_SIZE),
    maxAttributes: gl.getParameter(GL_MAX_VERTEX_ATTRIBS),
    maxVertexUniforms: gl.getParameter(GL_MAX_VERTEX_UNIFORM_VECTORS),
    maxVertexTextureUnits: gl.getParameter(GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS),
    maxVaryingVectors: gl.getParameter(GL_MAX_VARYING_VECTORS),
    maxFragmentUniforms: gl.getParameter(GL_MAX_FRAGMENT_UNIFORM_VECTORS),

    // vendor info
    glsl: gl.getParameter(GL_SHADING_LANGUAGE_VERSION),
    renderer: gl.getParameter(GL_RENDERER),
    vendor: gl.getParameter(GL_VENDOR),
    version: gl.getParameter(GL_VERSION),

    // quirks
    readFloat: readFloat,
    npotTextureCube: npotTextureCube
  }
};

function isNDArrayLike (obj) {
  return (
    !!obj &&
    typeof obj === 'object' &&
    Array.isArray(obj.shape) &&
    Array.isArray(obj.stride) &&
    typeof obj.offset === 'number' &&
    obj.shape.length === obj.stride.length &&
    (Array.isArray(obj.data) ||
      isTypedArray(obj.data)))
}

var values = function (obj) {
  return Object.keys(obj).map(function (key) { return obj[key] })
};

var flattenUtils = {
  shape: arrayShape$1,
  flatten: flattenArray
};

function flatten1D (array, nx, out) {
  for (var i = 0; i < nx; ++i) {
    out[i] = array[i];
  }
}

function flatten2D (array, nx, ny, out) {
  var ptr = 0;
  for (var i = 0; i < nx; ++i) {
    var row = array[i];
    for (var j = 0; j < ny; ++j) {
      out[ptr++] = row[j];
    }
  }
}

function flatten3D (array, nx, ny, nz, out, ptr_) {
  var ptr = ptr_;
  for (var i = 0; i < nx; ++i) {
    var row = array[i];
    for (var j = 0; j < ny; ++j) {
      var col = row[j];
      for (var k = 0; k < nz; ++k) {
        out[ptr++] = col[k];
      }
    }
  }
}

function flattenRec (array, shape, level, out, ptr) {
  var stride = 1;
  for (var i = level + 1; i < shape.length; ++i) {
    stride *= shape[i];
  }
  var n = shape[level];
  if (shape.length - level === 4) {
    var nx = shape[level + 1];
    var ny = shape[level + 2];
    var nz = shape[level + 3];
    for (i = 0; i < n; ++i) {
      flatten3D(array[i], nx, ny, nz, out, ptr);
      ptr += stride;
    }
  } else {
    for (i = 0; i < n; ++i) {
      flattenRec(array[i], shape, level + 1, out, ptr);
      ptr += stride;
    }
  }
}

function flattenArray (array, shape, type, out_) {
  var sz = 1;
  if (shape.length) {
    for (var i = 0; i < shape.length; ++i) {
      sz *= shape[i];
    }
  } else {
    sz = 0;
  }
  var out = out_ || pool.allocType(type, sz);
  switch (shape.length) {
    case 0:
      break
    case 1:
      flatten1D(array, shape[0], out);
      break
    case 2:
      flatten2D(array, shape[0], shape[1], out);
      break
    case 3:
      flatten3D(array, shape[0], shape[1], shape[2], out, 0);
      break
    default:
      flattenRec(array, shape, 0, out, 0);
  }
  return out
}

function arrayShape$1 (array_) {
  var shape = [];
  for (var array = array_; array.length; array = array[0]) {
    shape.push(array.length);
  }
  return shape
}

var arrayTypes =  {
	"[object Int8Array]": 5120,
	"[object Int16Array]": 5122,
	"[object Int32Array]": 5124,
	"[object Uint8Array]": 5121,
	"[object Uint8ClampedArray]": 5121,
	"[object Uint16Array]": 5123,
	"[object Uint32Array]": 5125,
	"[object Float32Array]": 5126,
	"[object Float64Array]": 5121,
	"[object ArrayBuffer]": 5121
};

var int8 = 5120;
var int16 = 5122;
var int32 = 5124;
var uint8 = 5121;
var uint16 = 5123;
var uint32 = 5125;
var float = 5126;
var float32 = 5126;
var glTypes = {
	int8: int8,
	int16: int16,
	int32: int32,
	uint8: uint8,
	uint16: uint16,
	uint32: uint32,
	float: float,
	float32: float32
};

var dynamic$1 = 35048;
var stream = 35040;
var usageTypes = {
	dynamic: dynamic$1,
	stream: stream,
	"static": 35044
};

var arrayFlatten = flattenUtils.flatten;
var arrayShape = flattenUtils.shape;

var GL_STATIC_DRAW = 0x88E4;
var GL_STREAM_DRAW = 0x88E0;

var GL_UNSIGNED_BYTE$3 = 5121;
var GL_FLOAT$3 = 5126;

var DTYPES_SIZES = [];
DTYPES_SIZES[5120] = 1; // int8
DTYPES_SIZES[5122] = 2; // int16
DTYPES_SIZES[5124] = 4; // int32
DTYPES_SIZES[5121] = 1; // uint8
DTYPES_SIZES[5123] = 2; // uint16
DTYPES_SIZES[5125] = 4; // uint32
DTYPES_SIZES[5126] = 4; // float32

function typedArrayCode (data) {
  return arrayTypes[Object.prototype.toString.call(data)] | 0
}

function copyArray (out, inp) {
  for (var i = 0; i < inp.length; ++i) {
    out[i] = inp[i];
  }
}

function transpose (
  result, data, shapeX, shapeY, strideX, strideY, offset) {
  var ptr = 0;
  for (var i = 0; i < shapeX; ++i) {
    for (var j = 0; j < shapeY; ++j) {
      result[ptr++] = data[strideX * i + strideY * j + offset];
    }
  }
}

function wrapBufferState (gl, stats, config, destroyBuffer) {
  var bufferCount = 0;
  var bufferSet = {};

  function REGLBuffer (type) {
    this.id = bufferCount++;
    this.buffer = gl.createBuffer();
    this.type = type;
    this.usage = GL_STATIC_DRAW;
    this.byteLength = 0;
    this.dimension = 1;
    this.dtype = GL_UNSIGNED_BYTE$3;

    this.persistentData = null;

    if (config.profile) {
      this.stats = { size: 0 };
    }
  }

  REGLBuffer.prototype.bind = function () {
    gl.bindBuffer(this.type, this.buffer);
  };

  REGLBuffer.prototype.destroy = function () {
    destroy(this);
  };

  var streamPool = [];

  function createStream (type, data) {
    var buffer = streamPool.pop();
    if (!buffer) {
      buffer = new REGLBuffer(type);
    }
    buffer.bind();
    initBufferFromData(buffer, data, GL_STREAM_DRAW, 0, 1, false);
    return buffer
  }

  function destroyStream (stream$$1) {
    streamPool.push(stream$$1);
  }

  function initBufferFromTypedArray (buffer, data, usage) {
    buffer.byteLength = data.byteLength;
    gl.bufferData(buffer.type, data, usage);
  }

  function initBufferFromData (buffer, data, usage, dtype, dimension, persist) {
    var shape;
    buffer.usage = usage;
    if (Array.isArray(data)) {
      buffer.dtype = dtype || GL_FLOAT$3;
      if (data.length > 0) {
        var flatData;
        if (Array.isArray(data[0])) {
          shape = arrayShape(data);
          var dim = 1;
          for (var i = 1; i < shape.length; ++i) {
            dim *= shape[i];
          }
          buffer.dimension = dim;
          flatData = arrayFlatten(data, shape, buffer.dtype);
          initBufferFromTypedArray(buffer, flatData, usage);
          if (persist) {
            buffer.persistentData = flatData;
          } else {
            pool.freeType(flatData);
          }
        } else if (typeof data[0] === 'number') {
          buffer.dimension = dimension;
          var typedData = pool.allocType(buffer.dtype, data.length);
          copyArray(typedData, data);
          initBufferFromTypedArray(buffer, typedData, usage);
          if (persist) {
            buffer.persistentData = typedData;
          } else {
            pool.freeType(typedData);
          }
        } else if (isTypedArray(data[0])) {
          buffer.dimension = data[0].length;
          buffer.dtype = dtype || typedArrayCode(data[0]) || GL_FLOAT$3;
          flatData = arrayFlatten(
            data,
            [data.length, data[0].length],
            buffer.dtype);
          initBufferFromTypedArray(buffer, flatData, usage);
          if (persist) {
            buffer.persistentData = flatData;
          } else {
            pool.freeType(flatData);
          }
        } else {
          check$1.raise('invalid buffer data');
        }
      }
    } else if (isTypedArray(data)) {
      buffer.dtype = dtype || typedArrayCode(data);
      buffer.dimension = dimension;
      initBufferFromTypedArray(buffer, data, usage);
      if (persist) {
        buffer.persistentData = new Uint8Array(new Uint8Array(data.buffer));
      }
    } else if (isNDArrayLike(data)) {
      shape = data.shape;
      var stride = data.stride;
      var offset = data.offset;

      var shapeX = 0;
      var shapeY = 0;
      var strideX = 0;
      var strideY = 0;
      if (shape.length === 1) {
        shapeX = shape[0];
        shapeY = 1;
        strideX = stride[0];
        strideY = 0;
      } else if (shape.length === 2) {
        shapeX = shape[0];
        shapeY = shape[1];
        strideX = stride[0];
        strideY = stride[1];
      } else {
        check$1.raise('invalid shape');
      }

      buffer.dtype = dtype || typedArrayCode(data.data) || GL_FLOAT$3;
      buffer.dimension = shapeY;

      var transposeData = pool.allocType(buffer.dtype, shapeX * shapeY);
      transpose(transposeData,
        data.data,
        shapeX, shapeY,
        strideX, strideY,
        offset);
      initBufferFromTypedArray(buffer, transposeData, usage);
      if (persist) {
        buffer.persistentData = transposeData;
      } else {
        pool.freeType(transposeData);
      }
    } else if (data instanceof ArrayBuffer) {
      buffer.dtype = GL_UNSIGNED_BYTE$3;
      buffer.dimension = dimension;
      initBufferFromTypedArray(buffer, data, usage);
      if (persist) {
        buffer.persistentData = new Uint8Array(new Uint8Array(data));
      }
    } else {
      check$1.raise('invalid buffer data');
    }
  }

  function destroy (buffer) {
    stats.bufferCount--;

    // remove attribute link
    destroyBuffer(buffer);

    var handle = buffer.buffer;
    check$1(handle, 'buffer must not be deleted already');
    gl.deleteBuffer(handle);
    buffer.buffer = null;
    delete bufferSet[buffer.id];
  }

  function createBuffer (options, type, deferInit, persistent) {
    stats.bufferCount++;

    var buffer = new REGLBuffer(type);
    bufferSet[buffer.id] = buffer;

    function reglBuffer (options) {
      var usage = GL_STATIC_DRAW;
      var data = null;
      var byteLength = 0;
      var dtype = 0;
      var dimension = 1;
      if (Array.isArray(options) ||
          isTypedArray(options) ||
          isNDArrayLike(options) ||
          options instanceof ArrayBuffer) {
        data = options;
      } else if (typeof options === 'number') {
        byteLength = options | 0;
      } else if (options) {
        check$1.type(
          options, 'object',
          'buffer arguments must be an object, a number or an array');

        if ('data' in options) {
          check$1(
            data === null ||
            Array.isArray(data) ||
            isTypedArray(data) ||
            isNDArrayLike(data),
            'invalid data for buffer');
          data = options.data;
        }

        if ('usage' in options) {
          check$1.parameter(options.usage, usageTypes, 'invalid buffer usage');
          usage = usageTypes[options.usage];
        }

        if ('type' in options) {
          check$1.parameter(options.type, glTypes, 'invalid buffer type');
          dtype = glTypes[options.type];
        }

        if ('dimension' in options) {
          check$1.type(options.dimension, 'number', 'invalid dimension');
          dimension = options.dimension | 0;
        }

        if ('length' in options) {
          check$1.nni(byteLength, 'buffer length must be a nonnegative integer');
          byteLength = options.length | 0;
        }
      }

      buffer.bind();
      if (!data) {
        // #475
        if (byteLength) gl.bufferData(buffer.type, byteLength, usage);
        buffer.dtype = dtype || GL_UNSIGNED_BYTE$3;
        buffer.usage = usage;
        buffer.dimension = dimension;
        buffer.byteLength = byteLength;
      } else {
        initBufferFromData(buffer, data, usage, dtype, dimension, persistent);
      }

      if (config.profile) {
        buffer.stats.size = buffer.byteLength * DTYPES_SIZES[buffer.dtype];
      }

      return reglBuffer
    }

    function setSubData (data, offset) {
      check$1(offset + data.byteLength <= buffer.byteLength,
        'invalid buffer subdata call, buffer is too small. ' + ' Can\'t write data of size ' + data.byteLength + ' starting from offset ' + offset + ' to a buffer of size ' + buffer.byteLength);

      gl.bufferSubData(buffer.type, offset, data);
    }

    function subdata (data, offset_) {
      var offset = (offset_ || 0) | 0;
      var shape;
      buffer.bind();
      if (isTypedArray(data) || data instanceof ArrayBuffer) {
        setSubData(data, offset);
      } else if (Array.isArray(data)) {
        if (data.length > 0) {
          if (typeof data[0] === 'number') {
            var converted = pool.allocType(buffer.dtype, data.length);
            copyArray(converted, data);
            setSubData(converted, offset);
            pool.freeType(converted);
          } else if (Array.isArray(data[0]) || isTypedArray(data[0])) {
            shape = arrayShape(data);
            var flatData = arrayFlatten(data, shape, buffer.dtype);
            setSubData(flatData, offset);
            pool.freeType(flatData);
          } else {
            check$1.raise('invalid buffer data');
          }
        }
      } else if (isNDArrayLike(data)) {
        shape = data.shape;
        var stride = data.stride;

        var shapeX = 0;
        var shapeY = 0;
        var strideX = 0;
        var strideY = 0;
        if (shape.length === 1) {
          shapeX = shape[0];
          shapeY = 1;
          strideX = stride[0];
          strideY = 0;
        } else if (shape.length === 2) {
          shapeX = shape[0];
          shapeY = shape[1];
          strideX = stride[0];
          strideY = stride[1];
        } else {
          check$1.raise('invalid shape');
        }
        var dtype = Array.isArray(data.data)
          ? buffer.dtype
          : typedArrayCode(data.data);

        var transposeData = pool.allocType(dtype, shapeX * shapeY);
        transpose(transposeData,
          data.data,
          shapeX, shapeY,
          strideX, strideY,
          data.offset);
        setSubData(transposeData, offset);
        pool.freeType(transposeData);
      } else {
        check$1.raise('invalid data for buffer subdata');
      }
      return reglBuffer
    }

    if (!deferInit) {
      reglBuffer(options);
    }

    reglBuffer._reglType = 'buffer';
    reglBuffer._buffer = buffer;
    reglBuffer.subdata = subdata;
    if (config.profile) {
      reglBuffer.stats = buffer.stats;
    }
    reglBuffer.destroy = function () { destroy(buffer); };

    return reglBuffer
  }

  function restoreBuffers () {
    values(bufferSet).forEach(function (buffer) {
      buffer.buffer = gl.createBuffer();
      gl.bindBuffer(buffer.type, buffer.buffer);
      gl.bufferData(
        buffer.type, buffer.persistentData || buffer.byteLength, buffer.usage);
    });
  }

  if (config.profile) {
    stats.getTotalBufferSize = function () {
      var total = 0;
      // TODO: Right now, the streams are not part of the total count.
      Object.keys(bufferSet).forEach(function (key) {
        total += bufferSet[key].stats.size;
      });
      return total
    };
  }

  return {
    create: createBuffer,

    createStream: createStream,
    destroyStream: destroyStream,

    clear: function () {
      values(bufferSet).forEach(destroy);
      streamPool.forEach(destroy);
    },

    getBuffer: function (wrapper) {
      if (wrapper && wrapper._buffer instanceof REGLBuffer) {
        return wrapper._buffer
      }
      return null
    },

    restore: restoreBuffers,

    _initBuffer: initBufferFromData
  }
}

var points = 0;
var point = 0;
var lines = 1;
var line = 1;
var triangles = 4;
var triangle = 4;
var primTypes = {
	points: points,
	point: point,
	lines: lines,
	line: line,
	triangles: triangles,
	triangle: triangle,
	"line loop": 2,
	"line strip": 3,
	"triangle strip": 5,
	"triangle fan": 6
};

var GL_POINTS = 0;
var GL_LINES = 1;
var GL_TRIANGLES = 4;

var GL_BYTE$2 = 5120;
var GL_UNSIGNED_BYTE$4 = 5121;
var GL_SHORT$2 = 5122;
var GL_UNSIGNED_SHORT$2 = 5123;
var GL_INT$2 = 5124;
var GL_UNSIGNED_INT$2 = 5125;

var GL_ELEMENT_ARRAY_BUFFER = 34963;

var GL_STREAM_DRAW$1 = 0x88E0;
var GL_STATIC_DRAW$1 = 0x88E4;

function wrapElementsState (gl, extensions, bufferState, stats) {
  var elementSet = {};
  var elementCount = 0;

  var elementTypes = {
    'uint8': GL_UNSIGNED_BYTE$4,
    'uint16': GL_UNSIGNED_SHORT$2
  };

  if (extensions.oes_element_index_uint) {
    elementTypes.uint32 = GL_UNSIGNED_INT$2;
  }

  function REGLElementBuffer (buffer) {
    this.id = elementCount++;
    elementSet[this.id] = this;
    this.buffer = buffer;
    this.primType = GL_TRIANGLES;
    this.vertCount = 0;
    this.type = 0;
  }

  REGLElementBuffer.prototype.bind = function () {
    this.buffer.bind();
  };

  var bufferPool = [];

  function createElementStream (data) {
    var result = bufferPool.pop();
    if (!result) {
      result = new REGLElementBuffer(bufferState.create(
        null,
        GL_ELEMENT_ARRAY_BUFFER,
        true,
        false)._buffer);
    }
    initElements(result, data, GL_STREAM_DRAW$1, -1, -1, 0, 0);
    return result
  }

  function destroyElementStream (elements) {
    bufferPool.push(elements);
  }

  function initElements (
    elements,
    data,
    usage,
    prim,
    count,
    byteLength,
    type) {
    elements.buffer.bind();
    var dtype;
    if (data) {
      var predictedType = type;
      if (!type && (
        !isTypedArray(data) ||
         (isNDArrayLike(data) && !isTypedArray(data.data)))) {
        predictedType = extensions.oes_element_index_uint
          ? GL_UNSIGNED_INT$2
          : GL_UNSIGNED_SHORT$2;
      }
      bufferState._initBuffer(
        elements.buffer,
        data,
        usage,
        predictedType,
        3);
    } else {
      gl.bufferData(GL_ELEMENT_ARRAY_BUFFER, byteLength, usage);
      elements.buffer.dtype = dtype || GL_UNSIGNED_BYTE$4;
      elements.buffer.usage = usage;
      elements.buffer.dimension = 3;
      elements.buffer.byteLength = byteLength;
    }

    dtype = type;
    if (!type) {
      switch (elements.buffer.dtype) {
        case GL_UNSIGNED_BYTE$4:
        case GL_BYTE$2:
          dtype = GL_UNSIGNED_BYTE$4;
          break

        case GL_UNSIGNED_SHORT$2:
        case GL_SHORT$2:
          dtype = GL_UNSIGNED_SHORT$2;
          break

        case GL_UNSIGNED_INT$2:
        case GL_INT$2:
          dtype = GL_UNSIGNED_INT$2;
          break

        default:
          check$1.raise('unsupported type for element array');
      }
      elements.buffer.dtype = dtype;
    }
    elements.type = dtype;

    // Check oes_element_index_uint extension
    check$1(
      dtype !== GL_UNSIGNED_INT$2 ||
      !!extensions.oes_element_index_uint,
      '32 bit element buffers not supported, enable oes_element_index_uint first');

    // try to guess default primitive type and arguments
    var vertCount = count;
    if (vertCount < 0) {
      vertCount = elements.buffer.byteLength;
      if (dtype === GL_UNSIGNED_SHORT$2) {
        vertCount >>= 1;
      } else if (dtype === GL_UNSIGNED_INT$2) {
        vertCount >>= 2;
      }
    }
    elements.vertCount = vertCount;

    // try to guess primitive type from cell dimension
    var primType = prim;
    if (prim < 0) {
      primType = GL_TRIANGLES;
      var dimension = elements.buffer.dimension;
      if (dimension === 1) primType = GL_POINTS;
      if (dimension === 2) primType = GL_LINES;
      if (dimension === 3) primType = GL_TRIANGLES;
    }
    elements.primType = primType;
  }

  function destroyElements (elements) {
    stats.elementsCount--;

    check$1(elements.buffer !== null, 'must not double destroy elements');
    delete elementSet[elements.id];
    elements.buffer.destroy();
    elements.buffer = null;
  }

  function createElements (options, persistent) {
    var buffer = bufferState.create(null, GL_ELEMENT_ARRAY_BUFFER, true);
    var elements = new REGLElementBuffer(buffer._buffer);
    stats.elementsCount++;

    function reglElements (options) {
      if (!options) {
        buffer();
        elements.primType = GL_TRIANGLES;
        elements.vertCount = 0;
        elements.type = GL_UNSIGNED_BYTE$4;
      } else if (typeof options === 'number') {
        buffer(options);
        elements.primType = GL_TRIANGLES;
        elements.vertCount = options | 0;
        elements.type = GL_UNSIGNED_BYTE$4;
      } else {
        var data = null;
        var usage = GL_STATIC_DRAW$1;
        var primType = -1;
        var vertCount = -1;
        var byteLength = 0;
        var dtype = 0;
        if (Array.isArray(options) ||
            isTypedArray(options) ||
            isNDArrayLike(options)) {
          data = options;
        } else {
          check$1.type(options, 'object', 'invalid arguments for elements');
          if ('data' in options) {
            data = options.data;
            check$1(
              Array.isArray(data) ||
                isTypedArray(data) ||
                isNDArrayLike(data),
              'invalid data for element buffer');
          }
          if ('usage' in options) {
            check$1.parameter(
              options.usage,
              usageTypes,
              'invalid element buffer usage');
            usage = usageTypes[options.usage];
          }
          if ('primitive' in options) {
            check$1.parameter(
              options.primitive,
              primTypes,
              'invalid element buffer primitive');
            primType = primTypes[options.primitive];
          }
          if ('count' in options) {
            check$1(
              typeof options.count === 'number' && options.count >= 0,
              'invalid vertex count for elements');
            vertCount = options.count | 0;
          }
          if ('type' in options) {
            check$1.parameter(
              options.type,
              elementTypes,
              'invalid buffer type');
            dtype = elementTypes[options.type];
          }
          if ('length' in options) {
            byteLength = options.length | 0;
          } else {
            byteLength = vertCount;
            if (dtype === GL_UNSIGNED_SHORT$2 || dtype === GL_SHORT$2) {
              byteLength *= 2;
            } else if (dtype === GL_UNSIGNED_INT$2 || dtype === GL_INT$2) {
              byteLength *= 4;
            }
          }
        }
        initElements(
          elements,
          data,
          usage,
          primType,
          vertCount,
          byteLength,
          dtype);
      }

      return reglElements
    }

    reglElements(options);

    reglElements._reglType = 'elements';
    reglElements._elements = elements;
    reglElements.subdata = function (data, offset) {
      buffer.subdata(data, offset);
      return reglElements
    };
    reglElements.destroy = function () {
      destroyElements(elements);
    };

    return reglElements
  }

  return {
    create: createElements,
    createStream: createElementStream,
    destroyStream: destroyElementStream,
    getElements: function (elements) {
      if (typeof elements === 'function' &&
          elements._elements instanceof REGLElementBuffer) {
        return elements._elements
      }
      return null
    },
    clear: function () {
      values(elementSet).forEach(destroyElements);
    }
  }
}

var FLOAT = new Float32Array(1);
var INT = new Uint32Array(FLOAT.buffer);

var GL_UNSIGNED_SHORT$4 = 5123;

function convertToHalfFloat (array) {
  var ushorts = pool.allocType(GL_UNSIGNED_SHORT$4, array.length);

  for (var i = 0; i < array.length; ++i) {
    if (isNaN(array[i])) {
      ushorts[i] = 0xffff;
    } else if (array[i] === Infinity) {
      ushorts[i] = 0x7c00;
    } else if (array[i] === -Infinity) {
      ushorts[i] = 0xfc00;
    } else {
      FLOAT[0] = array[i];
      var x = INT[0];

      var sgn = (x >>> 31) << 15;
      var exp = ((x << 1) >>> 24) - 127;
      var frac = (x >> 13) & ((1 << 10) - 1);

      if (exp < -24) {
        // round non-representable denormals to 0
        ushorts[i] = sgn;
      } else if (exp < -14) {
        // handle denormals
        var s = -14 - exp;
        ushorts[i] = sgn + ((frac + (1 << 10)) >> s);
      } else if (exp > 15) {
        // round overflow to +/- Infinity
        ushorts[i] = sgn + 0x7c00;
      } else {
        // otherwise convert directly
        ushorts[i] = sgn + ((exp + 15) << 10) + frac;
      }
    }
  }

  return ushorts
}

function isArrayLike (s) {
  return Array.isArray(s) || isTypedArray(s)
}

var isPow2$1 = function (v) {
  return !(v & (v - 1)) && (!!v)
};

var GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;

var GL_TEXTURE_2D$1 = 0x0DE1;
var GL_TEXTURE_CUBE_MAP$1 = 0x8513;
var GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 = 0x8515;

var GL_RGBA$1 = 0x1908;
var GL_ALPHA = 0x1906;
var GL_RGB = 0x1907;
var GL_LUMINANCE = 0x1909;
var GL_LUMINANCE_ALPHA = 0x190A;

var GL_RGBA4 = 0x8056;
var GL_RGB5_A1 = 0x8057;
var GL_RGB565 = 0x8D62;

var GL_UNSIGNED_SHORT_4_4_4_4$1 = 0x8033;
var GL_UNSIGNED_SHORT_5_5_5_1$1 = 0x8034;
var GL_UNSIGNED_SHORT_5_6_5$1 = 0x8363;
var GL_UNSIGNED_INT_24_8_WEBGL$1 = 0x84FA;

var GL_DEPTH_COMPONENT = 0x1902;
var GL_DEPTH_STENCIL = 0x84F9;

var GL_SRGB_EXT = 0x8C40;
var GL_SRGB_ALPHA_EXT = 0x8C42;

var GL_HALF_FLOAT_OES$1 = 0x8D61;

var GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;
var GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;
var GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;
var GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;

var GL_COMPRESSED_RGB_ATC_WEBGL = 0x8C92;
var GL_COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL = 0x8C93;
var GL_COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL = 0x87EE;

var GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8C00;
var GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x8C01;
var GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8C02;
var GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x8C03;

var GL_COMPRESSED_RGB_ETC1_WEBGL = 0x8D64;

var GL_UNSIGNED_BYTE$5 = 0x1401;
var GL_UNSIGNED_SHORT$3 = 0x1403;
var GL_UNSIGNED_INT$3 = 0x1405;
var GL_FLOAT$4 = 0x1406;

var GL_TEXTURE_WRAP_S = 0x2802;
var GL_TEXTURE_WRAP_T = 0x2803;

var GL_REPEAT = 0x2901;
var GL_CLAMP_TO_EDGE$1 = 0x812F;
var GL_MIRRORED_REPEAT = 0x8370;

var GL_TEXTURE_MAG_FILTER = 0x2800;
var GL_TEXTURE_MIN_FILTER = 0x2801;

var GL_NEAREST$1 = 0x2600;
var GL_LINEAR = 0x2601;
var GL_NEAREST_MIPMAP_NEAREST$1 = 0x2700;
var GL_LINEAR_MIPMAP_NEAREST$1 = 0x2701;
var GL_NEAREST_MIPMAP_LINEAR$1 = 0x2702;
var GL_LINEAR_MIPMAP_LINEAR$1 = 0x2703;

var GL_GENERATE_MIPMAP_HINT = 0x8192;
var GL_DONT_CARE = 0x1100;
var GL_FASTEST = 0x1101;
var GL_NICEST = 0x1102;

var GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE;

var GL_UNPACK_ALIGNMENT = 0x0CF5;
var GL_UNPACK_FLIP_Y_WEBGL = 0x9240;
var GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL = 0x9241;
var GL_UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;

var GL_BROWSER_DEFAULT_WEBGL = 0x9244;

var GL_TEXTURE0$1 = 0x84C0;

var MIPMAP_FILTERS = [
  GL_NEAREST_MIPMAP_NEAREST$1,
  GL_NEAREST_MIPMAP_LINEAR$1,
  GL_LINEAR_MIPMAP_NEAREST$1,
  GL_LINEAR_MIPMAP_LINEAR$1
];

var CHANNELS_FORMAT = [
  0,
  GL_LUMINANCE,
  GL_LUMINANCE_ALPHA,
  GL_RGB,
  GL_RGBA$1
];

var FORMAT_CHANNELS = {};
FORMAT_CHANNELS[GL_LUMINANCE] =
FORMAT_CHANNELS[GL_ALPHA] =
FORMAT_CHANNELS[GL_DEPTH_COMPONENT] = 1;
FORMAT_CHANNELS[GL_DEPTH_STENCIL] =
FORMAT_CHANNELS[GL_LUMINANCE_ALPHA] = 2;
FORMAT_CHANNELS[GL_RGB] =
FORMAT_CHANNELS[GL_SRGB_EXT] = 3;
FORMAT_CHANNELS[GL_RGBA$1] =
FORMAT_CHANNELS[GL_SRGB_ALPHA_EXT] = 4;

function objectName (str) {
  return '[object ' + str + ']'
}

var CANVAS_CLASS = objectName('HTMLCanvasElement');
var OFFSCREENCANVAS_CLASS = objectName('OffscreenCanvas');
var CONTEXT2D_CLASS = objectName('CanvasRenderingContext2D');
var BITMAP_CLASS = objectName('ImageBitmap');
var IMAGE_CLASS = objectName('HTMLImageElement');
var VIDEO_CLASS = objectName('HTMLVideoElement');

var PIXEL_CLASSES = Object.keys(arrayTypes).concat([
  CANVAS_CLASS,
  OFFSCREENCANVAS_CLASS,
  CONTEXT2D_CLASS,
  BITMAP_CLASS,
  IMAGE_CLASS,
  VIDEO_CLASS
]);

// for every texture type, store
// the size in bytes.
var TYPE_SIZES = [];
TYPE_SIZES[GL_UNSIGNED_BYTE$5] = 1;
TYPE_SIZES[GL_FLOAT$4] = 4;
TYPE_SIZES[GL_HALF_FLOAT_OES$1] = 2;

TYPE_SIZES[GL_UNSIGNED_SHORT$3] = 2;
TYPE_SIZES[GL_UNSIGNED_INT$3] = 4;

var FORMAT_SIZES_SPECIAL = [];
FORMAT_SIZES_SPECIAL[GL_RGBA4] = 2;
FORMAT_SIZES_SPECIAL[GL_RGB5_A1] = 2;
FORMAT_SIZES_SPECIAL[GL_RGB565] = 2;
FORMAT_SIZES_SPECIAL[GL_DEPTH_STENCIL] = 4;

FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_S3TC_DXT1_EXT] = 0.5;
FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_S3TC_DXT1_EXT] = 0.5;
FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_S3TC_DXT3_EXT] = 1;
FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_S3TC_DXT5_EXT] = 1;

FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_ATC_WEBGL] = 0.5;
FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL] = 1;
FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL] = 1;

FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG] = 0.5;
FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG] = 0.25;
FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG] = 0.5;
FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG] = 0.25;

FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_ETC1_WEBGL] = 0.5;

function isNumericArray (arr) {
  return (
    Array.isArray(arr) &&
    (arr.length === 0 ||
    typeof arr[0] === 'number'))
}

function isRectArray (arr) {
  if (!Array.isArray(arr)) {
    return false
  }
  var width = arr.length;
  if (width === 0 || !isArrayLike(arr[0])) {
    return false
  }
  return true
}

function classString (x) {
  return Object.prototype.toString.call(x)
}

function isCanvasElement (object) {
  return classString(object) === CANVAS_CLASS
}

function isOffscreenCanvas (object) {
  return classString(object) === OFFSCREENCANVAS_CLASS
}

function isContext2D (object) {
  return classString(object) === CONTEXT2D_CLASS
}

function isBitmap (object) {
  return classString(object) === BITMAP_CLASS
}

function isImageElement (object) {
  return classString(object) === IMAGE_CLASS
}

function isVideoElement (object) {
  return classString(object) === VIDEO_CLASS
}

function isPixelData (object) {
  if (!object) {
    return false
  }
  var className = classString(object);
  if (PIXEL_CLASSES.indexOf(className) >= 0) {
    return true
  }
  return (
    isNumericArray(object) ||
    isRectArray(object) ||
    isNDArrayLike(object))
}

function typedArrayCode$1 (data) {
  return arrayTypes[Object.prototype.toString.call(data)] | 0
}

function convertData (result, data) {
  var n = data.length;
  switch (result.type) {
    case GL_UNSIGNED_BYTE$5:
    case GL_UNSIGNED_SHORT$3:
    case GL_UNSIGNED_INT$3:
    case GL_FLOAT$4:
      var converted = pool.allocType(result.type, n);
      converted.set(data);
      result.data = converted;
      break

    case GL_HALF_FLOAT_OES$1:
      result.data = convertToHalfFloat(data);
      break

    default:
      check$1.raise('unsupported texture type, must specify a typed array');
  }
}

function preConvert (image, n) {
  return pool.allocType(
    image.type === GL_HALF_FLOAT_OES$1
      ? GL_FLOAT$4
      : image.type, n)
}

function postConvert (image, data) {
  if (image.type === GL_HALF_FLOAT_OES$1) {
    image.data = convertToHalfFloat(data);
    pool.freeType(data);
  } else {
    image.data = data;
  }
}

function transposeData (image, array, strideX, strideY, strideC, offset) {
  var w = image.width;
  var h = image.height;
  var c = image.channels;
  var n = w * h * c;
  var data = preConvert(image, n);

  var p = 0;
  for (var i = 0; i < h; ++i) {
    for (var j = 0; j < w; ++j) {
      for (var k = 0; k < c; ++k) {
        data[p++] = array[strideX * j + strideY * i + strideC * k + offset];
      }
    }
  }

  postConvert(image, data);
}

function getTextureSize (format, type, width, height, isMipmap, isCube) {
  var s;
  if (typeof FORMAT_SIZES_SPECIAL[format] !== 'undefined') {
    // we have a special array for dealing with weird color formats such as RGB5A1
    s = FORMAT_SIZES_SPECIAL[format];
  } else {
    s = FORMAT_CHANNELS[format] * TYPE_SIZES[type];
  }

  if (isCube) {
    s *= 6;
  }

  if (isMipmap) {
    // compute the total size of all the mipmaps.
    var total = 0;

    var w = width;
    while (w >= 1) {
      // we can only use mipmaps on a square image,
      // so we can simply use the width and ignore the height:
      total += s * w * w;
      w /= 2;
    }
    return total
  } else {
    return s * width * height
  }
}

function createTextureSet (
  gl, extensions, limits, reglPoll, contextState, stats, config) {
  // -------------------------------------------------------
  // Initialize constants and parameter tables here
  // -------------------------------------------------------
  var mipmapHint = {
    "don't care": GL_DONT_CARE,
    'dont care': GL_DONT_CARE,
    'nice': GL_NICEST,
    'fast': GL_FASTEST
  };

  var wrapModes = {
    'repeat': GL_REPEAT,
    'clamp': GL_CLAMP_TO_EDGE$1,
    'mirror': GL_MIRRORED_REPEAT
  };

  var magFilters = {
    'nearest': GL_NEAREST$1,
    'linear': GL_LINEAR
  };

  var minFilters = extend({
    'mipmap': GL_LINEAR_MIPMAP_LINEAR$1,
    'nearest mipmap nearest': GL_NEAREST_MIPMAP_NEAREST$1,
    'linear mipmap nearest': GL_LINEAR_MIPMAP_NEAREST$1,
    'nearest mipmap linear': GL_NEAREST_MIPMAP_LINEAR$1,
    'linear mipmap linear': GL_LINEAR_MIPMAP_LINEAR$1
  }, magFilters);

  var colorSpace = {
    'none': 0,
    'browser': GL_BROWSER_DEFAULT_WEBGL
  };

  var textureTypes = {
    'uint8': GL_UNSIGNED_BYTE$5,
    'rgba4': GL_UNSIGNED_SHORT_4_4_4_4$1,
    'rgb565': GL_UNSIGNED_SHORT_5_6_5$1,
    'rgb5 a1': GL_UNSIGNED_SHORT_5_5_5_1$1
  };

  var textureFormats = {
    'alpha': GL_ALPHA,
    'luminance': GL_LUMINANCE,
    'luminance alpha': GL_LUMINANCE_ALPHA,
    'rgb': GL_RGB,
    'rgba': GL_RGBA$1,
    'rgba4': GL_RGBA4,
    'rgb5 a1': GL_RGB5_A1,
    'rgb565': GL_RGB565
  };

  var compressedTextureFormats = {};

  if (extensions.ext_srgb) {
    textureFormats.srgb = GL_SRGB_EXT;
    textureFormats.srgba = GL_SRGB_ALPHA_EXT;
  }

  if (extensions.oes_texture_float) {
    textureTypes.float32 = textureTypes.float = GL_FLOAT$4;
  }

  if (extensions.oes_texture_half_float) {
    textureTypes['float16'] = textureTypes['half float'] = GL_HALF_FLOAT_OES$1;
  }

  if (extensions.webgl_depth_texture) {
    extend(textureFormats, {
      'depth': GL_DEPTH_COMPONENT,
      'depth stencil': GL_DEPTH_STENCIL
    });

    extend(textureTypes, {
      'uint16': GL_UNSIGNED_SHORT$3,
      'uint32': GL_UNSIGNED_INT$3,
      'depth stencil': GL_UNSIGNED_INT_24_8_WEBGL$1
    });
  }

  if (extensions.webgl_compressed_texture_s3tc) {
    extend(compressedTextureFormats, {
      'rgb s3tc dxt1': GL_COMPRESSED_RGB_S3TC_DXT1_EXT,
      'rgba s3tc dxt1': GL_COMPRESSED_RGBA_S3TC_DXT1_EXT,
      'rgba s3tc dxt3': GL_COMPRESSED_RGBA_S3TC_DXT3_EXT,
      'rgba s3tc dxt5': GL_COMPRESSED_RGBA_S3TC_DXT5_EXT
    });
  }

  if (extensions.webgl_compressed_texture_atc) {
    extend(compressedTextureFormats, {
      'rgb atc': GL_COMPRESSED_RGB_ATC_WEBGL,
      'rgba atc explicit alpha': GL_COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL,
      'rgba atc interpolated alpha': GL_COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL
    });
  }

  if (extensions.webgl_compressed_texture_pvrtc) {
    extend(compressedTextureFormats, {
      'rgb pvrtc 4bppv1': GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG,
      'rgb pvrtc 2bppv1': GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG,
      'rgba pvrtc 4bppv1': GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG,
      'rgba pvrtc 2bppv1': GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG
    });
  }

  if (extensions.webgl_compressed_texture_etc1) {
    compressedTextureFormats['rgb etc1'] = GL_COMPRESSED_RGB_ETC1_WEBGL;
  }

  // Copy over all texture formats
  var supportedCompressedFormats = Array.prototype.slice.call(
    gl.getParameter(GL_COMPRESSED_TEXTURE_FORMATS));
  Object.keys(compressedTextureFormats).forEach(function (name) {
    var format = compressedTextureFormats[name];
    if (supportedCompressedFormats.indexOf(format) >= 0) {
      textureFormats[name] = format;
    }
  });

  var supportedFormats = Object.keys(textureFormats);
  limits.textureFormats = supportedFormats;

  // associate with every format string its
  // corresponding GL-value.
  var textureFormatsInvert = [];
  Object.keys(textureFormats).forEach(function (key) {
    var val = textureFormats[key];
    textureFormatsInvert[val] = key;
  });

  // associate with every type string its
  // corresponding GL-value.
  var textureTypesInvert = [];
  Object.keys(textureTypes).forEach(function (key) {
    var val = textureTypes[key];
    textureTypesInvert[val] = key;
  });

  var magFiltersInvert = [];
  Object.keys(magFilters).forEach(function (key) {
    var val = magFilters[key];
    magFiltersInvert[val] = key;
  });

  var minFiltersInvert = [];
  Object.keys(minFilters).forEach(function (key) {
    var val = minFilters[key];
    minFiltersInvert[val] = key;
  });

  var wrapModesInvert = [];
  Object.keys(wrapModes).forEach(function (key) {
    var val = wrapModes[key];
    wrapModesInvert[val] = key;
  });

  // colorFormats[] gives the format (channels) associated to an
  // internalformat
  var colorFormats = supportedFormats.reduce(function (color, key) {
    var glenum = textureFormats[key];
    if (glenum === GL_LUMINANCE ||
        glenum === GL_ALPHA ||
        glenum === GL_LUMINANCE ||
        glenum === GL_LUMINANCE_ALPHA ||
        glenum === GL_DEPTH_COMPONENT ||
        glenum === GL_DEPTH_STENCIL ||
        (extensions.ext_srgb &&
                (glenum === GL_SRGB_EXT ||
                 glenum === GL_SRGB_ALPHA_EXT))) {
      color[glenum] = glenum;
    } else if (glenum === GL_RGB5_A1 || key.indexOf('rgba') >= 0) {
      color[glenum] = GL_RGBA$1;
    } else {
      color[glenum] = GL_RGB;
    }
    return color
  }, {});

  function TexFlags () {
    // format info
    this.internalformat = GL_RGBA$1;
    this.format = GL_RGBA$1;
    this.type = GL_UNSIGNED_BYTE$5;
    this.compressed = false;

    // pixel storage
    this.premultiplyAlpha = false;
    this.flipY = false;
    this.unpackAlignment = 1;
    this.colorSpace = GL_BROWSER_DEFAULT_WEBGL;

    // shape info
    this.width = 0;
    this.height = 0;
    this.channels = 0;
  }

  function copyFlags (result, other) {
    result.internalformat = other.internalformat;
    result.format = other.format;
    result.type = other.type;
    result.compressed = other.compressed;

    result.premultiplyAlpha = other.premultiplyAlpha;
    result.flipY = other.flipY;
    result.unpackAlignment = other.unpackAlignment;
    result.colorSpace = other.colorSpace;

    result.width = other.width;
    result.height = other.height;
    result.channels = other.channels;
  }

  function parseFlags (flags, options) {
    if (typeof options !== 'object' || !options) {
      return
    }

    if ('premultiplyAlpha' in options) {
      check$1.type(options.premultiplyAlpha, 'boolean',
        'invalid premultiplyAlpha');
      flags.premultiplyAlpha = options.premultiplyAlpha;
    }

    if ('flipY' in options) {
      check$1.type(options.flipY, 'boolean',
        'invalid texture flip');
      flags.flipY = options.flipY;
    }

    if ('alignment' in options) {
      check$1.oneOf(options.alignment, [1, 2, 4, 8],
        'invalid texture unpack alignment');
      flags.unpackAlignment = options.alignment;
    }

    if ('colorSpace' in options) {
      check$1.parameter(options.colorSpace, colorSpace,
        'invalid colorSpace');
      flags.colorSpace = colorSpace[options.colorSpace];
    }

    if ('type' in options) {
      var type = options.type;
      check$1(extensions.oes_texture_float ||
        !(type === 'float' || type === 'float32'),
      'you must enable the OES_texture_float extension in order to use floating point textures.');
      check$1(extensions.oes_texture_half_float ||
        !(type === 'half float' || type === 'float16'),
      'you must enable the OES_texture_half_float extension in order to use 16-bit floating point textures.');
      check$1(extensions.webgl_depth_texture ||
        !(type === 'uint16' || type === 'uint32' || type === 'depth stencil'),
      'you must enable the WEBGL_depth_texture extension in order to use depth/stencil textures.');
      check$1.parameter(type, textureTypes,
        'invalid texture type');
      flags.type = textureTypes[type];
    }

    var w = flags.width;
    var h = flags.height;
    var c = flags.channels;
    var hasChannels = false;
    if ('shape' in options) {
      check$1(Array.isArray(options.shape) && options.shape.length >= 2,
        'shape must be an array');
      w = options.shape[0];
      h = options.shape[1];
      if (options.shape.length === 3) {
        c = options.shape[2];
        check$1(c > 0 && c <= 4, 'invalid number of channels');
        hasChannels = true;
      }
      check$1(w >= 0 && w <= limits.maxTextureSize, 'invalid width');
      check$1(h >= 0 && h <= limits.maxTextureSize, 'invalid height');
    } else {
      if ('radius' in options) {
        w = h = options.radius;
        check$1(w >= 0 && w <= limits.maxTextureSize, 'invalid radius');
      }
      if ('width' in options) {
        w = options.width;
        check$1(w >= 0 && w <= limits.maxTextureSize, 'invalid width');
      }
      if ('height' in options) {
        h = options.height;
        check$1(h >= 0 && h <= limits.maxTextureSize, 'invalid height');
      }
      if ('channels' in options) {
        c = options.channels;
        check$1(c > 0 && c <= 4, 'invalid number of channels');
        hasChannels = true;
      }
    }
    flags.width = w | 0;
    flags.height = h | 0;
    flags.channels = c | 0;

    var hasFormat = false;
    if ('format' in options) {
      var formatStr = options.format;
      check$1(extensions.webgl_depth_texture ||
        !(formatStr === 'depth' || formatStr === 'depth stencil'),
      'you must enable the WEBGL_depth_texture extension in order to use depth/stencil textures.');
      check$1.parameter(formatStr, textureFormats,
        'invalid texture format');
      var internalformat = flags.internalformat = textureFormats[formatStr];
      flags.format = colorFormats[internalformat];
      if (formatStr in textureTypes) {
        if (!('type' in options)) {
          flags.type = textureTypes[formatStr];
        }
      }
      if (formatStr in compressedTextureFormats) {
        flags.compressed = true;
      }
      hasFormat = true;
    }

    // Reconcile channels and format
    if (!hasChannels && hasFormat) {
      flags.channels = FORMAT_CHANNELS[flags.format];
    } else if (hasChannels && !hasFormat) {
      if (flags.channels !== CHANNELS_FORMAT[flags.format]) {
        flags.format = flags.internalformat = CHANNELS_FORMAT[flags.channels];
      }
    } else if (hasFormat && hasChannels) {
      check$1(
        flags.channels === FORMAT_CHANNELS[flags.format],
        'number of channels inconsistent with specified format');
    }
  }

  function setFlags (flags) {
    gl.pixelStorei(GL_UNPACK_FLIP_Y_WEBGL, flags.flipY);
    gl.pixelStorei(GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL, flags.premultiplyAlpha);
    gl.pixelStorei(GL_UNPACK_COLORSPACE_CONVERSION_WEBGL, flags.colorSpace);
    gl.pixelStorei(GL_UNPACK_ALIGNMENT, flags.unpackAlignment);
  }

  // -------------------------------------------------------
  // Tex image data
  // -------------------------------------------------------
  function TexImage () {
    TexFlags.call(this);

    this.xOffset = 0;
    this.yOffset = 0;

    // data
    this.data = null;
    this.needsFree = false;

    // html element
    this.element = null;

    // copyTexImage info
    this.needsCopy = false;
  }

  function parseImage (image, options) {
    var data = null;
    if (isPixelData(options)) {
      data = options;
    } else if (options) {
      check$1.type(options, 'object', 'invalid pixel data type');
      parseFlags(image, options);
      if ('x' in options) {
        image.xOffset = options.x | 0;
      }
      if ('y' in options) {
        image.yOffset = options.y | 0;
      }
      if (isPixelData(options.data)) {
        data = options.data;
      }
    }

    check$1(
      !image.compressed ||
      data instanceof Uint8Array,
      'compressed texture data must be stored in a uint8array');

    if (options.copy) {
      check$1(!data, 'can not specify copy and data field for the same texture');
      var viewW = contextState.viewportWidth;
      var viewH = contextState.viewportHeight;
      image.width = image.width || (viewW - image.xOffset);
      image.height = image.height || (viewH - image.yOffset);
      image.needsCopy = true;
      check$1(image.xOffset >= 0 && image.xOffset < viewW &&
            image.yOffset >= 0 && image.yOffset < viewH &&
            image.width > 0 && image.width <= viewW &&
            image.height > 0 && image.height <= viewH,
      'copy texture read out of bounds');
    } else if (!data) {
      image.width = image.width || 1;
      image.height = image.height || 1;
      image.channels = image.channels || 4;
    } else if (isTypedArray(data)) {
      image.channels = image.channels || 4;
      image.data = data;
      if (!('type' in options) && image.type === GL_UNSIGNED_BYTE$5) {
        image.type = typedArrayCode$1(data);
      }
    } else if (isNumericArray(data)) {
      image.channels = image.channels || 4;
      convertData(image, data);
      image.alignment = 1;
      image.needsFree = true;
    } else if (isNDArrayLike(data)) {
      var array = data.data;
      if (!Array.isArray(array) && image.type === GL_UNSIGNED_BYTE$5) {
        image.type = typedArrayCode$1(array);
      }
      var shape = data.shape;
      var stride = data.stride;
      var shapeX, shapeY, shapeC, strideX, strideY, strideC;
      if (shape.length === 3) {
        shapeC = shape[2];
        strideC = stride[2];
      } else {
        check$1(shape.length === 2, 'invalid ndarray pixel data, must be 2 or 3D');
        shapeC = 1;
        strideC = 1;
      }
      shapeX = shape[0];
      shapeY = shape[1];
      strideX = stride[0];
      strideY = stride[1];
      image.alignment = 1;
      image.width = shapeX;
      image.height = shapeY;
      image.channels = shapeC;
      image.format = image.internalformat = CHANNELS_FORMAT[shapeC];
      image.needsFree = true;
      transposeData(image, array, strideX, strideY, strideC, data.offset);
    } else if (isCanvasElement(data) || isOffscreenCanvas(data) || isContext2D(data)) {
      if (isCanvasElement(data) || isOffscreenCanvas(data)) {
        image.element = data;
      } else {
        image.element = data.canvas;
      }
      image.width = image.element.width;
      image.height = image.element.height;
      image.channels = 4;
    } else if (isBitmap(data)) {
      image.element = data;
      image.width = data.width;
      image.height = data.height;
      image.channels = 4;
    } else if (isImageElement(data)) {
      image.element = data;
      image.width = data.naturalWidth;
      image.height = data.naturalHeight;
      image.channels = 4;
    } else if (isVideoElement(data)) {
      image.element = data;
      image.width = data.videoWidth;
      image.height = data.videoHeight;
      image.channels = 4;
    } else if (isRectArray(data)) {
      var w = image.width || data[0].length;
      var h = image.height || data.length;
      var c = image.channels;
      if (isArrayLike(data[0][0])) {
        c = c || data[0][0].length;
      } else {
        c = c || 1;
      }
      var arrayShape = flattenUtils.shape(data);
      var n = 1;
      for (var dd = 0; dd < arrayShape.length; ++dd) {
        n *= arrayShape[dd];
      }
      var allocData = preConvert(image, n);
      flattenUtils.flatten(data, arrayShape, '', allocData);
      postConvert(image, allocData);
      image.alignment = 1;
      image.width = w;
      image.height = h;
      image.channels = c;
      image.format = image.internalformat = CHANNELS_FORMAT[c];
      image.needsFree = true;
    }

    if (image.type === GL_FLOAT$4) {
      check$1(limits.extensions.indexOf('oes_texture_float') >= 0,
        'oes_texture_float extension not enabled');
    } else if (image.type === GL_HALF_FLOAT_OES$1) {
      check$1(limits.extensions.indexOf('oes_texture_half_float') >= 0,
        'oes_texture_half_float extension not enabled');
    }

    // do compressed texture  validation here.
  }

  function setImage (info, target, miplevel) {
    var element = info.element;
    var data = info.data;
    var internalformat = info.internalformat;
    var format = info.format;
    var type = info.type;
    var width = info.width;
    var height = info.height;

    setFlags(info);

    if (element) {
      gl.texImage2D(target, miplevel, format, format, type, element);
    } else if (info.compressed) {
      gl.compressedTexImage2D(target, miplevel, internalformat, width, height, 0, data);
    } else if (info.needsCopy) {
      reglPoll();
      gl.copyTexImage2D(
        target, miplevel, format, info.xOffset, info.yOffset, width, height, 0);
    } else {
      gl.texImage2D(target, miplevel, format, width, height, 0, format, type, data || null);
    }
  }

  function setSubImage (info, target, x, y, miplevel) {
    var element = info.element;
    var data = info.data;
    var internalformat = info.internalformat;
    var format = info.format;
    var type = info.type;
    var width = info.width;
    var height = info.height;

    setFlags(info);

    if (element) {
      gl.texSubImage2D(
        target, miplevel, x, y, format, type, element);
    } else if (info.compressed) {
      gl.compressedTexSubImage2D(
        target, miplevel, x, y, internalformat, width, height, data);
    } else if (info.needsCopy) {
      reglPoll();
      gl.copyTexSubImage2D(
        target, miplevel, x, y, info.xOffset, info.yOffset, width, height);
    } else {
      gl.texSubImage2D(
        target, miplevel, x, y, width, height, format, type, data);
    }
  }

  // texImage pool
  var imagePool = [];

  function allocImage () {
    return imagePool.pop() || new TexImage()
  }

  function freeImage (image) {
    if (image.needsFree) {
      pool.freeType(image.data);
    }
    TexImage.call(image);
    imagePool.push(image);
  }

  // -------------------------------------------------------
  // Mip map
  // -------------------------------------------------------
  function MipMap () {
    TexFlags.call(this);

    this.genMipmaps = false;
    this.mipmapHint = GL_DONT_CARE;
    this.mipmask = 0;
    this.images = Array(16);
  }

  function parseMipMapFromShape (mipmap, width, height) {
    var img = mipmap.images[0] = allocImage();
    mipmap.mipmask = 1;
    img.width = mipmap.width = width;
    img.height = mipmap.height = height;
    img.channels = mipmap.channels = 4;
  }

  function parseMipMapFromObject (mipmap, options) {
    var imgData = null;
    if (isPixelData(options)) {
      imgData = mipmap.images[0] = allocImage();
      copyFlags(imgData, mipmap);
      parseImage(imgData, options);
      mipmap.mipmask = 1;
    } else {
      parseFlags(mipmap, options);
      if (Array.isArray(options.mipmap)) {
        var mipData = options.mipmap;
        for (var i = 0; i < mipData.length; ++i) {
          imgData = mipmap.images[i] = allocImage();
          copyFlags(imgData, mipmap);
          imgData.width >>= i;
          imgData.height >>= i;
          parseImage(imgData, mipData[i]);
          mipmap.mipmask |= (1 << i);
        }
      } else {
        imgData = mipmap.images[0] = allocImage();
        copyFlags(imgData, mipmap);
        parseImage(imgData, options);
        mipmap.mipmask = 1;
      }
    }
    copyFlags(mipmap, mipmap.images[0]);

    // For textures of the compressed format WEBGL_compressed_texture_s3tc
    // we must have that
    //
    // "When level equals zero width and height must be a multiple of 4.
    // When level is greater than 0 width and height must be 0, 1, 2 or a multiple of 4. "
    //
    // but we do not yet support having multiple mipmap levels for compressed textures,
    // so we only test for level zero.

    if (
      mipmap.compressed &&
      (
        mipmap.internalformat === GL_COMPRESSED_RGB_S3TC_DXT1_EXT ||
        mipmap.internalformat === GL_COMPRESSED_RGBA_S3TC_DXT1_EXT ||
        mipmap.internalformat === GL_COMPRESSED_RGBA_S3TC_DXT3_EXT ||
        mipmap.internalformat === GL_COMPRESSED_RGBA_S3TC_DXT5_EXT
      )
    ) {
      check$1(mipmap.width % 4 === 0 && mipmap.height % 4 === 0,
        'for compressed texture formats, mipmap level 0 must have width and height that are a multiple of 4');
    }
  }

  function setMipMap (mipmap, target) {
    var images = mipmap.images;
    for (var i = 0; i < images.length; ++i) {
      if (!images[i]) {
        return
      }
      setImage(images[i], target, i);
    }
  }

  var mipPool = [];

  function allocMipMap () {
    var result = mipPool.pop() || new MipMap();
    TexFlags.call(result);
    result.mipmask = 0;
    for (var i = 0; i < 16; ++i) {
      result.images[i] = null;
    }
    return result
  }

  function freeMipMap (mipmap) {
    var images = mipmap.images;
    for (var i = 0; i < images.length; ++i) {
      if (images[i]) {
        freeImage(images[i]);
      }
      images[i] = null;
    }
    mipPool.push(mipmap);
  }

  // -------------------------------------------------------
  // Tex info
  // -------------------------------------------------------
  function TexInfo () {
    this.minFilter = GL_NEAREST$1;
    this.magFilter = GL_NEAREST$1;

    this.wrapS = GL_CLAMP_TO_EDGE$1;
    this.wrapT = GL_CLAMP_TO_EDGE$1;

    this.anisotropic = 1;

    this.genMipmaps = false;
    this.mipmapHint = GL_DONT_CARE;
  }

  function parseTexInfo (info, options) {
    if ('min' in options) {
      var minFilter = options.min;
      check$1.parameter(minFilter, minFilters);
      info.minFilter = minFilters[minFilter];
      if (MIPMAP_FILTERS.indexOf(info.minFilter) >= 0 && !('faces' in options)) {
        info.genMipmaps = true;
      }
    }

    if ('mag' in options) {
      var magFilter = options.mag;
      check$1.parameter(magFilter, magFilters);
      info.magFilter = magFilters[magFilter];
    }

    var wrapS = info.wrapS;
    var wrapT = info.wrapT;
    if ('wrap' in options) {
      var wrap = options.wrap;
      if (typeof wrap === 'string') {
        check$1.parameter(wrap, wrapModes);
        wrapS = wrapT = wrapModes[wrap];
      } else if (Array.isArray(wrap)) {
        check$1.parameter(wrap[0], wrapModes);
        check$1.parameter(wrap[1], wrapModes);
        wrapS = wrapModes[wrap[0]];
        wrapT = wrapModes[wrap[1]];
      }
    } else {
      if ('wrapS' in options) {
        var optWrapS = options.wrapS;
        check$1.parameter(optWrapS, wrapModes);
        wrapS = wrapModes[optWrapS];
      }
      if ('wrapT' in options) {
        var optWrapT = options.wrapT;
        check$1.parameter(optWrapT, wrapModes);
        wrapT = wrapModes[optWrapT];
      }
    }
    info.wrapS = wrapS;
    info.wrapT = wrapT;

    if ('anisotropic' in options) {
      var anisotropic = options.anisotropic;
      check$1(typeof anisotropic === 'number' &&
         anisotropic >= 1 && anisotropic <= limits.maxAnisotropic,
      'aniso samples must be between 1 and ');
      info.anisotropic = options.anisotropic;
    }

    if ('mipmap' in options) {
      var hasMipMap = false;
      switch (typeof options.mipmap) {
        case 'string':
          check$1.parameter(options.mipmap, mipmapHint,
            'invalid mipmap hint');
          info.mipmapHint = mipmapHint[options.mipmap];
          info.genMipmaps = true;
          hasMipMap = true;
          break

        case 'boolean':
          hasMipMap = info.genMipmaps = options.mipmap;
          break

        case 'object':
          check$1(Array.isArray(options.mipmap), 'invalid mipmap type');
          info.genMipmaps = false;
          hasMipMap = true;
          break

        default:
          check$1.raise('invalid mipmap type');
      }
      if (hasMipMap && !('min' in options)) {
        info.minFilter = GL_NEAREST_MIPMAP_NEAREST$1;
      }
    }
  }

  function setTexInfo (info, target) {
    gl.texParameteri(target, GL_TEXTURE_MIN_FILTER, info.minFilter);
    gl.texParameteri(target, GL_TEXTURE_MAG_FILTER, info.magFilter);
    gl.texParameteri(target, GL_TEXTURE_WRAP_S, info.wrapS);
    gl.texParameteri(target, GL_TEXTURE_WRAP_T, info.wrapT);
    if (extensions.ext_texture_filter_anisotropic) {
      gl.texParameteri(target, GL_TEXTURE_MAX_ANISOTROPY_EXT, info.anisotropic);
    }
    if (info.genMipmaps) {
      gl.hint(GL_GENERATE_MIPMAP_HINT, info.mipmapHint);
      gl.generateMipmap(target);
    }
  }

  // -------------------------------------------------------
  // Full texture object
  // -------------------------------------------------------
  var textureCount = 0;
  var textureSet = {};
  var numTexUnits = limits.maxTextureUnits;
  var textureUnits = Array(numTexUnits).map(function () {
    return null
  });

  function REGLTexture (target) {
    TexFlags.call(this);
    this.mipmask = 0;
    this.internalformat = GL_RGBA$1;

    this.id = textureCount++;

    this.refCount = 1;

    this.target = target;
    this.texture = gl.createTexture();

    this.unit = -1;
    this.bindCount = 0;

    this.texInfo = new TexInfo();

    if (config.profile) {
      this.stats = { size: 0 };
    }
  }

  function tempBind (texture) {
    gl.activeTexture(GL_TEXTURE0$1);
    gl.bindTexture(texture.target, texture.texture);
  }

  function tempRestore () {
    var prev = textureUnits[0];
    if (prev) {
      gl.bindTexture(prev.target, prev.texture);
    } else {
      gl.bindTexture(GL_TEXTURE_2D$1, null);
    }
  }

  function destroy (texture) {
    var handle = texture.texture;
    check$1(handle, 'must not double destroy texture');
    var unit = texture.unit;
    var target = texture.target;
    if (unit >= 0) {
      gl.activeTexture(GL_TEXTURE0$1 + unit);
      gl.bindTexture(target, null);
      textureUnits[unit] = null;
    }
    gl.deleteTexture(handle);
    texture.texture = null;
    texture.params = null;
    texture.pixels = null;
    texture.refCount = 0;
    delete textureSet[texture.id];
    stats.textureCount--;
  }

  extend(REGLTexture.prototype, {
    bind: function () {
      var texture = this;
      texture.bindCount += 1;
      var unit = texture.unit;
      if (unit < 0) {
        for (var i = 0; i < numTexUnits; ++i) {
          var other = textureUnits[i];
          if (other) {
            if (other.bindCount > 0) {
              continue
            }
            other.unit = -1;
          }
          textureUnits[i] = texture;
          unit = i;
          break
        }
        if (unit >= numTexUnits) {
          check$1.raise('insufficient number of texture units');
        }
        if (config.profile && stats.maxTextureUnits < (unit + 1)) {
          stats.maxTextureUnits = unit + 1; // +1, since the units are zero-based
        }
        texture.unit = unit;
        gl.activeTexture(GL_TEXTURE0$1 + unit);
        gl.bindTexture(texture.target, texture.texture);
      }
      return unit
    },

    unbind: function () {
      this.bindCount -= 1;
    },

    decRef: function () {
      if (--this.refCount <= 0) {
        destroy(this);
      }
    }
  });

  function createTexture2D (a, b) {
    var texture = new REGLTexture(GL_TEXTURE_2D$1);
    textureSet[texture.id] = texture;
    stats.textureCount++;

    function reglTexture2D (a, b) {
      var texInfo = texture.texInfo;
      TexInfo.call(texInfo);
      var mipData = allocMipMap();

      if (typeof a === 'number') {
        if (typeof b === 'number') {
          parseMipMapFromShape(mipData, a | 0, b | 0);
        } else {
          parseMipMapFromShape(mipData, a | 0, a | 0);
        }
      } else if (a) {
        check$1.type(a, 'object', 'invalid arguments to regl.texture');
        parseTexInfo(texInfo, a);
        parseMipMapFromObject(mipData, a);
      } else {
        // empty textures get assigned a default shape of 1x1
        parseMipMapFromShape(mipData, 1, 1);
      }

      if (texInfo.genMipmaps) {
        mipData.mipmask = (mipData.width << 1) - 1;
      }
      texture.mipmask = mipData.mipmask;

      copyFlags(texture, mipData);

      check$1.texture2D(texInfo, mipData, limits);
      texture.internalformat = mipData.internalformat;

      reglTexture2D.width = mipData.width;
      reglTexture2D.height = mipData.height;

      tempBind(texture);
      setMipMap(mipData, GL_TEXTURE_2D$1);
      setTexInfo(texInfo, GL_TEXTURE_2D$1);
      tempRestore();

      freeMipMap(mipData);

      if (config.profile) {
        texture.stats.size = getTextureSize(
          texture.internalformat,
          texture.type,
          mipData.width,
          mipData.height,
          texInfo.genMipmaps,
          false);
      }
      reglTexture2D.format = textureFormatsInvert[texture.internalformat];
      reglTexture2D.type = textureTypesInvert[texture.type];

      reglTexture2D.mag = magFiltersInvert[texInfo.magFilter];
      reglTexture2D.min = minFiltersInvert[texInfo.minFilter];

      reglTexture2D.wrapS = wrapModesInvert[texInfo.wrapS];
      reglTexture2D.wrapT = wrapModesInvert[texInfo.wrapT];

      return reglTexture2D
    }

    function subimage (image, x_, y_, level_) {
      check$1(!!image, 'must specify image data');

      var x = x_ | 0;
      var y = y_ | 0;
      var level = level_ | 0;

      var imageData = allocImage();
      copyFlags(imageData, texture);
      imageData.width = 0;
      imageData.height = 0;
      parseImage(imageData, image);
      imageData.width = imageData.width || ((texture.width >> level) - x);
      imageData.height = imageData.height || ((texture.height >> level) - y);

      check$1(
        texture.type === imageData.type &&
        texture.format === imageData.format &&
        texture.internalformat === imageData.internalformat,
        'incompatible format for texture.subimage');
      check$1(
        x >= 0 && y >= 0 &&
        x + imageData.width <= texture.width &&
        y + imageData.height <= texture.height,
        'texture.subimage write out of bounds');
      check$1(
        texture.mipmask & (1 << level),
        'missing mipmap data');
      check$1(
        imageData.data || imageData.element || imageData.needsCopy,
        'missing image data');

      tempBind(texture);
      setSubImage(imageData, GL_TEXTURE_2D$1, x, y, level);
      tempRestore();

      freeImage(imageData);

      return reglTexture2D
    }

    function resize (w_, h_) {
      var w = w_ | 0;
      var h = (h_ | 0) || w;
      if (w === texture.width && h === texture.height) {
        return reglTexture2D
      }

      reglTexture2D.width = texture.width = w;
      reglTexture2D.height = texture.height = h;

      tempBind(texture);

      for (var i = 0; texture.mipmask >> i; ++i) {
        var _w = w >> i;
        var _h = h >> i;
        if (!_w || !_h) break
        gl.texImage2D(
          GL_TEXTURE_2D$1,
          i,
          texture.format,
          _w,
          _h,
          0,
          texture.format,
          texture.type,
          null);
      }
      tempRestore();

      // also, recompute the texture size.
      if (config.profile) {
        texture.stats.size = getTextureSize(
          texture.internalformat,
          texture.type,
          w,
          h,
          false,
          false);
      }

      return reglTexture2D
    }

    reglTexture2D(a, b);

    reglTexture2D.subimage = subimage;
    reglTexture2D.resize = resize;
    reglTexture2D._reglType = 'texture2d';
    reglTexture2D._texture = texture;
    if (config.profile) {
      reglTexture2D.stats = texture.stats;
    }
    reglTexture2D.destroy = function () {
      texture.decRef();
    };

    return reglTexture2D
  }

  function createTextureCube (a0, a1, a2, a3, a4, a5) {
    var texture = new REGLTexture(GL_TEXTURE_CUBE_MAP$1);
    textureSet[texture.id] = texture;
    stats.cubeCount++;

    var faces = new Array(6);

    function reglTextureCube (a0, a1, a2, a3, a4, a5) {
      var i;
      var texInfo = texture.texInfo;
      TexInfo.call(texInfo);
      for (i = 0; i < 6; ++i) {
        faces[i] = allocMipMap();
      }

      if (typeof a0 === 'number' || !a0) {
        var s = (a0 | 0) || 1;
        for (i = 0; i < 6; ++i) {
          parseMipMapFromShape(faces[i], s, s);
        }
      } else if (typeof a0 === 'object') {
        if (a1) {
          parseMipMapFromObject(faces[0], a0);
          parseMipMapFromObject(faces[1], a1);
          parseMipMapFromObject(faces[2], a2);
          parseMipMapFromObject(faces[3], a3);
          parseMipMapFromObject(faces[4], a4);
          parseMipMapFromObject(faces[5], a5);
        } else {
          parseTexInfo(texInfo, a0);
          parseFlags(texture, a0);
          if ('faces' in a0) {
            var faceInput = a0.faces;
            check$1(Array.isArray(faceInput) && faceInput.length === 6,
              'cube faces must be a length 6 array');
            for (i = 0; i < 6; ++i) {
              check$1(typeof faceInput[i] === 'object' && !!faceInput[i],
                'invalid input for cube map face');
              copyFlags(faces[i], texture);
              parseMipMapFromObject(faces[i], faceInput[i]);
            }
          } else {
            for (i = 0; i < 6; ++i) {
              parseMipMapFromObject(faces[i], a0);
            }
          }
        }
      } else {
        check$1.raise('invalid arguments to cube map');
      }

      copyFlags(texture, faces[0]);
      check$1.optional(function () {
        if (!limits.npotTextureCube) {
          check$1(isPow2$1(texture.width) && isPow2$1(texture.height), 'your browser does not support non power or two texture dimensions');
        }
      });

      if (texInfo.genMipmaps) {
        texture.mipmask = (faces[0].width << 1) - 1;
      } else {
        texture.mipmask = faces[0].mipmask;
      }

      check$1.textureCube(texture, texInfo, faces, limits);
      texture.internalformat = faces[0].internalformat;

      reglTextureCube.width = faces[0].width;
      reglTextureCube.height = faces[0].height;

      tempBind(texture);
      for (i = 0; i < 6; ++i) {
        setMipMap(faces[i], GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + i);
      }
      setTexInfo(texInfo, GL_TEXTURE_CUBE_MAP$1);
      tempRestore();

      if (config.profile) {
        texture.stats.size = getTextureSize(
          texture.internalformat,
          texture.type,
          reglTextureCube.width,
          reglTextureCube.height,
          texInfo.genMipmaps,
          true);
      }

      reglTextureCube.format = textureFormatsInvert[texture.internalformat];
      reglTextureCube.type = textureTypesInvert[texture.type];

      reglTextureCube.mag = magFiltersInvert[texInfo.magFilter];
      reglTextureCube.min = minFiltersInvert[texInfo.minFilter];

      reglTextureCube.wrapS = wrapModesInvert[texInfo.wrapS];
      reglTextureCube.wrapT = wrapModesInvert[texInfo.wrapT];

      for (i = 0; i < 6; ++i) {
        freeMipMap(faces[i]);
      }

      return reglTextureCube
    }

    function subimage (face, image, x_, y_, level_) {
      check$1(!!image, 'must specify image data');
      check$1(typeof face === 'number' && face === (face | 0) &&
        face >= 0 && face < 6, 'invalid face');

      var x = x_ | 0;
      var y = y_ | 0;
      var level = level_ | 0;

      var imageData = allocImage();
      copyFlags(imageData, texture);
      imageData.width = 0;
      imageData.height = 0;
      parseImage(imageData, image);
      imageData.width = imageData.width || ((texture.width >> level) - x);
      imageData.height = imageData.height || ((texture.height >> level) - y);

      check$1(
        texture.type === imageData.type &&
        texture.format === imageData.format &&
        texture.internalformat === imageData.internalformat,
        'incompatible format for texture.subimage');
      check$1(
        x >= 0 && y >= 0 &&
        x + imageData.width <= texture.width &&
        y + imageData.height <= texture.height,
        'texture.subimage write out of bounds');
      check$1(
        texture.mipmask & (1 << level),
        'missing mipmap data');
      check$1(
        imageData.data || imageData.element || imageData.needsCopy,
        'missing image data');

      tempBind(texture);
      setSubImage(imageData, GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + face, x, y, level);
      tempRestore();

      freeImage(imageData);

      return reglTextureCube
    }

    function resize (radius_) {
      var radius = radius_ | 0;
      if (radius === texture.width) {
        return
      }

      reglTextureCube.width = texture.width = radius;
      reglTextureCube.height = texture.height = radius;

      tempBind(texture);
      for (var i = 0; i < 6; ++i) {
        for (var j = 0; texture.mipmask >> j; ++j) {
          gl.texImage2D(
            GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + i,
            j,
            texture.format,
            radius >> j,
            radius >> j,
            0,
            texture.format,
            texture.type,
            null);
        }
      }
      tempRestore();

      if (config.profile) {
        texture.stats.size = getTextureSize(
          texture.internalformat,
          texture.type,
          reglTextureCube.width,
          reglTextureCube.height,
          false,
          true);
      }

      return reglTextureCube
    }

    reglTextureCube(a0, a1, a2, a3, a4, a5);

    reglTextureCube.subimage = subimage;
    reglTextureCube.resize = resize;
    reglTextureCube._reglType = 'textureCube';
    reglTextureCube._texture = texture;
    if (config.profile) {
      reglTextureCube.stats = texture.stats;
    }
    reglTextureCube.destroy = function () {
      texture.decRef();
    };

    return reglTextureCube
  }

  // Called when regl is destroyed
  function destroyTextures () {
    for (var i = 0; i < numTexUnits; ++i) {
      gl.activeTexture(GL_TEXTURE0$1 + i);
      gl.bindTexture(GL_TEXTURE_2D$1, null);
      textureUnits[i] = null;
    }
    values(textureSet).forEach(destroy);

    stats.cubeCount = 0;
    stats.textureCount = 0;
  }

  if (config.profile) {
    stats.getTotalTextureSize = function () {
      var total = 0;
      Object.keys(textureSet).forEach(function (key) {
        total += textureSet[key].stats.size;
      });
      return total
    };
  }

  function restoreTextures () {
    for (var i = 0; i < numTexUnits; ++i) {
      var tex = textureUnits[i];
      if (tex) {
        tex.bindCount = 0;
        tex.unit = -1;
        textureUnits[i] = null;
      }
    }

    values(textureSet).forEach(function (texture) {
      texture.texture = gl.createTexture();
      gl.bindTexture(texture.target, texture.texture);
      for (var i = 0; i < 32; ++i) {
        if ((texture.mipmask & (1 << i)) === 0) {
          continue
        }
        if (texture.target === GL_TEXTURE_2D$1) {
          gl.texImage2D(GL_TEXTURE_2D$1,
            i,
            texture.internalformat,
            texture.width >> i,
            texture.height >> i,
            0,
            texture.internalformat,
            texture.type,
            null);
        } else {
          for (var j = 0; j < 6; ++j) {
            gl.texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + j,
              i,
              texture.internalformat,
              texture.width >> i,
              texture.height >> i,
              0,
              texture.internalformat,
              texture.type,
              null);
          }
        }
      }
      setTexInfo(texture.texInfo, texture.target);
    });
  }

  function refreshTextures () {
    for (var i = 0; i < numTexUnits; ++i) {
      var tex = textureUnits[i];
      if (tex) {
        tex.bindCount = 0;
        tex.unit = -1;
        textureUnits[i] = null;
      }
      gl.activeTexture(GL_TEXTURE0$1 + i);
      gl.bindTexture(GL_TEXTURE_2D$1, null);
      gl.bindTexture(GL_TEXTURE_CUBE_MAP$1, null);
    }
  }

  return {
    create2D: createTexture2D,
    createCube: createTextureCube,
    clear: destroyTextures,
    getTexture: function (wrapper) {
      return null
    },
    restore: restoreTextures,
    refresh: refreshTextures
  }
}

var GL_RENDERBUFFER = 0x8D41;

var GL_RGBA4$1 = 0x8056;
var GL_RGB5_A1$1 = 0x8057;
var GL_RGB565$1 = 0x8D62;
var GL_DEPTH_COMPONENT16 = 0x81A5;
var GL_STENCIL_INDEX8 = 0x8D48;
var GL_DEPTH_STENCIL$1 = 0x84F9;

var GL_SRGB8_ALPHA8_EXT = 0x8C43;

var GL_RGBA32F_EXT = 0x8814;

var GL_RGBA16F_EXT = 0x881A;
var GL_RGB16F_EXT = 0x881B;

var FORMAT_SIZES = [];

FORMAT_SIZES[GL_RGBA4$1] = 2;
FORMAT_SIZES[GL_RGB5_A1$1] = 2;
FORMAT_SIZES[GL_RGB565$1] = 2;

FORMAT_SIZES[GL_DEPTH_COMPONENT16] = 2;
FORMAT_SIZES[GL_STENCIL_INDEX8] = 1;
FORMAT_SIZES[GL_DEPTH_STENCIL$1] = 4;

FORMAT_SIZES[GL_SRGB8_ALPHA8_EXT] = 4;
FORMAT_SIZES[GL_RGBA32F_EXT] = 16;
FORMAT_SIZES[GL_RGBA16F_EXT] = 8;
FORMAT_SIZES[GL_RGB16F_EXT] = 6;

function getRenderbufferSize (format, width, height) {
  return FORMAT_SIZES[format] * width * height
}

var wrapRenderbuffers = function (gl, extensions, limits, stats, config) {
  var formatTypes = {
    'rgba4': GL_RGBA4$1,
    'rgb565': GL_RGB565$1,
    'rgb5 a1': GL_RGB5_A1$1,
    'depth': GL_DEPTH_COMPONENT16,
    'stencil': GL_STENCIL_INDEX8,
    'depth stencil': GL_DEPTH_STENCIL$1
  };

  if (extensions.ext_srgb) {
    formatTypes['srgba'] = GL_SRGB8_ALPHA8_EXT;
  }

  if (extensions.ext_color_buffer_half_float) {
    formatTypes['rgba16f'] = GL_RGBA16F_EXT;
    formatTypes['rgb16f'] = GL_RGB16F_EXT;
  }

  if (extensions.webgl_color_buffer_float) {
    formatTypes['rgba32f'] = GL_RGBA32F_EXT;
  }

  var formatTypesInvert = [];
  Object.keys(formatTypes).forEach(function (key) {
    var val = formatTypes[key];
    formatTypesInvert[val] = key;
  });

  var renderbufferCount = 0;
  var renderbufferSet = {};

  function REGLRenderbuffer (renderbuffer) {
    this.id = renderbufferCount++;
    this.refCount = 1;

    this.renderbuffer = renderbuffer;

    this.format = GL_RGBA4$1;
    this.width = 0;
    this.height = 0;

    if (config.profile) {
      this.stats = { size: 0 };
    }
  }

  REGLRenderbuffer.prototype.decRef = function () {
    if (--this.refCount <= 0) {
      destroy(this);
    }
  };

  function destroy (rb) {
    var handle = rb.renderbuffer;
    check$1(handle, 'must not double destroy renderbuffer');
    gl.bindRenderbuffer(GL_RENDERBUFFER, null);
    gl.deleteRenderbuffer(handle);
    rb.renderbuffer = null;
    rb.refCount = 0;
    delete renderbufferSet[rb.id];
    stats.renderbufferCount--;
  }

  function createRenderbuffer (a, b) {
    var renderbuffer = new REGLRenderbuffer(gl.createRenderbuffer());
    renderbufferSet[renderbuffer.id] = renderbuffer;
    stats.renderbufferCount++;

    function reglRenderbuffer (a, b) {
      var w = 0;
      var h = 0;
      var format = GL_RGBA4$1;

      if (typeof a === 'object' && a) {
        var options = a;
        if ('shape' in options) {
          var shape = options.shape;
          check$1(Array.isArray(shape) && shape.length >= 2,
            'invalid renderbuffer shape');
          w = shape[0] | 0;
          h = shape[1] | 0;
        } else {
          if ('radius' in options) {
            w = h = options.radius | 0;
          }
          if ('width' in options) {
            w = options.width | 0;
          }
          if ('height' in options) {
            h = options.height | 0;
          }
        }
        if ('format' in options) {
          check$1.parameter(options.format, formatTypes,
            'invalid renderbuffer format');
          format = formatTypes[options.format];
        }
      } else if (typeof a === 'number') {
        w = a | 0;
        if (typeof b === 'number') {
          h = b | 0;
        } else {
          h = w;
        }
      } else if (!a) {
        w = h = 1;
      } else {
        check$1.raise('invalid arguments to renderbuffer constructor');
      }

      // check shape
      check$1(
        w > 0 && h > 0 &&
        w <= limits.maxRenderbufferSize && h <= limits.maxRenderbufferSize,
        'invalid renderbuffer size');

      if (w === renderbuffer.width &&
          h === renderbuffer.height &&
          format === renderbuffer.format) {
        return
      }

      reglRenderbuffer.width = renderbuffer.width = w;
      reglRenderbuffer.height = renderbuffer.height = h;
      renderbuffer.format = format;

      gl.bindRenderbuffer(GL_RENDERBUFFER, renderbuffer.renderbuffer);
      gl.renderbufferStorage(GL_RENDERBUFFER, format, w, h);

      check$1(
        gl.getError() === 0,
        'invalid render buffer format');

      if (config.profile) {
        renderbuffer.stats.size = getRenderbufferSize(renderbuffer.format, renderbuffer.width, renderbuffer.height);
      }
      reglRenderbuffer.format = formatTypesInvert[renderbuffer.format];

      return reglRenderbuffer
    }

    function resize (w_, h_) {
      var w = w_ | 0;
      var h = (h_ | 0) || w;

      if (w === renderbuffer.width && h === renderbuffer.height) {
        return reglRenderbuffer
      }

      // check shape
      check$1(
        w > 0 && h > 0 &&
        w <= limits.maxRenderbufferSize && h <= limits.maxRenderbufferSize,
        'invalid renderbuffer size');

      reglRenderbuffer.width = renderbuffer.width = w;
      reglRenderbuffer.height = renderbuffer.height = h;

      gl.bindRenderbuffer(GL_RENDERBUFFER, renderbuffer.renderbuffer);
      gl.renderbufferStorage(GL_RENDERBUFFER, renderbuffer.format, w, h);

      check$1(
        gl.getError() === 0,
        'invalid render buffer format');

      // also, recompute size.
      if (config.profile) {
        renderbuffer.stats.size = getRenderbufferSize(
          renderbuffer.format, renderbuffer.width, renderbuffer.height);
      }

      return reglRenderbuffer
    }

    reglRenderbuffer(a, b);

    reglRenderbuffer.resize = resize;
    reglRenderbuffer._reglType = 'renderbuffer';
    reglRenderbuffer._renderbuffer = renderbuffer;
    if (config.profile) {
      reglRenderbuffer.stats = renderbuffer.stats;
    }
    reglRenderbuffer.destroy = function () {
      renderbuffer.decRef();
    };

    return reglRenderbuffer
  }

  if (config.profile) {
    stats.getTotalRenderbufferSize = function () {
      var total = 0;
      Object.keys(renderbufferSet).forEach(function (key) {
        total += renderbufferSet[key].stats.size;
      });
      return total
    };
  }

  function restoreRenderbuffers () {
    values(renderbufferSet).forEach(function (rb) {
      rb.renderbuffer = gl.createRenderbuffer();
      gl.bindRenderbuffer(GL_RENDERBUFFER, rb.renderbuffer);
      gl.renderbufferStorage(GL_RENDERBUFFER, rb.format, rb.width, rb.height);
    });
    gl.bindRenderbuffer(GL_RENDERBUFFER, null);
  }

  return {
    create: createRenderbuffer,
    clear: function () {
      values(renderbufferSet).forEach(destroy);
    },
    restore: restoreRenderbuffers
  }
};

// We store these constants so that the minifier can inline them
var GL_FRAMEBUFFER$1 = 0x8D40;
var GL_RENDERBUFFER$1 = 0x8D41;

var GL_TEXTURE_2D$2 = 0x0DE1;
var GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 = 0x8515;

var GL_COLOR_ATTACHMENT0$1 = 0x8CE0;
var GL_DEPTH_ATTACHMENT = 0x8D00;
var GL_STENCIL_ATTACHMENT = 0x8D20;
var GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;

var GL_FRAMEBUFFER_COMPLETE$1 = 0x8CD5;
var GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
var GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
var GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9;
var GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;

var GL_HALF_FLOAT_OES$2 = 0x8D61;
var GL_UNSIGNED_BYTE$6 = 0x1401;
var GL_FLOAT$5 = 0x1406;

var GL_RGB$1 = 0x1907;
var GL_RGBA$2 = 0x1908;

var GL_DEPTH_COMPONENT$1 = 0x1902;

var colorTextureFormatEnums = [
  GL_RGB$1,
  GL_RGBA$2
];

// for every texture format, store
// the number of channels
var textureFormatChannels = [];
textureFormatChannels[GL_RGBA$2] = 4;
textureFormatChannels[GL_RGB$1] = 3;

// for every texture type, store
// the size in bytes.
var textureTypeSizes = [];
textureTypeSizes[GL_UNSIGNED_BYTE$6] = 1;
textureTypeSizes[GL_FLOAT$5] = 4;
textureTypeSizes[GL_HALF_FLOAT_OES$2] = 2;

var GL_RGBA4$2 = 0x8056;
var GL_RGB5_A1$2 = 0x8057;
var GL_RGB565$2 = 0x8D62;
var GL_DEPTH_COMPONENT16$1 = 0x81A5;
var GL_STENCIL_INDEX8$1 = 0x8D48;
var GL_DEPTH_STENCIL$2 = 0x84F9;

var GL_SRGB8_ALPHA8_EXT$1 = 0x8C43;

var GL_RGBA32F_EXT$1 = 0x8814;

var GL_RGBA16F_EXT$1 = 0x881A;
var GL_RGB16F_EXT$1 = 0x881B;

var colorRenderbufferFormatEnums = [
  GL_RGBA4$2,
  GL_RGB5_A1$2,
  GL_RGB565$2,
  GL_SRGB8_ALPHA8_EXT$1,
  GL_RGBA16F_EXT$1,
  GL_RGB16F_EXT$1,
  GL_RGBA32F_EXT$1
];

var statusCode = {};
statusCode[GL_FRAMEBUFFER_COMPLETE$1] = 'complete';
statusCode[GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT] = 'incomplete attachment';
statusCode[GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS] = 'incomplete dimensions';
statusCode[GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT] = 'incomplete, missing attachment';
statusCode[GL_FRAMEBUFFER_UNSUPPORTED] = 'unsupported';

function wrapFBOState (
  gl,
  extensions,
  limits,
  textureState,
  renderbufferState,
  stats) {
  var framebufferState = {
    cur: null,
    next: null,
    dirty: false,
    setFBO: null
  };

  var colorTextureFormats = ['rgba'];
  var colorRenderbufferFormats = ['rgba4', 'rgb565', 'rgb5 a1'];

  if (extensions.ext_srgb) {
    colorRenderbufferFormats.push('srgba');
  }

  if (extensions.ext_color_buffer_half_float) {
    colorRenderbufferFormats.push('rgba16f', 'rgb16f');
  }

  if (extensions.webgl_color_buffer_float) {
    colorRenderbufferFormats.push('rgba32f');
  }

  var colorTypes = ['uint8'];
  if (extensions.oes_texture_half_float) {
    colorTypes.push('half float', 'float16');
  }
  if (extensions.oes_texture_float) {
    colorTypes.push('float', 'float32');
  }

  function FramebufferAttachment (target, texture, renderbuffer) {
    this.target = target;
    this.texture = texture;
    this.renderbuffer = renderbuffer;

    var w = 0;
    var h = 0;
    if (texture) {
      w = texture.width;
      h = texture.height;
    } else if (renderbuffer) {
      w = renderbuffer.width;
      h = renderbuffer.height;
    }
    this.width = w;
    this.height = h;
  }

  function decRef (attachment) {
    if (attachment) {
      if (attachment.texture) {
        attachment.texture._texture.decRef();
      }
      if (attachment.renderbuffer) {
        attachment.renderbuffer._renderbuffer.decRef();
      }
    }
  }

  function incRefAndCheckShape (attachment, width, height) {
    if (!attachment) {
      return
    }
    if (attachment.texture) {
      var texture = attachment.texture._texture;
      var tw = Math.max(1, texture.width);
      var th = Math.max(1, texture.height);
      check$1(tw === width && th === height,
        'inconsistent width/height for supplied texture');
      texture.refCount += 1;
    } else {
      var renderbuffer = attachment.renderbuffer._renderbuffer;
      check$1(
        renderbuffer.width === width && renderbuffer.height === height,
        'inconsistent width/height for renderbuffer');
      renderbuffer.refCount += 1;
    }
  }

  function attach (location, attachment) {
    if (attachment) {
      if (attachment.texture) {
        gl.framebufferTexture2D(
          GL_FRAMEBUFFER$1,
          location,
          attachment.target,
          attachment.texture._texture.texture,
          0);
      } else {
        gl.framebufferRenderbuffer(
          GL_FRAMEBUFFER$1,
          location,
          GL_RENDERBUFFER$1,
          attachment.renderbuffer._renderbuffer.renderbuffer);
      }
    }
  }

  function parseAttachment (attachment) {
    var target = GL_TEXTURE_2D$2;
    var texture = null;
    var renderbuffer = null;

    var data = attachment;
    if (typeof attachment === 'object') {
      data = attachment.data;
      if ('target' in attachment) {
        target = attachment.target | 0;
      }
    }

    check$1.type(data, 'function', 'invalid attachment data');

    var type = data._reglType;
    if (type === 'texture2d') {
      texture = data;
      check$1(target === GL_TEXTURE_2D$2);
    } else if (type === 'textureCube') {
      texture = data;
      check$1(
        target >= GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 &&
        target < GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 + 6,
        'invalid cube map target');
    } else if (type === 'renderbuffer') {
      renderbuffer = data;
      target = GL_RENDERBUFFER$1;
    } else {
      check$1.raise('invalid regl object for attachment');
    }

    return new FramebufferAttachment(target, texture, renderbuffer)
  }

  function allocAttachment (
    width,
    height,
    isTexture,
    format,
    type) {
    if (isTexture) {
      var texture = textureState.create2D({
        width: width,
        height: height,
        format: format,
        type: type
      });
      texture._texture.refCount = 0;
      return new FramebufferAttachment(GL_TEXTURE_2D$2, texture, null)
    } else {
      var rb = renderbufferState.create({
        width: width,
        height: height,
        format: format
      });
      rb._renderbuffer.refCount = 0;
      return new FramebufferAttachment(GL_RENDERBUFFER$1, null, rb)
    }
  }

  function unwrapAttachment (attachment) {
    return attachment && (attachment.texture || attachment.renderbuffer)
  }

  function resizeAttachment (attachment, w, h) {
    if (attachment) {
      if (attachment.texture) {
        attachment.texture.resize(w, h);
      } else if (attachment.renderbuffer) {
        attachment.renderbuffer.resize(w, h);
      }
      attachment.width = w;
      attachment.height = h;
    }
  }

  var framebufferCount = 0;
  var framebufferSet = {};

  function REGLFramebuffer () {
    this.id = framebufferCount++;
    framebufferSet[this.id] = this;

    this.framebuffer = gl.createFramebuffer();
    this.width = 0;
    this.height = 0;

    this.colorAttachments = [];
    this.depthAttachment = null;
    this.stencilAttachment = null;
    this.depthStencilAttachment = null;
  }

  function decFBORefs (framebuffer) {
    framebuffer.colorAttachments.forEach(decRef);
    decRef(framebuffer.depthAttachment);
    decRef(framebuffer.stencilAttachment);
    decRef(framebuffer.depthStencilAttachment);
  }

  function destroy (framebuffer) {
    var handle = framebuffer.framebuffer;
    check$1(handle, 'must not double destroy framebuffer');
    gl.deleteFramebuffer(handle);
    framebuffer.framebuffer = null;
    stats.framebufferCount--;
    delete framebufferSet[framebuffer.id];
  }

  function updateFramebuffer (framebuffer) {
    var i;

    gl.bindFramebuffer(GL_FRAMEBUFFER$1, framebuffer.framebuffer);
    var colorAttachments = framebuffer.colorAttachments;
    for (i = 0; i < colorAttachments.length; ++i) {
      attach(GL_COLOR_ATTACHMENT0$1 + i, colorAttachments[i]);
    }
    for (i = colorAttachments.length; i < limits.maxColorAttachments; ++i) {
      gl.framebufferTexture2D(
        GL_FRAMEBUFFER$1,
        GL_COLOR_ATTACHMENT0$1 + i,
        GL_TEXTURE_2D$2,
        null,
        0);
    }

    gl.framebufferTexture2D(
      GL_FRAMEBUFFER$1,
      GL_DEPTH_STENCIL_ATTACHMENT,
      GL_TEXTURE_2D$2,
      null,
      0);
    gl.framebufferTexture2D(
      GL_FRAMEBUFFER$1,
      GL_DEPTH_ATTACHMENT,
      GL_TEXTURE_2D$2,
      null,
      0);
    gl.framebufferTexture2D(
      GL_FRAMEBUFFER$1,
      GL_STENCIL_ATTACHMENT,
      GL_TEXTURE_2D$2,
      null,
      0);

    attach(GL_DEPTH_ATTACHMENT, framebuffer.depthAttachment);
    attach(GL_STENCIL_ATTACHMENT, framebuffer.stencilAttachment);
    attach(GL_DEPTH_STENCIL_ATTACHMENT, framebuffer.depthStencilAttachment);

    // Check status code
    var status = gl.checkFramebufferStatus(GL_FRAMEBUFFER$1);
    if (!gl.isContextLost() && status !== GL_FRAMEBUFFER_COMPLETE$1) {
      check$1.raise('framebuffer configuration not supported, status = ' +
        statusCode[status]);
    }

    gl.bindFramebuffer(GL_FRAMEBUFFER$1, framebufferState.next ? framebufferState.next.framebuffer : null);
    framebufferState.cur = framebufferState.next;

    // FIXME: Clear error code here.  This is a work around for a bug in
    // headless-gl
    gl.getError();
  }

  function createFBO (a0, a1) {
    var framebuffer = new REGLFramebuffer();
    stats.framebufferCount++;

    function reglFramebuffer (a, b) {
      var i;

      check$1(framebufferState.next !== framebuffer,
        'can not update framebuffer which is currently in use');

      var width = 0;
      var height = 0;

      var needsDepth = true;
      var needsStencil = true;

      var colorBuffer = null;
      var colorTexture = true;
      var colorFormat = 'rgba';
      var colorType = 'uint8';
      var colorCount = 1;

      var depthBuffer = null;
      var stencilBuffer = null;
      var depthStencilBuffer = null;
      var depthStencilTexture = false;

      if (typeof a === 'number') {
        width = a | 0;
        height = (b | 0) || width;
      } else if (!a) {
        width = height = 1;
      } else {
        check$1.type(a, 'object', 'invalid arguments for framebuffer');
        var options = a;

        if ('shape' in options) {
          var shape = options.shape;
          check$1(Array.isArray(shape) && shape.length >= 2,
            'invalid shape for framebuffer');
          width = shape[0];
          height = shape[1];
        } else {
          if ('radius' in options) {
            width = height = options.radius;
          }
          if ('width' in options) {
            width = options.width;
          }
          if ('height' in options) {
            height = options.height;
          }
        }

        if ('color' in options ||
            'colors' in options) {
          colorBuffer =
            options.color ||
            options.colors;
          if (Array.isArray(colorBuffer)) {
            check$1(
              colorBuffer.length === 1 || extensions.webgl_draw_buffers,
              'multiple render targets not supported');
          }
        }

        if (!colorBuffer) {
          if ('colorCount' in options) {
            colorCount = options.colorCount | 0;
            check$1(colorCount > 0, 'invalid color buffer count');
          }

          if ('colorTexture' in options) {
            colorTexture = !!options.colorTexture;
            colorFormat = 'rgba4';
          }

          if ('colorType' in options) {
            colorType = options.colorType;
            if (!colorTexture) {
              if (colorType === 'half float' || colorType === 'float16') {
                check$1(extensions.ext_color_buffer_half_float,
                  'you must enable EXT_color_buffer_half_float to use 16-bit render buffers');
                colorFormat = 'rgba16f';
              } else if (colorType === 'float' || colorType === 'float32') {
                check$1(extensions.webgl_color_buffer_float,
                  'you must enable WEBGL_color_buffer_float in order to use 32-bit floating point renderbuffers');
                colorFormat = 'rgba32f';
              }
            } else {
              check$1(extensions.oes_texture_float ||
                !(colorType === 'float' || colorType === 'float32'),
              'you must enable OES_texture_float in order to use floating point framebuffer objects');
              check$1(extensions.oes_texture_half_float ||
                !(colorType === 'half float' || colorType === 'float16'),
              'you must enable OES_texture_half_float in order to use 16-bit floating point framebuffer objects');
            }
            check$1.oneOf(colorType, colorTypes, 'invalid color type');
          }

          if ('colorFormat' in options) {
            colorFormat = options.colorFormat;
            if (colorTextureFormats.indexOf(colorFormat) >= 0) {
              colorTexture = true;
            } else if (colorRenderbufferFormats.indexOf(colorFormat) >= 0) {
              colorTexture = false;
            } else {
              check$1.optional(function () {
                if (colorTexture) {
                  check$1.oneOf(
                    options.colorFormat, colorTextureFormats,
                    'invalid color format for texture');
                } else {
                  check$1.oneOf(
                    options.colorFormat, colorRenderbufferFormats,
                    'invalid color format for renderbuffer');
                }
              });
            }
          }
        }

        if ('depthTexture' in options || 'depthStencilTexture' in options) {
          depthStencilTexture = !!(options.depthTexture ||
            options.depthStencilTexture);
          check$1(!depthStencilTexture || extensions.webgl_depth_texture,
            'webgl_depth_texture extension not supported');
        }

        if ('depth' in options) {
          if (typeof options.depth === 'boolean') {
            needsDepth = options.depth;
          } else {
            depthBuffer = options.depth;
            needsStencil = false;
          }
        }

        if ('stencil' in options) {
          if (typeof options.stencil === 'boolean') {
            needsStencil = options.stencil;
          } else {
            stencilBuffer = options.stencil;
            needsDepth = false;
          }
        }

        if ('depthStencil' in options) {
          if (typeof options.depthStencil === 'boolean') {
            needsDepth = needsStencil = options.depthStencil;
          } else {
            depthStencilBuffer = options.depthStencil;
            needsDepth = false;
            needsStencil = false;
          }
        }
      }

      // parse attachments
      var colorAttachments = null;
      var depthAttachment = null;
      var stencilAttachment = null;
      var depthStencilAttachment = null;

      // Set up color attachments
      if (Array.isArray(colorBuffer)) {
        colorAttachments = colorBuffer.map(parseAttachment);
      } else if (colorBuffer) {
        colorAttachments = [parseAttachment(colorBuffer)];
      } else {
        colorAttachments = new Array(colorCount);
        for (i = 0; i < colorCount; ++i) {
          colorAttachments[i] = allocAttachment(
            width,
            height,
            colorTexture,
            colorFormat,
            colorType);
        }
      }

      check$1(extensions.webgl_draw_buffers || colorAttachments.length <= 1,
        'you must enable the WEBGL_draw_buffers extension in order to use multiple color buffers.');
      check$1(colorAttachments.length <= limits.maxColorAttachments,
        'too many color attachments, not supported');

      width = width || colorAttachments[0].width;
      height = height || colorAttachments[0].height;

      if (depthBuffer) {
        depthAttachment = parseAttachment(depthBuffer);
      } else if (needsDepth && !needsStencil) {
        depthAttachment = allocAttachment(
          width,
          height,
          depthStencilTexture,
          'depth',
          'uint32');
      }

      if (stencilBuffer) {
        stencilAttachment = parseAttachment(stencilBuffer);
      } else if (needsStencil && !needsDepth) {
        stencilAttachment = allocAttachment(
          width,
          height,
          false,
          'stencil',
          'uint8');
      }

      if (depthStencilBuffer) {
        depthStencilAttachment = parseAttachment(depthStencilBuffer);
      } else if (!depthBuffer && !stencilBuffer && needsStencil && needsDepth) {
        depthStencilAttachment = allocAttachment(
          width,
          height,
          depthStencilTexture,
          'depth stencil',
          'depth stencil');
      }

      check$1(
        (!!depthBuffer) + (!!stencilBuffer) + (!!depthStencilBuffer) <= 1,
        'invalid framebuffer configuration, can specify exactly one depth/stencil attachment');

      var commonColorAttachmentSize = null;

      for (i = 0; i < colorAttachments.length; ++i) {
        incRefAndCheckShape(colorAttachments[i], width, height);
        check$1(!colorAttachments[i] ||
          (colorAttachments[i].texture &&
            colorTextureFormatEnums.indexOf(colorAttachments[i].texture._texture.format) >= 0) ||
          (colorAttachments[i].renderbuffer &&
            colorRenderbufferFormatEnums.indexOf(colorAttachments[i].renderbuffer._renderbuffer.format) >= 0),
        'framebuffer color attachment ' + i + ' is invalid');

        if (colorAttachments[i] && colorAttachments[i].texture) {
          var colorAttachmentSize =
              textureFormatChannels[colorAttachments[i].texture._texture.format] *
              textureTypeSizes[colorAttachments[i].texture._texture.type];

          if (commonColorAttachmentSize === null) {
            commonColorAttachmentSize = colorAttachmentSize;
          } else {
            // We need to make sure that all color attachments have the same number of bitplanes
            // (that is, the same numer of bits per pixel)
            // This is required by the GLES2.0 standard. See the beginning of Chapter 4 in that document.
            check$1(commonColorAttachmentSize === colorAttachmentSize,
              'all color attachments much have the same number of bits per pixel.');
          }
        }
      }
      incRefAndCheckShape(depthAttachment, width, height);
      check$1(!depthAttachment ||
        (depthAttachment.texture &&
          depthAttachment.texture._texture.format === GL_DEPTH_COMPONENT$1) ||
        (depthAttachment.renderbuffer &&
          depthAttachment.renderbuffer._renderbuffer.format === GL_DEPTH_COMPONENT16$1),
      'invalid depth attachment for framebuffer object');
      incRefAndCheckShape(stencilAttachment, width, height);
      check$1(!stencilAttachment ||
        (stencilAttachment.renderbuffer &&
          stencilAttachment.renderbuffer._renderbuffer.format === GL_STENCIL_INDEX8$1),
      'invalid stencil attachment for framebuffer object');
      incRefAndCheckShape(depthStencilAttachment, width, height);
      check$1(!depthStencilAttachment ||
        (depthStencilAttachment.texture &&
          depthStencilAttachment.texture._texture.format === GL_DEPTH_STENCIL$2) ||
        (depthStencilAttachment.renderbuffer &&
          depthStencilAttachment.renderbuffer._renderbuffer.format === GL_DEPTH_STENCIL$2),
      'invalid depth-stencil attachment for framebuffer object');

      // decrement references
      decFBORefs(framebuffer);

      framebuffer.width = width;
      framebuffer.height = height;

      framebuffer.colorAttachments = colorAttachments;
      framebuffer.depthAttachment = depthAttachment;
      framebuffer.stencilAttachment = stencilAttachment;
      framebuffer.depthStencilAttachment = depthStencilAttachment;

      reglFramebuffer.color = colorAttachments.map(unwrapAttachment);
      reglFramebuffer.depth = unwrapAttachment(depthAttachment);
      reglFramebuffer.stencil = unwrapAttachment(stencilAttachment);
      reglFramebuffer.depthStencil = unwrapAttachment(depthStencilAttachment);

      reglFramebuffer.width = framebuffer.width;
      reglFramebuffer.height = framebuffer.height;

      updateFramebuffer(framebuffer);

      return reglFramebuffer
    }

    function resize (w_, h_) {
      check$1(framebufferState.next !== framebuffer,
        'can not resize a framebuffer which is currently in use');

      var w = Math.max(w_ | 0, 1);
      var h = Math.max((h_ | 0) || w, 1);
      if (w === framebuffer.width && h === framebuffer.height) {
        return reglFramebuffer
      }

      // resize all buffers
      var colorAttachments = framebuffer.colorAttachments;
      for (var i = 0; i < colorAttachments.length; ++i) {
        resizeAttachment(colorAttachments[i], w, h);
      }
      resizeAttachment(framebuffer.depthAttachment, w, h);
      resizeAttachment(framebuffer.stencilAttachment, w, h);
      resizeAttachment(framebuffer.depthStencilAttachment, w, h);

      framebuffer.width = reglFramebuffer.width = w;
      framebuffer.height = reglFramebuffer.height = h;

      updateFramebuffer(framebuffer);

      return reglFramebuffer
    }

    reglFramebuffer(a0, a1);

    return extend(reglFramebuffer, {
      resize: resize,
      _reglType: 'framebuffer',
      _framebuffer: framebuffer,
      destroy: function () {
        destroy(framebuffer);
        decFBORefs(framebuffer);
      },
      use: function (block) {
        framebufferState.setFBO({
          framebuffer: reglFramebuffer
        }, block);
      }
    })
  }

  function createCubeFBO (options) {
    var faces = Array(6);

    function reglFramebufferCube (a) {
      var i;

      check$1(faces.indexOf(framebufferState.next) < 0,
        'can not update framebuffer which is currently in use');

      var params = {
        color: null
      };

      var radius = 0;

      var colorBuffer = null;
      var colorFormat = 'rgba';
      var colorType = 'uint8';
      var colorCount = 1;

      if (typeof a === 'number') {
        radius = a | 0;
      } else if (!a) {
        radius = 1;
      } else {
        check$1.type(a, 'object', 'invalid arguments for framebuffer');
        var options = a;

        if ('shape' in options) {
          var shape = options.shape;
          check$1(
            Array.isArray(shape) && shape.length >= 2,
            'invalid shape for framebuffer');
          check$1(
            shape[0] === shape[1],
            'cube framebuffer must be square');
          radius = shape[0];
        } else {
          if ('radius' in options) {
            radius = options.radius | 0;
          }
          if ('width' in options) {
            radius = options.width | 0;
            if ('height' in options) {
              check$1(options.height === radius, 'must be square');
            }
          } else if ('height' in options) {
            radius = options.height | 0;
          }
        }

        if ('color' in options ||
            'colors' in options) {
          colorBuffer =
            options.color ||
            options.colors;
          if (Array.isArray(colorBuffer)) {
            check$1(
              colorBuffer.length === 1 || extensions.webgl_draw_buffers,
              'multiple render targets not supported');
          }
        }

        if (!colorBuffer) {
          if ('colorCount' in options) {
            colorCount = options.colorCount | 0;
            check$1(colorCount > 0, 'invalid color buffer count');
          }

          if ('colorType' in options) {
            check$1.oneOf(
              options.colorType, colorTypes,
              'invalid color type');
            colorType = options.colorType;
          }

          if ('colorFormat' in options) {
            colorFormat = options.colorFormat;
            check$1.oneOf(
              options.colorFormat, colorTextureFormats,
              'invalid color format for texture');
          }
        }

        if ('depth' in options) {
          params.depth = options.depth;
        }

        if ('stencil' in options) {
          params.stencil = options.stencil;
        }

        if ('depthStencil' in options) {
          params.depthStencil = options.depthStencil;
        }
      }

      var colorCubes;
      if (colorBuffer) {
        if (Array.isArray(colorBuffer)) {
          colorCubes = [];
          for (i = 0; i < colorBuffer.length; ++i) {
            colorCubes[i] = colorBuffer[i];
          }
        } else {
          colorCubes = [ colorBuffer ];
        }
      } else {
        colorCubes = Array(colorCount);
        var cubeMapParams = {
          radius: radius,
          format: colorFormat,
          type: colorType
        };
        for (i = 0; i < colorCount; ++i) {
          colorCubes[i] = textureState.createCube(cubeMapParams);
        }
      }

      // Check color cubes
      params.color = Array(colorCubes.length);
      for (i = 0; i < colorCubes.length; ++i) {
        var cube = colorCubes[i];
        check$1(
          typeof cube === 'function' && cube._reglType === 'textureCube',
          'invalid cube map');
        radius = radius || cube.width;
        check$1(
          cube.width === radius && cube.height === radius,
          'invalid cube map shape');
        params.color[i] = {
          target: GL_TEXTURE_CUBE_MAP_POSITIVE_X$2,
          data: colorCubes[i]
        };
      }

      for (i = 0; i < 6; ++i) {
        for (var j = 0; j < colorCubes.length; ++j) {
          params.color[j].target = GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 + i;
        }
        // reuse depth-stencil attachments across all cube maps
        if (i > 0) {
          params.depth = faces[0].depth;
          params.stencil = faces[0].stencil;
          params.depthStencil = faces[0].depthStencil;
        }
        if (faces[i]) {
          (faces[i])(params);
        } else {
          faces[i] = createFBO(params);
        }
      }

      return extend(reglFramebufferCube, {
        width: radius,
        height: radius,
        color: colorCubes
      })
    }

    function resize (radius_) {
      var i;
      var radius = radius_ | 0;
      check$1(radius > 0 && radius <= limits.maxCubeMapSize,
        'invalid radius for cube fbo');

      if (radius === reglFramebufferCube.width) {
        return reglFramebufferCube
      }

      var colors = reglFramebufferCube.color;
      for (i = 0; i < colors.length; ++i) {
        colors[i].resize(radius);
      }

      for (i = 0; i < 6; ++i) {
        faces[i].resize(radius);
      }

      reglFramebufferCube.width = reglFramebufferCube.height = radius;

      return reglFramebufferCube
    }

    reglFramebufferCube(options);

    return extend(reglFramebufferCube, {
      faces: faces,
      resize: resize,
      _reglType: 'framebufferCube',
      destroy: function () {
        faces.forEach(function (f) {
          f.destroy();
        });
      }
    })
  }

  function restoreFramebuffers () {
    framebufferState.cur = null;
    framebufferState.next = null;
    framebufferState.dirty = true;
    values(framebufferSet).forEach(function (fb) {
      fb.framebuffer = gl.createFramebuffer();
      updateFramebuffer(fb);
    });
  }

  return extend(framebufferState, {
    getFramebuffer: function (object) {
      if (typeof object === 'function' && object._reglType === 'framebuffer') {
        var fbo = object._framebuffer;
        if (fbo instanceof REGLFramebuffer) {
          return fbo
        }
      }
      return null
    },
    create: createFBO,
    createCube: createCubeFBO,
    clear: function () {
      values(framebufferSet).forEach(destroy);
    },
    restore: restoreFramebuffers
  })
}

var GL_FLOAT$6 = 5126;
var GL_ARRAY_BUFFER$1 = 34962;
var GL_ELEMENT_ARRAY_BUFFER$1 = 34963;

var VAO_OPTIONS = [
  'attributes',
  'elements',
  'offset',
  'count',
  'primitive',
  'instances'
];

function AttributeRecord () {
  this.state = 0;

  this.x = 0.0;
  this.y = 0.0;
  this.z = 0.0;
  this.w = 0.0;

  this.buffer = null;
  this.size = 0;
  this.normalized = false;
  this.type = GL_FLOAT$6;
  this.offset = 0;
  this.stride = 0;
  this.divisor = 0;
}

function wrapAttributeState (
  gl,
  extensions,
  limits,
  stats,
  bufferState,
  elementState,
  drawState) {
  var NUM_ATTRIBUTES = limits.maxAttributes;
  var attributeBindings = new Array(NUM_ATTRIBUTES);
  for (var i = 0; i < NUM_ATTRIBUTES; ++i) {
    attributeBindings[i] = new AttributeRecord();
  }
  var vaoCount = 0;
  var vaoSet = {};

  var state = {
    Record: AttributeRecord,
    scope: {},
    state: attributeBindings,
    currentVAO: null,
    targetVAO: null,
    restore: extVAO() ? restoreVAO : function () {},
    createVAO: createVAO,
    getVAO: getVAO,
    destroyBuffer: destroyBuffer,
    setVAO: extVAO() ? setVAOEXT : setVAOEmulated,
    clear: extVAO() ? destroyVAOEXT : function () {}
  };

  function destroyBuffer (buffer) {
    for (var i = 0; i < attributeBindings.length; ++i) {
      var record = attributeBindings[i];
      if (record.buffer === buffer) {
        gl.disableVertexAttribArray(i);
        record.buffer = null;
      }
    }
  }

  function extVAO () {
    return extensions.oes_vertex_array_object
  }

  function extInstanced () {
    return extensions.angle_instanced_arrays
  }

  function getVAO (vao) {
    if (typeof vao === 'function' && vao._vao) {
      return vao._vao
    }
    return null
  }

  function setVAOEXT (vao) {
    if (vao === state.currentVAO) {
      return
    }
    var ext = extVAO();
    if (vao) {
      ext.bindVertexArrayOES(vao.vao);
    } else {
      ext.bindVertexArrayOES(null);
    }
    state.currentVAO = vao;
  }

  function setVAOEmulated (vao) {
    if (vao === state.currentVAO) {
      return
    }
    if (vao) {
      vao.bindAttrs();
    } else {
      var exti = extInstanced();
      for (var i = 0; i < attributeBindings.length; ++i) {
        var binding = attributeBindings[i];
        if (binding.buffer) {
          gl.enableVertexAttribArray(i);
          binding.buffer.bind();
          gl.vertexAttribPointer(i, binding.size, binding.type, binding.normalized, binding.stride, binding.offfset);
          if (exti && binding.divisor) {
            exti.vertexAttribDivisorANGLE(i, binding.divisor);
          }
        } else {
          gl.disableVertexAttribArray(i);
          gl.vertexAttrib4f(i, binding.x, binding.y, binding.z, binding.w);
        }
      }
      if (drawState.elements) {
        gl.bindBuffer(GL_ELEMENT_ARRAY_BUFFER$1, drawState.elements.buffer.buffer);
      } else {
        gl.bindBuffer(GL_ELEMENT_ARRAY_BUFFER$1, null);
      }
    }
    state.currentVAO = vao;
  }

  function destroyVAOEXT () {
    values(vaoSet).forEach(function (vao) {
      vao.destroy();
    });
  }

  function REGLVAO () {
    this.id = ++vaoCount;
    this.attributes = [];
    this.elements = null;
    this.ownsElements = false;
    this.count = 0;
    this.offset = 0;
    this.instances = -1;
    this.primitive = 4;
    var extension = extVAO();
    if (extension) {
      this.vao = extension.createVertexArrayOES();
    } else {
      this.vao = null;
    }
    vaoSet[this.id] = this;
    this.buffers = [];
  }

  REGLVAO.prototype.bindAttrs = function () {
    var exti = extInstanced();
    var attributes = this.attributes;
    for (var i = 0; i < attributes.length; ++i) {
      var attr = attributes[i];
      if (attr.buffer) {
        gl.enableVertexAttribArray(i);
        gl.bindBuffer(GL_ARRAY_BUFFER$1, attr.buffer.buffer);
        gl.vertexAttribPointer(i, attr.size, attr.type, attr.normalized, attr.stride, attr.offset);
        if (exti && attr.divisor) {
          exti.vertexAttribDivisorANGLE(i, attr.divisor);
        }
      } else {
        gl.disableVertexAttribArray(i);
        gl.vertexAttrib4f(i, attr.x, attr.y, attr.z, attr.w);
      }
    }
    for (var j = attributes.length; j < NUM_ATTRIBUTES; ++j) {
      gl.disableVertexAttribArray(j);
    }
    var elements = elementState.getElements(this.elements);
    if (elements) {
      gl.bindBuffer(GL_ELEMENT_ARRAY_BUFFER$1, elements.buffer.buffer);
    } else {
      gl.bindBuffer(GL_ELEMENT_ARRAY_BUFFER$1, null);
    }
  };

  REGLVAO.prototype.refresh = function () {
    var ext = extVAO();
    if (ext) {
      ext.bindVertexArrayOES(this.vao);
      this.bindAttrs();
      state.currentVAO = null;
      ext.bindVertexArrayOES(null);
    }
  };

  REGLVAO.prototype.destroy = function () {
    if (this.vao) {
      var extension = extVAO();
      if (this === state.currentVAO) {
        state.currentVAO = null;
        extension.bindVertexArrayOES(null);
      }
      extension.deleteVertexArrayOES(this.vao);
      this.vao = null;
    }
    if (this.ownsElements) {
      this.elements.destroy();
      this.elements = null;
      this.ownsElements = false;
    }
    if (vaoSet[this.id]) {
      delete vaoSet[this.id];
      stats.vaoCount -= 1;
    }
  };

  function restoreVAO () {
    var ext = extVAO();
    if (ext) {
      values(vaoSet).forEach(function (vao) {
        vao.refresh();
      });
    }
  }

  function createVAO (_attr) {
    var vao = new REGLVAO();
    stats.vaoCount += 1;

    function updateVAO (options) {
      var attributes;
      if (Array.isArray(options)) {
        attributes = options;
        if (vao.elements && vao.ownsElements) {
          vao.elements.destroy();
        }
        vao.elements = null;
        vao.ownsElements = false;
        vao.offset = 0;
        vao.count = 0;
        vao.instances = -1;
        vao.primitive = 4;
      } else {
        check$1(typeof options === 'object', 'invalid arguments for create vao');
        check$1('attributes' in options, 'must specify attributes for vao');
        if (options.elements) {
          var elements = options.elements;
          if (vao.ownsElements) {
            if (typeof elements === 'function' && elements._reglType === 'elements') {
              vao.elements.destroy();
              vao.ownsElements = false;
            } else {
              vao.elements(elements);
              vao.ownsElements = false;
            }
          } else if (elementState.getElements(options.elements)) {
            vao.elements = options.elements;
            vao.ownsElements = false;
          } else {
            vao.elements = elementState.create(options.elements);
            vao.ownsElements = true;
          }
        } else {
          vao.elements = null;
          vao.ownsElements = false;
        }
        attributes = options.attributes;

        // set default vao
        vao.offset = 0;
        vao.count = -1;
        vao.instances = -1;
        vao.primitive = 4;

        // copy element properties
        if (vao.elements) {
          vao.count = vao.elements._elements.vertCount;
          vao.primitive = vao.elements._elements.primType;
        }

        if ('offset' in options) {
          vao.offset = options.offset | 0;
        }
        if ('count' in options) {
          vao.count = options.count | 0;
        }
        if ('instances' in options) {
          vao.instances = options.instances | 0;
        }
        if ('primitive' in options) {
          check$1(options.primitive in primTypes, 'bad primitive type: ' + options.primitive);
          vao.primitive = primTypes[options.primitive];
        }

        check$1.optional(() => {
          var keys = Object.keys(options);
          for (var i = 0; i < keys.length; ++i) {
            check$1(VAO_OPTIONS.indexOf(keys[i]) >= 0, 'invalid option for vao: "' + keys[i] + '" valid options are ' + VAO_OPTIONS);
          }
        });
        check$1(Array.isArray(attributes), 'attributes must be an array');
      }

      check$1(attributes.length < NUM_ATTRIBUTES, 'too many attributes');
      check$1(attributes.length > 0, 'must specify at least one attribute');

      var bufUpdated = {};
      var nattributes = vao.attributes;
      nattributes.length = attributes.length;
      for (var i = 0; i < attributes.length; ++i) {
        var spec = attributes[i];
        var rec = nattributes[i] = new AttributeRecord();
        var data = spec.data || spec;
        if (Array.isArray(data) || isTypedArray(data) || isNDArrayLike(data)) {
          var buf;
          if (vao.buffers[i]) {
            buf = vao.buffers[i];
            if (isTypedArray(data) && buf._buffer.byteLength >= data.byteLength) {
              buf.subdata(data);
            } else {
              buf.destroy();
              vao.buffers[i] = null;
            }
          }
          if (!vao.buffers[i]) {
            buf = vao.buffers[i] = bufferState.create(spec, GL_ARRAY_BUFFER$1, false, true);
          }
          rec.buffer = bufferState.getBuffer(buf);
          rec.size = rec.buffer.dimension | 0;
          rec.normalized = false;
          rec.type = rec.buffer.dtype;
          rec.offset = 0;
          rec.stride = 0;
          rec.divisor = 0;
          rec.state = 1;
          bufUpdated[i] = 1;
        } else if (bufferState.getBuffer(spec)) {
          rec.buffer = bufferState.getBuffer(spec);
          rec.size = rec.buffer.dimension | 0;
          rec.normalized = false;
          rec.type = rec.buffer.dtype;
          rec.offset = 0;
          rec.stride = 0;
          rec.divisor = 0;
          rec.state = 1;
        } else if (bufferState.getBuffer(spec.buffer)) {
          rec.buffer = bufferState.getBuffer(spec.buffer);
          rec.size = ((+spec.size) || rec.buffer.dimension) | 0;
          rec.normalized = !!spec.normalized || false;
          if ('type' in spec) {
            check$1.parameter(spec.type, glTypes, 'invalid buffer type');
            rec.type = glTypes[spec.type];
          } else {
            rec.type = rec.buffer.dtype;
          }
          rec.offset = (spec.offset || 0) | 0;
          rec.stride = (spec.stride || 0) | 0;
          rec.divisor = (spec.divisor || 0) | 0;
          rec.state = 1;

          check$1(rec.size >= 1 && rec.size <= 4, 'size must be between 1 and 4');
          check$1(rec.offset >= 0, 'invalid offset');
          check$1(rec.stride >= 0 && rec.stride <= 255, 'stride must be between 0 and 255');
          check$1(rec.divisor >= 0, 'divisor must be positive');
          check$1(!rec.divisor || !!extensions.angle_instanced_arrays, 'ANGLE_instanced_arrays must be enabled to use divisor');
        } else if ('x' in spec) {
          check$1(i > 0, 'first attribute must not be a constant');
          rec.x = +spec.x || 0;
          rec.y = +spec.y || 0;
          rec.z = +spec.z || 0;
          rec.w = +spec.w || 0;
          rec.state = 2;
        } else {
          check$1(false, 'invalid attribute spec for location ' + i);
        }
      }

      // retire unused buffers
      for (var j = 0; j < vao.buffers.length; ++j) {
        if (!bufUpdated[j] && vao.buffers[j]) {
          vao.buffers[j].destroy();
          vao.buffers[j] = null;
        }
      }

      vao.refresh();
      return updateVAO
    }

    updateVAO.destroy = function () {
      for (var j = 0; j < vao.buffers.length; ++j) {
        if (vao.buffers[j]) {
          vao.buffers[j].destroy();
        }
      }
      vao.buffers.length = 0;

      if (vao.ownsElements) {
        vao.elements.destroy();
        vao.elements = null;
        vao.ownsElements = false;
      }

      vao.destroy();
    };

    updateVAO._vao = vao;
    updateVAO._reglType = 'vao';

    return updateVAO(_attr)
  }

  return state
}

var GL_FRAGMENT_SHADER = 35632;
var GL_VERTEX_SHADER = 35633;

var GL_ACTIVE_UNIFORMS = 0x8B86;
var GL_ACTIVE_ATTRIBUTES = 0x8B89;

function wrapShaderState (gl, stringStore, stats, config) {
  // ===================================================
  // glsl compilation and linking
  // ===================================================
  var fragShaders = {};
  var vertShaders = {};

  function ActiveInfo (name, id, location, info) {
    this.name = name;
    this.id = id;
    this.location = location;
    this.info = info;
  }

  function insertActiveInfo (list, info) {
    for (var i = 0; i < list.length; ++i) {
      if (list[i].id === info.id) {
        list[i].location = info.location;
        return
      }
    }
    list.push(info);
  }

  function getShader (type, id, command) {
    var cache = type === GL_FRAGMENT_SHADER ? fragShaders : vertShaders;
    var shader = cache[id];

    if (!shader) {
      var source = stringStore.str(id);
      shader = gl.createShader(type);
      gl.shaderSource(shader, source);
      gl.compileShader(shader);
      check$1.shaderError(gl, shader, source, type, command);
      cache[id] = shader;
    }

    return shader
  }

  // ===================================================
  // program linking
  // ===================================================
  var programCache = {};
  var programList = [];

  var PROGRAM_COUNTER = 0;

  function REGLProgram (fragId, vertId) {
    this.id = PROGRAM_COUNTER++;
    this.fragId = fragId;
    this.vertId = vertId;
    this.program = null;
    this.uniforms = [];
    this.attributes = [];
    this.refCount = 1;

    if (config.profile) {
      this.stats = {
        uniformsCount: 0,
        attributesCount: 0
      };
    }
  }

  function linkProgram (desc, command, attributeLocations) {
    var i, info;

    // -------------------------------
    // compile & link
    // -------------------------------
    var fragShader = getShader(GL_FRAGMENT_SHADER, desc.fragId);
    var vertShader = getShader(GL_VERTEX_SHADER, desc.vertId);

    var program = desc.program = gl.createProgram();
    gl.attachShader(program, fragShader);
    gl.attachShader(program, vertShader);
    if (attributeLocations) {
      for (i = 0; i < attributeLocations.length; ++i) {
        var binding = attributeLocations[i];
        gl.bindAttribLocation(program, binding[0], binding[1]);
      }
    }

    gl.linkProgram(program);
    check$1.linkError(
      gl,
      program,
      stringStore.str(desc.fragId),
      stringStore.str(desc.vertId),
      command);

    // -------------------------------
    // grab uniforms
    // -------------------------------
    var numUniforms = gl.getProgramParameter(program, GL_ACTIVE_UNIFORMS);
    if (config.profile) {
      desc.stats.uniformsCount = numUniforms;
    }
    var uniforms = desc.uniforms;
    for (i = 0; i < numUniforms; ++i) {
      info = gl.getActiveUniform(program, i);
      if (info) {
        if (info.size > 1) {
          for (var j = 0; j < info.size; ++j) {
            var name = info.name.replace('[0]', '[' + j + ']');
            insertActiveInfo(uniforms, new ActiveInfo(
              name,
              stringStore.id(name),
              gl.getUniformLocation(program, name),
              info));
          }
        }
        var uniName = info.name;
        if (info.size > 1) {
          uniName = uniName.replace('[0]', '');
        }
        insertActiveInfo(uniforms, new ActiveInfo(
          uniName,
          stringStore.id(uniName),
          gl.getUniformLocation(program, uniName),
          info));
      }
    }

    // -------------------------------
    // grab attributes
    // -------------------------------
    var numAttributes = gl.getProgramParameter(program, GL_ACTIVE_ATTRIBUTES);
    if (config.profile) {
      desc.stats.attributesCount = numAttributes;
    }

    var attributes = desc.attributes;
    for (i = 0; i < numAttributes; ++i) {
      info = gl.getActiveAttrib(program, i);
      if (info) {
        insertActiveInfo(attributes, new ActiveInfo(
          info.name,
          stringStore.id(info.name),
          gl.getAttribLocation(program, info.name),
          info));
      }
    }
  }

  if (config.profile) {
    stats.getMaxUniformsCount = function () {
      var m = 0;
      programList.forEach(function (desc) {
        if (desc.stats.uniformsCount > m) {
          m = desc.stats.uniformsCount;
        }
      });
      return m
    };

    stats.getMaxAttributesCount = function () {
      var m = 0;
      programList.forEach(function (desc) {
        if (desc.stats.attributesCount > m) {
          m = desc.stats.attributesCount;
        }
      });
      return m
    };
  }

  function restoreShaders () {
    fragShaders = {};
    vertShaders = {};
    for (var i = 0; i < programList.length; ++i) {
      linkProgram(programList[i], null, programList[i].attributes.map(function (info) {
        return [info.location, info.name]
      }));
    }
  }

  return {
    clear: function () {
      var deleteShader = gl.deleteShader.bind(gl);
      values(fragShaders).forEach(deleteShader);
      fragShaders = {};
      values(vertShaders).forEach(deleteShader);
      vertShaders = {};

      programList.forEach(function (desc) {
        gl.deleteProgram(desc.program);
      });
      programList.length = 0;
      programCache = {};

      stats.shaderCount = 0;
    },

    program: function (vertId, fragId, command, attribLocations) {
      check$1.command(vertId >= 0, 'missing vertex shader', command);
      check$1.command(fragId >= 0, 'missing fragment shader', command);

      var cache = programCache[fragId];
      if (!cache) {
        cache = programCache[fragId] = {};
      }
      var prevProgram = cache[vertId];
      if (prevProgram) {
        prevProgram.refCount++;
        if (!attribLocations) {
          return prevProgram
        }
      }
      var program = new REGLProgram(fragId, vertId);
      stats.shaderCount++;
      linkProgram(program, command, attribLocations);
      if (!prevProgram) {
        cache[vertId] = program;
      }
      programList.push(program);
      return extend(program, {
        destroy: function () {
          program.refCount--;
          if (program.refCount <= 0) {
            gl.deleteProgram(program.program);
            var idx = programList.indexOf(program);
            programList.splice(idx, 1);
            stats.shaderCount--;
          }
          // no program is linked to this vert anymore
          if (cache[program.vertId].refCount <= 0) {
            gl.deleteShader(vertShaders[program.vertId]);
            delete vertShaders[program.vertId];
            delete programCache[program.fragId][program.vertId];
          }
          // no program is linked to this frag anymore
          if (!Object.keys(programCache[program.fragId]).length) {
            gl.deleteShader(fragShaders[program.fragId]);
            delete fragShaders[program.fragId];
            delete programCache[program.fragId];
          }
        }
      })
    },

    restore: restoreShaders,

    shader: getShader,

    frag: -1,
    vert: -1
  }
}

var GL_RGBA$3 = 6408;
var GL_UNSIGNED_BYTE$7 = 5121;
var GL_PACK_ALIGNMENT = 0x0D05;
var GL_FLOAT$7 = 0x1406; // 5126

function wrapReadPixels (
  gl,
  framebufferState,
  reglPoll,
  context,
  glAttributes,
  extensions,
  limits) {
  function readPixelsImpl (input) {
    var type;
    if (framebufferState.next === null) {
      check$1(
        glAttributes.preserveDrawingBuffer,
        'you must create a webgl context with "preserveDrawingBuffer":true in order to read pixels from the drawing buffer');
      type = GL_UNSIGNED_BYTE$7;
    } else {
      check$1(
        framebufferState.next.colorAttachments[0].texture !== null,
        'You cannot read from a renderbuffer');
      type = framebufferState.next.colorAttachments[0].texture._texture.type;

      check$1.optional(function () {
        if (extensions.oes_texture_float) {
          check$1(
            type === GL_UNSIGNED_BYTE$7 || type === GL_FLOAT$7,
            'Reading from a framebuffer is only allowed for the types \'uint8\' and \'float\'');

          if (type === GL_FLOAT$7) {
            check$1(limits.readFloat, 'Reading \'float\' values is not permitted in your browser. For a fallback, please see: https://www.npmjs.com/package/glsl-read-float');
          }
        } else {
          check$1(
            type === GL_UNSIGNED_BYTE$7,
            'Reading from a framebuffer is only allowed for the type \'uint8\'');
        }
      });
    }

    var x = 0;
    var y = 0;
    var width = context.framebufferWidth;
    var height = context.framebufferHeight;
    var data = null;

    if (isTypedArray(input)) {
      data = input;
    } else if (input) {
      check$1.type(input, 'object', 'invalid arguments to regl.read()');
      x = input.x | 0;
      y = input.y | 0;
      check$1(
        x >= 0 && x < context.framebufferWidth,
        'invalid x offset for regl.read');
      check$1(
        y >= 0 && y < context.framebufferHeight,
        'invalid y offset for regl.read');
      width = (input.width || (context.framebufferWidth - x)) | 0;
      height = (input.height || (context.framebufferHeight - y)) | 0;
      data = input.data || null;
    }

    // sanity check input.data
    if (data) {
      if (type === GL_UNSIGNED_BYTE$7) {
        check$1(
          data instanceof Uint8Array,
          'buffer must be \'Uint8Array\' when reading from a framebuffer of type \'uint8\'');
      } else if (type === GL_FLOAT$7) {
        check$1(
          data instanceof Float32Array,
          'buffer must be \'Float32Array\' when reading from a framebuffer of type \'float\'');
      }
    }

    check$1(
      width > 0 && width + x <= context.framebufferWidth,
      'invalid width for read pixels');
    check$1(
      height > 0 && height + y <= context.framebufferHeight,
      'invalid height for read pixels');

    // Update WebGL state
    reglPoll();

    // Compute size
    var size = width * height * 4;

    // Allocate data
    if (!data) {
      if (type === GL_UNSIGNED_BYTE$7) {
        data = new Uint8Array(size);
      } else if (type === GL_FLOAT$7) {
        data = data || new Float32Array(size);
      }
    }

    // Type check
    check$1.isTypedArray(data, 'data buffer for regl.read() must be a typedarray');
    check$1(data.byteLength >= size, 'data buffer for regl.read() too small');

    // Run read pixels
    gl.pixelStorei(GL_PACK_ALIGNMENT, 4);
    gl.readPixels(x, y, width, height, GL_RGBA$3,
      type,
      data);

    return data
  }

  function readPixelsFBO (options) {
    var result;
    framebufferState.setFBO({
      framebuffer: options.framebuffer
    }, function () {
      result = readPixelsImpl(options);
    });
    return result
  }

  function readPixels (options) {
    if (!options || !('framebuffer' in options)) {
      return readPixelsImpl(options)
    } else {
      return readPixelsFBO(options)
    }
  }

  return readPixels
}

function slice (x) {
  return Array.prototype.slice.call(x)
}

function join (x) {
  return slice(x).join('')
}

function createEnvironment () {
  // Unique variable id counter
  var varCounter = 0;

  // Linked values are passed from this scope into the generated code block
  // Calling link() passes a value into the generated scope and returns
  // the variable name which it is bound to
  var linkedNames = [];
  var linkedValues = [];
  function link (value) {
    for (var i = 0; i < linkedValues.length; ++i) {
      if (linkedValues[i] === value) {
        return linkedNames[i]
      }
    }

    var name = 'g' + (varCounter++);
    linkedNames.push(name);
    linkedValues.push(value);
    return name
  }

  // create a code block
  function block () {
    var code = [];
    function push () {
      code.push.apply(code, slice(arguments));
    }

    var vars = [];
    function def () {
      var name = 'v' + (varCounter++);
      vars.push(name);

      if (arguments.length > 0) {
        code.push(name, '=');
        code.push.apply(code, slice(arguments));
        code.push(';');
      }

      return name
    }

    return extend(push, {
      def: def,
      toString: function () {
        return join([
          (vars.length > 0 ? 'var ' + vars.join(',') + ';' : ''),
          join(code)
        ])
      }
    })
  }

  function scope () {
    var entry = block();
    var exit = block();

    var entryToString = entry.toString;
    var exitToString = exit.toString;

    function save (object, prop) {
      exit(object, prop, '=', entry.def(object, prop), ';');
    }

    return extend(function () {
      entry.apply(entry, slice(arguments));
    }, {
      def: entry.def,
      entry: entry,
      exit: exit,
      save: save,
      set: function (object, prop, value) {
        save(object, prop);
        entry(object, prop, '=', value, ';');
      },
      toString: function () {
        return entryToString() + exitToString()
      }
    })
  }

  function conditional () {
    var pred = join(arguments);
    var thenBlock = scope();
    var elseBlock = scope();

    var thenToString = thenBlock.toString;
    var elseToString = elseBlock.toString;

    return extend(thenBlock, {
      then: function () {
        thenBlock.apply(thenBlock, slice(arguments));
        return this
      },
      else: function () {
        elseBlock.apply(elseBlock, slice(arguments));
        return this
      },
      toString: function () {
        var elseClause = elseToString();
        if (elseClause) {
          elseClause = 'else{' + elseClause + '}';
        }
        return join([
          'if(', pred, '){',
          thenToString(),
          '}', elseClause
        ])
      }
    })
  }

  // procedure list
  var globalBlock = block();
  var procedures = {};
  function proc (name, count) {
    var args = [];
    function arg () {
      var name = 'a' + args.length;
      args.push(name);
      return name
    }

    count = count || 0;
    for (var i = 0; i < count; ++i) {
      arg();
    }

    var body = scope();
    var bodyToString = body.toString;

    var result = procedures[name] = extend(body, {
      arg: arg,
      toString: function () {
        return join([
          'function(', args.join(), '){',
          bodyToString(),
          '}'
        ])
      }
    });

    return result
  }

  function compile () {
    var code = ['"use strict";',
      globalBlock,
      'return {'];
    Object.keys(procedures).forEach(function (name) {
      code.push('"', name, '":', procedures[name].toString(), ',');
    });
    code.push('}');
    var src = join(code)
      .replace(/;/g, ';\n')
      .replace(/}/g, '}\n')
      .replace(/{/g, '{\n');
    var proc = Function.apply(null, linkedNames.concat(src));
    return proc.apply(null, linkedValues)
  }

  return {
    global: globalBlock,
    link: link,
    block: block,
    proc: proc,
    scope: scope,
    cond: conditional,
    compile: compile
  }
}

// "cute" names for vector components
var CUTE_COMPONENTS = 'xyzw'.split('');

var GL_UNSIGNED_BYTE$8 = 5121;

var ATTRIB_STATE_POINTER = 1;
var ATTRIB_STATE_CONSTANT = 2;

var DYN_FUNC$1 = 0;
var DYN_PROP$1 = 1;
var DYN_CONTEXT$1 = 2;
var DYN_STATE$1 = 3;
var DYN_THUNK = 4;
var DYN_CONSTANT$1 = 5;
var DYN_ARRAY$1 = 6;

var S_DITHER = 'dither';
var S_BLEND_ENABLE = 'blend.enable';
var S_BLEND_COLOR = 'blend.color';
var S_BLEND_EQUATION = 'blend.equation';
var S_BLEND_FUNC = 'blend.func';
var S_DEPTH_ENABLE = 'depth.enable';
var S_DEPTH_FUNC = 'depth.func';
var S_DEPTH_RANGE = 'depth.range';
var S_DEPTH_MASK = 'depth.mask';
var S_COLOR_MASK = 'colorMask';
var S_CULL_ENABLE = 'cull.enable';
var S_CULL_FACE = 'cull.face';
var S_FRONT_FACE = 'frontFace';
var S_LINE_WIDTH = 'lineWidth';
var S_POLYGON_OFFSET_ENABLE = 'polygonOffset.enable';
var S_POLYGON_OFFSET_OFFSET = 'polygonOffset.offset';
var S_SAMPLE_ALPHA = 'sample.alpha';
var S_SAMPLE_ENABLE = 'sample.enable';
var S_SAMPLE_COVERAGE = 'sample.coverage';
var S_STENCIL_ENABLE = 'stencil.enable';
var S_STENCIL_MASK = 'stencil.mask';
var S_STENCIL_FUNC = 'stencil.func';
var S_STENCIL_OPFRONT = 'stencil.opFront';
var S_STENCIL_OPBACK = 'stencil.opBack';
var S_SCISSOR_ENABLE = 'scissor.enable';
var S_SCISSOR_BOX = 'scissor.box';
var S_VIEWPORT = 'viewport';

var S_PROFILE = 'profile';

var S_FRAMEBUFFER = 'framebuffer';
var S_VERT = 'vert';
var S_FRAG = 'frag';
var S_ELEMENTS = 'elements';
var S_PRIMITIVE = 'primitive';
var S_COUNT = 'count';
var S_OFFSET = 'offset';
var S_INSTANCES = 'instances';
var S_VAO = 'vao';

var SUFFIX_WIDTH = 'Width';
var SUFFIX_HEIGHT = 'Height';

var S_FRAMEBUFFER_WIDTH = S_FRAMEBUFFER + SUFFIX_WIDTH;
var S_FRAMEBUFFER_HEIGHT = S_FRAMEBUFFER + SUFFIX_HEIGHT;
var S_VIEWPORT_WIDTH = S_VIEWPORT + SUFFIX_WIDTH;
var S_VIEWPORT_HEIGHT = S_VIEWPORT + SUFFIX_HEIGHT;
var S_DRAWINGBUFFER = 'drawingBuffer';
var S_DRAWINGBUFFER_WIDTH = S_DRAWINGBUFFER + SUFFIX_WIDTH;
var S_DRAWINGBUFFER_HEIGHT = S_DRAWINGBUFFER + SUFFIX_HEIGHT;

var NESTED_OPTIONS = [
  S_BLEND_FUNC,
  S_BLEND_EQUATION,
  S_STENCIL_FUNC,
  S_STENCIL_OPFRONT,
  S_STENCIL_OPBACK,
  S_SAMPLE_COVERAGE,
  S_VIEWPORT,
  S_SCISSOR_BOX,
  S_POLYGON_OFFSET_OFFSET
];

var GL_ARRAY_BUFFER$2 = 34962;
var GL_ELEMENT_ARRAY_BUFFER$2 = 34963;

var GL_FRAGMENT_SHADER$1 = 35632;
var GL_VERTEX_SHADER$1 = 35633;

var GL_TEXTURE_2D$3 = 0x0DE1;
var GL_TEXTURE_CUBE_MAP$2 = 0x8513;

var GL_CULL_FACE = 0x0B44;
var GL_BLEND = 0x0BE2;
var GL_DITHER = 0x0BD0;
var GL_STENCIL_TEST = 0x0B90;
var GL_DEPTH_TEST = 0x0B71;
var GL_SCISSOR_TEST = 0x0C11;
var GL_POLYGON_OFFSET_FILL = 0x8037;
var GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
var GL_SAMPLE_COVERAGE = 0x80A0;

var GL_FLOAT$8 = 5126;
var GL_FLOAT_VEC2 = 35664;
var GL_FLOAT_VEC3 = 35665;
var GL_FLOAT_VEC4 = 35666;
var GL_INT$3 = 5124;
var GL_INT_VEC2 = 35667;
var GL_INT_VEC3 = 35668;
var GL_INT_VEC4 = 35669;
var GL_BOOL = 35670;
var GL_BOOL_VEC2 = 35671;
var GL_BOOL_VEC3 = 35672;
var GL_BOOL_VEC4 = 35673;
var GL_FLOAT_MAT2 = 35674;
var GL_FLOAT_MAT3 = 35675;
var GL_FLOAT_MAT4 = 35676;
var GL_SAMPLER_2D = 35678;
var GL_SAMPLER_CUBE = 35680;

var GL_TRIANGLES$1 = 4;

var GL_FRONT = 1028;
var GL_BACK = 1029;
var GL_CW = 0x0900;
var GL_CCW = 0x0901;
var GL_MIN_EXT = 0x8007;
var GL_MAX_EXT = 0x8008;
var GL_ALWAYS = 519;
var GL_KEEP = 7680;
var GL_ZERO = 0;
var GL_ONE = 1;
var GL_FUNC_ADD = 0x8006;
var GL_LESS = 513;

var GL_FRAMEBUFFER$2 = 0x8D40;
var GL_COLOR_ATTACHMENT0$2 = 0x8CE0;

var blendFuncs = {
  '0': 0,
  '1': 1,
  'zero': 0,
  'one': 1,
  'src color': 768,
  'one minus src color': 769,
  'src alpha': 770,
  'one minus src alpha': 771,
  'dst color': 774,
  'one minus dst color': 775,
  'dst alpha': 772,
  'one minus dst alpha': 773,
  'constant color': 32769,
  'one minus constant color': 32770,
  'constant alpha': 32771,
  'one minus constant alpha': 32772,
  'src alpha saturate': 776
};

// There are invalid values for srcRGB and dstRGB. See:
// https://www.khronos.org/registry/webgl/specs/1.0/#6.13
// https://github.com/KhronosGroup/WebGL/blob/0d3201f5f7ec3c0060bc1f04077461541f1987b9/conformance-suites/1.0.3/conformance/misc/webgl-specific.html#L56
var invalidBlendCombinations = [
  'constant color, constant alpha',
  'one minus constant color, constant alpha',
  'constant color, one minus constant alpha',
  'one minus constant color, one minus constant alpha',
  'constant alpha, constant color',
  'constant alpha, one minus constant color',
  'one minus constant alpha, constant color',
  'one minus constant alpha, one minus constant color'
];

var compareFuncs = {
  'never': 512,
  'less': 513,
  '<': 513,
  'equal': 514,
  '=': 514,
  '==': 514,
  '===': 514,
  'lequal': 515,
  '<=': 515,
  'greater': 516,
  '>': 516,
  'notequal': 517,
  '!=': 517,
  '!==': 517,
  'gequal': 518,
  '>=': 518,
  'always': 519
};

var stencilOps = {
  '0': 0,
  'zero': 0,
  'keep': 7680,
  'replace': 7681,
  'increment': 7682,
  'decrement': 7683,
  'increment wrap': 34055,
  'decrement wrap': 34056,
  'invert': 5386
};

var shaderType = {
  'frag': GL_FRAGMENT_SHADER$1,
  'vert': GL_VERTEX_SHADER$1
};

var orientationType = {
  'cw': GL_CW,
  'ccw': GL_CCW
};

function isBufferArgs (x) {
  return Array.isArray(x) ||
    isTypedArray(x) ||
    isNDArrayLike(x)
}

// Make sure viewport is processed first
function sortState (state) {
  return state.sort(function (a, b) {
    if (a === S_VIEWPORT) {
      return -1
    } else if (b === S_VIEWPORT) {
      return 1
    }
    return (a < b) ? -1 : 1
  })
}

function Declaration (thisDep, contextDep, propDep, append) {
  this.thisDep = thisDep;
  this.contextDep = contextDep;
  this.propDep = propDep;
  this.append = append;
}

function isStatic (decl) {
  return decl && !(decl.thisDep || decl.contextDep || decl.propDep)
}

function createStaticDecl (append) {
  return new Declaration(false, false, false, append)
}

function createDynamicDecl (dyn, append) {
  var type = dyn.type;
  if (type === DYN_FUNC$1) {
    var numArgs = dyn.data.length;
    return new Declaration(
      true,
      numArgs >= 1,
      numArgs >= 2,
      append)
  } else if (type === DYN_THUNK) {
    var data = dyn.data;
    return new Declaration(
      data.thisDep,
      data.contextDep,
      data.propDep,
      append)
  } else if (type === DYN_CONSTANT$1) {
    return new Declaration(
      false,
      false,
      false,
      append)
  } else if (type === DYN_ARRAY$1) {
    var thisDep = false;
    var contextDep = false;
    var propDep = false;
    for (var i = 0; i < dyn.data.length; ++i) {
      var subDyn = dyn.data[i];
      if (subDyn.type === DYN_PROP$1) {
        propDep = true;
      } else if (subDyn.type === DYN_CONTEXT$1) {
        contextDep = true;
      } else if (subDyn.type === DYN_STATE$1) {
        thisDep = true;
      } else if (subDyn.type === DYN_FUNC$1) {
        thisDep = true;
        var subArgs = subDyn.data;
        if (subArgs >= 1) {
          contextDep = true;
        }
        if (subArgs >= 2) {
          propDep = true;
        }
      } else if (subDyn.type === DYN_THUNK) {
        thisDep = thisDep || subDyn.data.thisDep;
        contextDep = contextDep || subDyn.data.contextDep;
        propDep = propDep || subDyn.data.propDep;
      }
    }
    return new Declaration(
      thisDep,
      contextDep,
      propDep,
      append)
  } else {
    return new Declaration(
      type === DYN_STATE$1,
      type === DYN_CONTEXT$1,
      type === DYN_PROP$1,
      append)
  }
}

var SCOPE_DECL = new Declaration(false, false, false, function () {});

function reglCore (
  gl,
  stringStore,
  extensions,
  limits,
  bufferState,
  elementState,
  textureState,
  framebufferState,
  uniformState,
  attributeState,
  shaderState,
  drawState,
  contextState,
  timer,
  config) {
  var AttributeRecord = attributeState.Record;

  var blendEquations = {
    'add': 32774,
    'subtract': 32778,
    'reverse subtract': 32779
  };
  if (extensions.ext_blend_minmax) {
    blendEquations.min = GL_MIN_EXT;
    blendEquations.max = GL_MAX_EXT;
  }

  var extInstancing = extensions.angle_instanced_arrays;
  var extDrawBuffers = extensions.webgl_draw_buffers;
  var extVertexArrays = extensions.oes_vertex_array_object;

  // ===================================================
  // ===================================================
  // WEBGL STATE
  // ===================================================
  // ===================================================
  var currentState = {
    dirty: true,
    profile: config.profile
  };
  var nextState = {};
  var GL_STATE_NAMES = [];
  var GL_FLAGS = {};
  var GL_VARIABLES = {};

  function propName (name) {
    return name.replace('.', '_')
  }

  function stateFlag (sname, cap, init) {
    var name = propName(sname);
    GL_STATE_NAMES.push(sname);
    nextState[name] = currentState[name] = !!init;
    GL_FLAGS[name] = cap;
  }

  function stateVariable (sname, func, init) {
    var name = propName(sname);
    GL_STATE_NAMES.push(sname);
    if (Array.isArray(init)) {
      currentState[name] = init.slice();
      nextState[name] = init.slice();
    } else {
      currentState[name] = nextState[name] = init;
    }
    GL_VARIABLES[name] = func;
  }

  // Dithering
  stateFlag(S_DITHER, GL_DITHER);

  // Blending
  stateFlag(S_BLEND_ENABLE, GL_BLEND);
  stateVariable(S_BLEND_COLOR, 'blendColor', [0, 0, 0, 0]);
  stateVariable(S_BLEND_EQUATION, 'blendEquationSeparate',
    [GL_FUNC_ADD, GL_FUNC_ADD]);
  stateVariable(S_BLEND_FUNC, 'blendFuncSeparate',
    [GL_ONE, GL_ZERO, GL_ONE, GL_ZERO]);

  // Depth
  stateFlag(S_DEPTH_ENABLE, GL_DEPTH_TEST, true);
  stateVariable(S_DEPTH_FUNC, 'depthFunc', GL_LESS);
  stateVariable(S_DEPTH_RANGE, 'depthRange', [0, 1]);
  stateVariable(S_DEPTH_MASK, 'depthMask', true);

  // Color mask
  stateVariable(S_COLOR_MASK, S_COLOR_MASK, [true, true, true, true]);

  // Face culling
  stateFlag(S_CULL_ENABLE, GL_CULL_FACE);
  stateVariable(S_CULL_FACE, 'cullFace', GL_BACK);

  // Front face orientation
  stateVariable(S_FRONT_FACE, S_FRONT_FACE, GL_CCW);

  // Line width
  stateVariable(S_LINE_WIDTH, S_LINE_WIDTH, 1);

  // Polygon offset
  stateFlag(S_POLYGON_OFFSET_ENABLE, GL_POLYGON_OFFSET_FILL);
  stateVariable(S_POLYGON_OFFSET_OFFSET, 'polygonOffset', [0, 0]);

  // Sample coverage
  stateFlag(S_SAMPLE_ALPHA, GL_SAMPLE_ALPHA_TO_COVERAGE);
  stateFlag(S_SAMPLE_ENABLE, GL_SAMPLE_COVERAGE);
  stateVariable(S_SAMPLE_COVERAGE, 'sampleCoverage', [1, false]);

  // Stencil
  stateFlag(S_STENCIL_ENABLE, GL_STENCIL_TEST);
  stateVariable(S_STENCIL_MASK, 'stencilMask', -1);
  stateVariable(S_STENCIL_FUNC, 'stencilFunc', [GL_ALWAYS, 0, -1]);
  stateVariable(S_STENCIL_OPFRONT, 'stencilOpSeparate',
    [GL_FRONT, GL_KEEP, GL_KEEP, GL_KEEP]);
  stateVariable(S_STENCIL_OPBACK, 'stencilOpSeparate',
    [GL_BACK, GL_KEEP, GL_KEEP, GL_KEEP]);

  // Scissor
  stateFlag(S_SCISSOR_ENABLE, GL_SCISSOR_TEST);
  stateVariable(S_SCISSOR_BOX, 'scissor',
    [0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight]);

  // Viewport
  stateVariable(S_VIEWPORT, S_VIEWPORT,
    [0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight]);

  // ===================================================
  // ===================================================
  // ENVIRONMENT
  // ===================================================
  // ===================================================
  var sharedState = {
    gl: gl,
    context: contextState,
    strings: stringStore,
    next: nextState,
    current: currentState,
    draw: drawState,
    elements: elementState,
    buffer: bufferState,
    shader: shaderState,
    attributes: attributeState.state,
    vao: attributeState,
    uniforms: uniformState,
    framebuffer: framebufferState,
    extensions: extensions,

    timer: timer,
    isBufferArgs: isBufferArgs
  };

  var sharedConstants = {
    primTypes: primTypes,
    compareFuncs: compareFuncs,
    blendFuncs: blendFuncs,
    blendEquations: blendEquations,
    stencilOps: stencilOps,
    glTypes: glTypes,
    orientationType: orientationType
  };

  check$1.optional(function () {
    sharedState.isArrayLike = isArrayLike;
  });

  if (extDrawBuffers) {
    sharedConstants.backBuffer = [GL_BACK];
    sharedConstants.drawBuffer = loop(limits.maxDrawbuffers, function (i) {
      if (i === 0) {
        return [0]
      }
      return loop(i, function (j) {
        return GL_COLOR_ATTACHMENT0$2 + j
      })
    });
  }

  var drawCallCounter = 0;
  function createREGLEnvironment () {
    var env = createEnvironment();
    var link = env.link;
    var global = env.global;
    env.id = drawCallCounter++;

    env.batchId = '0';

    // link shared state
    var SHARED = link(sharedState);
    var shared = env.shared = {
      props: 'a0'
    };
    Object.keys(sharedState).forEach(function (prop) {
      shared[prop] = global.def(SHARED, '.', prop);
    });

    // Inject runtime assertion stuff for debug builds
    check$1.optional(function () {
      env.CHECK = link(check$1);
      env.commandStr = check$1.guessCommand();
      env.command = link(env.commandStr);
      env.assert = function (block, pred, message) {
        block(
          'if(!(', pred, '))',
          this.CHECK, '.commandRaise(', link(message), ',', this.command, ');');
      };

      sharedConstants.invalidBlendCombinations = invalidBlendCombinations;
    });

    // Copy GL state variables over
    var nextVars = env.next = {};
    var currentVars = env.current = {};
    Object.keys(GL_VARIABLES).forEach(function (variable) {
      if (Array.isArray(currentState[variable])) {
        nextVars[variable] = global.def(shared.next, '.', variable);
        currentVars[variable] = global.def(shared.current, '.', variable);
      }
    });

    // Initialize shared constants
    var constants = env.constants = {};
    Object.keys(sharedConstants).forEach(function (name) {
      constants[name] = global.def(JSON.stringify(sharedConstants[name]));
    });

    // Helper function for calling a block
    env.invoke = function (block, x) {
      switch (x.type) {
        case DYN_FUNC$1:
          var argList = [
            'this',
            shared.context,
            shared.props,
            env.batchId
          ];
          return block.def(
            link(x.data), '.call(',
            argList.slice(0, Math.max(x.data.length + 1, 4)),
            ')')
        case DYN_PROP$1:
          return block.def(shared.props, x.data)
        case DYN_CONTEXT$1:
          return block.def(shared.context, x.data)
        case DYN_STATE$1:
          return block.def('this', x.data)
        case DYN_THUNK:
          x.data.append(env, block);
          return x.data.ref
        case DYN_CONSTANT$1:
          return x.data.toString()
        case DYN_ARRAY$1:
          return x.data.map(function (y) {
            return env.invoke(block, y)
          })
      }
    };

    env.attribCache = {};

    var scopeAttribs = {};
    env.scopeAttrib = function (name) {
      var id = stringStore.id(name);
      if (id in scopeAttribs) {
        return scopeAttribs[id]
      }
      var binding = attributeState.scope[id];
      if (!binding) {
        binding = attributeState.scope[id] = new AttributeRecord();
      }
      var result = scopeAttribs[id] = link(binding);
      return result
    };

    return env
  }

  // ===================================================
  // ===================================================
  // PARSING
  // ===================================================
  // ===================================================
  function parseProfile (options) {
    var staticOptions = options.static;
    var dynamicOptions = options.dynamic;

    var profileEnable;
    if (S_PROFILE in staticOptions) {
      var value = !!staticOptions[S_PROFILE];
      profileEnable = createStaticDecl(function (env, scope) {
        return value
      });
      profileEnable.enable = value;
    } else if (S_PROFILE in dynamicOptions) {
      var dyn = dynamicOptions[S_PROFILE];
      profileEnable = createDynamicDecl(dyn, function (env, scope) {
        return env.invoke(scope, dyn)
      });
    }

    return profileEnable
  }

  function parseFramebuffer (options, env) {
    var staticOptions = options.static;
    var dynamicOptions = options.dynamic;

    if (S_FRAMEBUFFER in staticOptions) {
      var framebuffer = staticOptions[S_FRAMEBUFFER];
      if (framebuffer) {
        framebuffer = framebufferState.getFramebuffer(framebuffer);
        check$1.command(framebuffer, 'invalid framebuffer object');
        return createStaticDecl(function (env, block) {
          var FRAMEBUFFER = env.link(framebuffer);
          var shared = env.shared;
          block.set(
            shared.framebuffer,
            '.next',
            FRAMEBUFFER);
          var CONTEXT = shared.context;
          block.set(
            CONTEXT,
            '.' + S_FRAMEBUFFER_WIDTH,
            FRAMEBUFFER + '.width');
          block.set(
            CONTEXT,
            '.' + S_FRAMEBUFFER_HEIGHT,
            FRAMEBUFFER + '.height');
          return FRAMEBUFFER
        })
      } else {
        return createStaticDecl(function (env, scope) {
          var shared = env.shared;
          scope.set(
            shared.framebuffer,
            '.next',
            'null');
          var CONTEXT = shared.context;
          scope.set(
            CONTEXT,
            '.' + S_FRAMEBUFFER_WIDTH,
            CONTEXT + '.' + S_DRAWINGBUFFER_WIDTH);
          scope.set(
            CONTEXT,
            '.' + S_FRAMEBUFFER_HEIGHT,
            CONTEXT + '.' + S_DRAWINGBUFFER_HEIGHT);
          return 'null'
        })
      }
    } else if (S_FRAMEBUFFER in dynamicOptions) {
      var dyn = dynamicOptions[S_FRAMEBUFFER];
      return createDynamicDecl(dyn, function (env, scope) {
        var FRAMEBUFFER_FUNC = env.invoke(scope, dyn);
        var shared = env.shared;
        var FRAMEBUFFER_STATE = shared.framebuffer;
        var FRAMEBUFFER = scope.def(
          FRAMEBUFFER_STATE, '.getFramebuffer(', FRAMEBUFFER_FUNC, ')');

        check$1.optional(function () {
          env.assert(scope,
            '!' + FRAMEBUFFER_FUNC + '||' + FRAMEBUFFER,
            'invalid framebuffer object');
        });

        scope.set(
          FRAMEBUFFER_STATE,
          '.next',
          FRAMEBUFFER);
        var CONTEXT = shared.context;
        scope.set(
          CONTEXT,
          '.' + S_FRAMEBUFFER_WIDTH,
          FRAMEBUFFER + '?' + FRAMEBUFFER + '.width:' +
          CONTEXT + '.' + S_DRAWINGBUFFER_WIDTH);
        scope.set(
          CONTEXT,
          '.' + S_FRAMEBUFFER_HEIGHT,
          FRAMEBUFFER +
          '?' + FRAMEBUFFER + '.height:' +
          CONTEXT + '.' + S_DRAWINGBUFFER_HEIGHT);
        return FRAMEBUFFER
      })
    } else {
      return null
    }
  }

  function parseViewportScissor (options, framebuffer, env) {
    var staticOptions = options.static;
    var dynamicOptions = options.dynamic;

    function parseBox (param) {
      if (param in staticOptions) {
        var box = staticOptions[param];
        check$1.commandType(box, 'object', 'invalid ' + param, env.commandStr);

        var isStatic = true;
        var x = box.x | 0;
        var y = box.y | 0;
        var w, h;
        if ('width' in box) {
          w = box.width | 0;
          check$1.command(w >= 0, 'invalid ' + param, env.commandStr);
        } else {
          isStatic = false;
        }
        if ('height' in box) {
          h = box.height | 0;
          check$1.command(h >= 0, 'invalid ' + param, env.commandStr);
        } else {
          isStatic = false;
        }

        return new Declaration(
          !isStatic && framebuffer && framebuffer.thisDep,
          !isStatic && framebuffer && framebuffer.contextDep,
          !isStatic && framebuffer && framebuffer.propDep,
          function (env, scope) {
            var CONTEXT = env.shared.context;
            var BOX_W = w;
            if (!('width' in box)) {
              BOX_W = scope.def(CONTEXT, '.', S_FRAMEBUFFER_WIDTH, '-', x);
            }
            var BOX_H = h;
            if (!('height' in box)) {
              BOX_H = scope.def(CONTEXT, '.', S_FRAMEBUFFER_HEIGHT, '-', y);
            }
            return [x, y, BOX_W, BOX_H]
          })
      } else if (param in dynamicOptions) {
        var dynBox = dynamicOptions[param];
        var result = createDynamicDecl(dynBox, function (env, scope) {
          var BOX = env.invoke(scope, dynBox);

          check$1.optional(function () {
            env.assert(scope,
              BOX + '&&typeof ' + BOX + '==="object"',
              'invalid ' + param);
          });

          var CONTEXT = env.shared.context;
          var BOX_X = scope.def(BOX, '.x|0');
          var BOX_Y = scope.def(BOX, '.y|0');
          var BOX_W = scope.def(
            '"width" in ', BOX, '?', BOX, '.width|0:',
            '(', CONTEXT, '.', S_FRAMEBUFFER_WIDTH, '-', BOX_X, ')');
          var BOX_H = scope.def(
            '"height" in ', BOX, '?', BOX, '.height|0:',
            '(', CONTEXT, '.', S_FRAMEBUFFER_HEIGHT, '-', BOX_Y, ')');

          check$1.optional(function () {
            env.assert(scope,
              BOX_W + '>=0&&' +
              BOX_H + '>=0',
              'invalid ' + param);
          });

          return [BOX_X, BOX_Y, BOX_W, BOX_H]
        });
        if (framebuffer) {
          result.thisDep = result.thisDep || framebuffer.thisDep;
          result.contextDep = result.contextDep || framebuffer.contextDep;
          result.propDep = result.propDep || framebuffer.propDep;
        }
        return result
      } else if (framebuffer) {
        return new Declaration(
          framebuffer.thisDep,
          framebuffer.contextDep,
          framebuffer.propDep,
          function (env, scope) {
            var CONTEXT = env.shared.context;
            return [
              0, 0,
              scope.def(CONTEXT, '.', S_FRAMEBUFFER_WIDTH),
              scope.def(CONTEXT, '.', S_FRAMEBUFFER_HEIGHT)]
          })
      } else {
        return null
      }
    }

    var viewport = parseBox(S_VIEWPORT);

    if (viewport) {
      var prevViewport = viewport;
      viewport = new Declaration(
        viewport.thisDep,
        viewport.contextDep,
        viewport.propDep,
        function (env, scope) {
          var VIEWPORT = prevViewport.append(env, scope);
          var CONTEXT = env.shared.context;
          scope.set(
            CONTEXT,
            '.' + S_VIEWPORT_WIDTH,
            VIEWPORT[2]);
          scope.set(
            CONTEXT,
            '.' + S_VIEWPORT_HEIGHT,
            VIEWPORT[3]);
          return VIEWPORT
        });
    }

    return {
      viewport: viewport,
      scissor_box: parseBox(S_SCISSOR_BOX)
    }
  }

  function parseAttribLocations (options, attributes) {
    var staticOptions = options.static;
    var staticProgram =
      typeof staticOptions[S_FRAG] === 'string' &&
      typeof staticOptions[S_VERT] === 'string';
    if (staticProgram) {
      if (Object.keys(attributes.dynamic).length > 0) {
        return null
      }
      var staticAttributes = attributes.static;
      var sAttributes = Object.keys(staticAttributes);
      if (sAttributes.length > 0 && typeof staticAttributes[sAttributes[0]] === 'number') {
        var bindings = [];
        for (var i = 0; i < sAttributes.length; ++i) {
          check$1(typeof staticAttributes[sAttributes[i]] === 'number', 'must specify all vertex attribute locations when using vaos');
          bindings.push([staticAttributes[sAttributes[i]] | 0, sAttributes[i]]);
        }
        return bindings
      }
    }
    return null
  }

  function parseProgram (options, env, attribLocations) {
    var staticOptions = options.static;
    var dynamicOptions = options.dynamic;

    function parseShader (name) {
      if (name in staticOptions) {
        var id = stringStore.id(staticOptions[name]);
        check$1.optional(function () {
          shaderState.shader(shaderType[name], id, check$1.guessCommand());
        });
        var result = createStaticDecl(function () {
          return id
        });
        result.id = id;
        return result
      } else if (name in dynamicOptions) {
        var dyn = dynamicOptions[name];
        return createDynamicDecl(dyn, function (env, scope) {
          var str = env.invoke(scope, dyn);
          var id = scope.def(env.shared.strings, '.id(', str, ')');
          check$1.optional(function () {
            scope(
              env.shared.shader, '.shader(',
              shaderType[name], ',',
              id, ',',
              env.command, ');');
          });
          return id
        })
      }
      return null
    }

    var frag = parseShader(S_FRAG);
    var vert = parseShader(S_VERT);

    var program = null;
    var progVar;
    if (isStatic(frag) && isStatic(vert)) {
      program = shaderState.program(vert.id, frag.id, null, attribLocations);
      progVar = createStaticDecl(function (env, scope) {
        return env.link(program)
      });
    } else {
      progVar = new Declaration(
        (frag && frag.thisDep) || (vert && vert.thisDep),
        (frag && frag.contextDep) || (vert && vert.contextDep),
        (frag && frag.propDep) || (vert && vert.propDep),
        function (env, scope) {
          var SHADER_STATE = env.shared.shader;
          var fragId;
          if (frag) {
            fragId = frag.append(env, scope);
          } else {
            fragId = scope.def(SHADER_STATE, '.', S_FRAG);
          }
          var vertId;
          if (vert) {
            vertId = vert.append(env, scope);
          } else {
            vertId = scope.def(SHADER_STATE, '.', S_VERT);
          }
          var progDef = SHADER_STATE + '.program(' + vertId + ',' + fragId;
          check$1.optional(function () {
            progDef += ',' + env.command;
          });
          return scope.def(progDef + ')')
        });
    }

    return {
      frag: frag,
      vert: vert,
      progVar: progVar,
      program: program
    }
  }

  function parseDraw (options, env) {
    var staticOptions = options.static;
    var dynamicOptions = options.dynamic;

    // TODO: should use VAO to get default values for offset properties
    // should move vao parse into here and out of the old stuff

    var staticDraw = {};
    var vaoActive = false;

    function parseVAO () {
      if (S_VAO in staticOptions) {
        var vao = staticOptions[S_VAO];
        if (vao !== null && attributeState.getVAO(vao) === null) {
          vao = attributeState.createVAO(vao);
        }

        vaoActive = true;
        staticDraw.vao = vao;

        return createStaticDecl(function (env) {
          var vaoRef = attributeState.getVAO(vao);
          if (vaoRef) {
            return env.link(vaoRef)
          } else {
            return 'null'
          }
        })
      } else if (S_VAO in dynamicOptions) {
        vaoActive = true;
        var dyn = dynamicOptions[S_VAO];
        return createDynamicDecl(dyn, function (env, scope) {
          var vaoRef = env.invoke(scope, dyn);
          return scope.def(env.shared.vao + '.getVAO(' + vaoRef + ')')
        })
      }
      return null
    }

    var vao = parseVAO();

    var elementsActive = false;

    function parseElements () {
      if (S_ELEMENTS in staticOptions) {
        var elements = staticOptions[S_ELEMENTS];
        staticDraw.elements = elements;
        if (isBufferArgs(elements)) {
          var e = staticDraw.elements = elementState.create(elements, true);
          elements = elementState.getElements(e);
          elementsActive = true;
        } else if (elements) {
          elements = elementState.getElements(elements);
          elementsActive = true;
          check$1.command(elements, 'invalid elements', env.commandStr);
        }

        var result = createStaticDecl(function (env, scope) {
          if (elements) {
            var result = env.link(elements);
            env.ELEMENTS = result;
            return result
          }
          env.ELEMENTS = null;
          return null
        });
        result.value = elements;
        return result
      } else if (S_ELEMENTS in dynamicOptions) {
        elementsActive = true;

        var dyn = dynamicOptions[S_ELEMENTS];
        return createDynamicDecl(dyn, function (env, scope) {
          var shared = env.shared;

          var IS_BUFFER_ARGS = shared.isBufferArgs;
          var ELEMENT_STATE = shared.elements;

          var elementDefn = env.invoke(scope, dyn);
          var elements = scope.def('null');
          var elementStream = scope.def(IS_BUFFER_ARGS, '(', elementDefn, ')');

          var ifte = env.cond(elementStream)
            .then(elements, '=', ELEMENT_STATE, '.createStream(', elementDefn, ');')
            .else(elements, '=', ELEMENT_STATE, '.getElements(', elementDefn, ');');

          check$1.optional(function () {
            env.assert(ifte.else,
              '!' + elementDefn + '||' + elements,
              'invalid elements');
          });

          scope.entry(ifte);
          scope.exit(
            env.cond(elementStream)
              .then(ELEMENT_STATE, '.destroyStream(', elements, ');'));

          env.ELEMENTS = elements;

          return elements
        })
      } else if (vaoActive) {
        return new Declaration(
          vao.thisDep,
          vao.contextDep,
          vao.propDep,
          function (env, scope) {
            return scope.def(env.shared.vao + '.currentVAO?' + env.shared.elements + '.getElements(' + env.shared.vao + '.currentVAO.elements):null')
          })
      }
      return null
    }

    var elements = parseElements();

    function parsePrimitive () {
      if (S_PRIMITIVE in staticOptions) {
        var primitive = staticOptions[S_PRIMITIVE];
        staticDraw.primitive = primitive;
        check$1.commandParameter(primitive, primTypes, 'invalid primitve', env.commandStr);
        return createStaticDecl(function (env, scope) {
          return primTypes[primitive]
        })
      } else if (S_PRIMITIVE in dynamicOptions) {
        var dynPrimitive = dynamicOptions[S_PRIMITIVE];
        return createDynamicDecl(dynPrimitive, function (env, scope) {
          var PRIM_TYPES = env.constants.primTypes;
          var prim = env.invoke(scope, dynPrimitive);
          check$1.optional(function () {
            env.assert(scope,
              prim + ' in ' + PRIM_TYPES,
              'invalid primitive, must be one of ' + Object.keys(primTypes));
          });
          return scope.def(PRIM_TYPES, '[', prim, ']')
        })
      } else if (elementsActive) {
        if (isStatic(elements)) {
          if (elements.value) {
            return createStaticDecl(function (env, scope) {
              return scope.def(env.ELEMENTS, '.primType')
            })
          } else {
            return createStaticDecl(function () {
              return GL_TRIANGLES$1
            })
          }
        } else {
          return new Declaration(
            elements.thisDep,
            elements.contextDep,
            elements.propDep,
            function (env, scope) {
              var elements = env.ELEMENTS;
              return scope.def(elements, '?', elements, '.primType:', GL_TRIANGLES$1)
            })
        }
      } else if (vaoActive) {
        return new Declaration(
          vao.thisDep,
          vao.contextDep,
          vao.propDep,
          function (env, scope) {
            return scope.def(env.shared.vao + '.currentVAO?' + env.shared.vao + '.currentVAO.primitive:' + GL_TRIANGLES$1)
          })
      }
      return null
    }

    function parseParam (param, isOffset) {
      if (param in staticOptions) {
        var value = staticOptions[param] | 0;
        if (isOffset) {
          staticDraw.offset = value;
        } else {
          staticDraw.instances = value;
        }
        check$1.command(!isOffset || value >= 0, 'invalid ' + param, env.commandStr);
        return createStaticDecl(function (env, scope) {
          if (isOffset) {
            env.OFFSET = value;
          }
          return value
        })
      } else if (param in dynamicOptions) {
        var dynValue = dynamicOptions[param];
        return createDynamicDecl(dynValue, function (env, scope) {
          var result = env.invoke(scope, dynValue);
          if (isOffset) {
            env.OFFSET = result;
            check$1.optional(function () {
              env.assert(scope,
                result + '>=0',
                'invalid ' + param);
            });
          }
          return result
        })
      } else if (isOffset) {
        if (elementsActive) {
          return createStaticDecl(function (env, scope) {
            env.OFFSET = 0;
            return 0
          })
        } else if (vaoActive) {
          return new Declaration(
            vao.thisDep,
            vao.contextDep,
            vao.propDep,
            function (env, scope) {
              return scope.def(env.shared.vao + '.currentVAO?' + env.shared.vao + '.currentVAO.offset:0')
            })
        }
      } else if (vaoActive) {
        return new Declaration(
          vao.thisDep,
          vao.contextDep,
          vao.propDep,
          function (env, scope) {
            return scope.def(env.shared.vao + '.currentVAO?' + env.shared.vao + '.currentVAO.instances:-1')
          })
      }
      return null
    }

    var OFFSET = parseParam(S_OFFSET, true);

    function parseVertCount () {
      if (S_COUNT in staticOptions) {
        var count = staticOptions[S_COUNT] | 0;
        staticDraw.count = count;
        check$1.command(
          typeof count === 'number' && count >= 0, 'invalid vertex count', env.commandStr);
        return createStaticDecl(function () {
          return count
        })
      } else if (S_COUNT in dynamicOptions) {
        var dynCount = dynamicOptions[S_COUNT];
        return createDynamicDecl(dynCount, function (env, scope) {
          var result = env.invoke(scope, dynCount);
          check$1.optional(function () {
            env.assert(scope,
              'typeof ' + result + '==="number"&&' +
              result + '>=0&&' +
              result + '===(' + result + '|0)',
              'invalid vertex count');
          });
          return result
        })
      } else if (elementsActive) {
        if (isStatic(elements)) {
          if (elements) {
            if (OFFSET) {
              return new Declaration(
                OFFSET.thisDep,
                OFFSET.contextDep,
                OFFSET.propDep,
                function (env, scope) {
                  var result = scope.def(
                    env.ELEMENTS, '.vertCount-', env.OFFSET);

                  check$1.optional(function () {
                    env.assert(scope,
                      result + '>=0',
                      'invalid vertex offset/element buffer too small');
                  });

                  return result
                })
            } else {
              return createStaticDecl(function (env, scope) {
                return scope.def(env.ELEMENTS, '.vertCount')
              })
            }
          } else {
            var result = createStaticDecl(function () {
              return -1
            });
            check$1.optional(function () {
              result.MISSING = true;
            });
            return result
          }
        } else {
          var variable = new Declaration(
            elements.thisDep || OFFSET.thisDep,
            elements.contextDep || OFFSET.contextDep,
            elements.propDep || OFFSET.propDep,
            function (env, scope) {
              var elements = env.ELEMENTS;
              if (env.OFFSET) {
                return scope.def(elements, '?', elements, '.vertCount-',
                  env.OFFSET, ':-1')
              }
              return scope.def(elements, '?', elements, '.vertCount:-1')
            });
          check$1.optional(function () {
            variable.DYNAMIC = true;
          });
          return variable
        }
      } else if (vaoActive) {
        var countVariable = new Declaration(
          vao.thisDep,
          vao.contextDep,
          vao.propDep,
          function (env, scope) {
            return scope.def(env.shared.vao, '.currentVAO?', env.shared.vao, '.currentVAO.count:-1')
          });
        return countVariable
      }
      return null
    }

    var primitive = parsePrimitive();
    var count = parseVertCount();
    var instances = parseParam(S_INSTANCES, false);

    return {
      elements: elements,
      primitive: primitive,
      count: count,
      instances: instances,
      offset: OFFSET,
      vao: vao,

      vaoActive: vaoActive,
      elementsActive: elementsActive,

      // static draw props
      static: staticDraw
    }
  }

  function parseGLState (options, env) {
    var staticOptions = options.static;
    var dynamicOptions = options.dynamic;

    var STATE = {};

    GL_STATE_NAMES.forEach(function (prop) {
      var param = propName(prop);

      function parseParam (parseStatic, parseDynamic) {
        if (prop in staticOptions) {
          var value = parseStatic(staticOptions[prop]);
          STATE[param] = createStaticDecl(function () {
            return value
          });
        } else if (prop in dynamicOptions) {
          var dyn = dynamicOptions[prop];
          STATE[param] = createDynamicDecl(dyn, function (env, scope) {
            return parseDynamic(env, scope, env.invoke(scope, dyn))
          });
        }
      }

      switch (prop) {
        case S_CULL_ENABLE:
        case S_BLEND_ENABLE:
        case S_DITHER:
        case S_STENCIL_ENABLE:
        case S_DEPTH_ENABLE:
        case S_SCISSOR_ENABLE:
        case S_POLYGON_OFFSET_ENABLE:
        case S_SAMPLE_ALPHA:
        case S_SAMPLE_ENABLE:
        case S_DEPTH_MASK:
          return parseParam(
            function (value) {
              check$1.commandType(value, 'boolean', prop, env.commandStr);
              return value
            },
            function (env, scope, value) {
              check$1.optional(function () {
                env.assert(scope,
                  'typeof ' + value + '==="boolean"',
                  'invalid flag ' + prop, env.commandStr);
              });
              return value
            })

        case S_DEPTH_FUNC:
          return parseParam(
            function (value) {
              check$1.commandParameter(value, compareFuncs, 'invalid ' + prop, env.commandStr);
              return compareFuncs[value]
            },
            function (env, scope, value) {
              var COMPARE_FUNCS = env.constants.compareFuncs;
              check$1.optional(function () {
                env.assert(scope,
                  value + ' in ' + COMPARE_FUNCS,
                  'invalid ' + prop + ', must be one of ' + Object.keys(compareFuncs));
              });
              return scope.def(COMPARE_FUNCS, '[', value, ']')
            })

        case S_DEPTH_RANGE:
          return parseParam(
            function (value) {
              check$1.command(
                isArrayLike(value) &&
                value.length === 2 &&
                typeof value[0] === 'number' &&
                typeof value[1] === 'number' &&
                value[0] <= value[1],
                'depth range is 2d array',
                env.commandStr);
              return value
            },
            function (env, scope, value) {
              check$1.optional(function () {
                env.assert(scope,
                  env.shared.isArrayLike + '(' + value + ')&&' +
                  value + '.length===2&&' +
                  'typeof ' + value + '[0]==="number"&&' +
                  'typeof ' + value + '[1]==="number"&&' +
                  value + '[0]<=' + value + '[1]',
                  'depth range must be a 2d array');
              });

              var Z_NEAR = scope.def('+', value, '[0]');
              var Z_FAR = scope.def('+', value, '[1]');
              return [Z_NEAR, Z_FAR]
            })

        case S_BLEND_FUNC:
          return parseParam(
            function (value) {
              check$1.commandType(value, 'object', 'blend.func', env.commandStr);
              var srcRGB = ('srcRGB' in value ? value.srcRGB : value.src);
              var srcAlpha = ('srcAlpha' in value ? value.srcAlpha : value.src);
              var dstRGB = ('dstRGB' in value ? value.dstRGB : value.dst);
              var dstAlpha = ('dstAlpha' in value ? value.dstAlpha : value.dst);
              check$1.commandParameter(srcRGB, blendFuncs, param + '.srcRGB', env.commandStr);
              check$1.commandParameter(srcAlpha, blendFuncs, param + '.srcAlpha', env.commandStr);
              check$1.commandParameter(dstRGB, blendFuncs, param + '.dstRGB', env.commandStr);
              check$1.commandParameter(dstAlpha, blendFuncs, param + '.dstAlpha', env.commandStr);

              check$1.command(
                (invalidBlendCombinations.indexOf(srcRGB + ', ' + dstRGB) === -1),
                'unallowed blending combination (srcRGB, dstRGB) = (' + srcRGB + ', ' + dstRGB + ')', env.commandStr);

              return [
                blendFuncs[srcRGB],
                blendFuncs[dstRGB],
                blendFuncs[srcAlpha],
                blendFuncs[dstAlpha]
              ]
            },
            function (env, scope, value) {
              var BLEND_FUNCS = env.constants.blendFuncs;

              check$1.optional(function () {
                env.assert(scope,
                  value + '&&typeof ' + value + '==="object"',
                  'invalid blend func, must be an object');
              });

              function read (prefix, suffix) {
                var func = scope.def(
                  '"', prefix, suffix, '" in ', value,
                  '?', value, '.', prefix, suffix,
                  ':', value, '.', prefix);

                check$1.optional(function () {
                  env.assert(scope,
                    func + ' in ' + BLEND_FUNCS,
                    'invalid ' + prop + '.' + prefix + suffix + ', must be one of ' + Object.keys(blendFuncs));
                });

                return func
              }

              var srcRGB = read('src', 'RGB');
              var dstRGB = read('dst', 'RGB');

              check$1.optional(function () {
                var INVALID_BLEND_COMBINATIONS = env.constants.invalidBlendCombinations;

                env.assert(scope,
                  INVALID_BLEND_COMBINATIONS +
                           '.indexOf(' + srcRGB + '+", "+' + dstRGB + ') === -1 ',
                  'unallowed blending combination for (srcRGB, dstRGB)'
                );
              });

              var SRC_RGB = scope.def(BLEND_FUNCS, '[', srcRGB, ']');
              var SRC_ALPHA = scope.def(BLEND_FUNCS, '[', read('src', 'Alpha'), ']');
              var DST_RGB = scope.def(BLEND_FUNCS, '[', dstRGB, ']');
              var DST_ALPHA = scope.def(BLEND_FUNCS, '[', read('dst', 'Alpha'), ']');

              return [SRC_RGB, DST_RGB, SRC_ALPHA, DST_ALPHA]
            })

        case S_BLEND_EQUATION:
          return parseParam(
            function (value) {
              if (typeof value === 'string') {
                check$1.commandParameter(value, blendEquations, 'invalid ' + prop, env.commandStr);
                return [
                  blendEquations[value],
                  blendEquations[value]
                ]
              } else if (typeof value === 'object') {
                check$1.commandParameter(
                  value.rgb, blendEquations, prop + '.rgb', env.commandStr);
                check$1.commandParameter(
                  value.alpha, blendEquations, prop + '.alpha', env.commandStr);
                return [
                  blendEquations[value.rgb],
                  blendEquations[value.alpha]
                ]
              } else {
                check$1.commandRaise('invalid blend.equation', env.commandStr);
              }
            },
            function (env, scope, value) {
              var BLEND_EQUATIONS = env.constants.blendEquations;

              var RGB = scope.def();
              var ALPHA = scope.def();

              var ifte = env.cond('typeof ', value, '==="string"');

              check$1.optional(function () {
                function checkProp (block, name, value) {
                  env.assert(block,
                    value + ' in ' + BLEND_EQUATIONS,
                    'invalid ' + name + ', must be one of ' + Object.keys(blendEquations));
                }
                checkProp(ifte.then, prop, value);

                env.assert(ifte.else,
                  value + '&&typeof ' + value + '==="object"',
                  'invalid ' + prop);
                checkProp(ifte.else, prop + '.rgb', value + '.rgb');
                checkProp(ifte.else, prop + '.alpha', value + '.alpha');
              });

              ifte.then(
                RGB, '=', ALPHA, '=', BLEND_EQUATIONS, '[', value, '];');
              ifte.else(
                RGB, '=', BLEND_EQUATIONS, '[', value, '.rgb];',
                ALPHA, '=', BLEND_EQUATIONS, '[', value, '.alpha];');

              scope(ifte);

              return [RGB, ALPHA]
            })

        case S_BLEND_COLOR:
          return parseParam(
            function (value) {
              check$1.command(
                isArrayLike(value) &&
                value.length === 4,
                'blend.color must be a 4d array', env.commandStr);
              return loop(4, function (i) {
                return +value[i]
              })
            },
            function (env, scope, value) {
              check$1.optional(function () {
                env.assert(scope,
                  env.shared.isArrayLike + '(' + value + ')&&' +
                  value + '.length===4',
                  'blend.color must be a 4d array');
              });
              return loop(4, function (i) {
                return scope.def('+', value, '[', i, ']')
              })
            })

        case S_STENCIL_MASK:
          return parseParam(
            function (value) {
              check$1.commandType(value, 'number', param, env.commandStr);
              return value | 0
            },
            function (env, scope, value) {
              check$1.optional(function () {
                env.assert(scope,
                  'typeof ' + value + '==="number"',
                  'invalid stencil.mask');
              });
              return scope.def(value, '|0')
            })

        case S_STENCIL_FUNC:
          return parseParam(
            function (value) {
              check$1.commandType(value, 'object', param, env.commandStr);
              var cmp = value.cmp || 'keep';
              var ref = value.ref || 0;
              var mask = 'mask' in value ? value.mask : -1;
              check$1.commandParameter(cmp, compareFuncs, prop + '.cmp', env.commandStr);
              check$1.commandType(ref, 'number', prop + '.ref', env.commandStr);
              check$1.commandType(mask, 'number', prop + '.mask', env.commandStr);
              return [
                compareFuncs[cmp],
                ref,
                mask
              ]
            },
            function (env, scope, value) {
              var COMPARE_FUNCS = env.constants.compareFuncs;
              check$1.optional(function () {
                function assert () {
                  env.assert(scope,
                    Array.prototype.join.call(arguments, ''),
                    'invalid stencil.func');
                }
                assert(value + '&&typeof ', value, '==="object"');
                assert('!("cmp" in ', value, ')||(',
                  value, '.cmp in ', COMPARE_FUNCS, ')');
              });
              var cmp = scope.def(
                '"cmp" in ', value,
                '?', COMPARE_FUNCS, '[', value, '.cmp]',
                ':', GL_KEEP);
              var ref = scope.def(value, '.ref|0');
              var mask = scope.def(
                '"mask" in ', value,
                '?', value, '.mask|0:-1');
              return [cmp, ref, mask]
            })

        case S_STENCIL_OPFRONT:
        case S_STENCIL_OPBACK:
          return parseParam(
            function (value) {
              check$1.commandType(value, 'object', param, env.commandStr);
              var fail = value.fail || 'keep';
              var zfail = value.zfail || 'keep';
              var zpass = value.zpass || 'keep';
              check$1.commandParameter(fail, stencilOps, prop + '.fail', env.commandStr);
              check$1.commandParameter(zfail, stencilOps, prop + '.zfail', env.commandStr);
              check$1.commandParameter(zpass, stencilOps, prop + '.zpass', env.commandStr);
              return [
                prop === S_STENCIL_OPBACK ? GL_BACK : GL_FRONT,
                stencilOps[fail],
                stencilOps[zfail],
                stencilOps[zpass]
              ]
            },
            function (env, scope, value) {
              var STENCIL_OPS = env.constants.stencilOps;

              check$1.optional(function () {
                env.assert(scope,
                  value + '&&typeof ' + value + '==="object"',
                  'invalid ' + prop);
              });

              function read (name) {
                check$1.optional(function () {
                  env.assert(scope,
                    '!("' + name + '" in ' + value + ')||' +
                    '(' + value + '.' + name + ' in ' + STENCIL_OPS + ')',
                    'invalid ' + prop + '.' + name + ', must be one of ' + Object.keys(stencilOps));
                });

                return scope.def(
                  '"', name, '" in ', value,
                  '?', STENCIL_OPS, '[', value, '.', name, ']:',
                  GL_KEEP)
              }

              return [
                prop === S_STENCIL_OPBACK ? GL_BACK : GL_FRONT,
                read('fail'),
                read('zfail'),
                read('zpass')
              ]
            })

        case S_POLYGON_OFFSET_OFFSET:
          return parseParam(
            function (value) {
              check$1.commandType(value, 'object', param, env.commandStr);
              var factor = value.factor | 0;
              var units = value.units | 0;
              check$1.commandType(factor, 'number', param + '.factor', env.commandStr);
              check$1.commandType(units, 'number', param + '.units', env.commandStr);
              return [factor, units]
            },
            function (env, scope, value) {
              check$1.optional(function () {
                env.assert(scope,
                  value + '&&typeof ' + value + '==="object"',
                  'invalid ' + prop);
              });

              var FACTOR = scope.def(value, '.factor|0');
              var UNITS = scope.def(value, '.units|0');

              return [FACTOR, UNITS]
            })

        case S_CULL_FACE:
          return parseParam(
            function (value) {
              var face = 0;
              if (value === 'front') {
                face = GL_FRONT;
              } else if (value === 'back') {
                face = GL_BACK;
              }
              check$1.command(!!face, param, env.commandStr);
              return face
            },
            function (env, scope, value) {
              check$1.optional(function () {
                env.assert(scope,
                  value + '==="front"||' +
                  value + '==="back"',
                  'invalid cull.face');
              });
              return scope.def(value, '==="front"?', GL_FRONT, ':', GL_BACK)
            })

        case S_LINE_WIDTH:
          return parseParam(
            function (value) {
              check$1.command(
                typeof value === 'number' &&
                value >= limits.lineWidthDims[0] &&
                value <= limits.lineWidthDims[1],
                'invalid line width, must be a positive number between ' +
                limits.lineWidthDims[0] + ' and ' + limits.lineWidthDims[1], env.commandStr);
              return value
            },
            function (env, scope, value) {
              check$1.optional(function () {
                env.assert(scope,
                  'typeof ' + value + '==="number"&&' +
                  value + '>=' + limits.lineWidthDims[0] + '&&' +
                  value + '<=' + limits.lineWidthDims[1],
                  'invalid line width');
              });

              return value
            })

        case S_FRONT_FACE:
          return parseParam(
            function (value) {
              check$1.commandParameter(value, orientationType, param, env.commandStr);
              return orientationType[value]
            },
            function (env, scope, value) {
              check$1.optional(function () {
                env.assert(scope,
                  value + '==="cw"||' +
                  value + '==="ccw"',
                  'invalid frontFace, must be one of cw,ccw');
              });
              return scope.def(value + '==="cw"?' + GL_CW + ':' + GL_CCW)
            })

        case S_COLOR_MASK:
          return parseParam(
            function (value) {
              check$1.command(
                isArrayLike(value) && value.length === 4,
                'color.mask must be length 4 array', env.commandStr);
              return value.map(function (v) { return !!v })
            },
            function (env, scope, value) {
              check$1.optional(function () {
                env.assert(scope,
                  env.shared.isArrayLike + '(' + value + ')&&' +
                  value + '.length===4',
                  'invalid color.mask');
              });
              return loop(4, function (i) {
                return '!!' + value + '[' + i + ']'
              })
            })

        case S_SAMPLE_COVERAGE:
          return parseParam(
            function (value) {
              check$1.command(typeof value === 'object' && value, param, env.commandStr);
              var sampleValue = 'value' in value ? value.value : 1;
              var sampleInvert = !!value.invert;
              check$1.command(
                typeof sampleValue === 'number' &&
                sampleValue >= 0 && sampleValue <= 1,
                'sample.coverage.value must be a number between 0 and 1', env.commandStr);
              return [sampleValue, sampleInvert]
            },
            function (env, scope, value) {
              check$1.optional(function () {
                env.assert(scope,
                  value + '&&typeof ' + value + '==="object"',
                  'invalid sample.coverage');
              });
              var VALUE = scope.def(
                '"value" in ', value, '?+', value, '.value:1');
              var INVERT = scope.def('!!', value, '.invert');
              return [VALUE, INVERT]
            })
      }
    });

    return STATE
  }

  function parseUniforms (uniforms, env) {
    var staticUniforms = uniforms.static;
    var dynamicUniforms = uniforms.dynamic;

    var UNIFORMS = {};

    Object.keys(staticUniforms).forEach(function (name) {
      var value = staticUniforms[name];
      var result;
      if (typeof value === 'number' ||
          typeof value === 'boolean') {
        result = createStaticDecl(function () {
          return value
        });
      } else if (typeof value === 'function') {
        var reglType = value._reglType;
        if (reglType === 'texture2d' ||
            reglType === 'textureCube') {
          result = createStaticDecl(function (env) {
            return env.link(value)
          });
        } else if (reglType === 'framebuffer' ||
                   reglType === 'framebufferCube') {
          check$1.command(value.color.length > 0,
            'missing color attachment for framebuffer sent to uniform "' + name + '"', env.commandStr);
          result = createStaticDecl(function (env) {
            return env.link(value.color[0])
          });
        } else {
          check$1.commandRaise('invalid data for uniform "' + name + '"', env.commandStr);
        }
      } else if (isArrayLike(value)) {
        result = createStaticDecl(function (env) {
          var ITEM = env.global.def('[',
            loop(value.length, function (i) {
              check$1.command(
                typeof value[i] === 'number' ||
                typeof value[i] === 'boolean',
                'invalid uniform ' + name, env.commandStr);
              return value[i]
            }), ']');
          return ITEM
        });
      } else {
        check$1.commandRaise('invalid or missing data for uniform "' + name + '"', env.commandStr);
      }
      result.value = value;
      UNIFORMS[name] = result;
    });

    Object.keys(dynamicUniforms).forEach(function (key) {
      var dyn = dynamicUniforms[key];
      UNIFORMS[key] = createDynamicDecl(dyn, function (env, scope) {
        return env.invoke(scope, dyn)
      });
    });

    return UNIFORMS
  }

  function parseAttributes (attributes, env) {
    var staticAttributes = attributes.static;
    var dynamicAttributes = attributes.dynamic;

    var attributeDefs = {};

    Object.keys(staticAttributes).forEach(function (attribute) {
      var value = staticAttributes[attribute];
      var id = stringStore.id(attribute);

      var record = new AttributeRecord();
      if (isBufferArgs(value)) {
        record.state = ATTRIB_STATE_POINTER;
        record.buffer = bufferState.getBuffer(
          bufferState.create(value, GL_ARRAY_BUFFER$2, false, true));
        record.type = 0;
      } else {
        var buffer = bufferState.getBuffer(value);
        if (buffer) {
          record.state = ATTRIB_STATE_POINTER;
          record.buffer = buffer;
          record.type = 0;
        } else {
          check$1.command(typeof value === 'object' && value,
            'invalid data for attribute ' + attribute, env.commandStr);
          if ('constant' in value) {
            var constant = value.constant;
            record.buffer = 'null';
            record.state = ATTRIB_STATE_CONSTANT;
            if (typeof constant === 'number') {
              record.x = constant;
            } else {
              check$1.command(
                isArrayLike(constant) &&
                constant.length > 0 &&
                constant.length <= 4,
                'invalid constant for attribute ' + attribute, env.commandStr);
              CUTE_COMPONENTS.forEach(function (c, i) {
                if (i < constant.length) {
                  record[c] = constant[i];
                }
              });
            }
          } else {
            if (isBufferArgs(value.buffer)) {
              buffer = bufferState.getBuffer(
                bufferState.create(value.buffer, GL_ARRAY_BUFFER$2, false, true));
            } else {
              buffer = bufferState.getBuffer(value.buffer);
            }
            check$1.command(!!buffer, 'missing buffer for attribute "' + attribute + '"', env.commandStr);

            var offset = value.offset | 0;
            check$1.command(offset >= 0,
              'invalid offset for attribute "' + attribute + '"', env.commandStr);

            var stride = value.stride | 0;
            check$1.command(stride >= 0 && stride < 256,
              'invalid stride for attribute "' + attribute + '", must be integer betweeen [0, 255]', env.commandStr);

            var size = value.size | 0;
            check$1.command(!('size' in value) || (size > 0 && size <= 4),
              'invalid size for attribute "' + attribute + '", must be 1,2,3,4', env.commandStr);

            var normalized = !!value.normalized;

            var type = 0;
            if ('type' in value) {
              check$1.commandParameter(
                value.type, glTypes,
                'invalid type for attribute ' + attribute, env.commandStr);
              type = glTypes[value.type];
            }

            var divisor = value.divisor | 0;
            check$1.optional(function () {
              if ('divisor' in value) {
                check$1.command(divisor === 0 || extInstancing,
                  'cannot specify divisor for attribute "' + attribute + '", instancing not supported', env.commandStr);
                check$1.command(divisor >= 0,
                  'invalid divisor for attribute "' + attribute + '"', env.commandStr);
              }

              var command = env.commandStr;

              var VALID_KEYS = [
                'buffer',
                'offset',
                'divisor',
                'normalized',
                'type',
                'size',
                'stride'
              ];

              Object.keys(value).forEach(function (prop) {
                check$1.command(
                  VALID_KEYS.indexOf(prop) >= 0,
                  'unknown parameter "' + prop + '" for attribute pointer "' + attribute + '" (valid parameters are ' + VALID_KEYS + ')',
                  command);
              });
            });

            record.buffer = buffer;
            record.state = ATTRIB_STATE_POINTER;
            record.size = size;
            record.normalized = normalized;
            record.type = type || buffer.dtype;
            record.offset = offset;
            record.stride = stride;
            record.divisor = divisor;
          }
        }
      }

      attributeDefs[attribute] = createStaticDecl(function (env, scope) {
        var cache = env.attribCache;
        if (id in cache) {
          return cache[id]
        }
        var result = {
          isStream: false
        };
        Object.keys(record).forEach(function (key) {
          result[key] = record[key];
        });
        if (record.buffer) {
          result.buffer = env.link(record.buffer);
          result.type = result.type || (result.buffer + '.dtype');
        }
        cache[id] = result;
        return result
      });
    });

    Object.keys(dynamicAttributes).forEach(function (attribute) {
      var dyn = dynamicAttributes[attribute];

      function appendAttributeCode (env, block) {
        var VALUE = env.invoke(block, dyn);

        var shared = env.shared;
        var constants = env.constants;

        var IS_BUFFER_ARGS = shared.isBufferArgs;
        var BUFFER_STATE = shared.buffer;

        // Perform validation on attribute
        check$1.optional(function () {
          env.assert(block,
            VALUE + '&&(typeof ' + VALUE + '==="object"||typeof ' +
            VALUE + '==="function")&&(' +
            IS_BUFFER_ARGS + '(' + VALUE + ')||' +
            BUFFER_STATE + '.getBuffer(' + VALUE + ')||' +
            BUFFER_STATE + '.getBuffer(' + VALUE + '.buffer)||' +
            IS_BUFFER_ARGS + '(' + VALUE + '.buffer)||' +
            '("constant" in ' + VALUE +
            '&&(typeof ' + VALUE + '.constant==="number"||' +
            shared.isArrayLike + '(' + VALUE + '.constant))))',
            'invalid dynamic attribute "' + attribute + '"');
        });

        // allocate names for result
        var result = {
          isStream: block.def(false)
        };
        var defaultRecord = new AttributeRecord();
        defaultRecord.state = ATTRIB_STATE_POINTER;
        Object.keys(defaultRecord).forEach(function (key) {
          result[key] = block.def('' + defaultRecord[key]);
        });

        var BUFFER = result.buffer;
        var TYPE = result.type;
        block(
          'if(', IS_BUFFER_ARGS, '(', VALUE, ')){',
          result.isStream, '=true;',
          BUFFER, '=', BUFFER_STATE, '.createStream(', GL_ARRAY_BUFFER$2, ',', VALUE, ');',
          TYPE, '=', BUFFER, '.dtype;',
          '}else{',
          BUFFER, '=', BUFFER_STATE, '.getBuffer(', VALUE, ');',
          'if(', BUFFER, '){',
          TYPE, '=', BUFFER, '.dtype;',
          '}else if("constant" in ', VALUE, '){',
          result.state, '=', ATTRIB_STATE_CONSTANT, ';',
          'if(typeof ' + VALUE + '.constant === "number"){',
          result[CUTE_COMPONENTS[0]], '=', VALUE, '.constant;',
          CUTE_COMPONENTS.slice(1).map(function (n) {
            return result[n]
          }).join('='), '=0;',
          '}else{',
          CUTE_COMPONENTS.map(function (name, i) {
            return (
              result[name] + '=' + VALUE + '.constant.length>' + i +
              '?' + VALUE + '.constant[' + i + ']:0;'
            )
          }).join(''),
          '}}else{',
          'if(', IS_BUFFER_ARGS, '(', VALUE, '.buffer)){',
          BUFFER, '=', BUFFER_STATE, '.createStream(', GL_ARRAY_BUFFER$2, ',', VALUE, '.buffer);',
          '}else{',
          BUFFER, '=', BUFFER_STATE, '.getBuffer(', VALUE, '.buffer);',
          '}',
          TYPE, '="type" in ', VALUE, '?',
          constants.glTypes, '[', VALUE, '.type]:', BUFFER, '.dtype;',
          result.normalized, '=!!', VALUE, '.normalized;');
        function emitReadRecord (name) {
          block(result[name], '=', VALUE, '.', name, '|0;');
        }
        emitReadRecord('size');
        emitReadRecord('offset');
        emitReadRecord('stride');
        emitReadRecord('divisor');

        block('}}');

        block.exit(
          'if(', result.isStream, '){',
          BUFFER_STATE, '.destroyStream(', BUFFER, ');',
          '}');

        return result
      }

      attributeDefs[attribute] = createDynamicDecl(dyn, appendAttributeCode);
    });

    return attributeDefs
  }

  function parseContext (context) {
    var staticContext = context.static;
    var dynamicContext = context.dynamic;
    var result = {};

    Object.keys(staticContext).forEach(function (name) {
      var value = staticContext[name];
      result[name] = createStaticDecl(function (env, scope) {
        if (typeof value === 'number' || typeof value === 'boolean') {
          return '' + value
        } else {
          return env.link(value)
        }
      });
    });

    Object.keys(dynamicContext).forEach(function (name) {
      var dyn = dynamicContext[name];
      result[name] = createDynamicDecl(dyn, function (env, scope) {
        return env.invoke(scope, dyn)
      });
    });

    return result
  }

  function parseArguments (options, attributes, uniforms, context, env) {
    var staticOptions = options.static;
    var dynamicOptions = options.dynamic;

    check$1.optional(function () {
      var KEY_NAMES = [
        S_FRAMEBUFFER,
        S_VERT,
        S_FRAG,
        S_ELEMENTS,
        S_PRIMITIVE,
        S_OFFSET,
        S_COUNT,
        S_INSTANCES,
        S_PROFILE,
        S_VAO
      ].concat(GL_STATE_NAMES);

      function checkKeys (dict) {
        Object.keys(dict).forEach(function (key) {
          check$1.command(
            KEY_NAMES.indexOf(key) >= 0,
            'unknown parameter "' + key + '"',
            env.commandStr);
        });
      }

      checkKeys(staticOptions);
      checkKeys(dynamicOptions);
    });

    var attribLocations = parseAttribLocations(options, attributes);

    var framebuffer = parseFramebuffer(options);
    var viewportAndScissor = parseViewportScissor(options, framebuffer, env);
    var draw = parseDraw(options, env);
    var state = parseGLState(options, env);
    var shader = parseProgram(options, env, attribLocations);

    function copyBox (name) {
      var defn = viewportAndScissor[name];
      if (defn) {
        state[name] = defn;
      }
    }
    copyBox(S_VIEWPORT);
    copyBox(propName(S_SCISSOR_BOX));

    var dirty = Object.keys(state).length > 0;

    var result = {
      framebuffer: framebuffer,
      draw: draw,
      shader: shader,
      state: state,
      dirty: dirty,
      scopeVAO: null,
      drawVAO: null,
      useVAO: false,
      attributes: {}
    };

    result.profile = parseProfile(options);
    result.uniforms = parseUniforms(uniforms, env);
    result.drawVAO = result.scopeVAO = draw.vao;
    // special case: check if we can statically allocate a vertex array object for this program
    if (!result.drawVAO &&
      shader.program &&
      !attribLocations &&
      extensions.angle_instanced_arrays &&
      draw.static.elements) {
      var useVAO = true;
      var staticBindings = shader.program.attributes.map(function (attr) {
        var binding = attributes.static[attr];
        useVAO = useVAO && !!binding;
        return binding
      });
      if (useVAO && staticBindings.length > 0) {
        var vao = attributeState.getVAO(attributeState.createVAO({
          attributes: staticBindings,
          elements: draw.static.elements
        }));
        result.drawVAO = new Declaration(null, null, null, function (env, scope) {
          return env.link(vao)
        });
        result.useVAO = true;
      }
    }
    if (attribLocations) {
      result.useVAO = true;
    } else {
      result.attributes = parseAttributes(attributes, env);
    }
    result.context = parseContext(context);
    return result
  }

  // ===================================================
  // ===================================================
  // COMMON UPDATE FUNCTIONS
  // ===================================================
  // ===================================================
  function emitContext (env, scope, context) {
    var shared = env.shared;
    var CONTEXT = shared.context;

    var contextEnter = env.scope();

    Object.keys(context).forEach(function (name) {
      scope.save(CONTEXT, '.' + name);
      var defn = context[name];
      var value = defn.append(env, scope);
      if (Array.isArray(value)) {
        contextEnter(CONTEXT, '.', name, '=[', value.join(), '];');
      } else {
        contextEnter(CONTEXT, '.', name, '=', value, ';');
      }
    });

    scope(contextEnter);
  }

  // ===================================================
  // ===================================================
  // COMMON DRAWING FUNCTIONS
  // ===================================================
  // ===================================================
  function emitPollFramebuffer (env, scope, framebuffer, skipCheck) {
    var shared = env.shared;

    var GL = shared.gl;
    var FRAMEBUFFER_STATE = shared.framebuffer;
    var EXT_DRAW_BUFFERS;
    if (extDrawBuffers) {
      EXT_DRAW_BUFFERS = scope.def(shared.extensions, '.webgl_draw_buffers');
    }

    var constants = env.constants;

    var DRAW_BUFFERS = constants.drawBuffer;
    var BACK_BUFFER = constants.backBuffer;

    var NEXT;
    if (framebuffer) {
      NEXT = framebuffer.append(env, scope);
    } else {
      NEXT = scope.def(FRAMEBUFFER_STATE, '.next');
    }

    if (!skipCheck) {
      scope('if(', NEXT, '!==', FRAMEBUFFER_STATE, '.cur){');
    }
    scope(
      'if(', NEXT, '){',
      GL, '.bindFramebuffer(', GL_FRAMEBUFFER$2, ',', NEXT, '.framebuffer);');
    if (extDrawBuffers) {
      scope(EXT_DRAW_BUFFERS, '.drawBuffersWEBGL(',
        DRAW_BUFFERS, '[', NEXT, '.colorAttachments.length]);');
    }
    scope('}else{',
      GL, '.bindFramebuffer(', GL_FRAMEBUFFER$2, ',null);');
    if (extDrawBuffers) {
      scope(EXT_DRAW_BUFFERS, '.drawBuffersWEBGL(', BACK_BUFFER, ');');
    }
    scope(
      '}',
      FRAMEBUFFER_STATE, '.cur=', NEXT, ';');
    if (!skipCheck) {
      scope('}');
    }
  }

  function emitPollState (env, scope, args) {
    var shared = env.shared;

    var GL = shared.gl;

    var CURRENT_VARS = env.current;
    var NEXT_VARS = env.next;
    var CURRENT_STATE = shared.current;
    var NEXT_STATE = shared.next;

    var block = env.cond(CURRENT_STATE, '.dirty');

    GL_STATE_NAMES.forEach(function (prop) {
      var param = propName(prop);
      if (param in args.state) {
        return
      }

      var NEXT, CURRENT;
      if (param in NEXT_VARS) {
        NEXT = NEXT_VARS[param];
        CURRENT = CURRENT_VARS[param];
        var parts = loop(currentState[param].length, function (i) {
          return block.def(NEXT, '[', i, ']')
        });
        block(env.cond(parts.map(function (p, i) {
          return p + '!==' + CURRENT + '[' + i + ']'
        }).join('||'))
          .then(
            GL, '.', GL_VARIABLES[param], '(', parts, ');',
            parts.map(function (p, i) {
              return CURRENT + '[' + i + ']=' + p
            }).join(';'), ';'));
      } else {
        NEXT = block.def(NEXT_STATE, '.', param);
        var ifte = env.cond(NEXT, '!==', CURRENT_STATE, '.', param);
        block(ifte);
        if (param in GL_FLAGS) {
          ifte(
            env.cond(NEXT)
              .then(GL, '.enable(', GL_FLAGS[param], ');')
              .else(GL, '.disable(', GL_FLAGS[param], ');'),
            CURRENT_STATE, '.', param, '=', NEXT, ';');
        } else {
          ifte(
            GL, '.', GL_VARIABLES[param], '(', NEXT, ');',
            CURRENT_STATE, '.', param, '=', NEXT, ';');
        }
      }
    });
    if (Object.keys(args.state).length === 0) {
      block(CURRENT_STATE, '.dirty=false;');
    }
    scope(block);
  }

  function emitSetOptions (env, scope, options, filter) {
    var shared = env.shared;
    var CURRENT_VARS = env.current;
    var CURRENT_STATE = shared.current;
    var GL = shared.gl;
    sortState(Object.keys(options)).forEach(function (param) {
      var defn = options[param];
      if (filter && !filter(defn)) {
        return
      }
      var variable = defn.append(env, scope);
      if (GL_FLAGS[param]) {
        var flag = GL_FLAGS[param];
        if (isStatic(defn)) {
          if (variable) {
            scope(GL, '.enable(', flag, ');');
          } else {
            scope(GL, '.disable(', flag, ');');
          }
        } else {
          scope(env.cond(variable)
            .then(GL, '.enable(', flag, ');')
            .else(GL, '.disable(', flag, ');'));
        }
        scope(CURRENT_STATE, '.', param, '=', variable, ';');
      } else if (isArrayLike(variable)) {
        var CURRENT = CURRENT_VARS[param];
        scope(
          GL, '.', GL_VARIABLES[param], '(', variable, ');',
          variable.map(function (v, i) {
            return CURRENT + '[' + i + ']=' + v
          }).join(';'), ';');
      } else {
        scope(
          GL, '.', GL_VARIABLES[param], '(', variable, ');',
          CURRENT_STATE, '.', param, '=', variable, ';');
      }
    });
  }

  function injectExtensions (env, scope) {
    if (extInstancing) {
      env.instancing = scope.def(
        env.shared.extensions, '.angle_instanced_arrays');
    }
  }

  function emitProfile (env, scope, args, useScope, incrementCounter) {
    var shared = env.shared;
    var STATS = env.stats;
    var CURRENT_STATE = shared.current;
    var TIMER = shared.timer;
    var profileArg = args.profile;

    function perfCounter () {
      if (typeof performance === 'undefined') {
        return 'Date.now()'
      } else {
        return 'performance.now()'
      }
    }

    var CPU_START, QUERY_COUNTER;
    function emitProfileStart (block) {
      CPU_START = scope.def();
      block(CPU_START, '=', perfCounter(), ';');
      if (typeof incrementCounter === 'string') {
        block(STATS, '.count+=', incrementCounter, ';');
      } else {
        block(STATS, '.count++;');
      }
      if (timer) {
        if (useScope) {
          QUERY_COUNTER = scope.def();
          block(QUERY_COUNTER, '=', TIMER, '.getNumPendingQueries();');
        } else {
          block(TIMER, '.beginQuery(', STATS, ');');
        }
      }
    }

    function emitProfileEnd (block) {
      block(STATS, '.cpuTime+=', perfCounter(), '-', CPU_START, ';');
      if (timer) {
        if (useScope) {
          block(TIMER, '.pushScopeStats(',
            QUERY_COUNTER, ',',
            TIMER, '.getNumPendingQueries(),',
            STATS, ');');
        } else {
          block(TIMER, '.endQuery();');
        }
      }
    }

    function scopeProfile (value) {
      var prev = scope.def(CURRENT_STATE, '.profile');
      scope(CURRENT_STATE, '.profile=', value, ';');
      scope.exit(CURRENT_STATE, '.profile=', prev, ';');
    }

    var USE_PROFILE;
    if (profileArg) {
      if (isStatic(profileArg)) {
        if (profileArg.enable) {
          emitProfileStart(scope);
          emitProfileEnd(scope.exit);
          scopeProfile('true');
        } else {
          scopeProfile('false');
        }
        return
      }
      USE_PROFILE = profileArg.append(env, scope);
      scopeProfile(USE_PROFILE);
    } else {
      USE_PROFILE = scope.def(CURRENT_STATE, '.profile');
    }

    var start = env.block();
    emitProfileStart(start);
    scope('if(', USE_PROFILE, '){', start, '}');
    var end = env.block();
    emitProfileEnd(end);
    scope.exit('if(', USE_PROFILE, '){', end, '}');
  }

  function emitAttributes (env, scope, args, attributes, filter) {
    var shared = env.shared;

    function typeLength (x) {
      switch (x) {
        case GL_FLOAT_VEC2:
        case GL_INT_VEC2:
        case GL_BOOL_VEC2:
          return 2
        case GL_FLOAT_VEC3:
        case GL_INT_VEC3:
        case GL_BOOL_VEC3:
          return 3
        case GL_FLOAT_VEC4:
        case GL_INT_VEC4:
        case GL_BOOL_VEC4:
          return 4
        default:
          return 1
      }
    }

    function emitBindAttribute (ATTRIBUTE, size, record) {
      var GL = shared.gl;

      var LOCATION = scope.def(ATTRIBUTE, '.location');
      var BINDING = scope.def(shared.attributes, '[', LOCATION, ']');

      var STATE = record.state;
      var BUFFER = record.buffer;
      var CONST_COMPONENTS = [
        record.x,
        record.y,
        record.z,
        record.w
      ];

      var COMMON_KEYS = [
        'buffer',
        'normalized',
        'offset',
        'stride'
      ];

      function emitBuffer () {
        scope(
          'if(!', BINDING, '.buffer){',
          GL, '.enableVertexAttribArray(', LOCATION, ');}');

        var TYPE = record.type;
        var SIZE;
        if (!record.size) {
          SIZE = size;
        } else {
          SIZE = scope.def(record.size, '||', size);
        }

        scope('if(',
          BINDING, '.type!==', TYPE, '||',
          BINDING, '.size!==', SIZE, '||',
          COMMON_KEYS.map(function (key) {
            return BINDING + '.' + key + '!==' + record[key]
          }).join('||'),
          '){',
          GL, '.bindBuffer(', GL_ARRAY_BUFFER$2, ',', BUFFER, '.buffer);',
          GL, '.vertexAttribPointer(', [
            LOCATION,
            SIZE,
            TYPE,
            record.normalized,
            record.stride,
            record.offset
          ], ');',
          BINDING, '.type=', TYPE, ';',
          BINDING, '.size=', SIZE, ';',
          COMMON_KEYS.map(function (key) {
            return BINDING + '.' + key + '=' + record[key] + ';'
          }).join(''),
          '}');

        if (extInstancing) {
          var DIVISOR = record.divisor;
          scope(
            'if(', BINDING, '.divisor!==', DIVISOR, '){',
            env.instancing, '.vertexAttribDivisorANGLE(', [LOCATION, DIVISOR], ');',
            BINDING, '.divisor=', DIVISOR, ';}');
        }
      }

      function emitConstant () {
        scope(
          'if(', BINDING, '.buffer){',
          GL, '.disableVertexAttribArray(', LOCATION, ');',
          BINDING, '.buffer=null;',
          '}if(', CUTE_COMPONENTS.map(function (c, i) {
            return BINDING + '.' + c + '!==' + CONST_COMPONENTS[i]
          }).join('||'), '){',
          GL, '.vertexAttrib4f(', LOCATION, ',', CONST_COMPONENTS, ');',
          CUTE_COMPONENTS.map(function (c, i) {
            return BINDING + '.' + c + '=' + CONST_COMPONENTS[i] + ';'
          }).join(''),
          '}');
      }

      if (STATE === ATTRIB_STATE_POINTER) {
        emitBuffer();
      } else if (STATE === ATTRIB_STATE_CONSTANT) {
        emitConstant();
      } else {
        scope('if(', STATE, '===', ATTRIB_STATE_POINTER, '){');
        emitBuffer();
        scope('}else{');
        emitConstant();
        scope('}');
      }
    }

    attributes.forEach(function (attribute) {
      var name = attribute.name;
      var arg = args.attributes[name];
      var record;
      if (arg) {
        if (!filter(arg)) {
          return
        }
        record = arg.append(env, scope);
      } else {
        if (!filter(SCOPE_DECL)) {
          return
        }
        var scopeAttrib = env.scopeAttrib(name);
        check$1.optional(function () {
          env.assert(scope,
            scopeAttrib + '.state',
            'missing attribute ' + name);
        });
        record = {};
        Object.keys(new AttributeRecord()).forEach(function (key) {
          record[key] = scope.def(scopeAttrib, '.', key);
        });
      }
      emitBindAttribute(
        env.link(attribute), typeLength(attribute.info.type), record);
    });
  }

  function emitUniforms (env, scope, args, uniforms, filter, isBatchInnerLoop) {
    var shared = env.shared;
    var GL = shared.gl;

    var definedArrUniforms = {};
    var infix;
    for (var i = 0; i < uniforms.length; ++i) {
      var uniform = uniforms[i];
      var name = uniform.name;
      var type = uniform.info.type;
      var size = uniform.info.size;
      var arg = args.uniforms[name];
      if (size > 1) {
        // either foo[n] or foos, avoid define both
        if (!arg) {
          continue
        }
        var arrUniformName = name.replace('[0]', '');
        if (definedArrUniforms[arrUniformName]) {
          continue
        }
        definedArrUniforms[arrUniformName] = 1;
      }
      var UNIFORM = env.link(uniform);
      var LOCATION = UNIFORM + '.location';

      var VALUE;
      if (arg) {
        if (!filter(arg)) {
          continue
        }
        if (isStatic(arg)) {
          var value = arg.value;
          check$1.command(
            value !== null && typeof value !== 'undefined',
            'missing uniform "' + name + '"', env.commandStr);
          if (type === GL_SAMPLER_2D || type === GL_SAMPLER_CUBE) {
            check$1.command(
              typeof value === 'function' &&
              ((type === GL_SAMPLER_2D &&
                (value._reglType === 'texture2d' ||
                value._reglType === 'framebuffer')) ||
              (type === GL_SAMPLER_CUBE &&
                (value._reglType === 'textureCube' ||
                value._reglType === 'framebufferCube'))),
              'invalid texture for uniform ' + name, env.commandStr);
            var TEX_VALUE = env.link(value._texture || value.color[0]._texture);
            scope(GL, '.uniform1i(', LOCATION, ',', TEX_VALUE + '.bind());');
            scope.exit(TEX_VALUE, '.unbind();');
          } else if (
            type === GL_FLOAT_MAT2 ||
            type === GL_FLOAT_MAT3 ||
            type === GL_FLOAT_MAT4) {
            check$1.optional(function () {
              check$1.command(isArrayLike(value),
                'invalid matrix for uniform ' + name, env.commandStr);
              check$1.command(
                (type === GL_FLOAT_MAT2 && value.length === 4) ||
                (type === GL_FLOAT_MAT3 && value.length === 9) ||
                (type === GL_FLOAT_MAT4 && value.length === 16),
                'invalid length for matrix uniform ' + name, env.commandStr);
            });
            var MAT_VALUE = env.global.def('new Float32Array([' +
              Array.prototype.slice.call(value) + '])');
            var dim = 2;
            if (type === GL_FLOAT_MAT3) {
              dim = 3;
            } else if (type === GL_FLOAT_MAT4) {
              dim = 4;
            }
            scope(
              GL, '.uniformMatrix', dim, 'fv(',
              LOCATION, ',false,', MAT_VALUE, ');');
          } else {
            switch (type) {
              case GL_FLOAT$8:
                if (size === 1) {
                  check$1.commandType(value, 'number', 'uniform ' + name, env.commandStr);
                } else {
                  check$1.command(
                    isArrayLike(value) && (value.length === size),
                    'uniform ' + name, env.commandStr);
                }
                infix = '1f';
                break
              case GL_FLOAT_VEC2:
                check$1.command(
                  isArrayLike(value) && (value.length && value.length % 2 === 0 && value.length <= size * 2),
                  'uniform ' + name, env.commandStr);
                infix = '2f';
                break
              case GL_FLOAT_VEC3:
                check$1.command(
                  isArrayLike(value) && (value.length && value.length % 3 === 0 && value.length <= size * 3),
                  'uniform ' + name, env.commandStr);
                infix = '3f';
                break
              case GL_FLOAT_VEC4:
                check$1.command(
                  isArrayLike(value) && (value.length && value.length % 4 === 0 && value.length <= size * 4),
                  'uniform ' + name, env.commandStr);
                infix = '4f';
                break
              case GL_BOOL:
                if (size === 1) {
                  check$1.commandType(value, 'boolean', 'uniform ' + name, env.commandStr);
                } else {
                  check$1.command(
                    isArrayLike(value) && (value.length === size),
                    'uniform ' + name, env.commandStr);
                }
                infix = '1i';
                break
              case GL_INT$3:
                if (size === 1) {
                  check$1.commandType(value, 'number', 'uniform ' + name, env.commandStr);
                } else {
                  check$1.command(
                    isArrayLike(value) && (value.length === size),
                    'uniform ' + name, env.commandStr);
                }
                infix = '1i';
                break
              case GL_BOOL_VEC2:
                check$1.command(
                  isArrayLike(value) && (value.length && value.length % 2 === 0 && value.length <= size * 2),
                  'uniform ' + name, env.commandStr);
                infix = '2i';
                break
              case GL_INT_VEC2:
                check$1.command(
                  isArrayLike(value) && (value.length && value.length % 2 === 0 && value.length <= size * 2),
                  'uniform ' + name, env.commandStr);
                infix = '2i';
                break
              case GL_BOOL_VEC3:
                check$1.command(
                  isArrayLike(value) && (value.length && value.length % 3 === 0 && value.length <= size * 3),
                  'uniform ' + name, env.commandStr);
                infix = '3i';
                break
              case GL_INT_VEC3:
                check$1.command(
                  isArrayLike(value) && (value.length && value.length % 3 === 0 && value.length <= size * 3),
                  'uniform ' + name, env.commandStr);
                infix = '3i';
                break
              case GL_BOOL_VEC4:
                check$1.command(
                  isArrayLike(value) && (value.length && value.length % 4 === 0 && value.length <= size * 4),
                  'uniform ' + name, env.commandStr);
                infix = '4i';
                break
              case GL_INT_VEC4:
                check$1.command(
                  isArrayLike(value) && (value.length && value.length % 4 === 0 && value.length <= size * 4),
                  'uniform ' + name, env.commandStr);
                infix = '4i';
                break
            }
            if (size > 1) {
              infix += 'v';
              value = env.global.def('[' +
              Array.prototype.slice.call(value) + ']');
            } else {
              value = isArrayLike(value) ? Array.prototype.slice.call(value) : value;
            }
            scope(GL, '.uniform', infix, '(', LOCATION, ',',
              value,
              ');');
          }
          continue
        } else {
          VALUE = arg.append(env, scope);
        }
      } else {
        if (!filter(SCOPE_DECL)) {
          continue
        }
        VALUE = scope.def(shared.uniforms, '[', stringStore.id(name), ']');
      }

      if (type === GL_SAMPLER_2D) {
        check$1(!Array.isArray(VALUE), 'must specify a scalar prop for textures');
        scope(
          'if(', VALUE, '&&', VALUE, '._reglType==="framebuffer"){',
          VALUE, '=', VALUE, '.color[0];',
          '}');
      } else if (type === GL_SAMPLER_CUBE) {
        check$1(!Array.isArray(VALUE), 'must specify a scalar prop for cube maps');
        scope(
          'if(', VALUE, '&&', VALUE, '._reglType==="framebufferCube"){',
          VALUE, '=', VALUE, '.color[0];',
          '}');
      }

      // perform type validation
      check$1.optional(function () {
        function emitCheck (pred, message) {
          env.assert(scope, pred,
            'bad data or missing for uniform "' + name + '".  ' + message);
        }

        function checkType (type, size) {
          if (size === 1) {
            check$1(!Array.isArray(VALUE), 'must not specify an array type for uniform');
          }
          emitCheck(
            'Array.isArray(' + VALUE + ') && typeof ' + VALUE + '[0]===" ' + type + '"' +
            ' || typeof ' + VALUE + '==="' + type + '"',
            'invalid type, expected ' + type);
        }

        function checkVector (n, type, size) {
          if (Array.isArray(VALUE)) {
            check$1(VALUE.length && VALUE.length % n === 0 && VALUE.length <= n * size, 'must have length of ' + (size === 1 ? '' : 'n * ') + n);
          } else {
            emitCheck(
              shared.isArrayLike + '(' + VALUE + ')&&' + VALUE + '.length && ' + VALUE + '.length % ' + n + ' === 0' +
              ' && ' + VALUE + '.length<=' + n * size,
              'invalid vector, should have length of ' + (size === 1 ? '' : 'n * ') + n, env.commandStr);
          }
        }

        function checkTexture (target) {
          check$1(!Array.isArray(VALUE), 'must not specify a value type');
          emitCheck(
            'typeof ' + VALUE + '==="function"&&' +
            VALUE + '._reglType==="texture' +
            (target === GL_TEXTURE_2D$3 ? '2d' : 'Cube') + '"',
            'invalid texture type', env.commandStr);
        }

        switch (type) {
          case GL_INT$3:
            checkType('number', size);
            break
          case GL_INT_VEC2:
            checkVector(2, 'number', size);
            break
          case GL_INT_VEC3:
            checkVector(3, 'number', size);
            break
          case GL_INT_VEC4:
            checkVector(4, 'number', size);
            break
          case GL_FLOAT$8:
            checkType('number', size);
            break
          case GL_FLOAT_VEC2:
            checkVector(2, 'number', size);
            break
          case GL_FLOAT_VEC3:
            checkVector(3, 'number', size);
            break
          case GL_FLOAT_VEC4:
            checkVector(4, 'number', size);
            break
          case GL_BOOL:
            checkType('boolean', size);
            break
          case GL_BOOL_VEC2:
            checkVector(2, 'boolean', size);
            break
          case GL_BOOL_VEC3:
            checkVector(3, 'boolean', size);
            break
          case GL_BOOL_VEC4:
            checkVector(4, 'boolean', size);
            break
          case GL_FLOAT_MAT2:
            checkVector(4, 'number', size);
            break
          case GL_FLOAT_MAT3:
            checkVector(9, 'number', size);
            break
          case GL_FLOAT_MAT4:
            checkVector(16, 'number', size);
            break
          case GL_SAMPLER_2D:
            checkTexture(GL_TEXTURE_2D$3);
            break
          case GL_SAMPLER_CUBE:
            checkTexture(GL_TEXTURE_CUBE_MAP$2);
            break
        }
      });

      var unroll = 1;
      switch (type) {
        case GL_SAMPLER_2D:
        case GL_SAMPLER_CUBE:
          var TEX = scope.def(VALUE, '._texture');
          scope(GL, '.uniform1i(', LOCATION, ',', TEX, '.bind());');
          scope.exit(TEX, '.unbind();');
          continue

        case GL_INT$3:
        case GL_BOOL:
          infix = '1i';
          break

        case GL_INT_VEC2:
        case GL_BOOL_VEC2:
          infix = '2i';
          unroll = 2;
          break

        case GL_INT_VEC3:
        case GL_BOOL_VEC3:
          infix = '3i';
          unroll = 3;
          break

        case GL_INT_VEC4:
        case GL_BOOL_VEC4:
          infix = '4i';
          unroll = 4;
          break

        case GL_FLOAT$8:
          infix = '1f';
          break

        case GL_FLOAT_VEC2:
          infix = '2f';
          unroll = 2;
          break

        case GL_FLOAT_VEC3:
          infix = '3f';
          unroll = 3;
          break

        case GL_FLOAT_VEC4:
          infix = '4f';
          unroll = 4;
          break

        case GL_FLOAT_MAT2:
          infix = 'Matrix2fv';
          break

        case GL_FLOAT_MAT3:
          infix = 'Matrix3fv';
          break

        case GL_FLOAT_MAT4:
          infix = 'Matrix4fv';
          break
      }

      if (infix.indexOf('Matrix') === -1 && size > 1) {
        infix += 'v';
        unroll = 1;
      }

      if (infix.charAt(0) === 'M') {
        scope(GL, '.uniform', infix, '(', LOCATION, ',');
        var matSize = Math.pow(type - GL_FLOAT_MAT2 + 2, 2);
        var STORAGE = env.global.def('new Float32Array(', matSize, ')');
        if (Array.isArray(VALUE)) {
          scope(
            'false,(',
            loop(matSize, function (i) {
              return STORAGE + '[' + i + ']=' + VALUE[i]
            }), ',', STORAGE, ')');
        } else {
          scope(
            'false,(Array.isArray(', VALUE, ')||', VALUE, ' instanceof Float32Array)?', VALUE, ':(',
            loop(matSize, function (i) {
              return STORAGE + '[' + i + ']=' + VALUE + '[' + i + ']'
            }), ',', STORAGE, ')');
        }
        scope(');');
      } else if (unroll > 1) {
        var prev = [];
        var cur = [];
        for (var j = 0; j < unroll; ++j) {
          if (Array.isArray(VALUE)) {
            cur.push(VALUE[j]);
          } else {
            cur.push(scope.def(VALUE + '[' + j + ']'));
          }
          if (isBatchInnerLoop) {
            prev.push(scope.def());
          }
        }
        if (isBatchInnerLoop) {
          scope('if(!', env.batchId, '||', prev.map(function (p, i) {
            return p + '!==' + cur[i]
          }).join('||'), '){', prev.map(function (p, i) {
            return p + '=' + cur[i] + ';'
          }).join(''));
        }
        scope(GL, '.uniform', infix, '(', LOCATION, ',', cur.join(','), ');');
        if (isBatchInnerLoop) {
          scope('}');
        }
      } else {
        check$1(!Array.isArray(VALUE), 'uniform value must not be an array');
        if (isBatchInnerLoop) {
          var prevS = scope.def();
          scope('if(!', env.batchId, '||', prevS, '!==', VALUE, '){',
            prevS, '=', VALUE, ';');
        }
        scope(GL, '.uniform', infix, '(', LOCATION, ',', VALUE, ');');
        if (isBatchInnerLoop) {
          scope('}');
        }
      }
    }
  }

  function emitDraw (env, outer, inner, args) {
    var shared = env.shared;
    var GL = shared.gl;
    var DRAW_STATE = shared.draw;

    var drawOptions = args.draw;

    function emitElements () {
      var defn = drawOptions.elements;
      var ELEMENTS;
      var scope = outer;
      if (defn) {
        if ((defn.contextDep && args.contextDynamic) || defn.propDep) {
          scope = inner;
        }
        ELEMENTS = defn.append(env, scope);
        if (drawOptions.elementsActive) {
          scope(
            'if(' + ELEMENTS + ')' +
            GL + '.bindBuffer(' + GL_ELEMENT_ARRAY_BUFFER$2 + ',' + ELEMENTS + '.buffer.buffer);');
        }
      } else {
        ELEMENTS = scope.def();
        scope(
          ELEMENTS, '=', DRAW_STATE, '.', S_ELEMENTS, ';',
          'if(', ELEMENTS, '){',
          GL, '.bindBuffer(', GL_ELEMENT_ARRAY_BUFFER$2, ',', ELEMENTS, '.buffer.buffer);}',
          'else if(', shared.vao, '.currentVAO){',
          ELEMENTS, '=', env.shared.elements + '.getElements(' + shared.vao, '.currentVAO.elements);',
          (!extVertexArrays ? 'if(' + ELEMENTS + ')' + GL + '.bindBuffer(' + GL_ELEMENT_ARRAY_BUFFER$2 + ',' + ELEMENTS + '.buffer.buffer);' : ''),
          '}');
      }
      return ELEMENTS
    }

    function emitCount () {
      var defn = drawOptions.count;
      var COUNT;
      var scope = outer;
      if (defn) {
        if ((defn.contextDep && args.contextDynamic) || defn.propDep) {
          scope = inner;
        }
        COUNT = defn.append(env, scope);
        check$1.optional(function () {
          if (defn.MISSING) {
            env.assert(outer, 'false', 'missing vertex count');
          }
          if (defn.DYNAMIC) {
            env.assert(scope, COUNT + '>=0', 'missing vertex count');
          }
        });
      } else {
        COUNT = scope.def(DRAW_STATE, '.', S_COUNT);
        check$1.optional(function () {
          env.assert(scope, COUNT + '>=0', 'missing vertex count');
        });
      }
      return COUNT
    }

    var ELEMENTS = emitElements();
    function emitValue (name) {
      var defn = drawOptions[name];
      if (defn) {
        if ((defn.contextDep && args.contextDynamic) || defn.propDep) {
          return defn.append(env, inner)
        } else {
          return defn.append(env, outer)
        }
      } else {
        return outer.def(DRAW_STATE, '.', name)
      }
    }

    var PRIMITIVE = emitValue(S_PRIMITIVE);
    var OFFSET = emitValue(S_OFFSET);

    var COUNT = emitCount();
    if (typeof COUNT === 'number') {
      if (COUNT === 0) {
        return
      }
    } else {
      inner('if(', COUNT, '){');
      inner.exit('}');
    }

    var INSTANCES, EXT_INSTANCING;
    if (extInstancing) {
      INSTANCES = emitValue(S_INSTANCES);
      EXT_INSTANCING = env.instancing;
    }

    var ELEMENT_TYPE = ELEMENTS + '.type';

    var elementsStatic = drawOptions.elements && isStatic(drawOptions.elements) && !drawOptions.vaoActive;

    function emitInstancing () {
      function drawElements () {
        inner(EXT_INSTANCING, '.drawElementsInstancedANGLE(', [
          PRIMITIVE,
          COUNT,
          ELEMENT_TYPE,
          OFFSET + '<<((' + ELEMENT_TYPE + '-' + GL_UNSIGNED_BYTE$8 + ')>>1)',
          INSTANCES
        ], ');');
      }

      function drawArrays () {
        inner(EXT_INSTANCING, '.drawArraysInstancedANGLE(',
          [PRIMITIVE, OFFSET, COUNT, INSTANCES], ');');
      }

      if (ELEMENTS && ELEMENTS !== 'null') {
        if (!elementsStatic) {
          inner('if(', ELEMENTS, '){');
          drawElements();
          inner('}else{');
          drawArrays();
          inner('}');
        } else {
          drawElements();
        }
      } else {
        drawArrays();
      }
    }

    function emitRegular () {
      function drawElements () {
        inner(GL + '.drawElements(' + [
          PRIMITIVE,
          COUNT,
          ELEMENT_TYPE,
          OFFSET + '<<((' + ELEMENT_TYPE + '-' + GL_UNSIGNED_BYTE$8 + ')>>1)'
        ] + ');');
      }

      function drawArrays () {
        inner(GL + '.drawArrays(' + [PRIMITIVE, OFFSET, COUNT] + ');');
      }

      if (ELEMENTS && ELEMENTS !== 'null') {
        if (!elementsStatic) {
          inner('if(', ELEMENTS, '){');
          drawElements();
          inner('}else{');
          drawArrays();
          inner('}');
        } else {
          drawElements();
        }
      } else {
        drawArrays();
      }
    }

    if (extInstancing && (typeof INSTANCES !== 'number' || INSTANCES >= 0)) {
      if (typeof INSTANCES === 'string') {
        inner('if(', INSTANCES, '>0){');
        emitInstancing();
        inner('}else if(', INSTANCES, '<0){');
        emitRegular();
        inner('}');
      } else {
        emitInstancing();
      }
    } else {
      emitRegular();
    }
  }

  function createBody (emitBody, parentEnv, args, program, count) {
    var env = createREGLEnvironment();
    var scope = env.proc('body', count);
    check$1.optional(function () {
      env.commandStr = parentEnv.commandStr;
      env.command = env.link(parentEnv.commandStr);
    });
    if (extInstancing) {
      env.instancing = scope.def(
        env.shared.extensions, '.angle_instanced_arrays');
    }
    emitBody(env, scope, args, program);
    return env.compile().body
  }

  // ===================================================
  // ===================================================
  // DRAW PROC
  // ===================================================
  // ===================================================
  function emitDrawBody (env, draw, args, program) {
    injectExtensions(env, draw);
    if (args.useVAO) {
      if (args.drawVAO) {
        draw(env.shared.vao, '.setVAO(', args.drawVAO.append(env, draw), ');');
      } else {
        draw(env.shared.vao, '.setVAO(', env.shared.vao, '.targetVAO);');
      }
    } else {
      draw(env.shared.vao, '.setVAO(null);');
      emitAttributes(env, draw, args, program.attributes, function () {
        return true
      });
    }
    emitUniforms(env, draw, args, program.uniforms, function () {
      return true
    }, false);
    emitDraw(env, draw, draw, args);
  }

  function emitDrawProc (env, args) {
    var draw = env.proc('draw', 1);

    injectExtensions(env, draw);

    emitContext(env, draw, args.context);
    emitPollFramebuffer(env, draw, args.framebuffer);

    emitPollState(env, draw, args);
    emitSetOptions(env, draw, args.state);

    emitProfile(env, draw, args, false, true);

    var program = args.shader.progVar.append(env, draw);
    draw(env.shared.gl, '.useProgram(', program, '.program);');

    if (args.shader.program) {
      emitDrawBody(env, draw, args, args.shader.program);
    } else {
      draw(env.shared.vao, '.setVAO(null);');
      var drawCache = env.global.def('{}');
      var PROG_ID = draw.def(program, '.id');
      var CACHED_PROC = draw.def(drawCache, '[', PROG_ID, ']');
      draw(
        env.cond(CACHED_PROC)
          .then(CACHED_PROC, '.call(this,a0);')
          .else(
            CACHED_PROC, '=', drawCache, '[', PROG_ID, ']=',
            env.link(function (program) {
              return createBody(emitDrawBody, env, args, program, 1)
            }), '(', program, ');',
            CACHED_PROC, '.call(this,a0);'));
    }

    if (Object.keys(args.state).length > 0) {
      draw(env.shared.current, '.dirty=true;');
    }
    if (env.shared.vao) {
      draw(env.shared.vao, '.setVAO(null);');
    }
  }

  // ===================================================
  // ===================================================
  // BATCH PROC
  // ===================================================
  // ===================================================

  function emitBatchDynamicShaderBody (env, scope, args, program) {
    env.batchId = 'a1';

    injectExtensions(env, scope);

    function all () {
      return true
    }

    emitAttributes(env, scope, args, program.attributes, all);
    emitUniforms(env, scope, args, program.uniforms, all, false);
    emitDraw(env, scope, scope, args);
  }

  function emitBatchBody (env, scope, args, program) {
    injectExtensions(env, scope);

    var contextDynamic = args.contextDep;

    var BATCH_ID = scope.def();
    var PROP_LIST = 'a0';
    var NUM_PROPS = 'a1';
    var PROPS = scope.def();
    env.shared.props = PROPS;
    env.batchId = BATCH_ID;

    var outer = env.scope();
    var inner = env.scope();

    scope(
      outer.entry,
      'for(', BATCH_ID, '=0;', BATCH_ID, '<', NUM_PROPS, ';++', BATCH_ID, '){',
      PROPS, '=', PROP_LIST, '[', BATCH_ID, '];',
      inner,
      '}',
      outer.exit);

    function isInnerDefn (defn) {
      return ((defn.contextDep && contextDynamic) || defn.propDep)
    }

    function isOuterDefn (defn) {
      return !isInnerDefn(defn)
    }

    if (args.needsContext) {
      emitContext(env, inner, args.context);
    }
    if (args.needsFramebuffer) {
      emitPollFramebuffer(env, inner, args.framebuffer);
    }
    emitSetOptions(env, inner, args.state, isInnerDefn);

    if (args.profile && isInnerDefn(args.profile)) {
      emitProfile(env, inner, args, false, true);
    }

    if (!program) {
      var progCache = env.global.def('{}');
      var PROGRAM = args.shader.progVar.append(env, inner);
      var PROG_ID = inner.def(PROGRAM, '.id');
      var CACHED_PROC = inner.def(progCache, '[', PROG_ID, ']');
      inner(
        env.shared.gl, '.useProgram(', PROGRAM, '.program);',
        'if(!', CACHED_PROC, '){',
        CACHED_PROC, '=', progCache, '[', PROG_ID, ']=',
        env.link(function (program) {
          return createBody(
            emitBatchDynamicShaderBody, env, args, program, 2)
        }), '(', PROGRAM, ');}',
        CACHED_PROC, '.call(this,a0[', BATCH_ID, '],', BATCH_ID, ');');
    } else {
      if (args.useVAO) {
        if (args.drawVAO) {
          if (isInnerDefn(args.drawVAO)) {
            // vao is a prop
            inner(env.shared.vao, '.setVAO(', args.drawVAO.append(env, inner), ');');
          } else {
            // vao is invariant
            outer(env.shared.vao, '.setVAO(', args.drawVAO.append(env, outer), ');');
          }
        } else {
          // scoped vao binding
          outer(env.shared.vao, '.setVAO(', env.shared.vao, '.targetVAO);');
        }
      } else {
        outer(env.shared.vao, '.setVAO(null);');
        emitAttributes(env, outer, args, program.attributes, isOuterDefn);
        emitAttributes(env, inner, args, program.attributes, isInnerDefn);
      }
      emitUniforms(env, outer, args, program.uniforms, isOuterDefn, false);
      emitUniforms(env, inner, args, program.uniforms, isInnerDefn, true);
      emitDraw(env, outer, inner, args);
    }
  }

  function emitBatchProc (env, args) {
    var batch = env.proc('batch', 2);
    env.batchId = '0';

    injectExtensions(env, batch);

    // Check if any context variables depend on props
    var contextDynamic = false;
    var needsContext = true;
    Object.keys(args.context).forEach(function (name) {
      contextDynamic = contextDynamic || args.context[name].propDep;
    });
    if (!contextDynamic) {
      emitContext(env, batch, args.context);
      needsContext = false;
    }

    // framebuffer state affects framebufferWidth/height context vars
    var framebuffer = args.framebuffer;
    var needsFramebuffer = false;
    if (framebuffer) {
      if (framebuffer.propDep) {
        contextDynamic = needsFramebuffer = true;
      } else if (framebuffer.contextDep && contextDynamic) {
        needsFramebuffer = true;
      }
      if (!needsFramebuffer) {
        emitPollFramebuffer(env, batch, framebuffer);
      }
    } else {
      emitPollFramebuffer(env, batch, null);
    }

    // viewport is weird because it can affect context vars
    if (args.state.viewport && args.state.viewport.propDep) {
      contextDynamic = true;
    }

    function isInnerDefn (defn) {
      return (defn.contextDep && contextDynamic) || defn.propDep
    }

    // set webgl options
    emitPollState(env, batch, args);
    emitSetOptions(env, batch, args.state, function (defn) {
      return !isInnerDefn(defn)
    });

    if (!args.profile || !isInnerDefn(args.profile)) {
      emitProfile(env, batch, args, false, 'a1');
    }

    // Save these values to args so that the batch body routine can use them
    args.contextDep = contextDynamic;
    args.needsContext = needsContext;
    args.needsFramebuffer = needsFramebuffer;

    // determine if shader is dynamic
    var progDefn = args.shader.progVar;
    if ((progDefn.contextDep && contextDynamic) || progDefn.propDep) {
      emitBatchBody(
        env,
        batch,
        args,
        null);
    } else {
      var PROGRAM = progDefn.append(env, batch);
      batch(env.shared.gl, '.useProgram(', PROGRAM, '.program);');
      if (args.shader.program) {
        emitBatchBody(
          env,
          batch,
          args,
          args.shader.program);
      } else {
        batch(env.shared.vao, '.setVAO(null);');
        var batchCache = env.global.def('{}');
        var PROG_ID = batch.def(PROGRAM, '.id');
        var CACHED_PROC = batch.def(batchCache, '[', PROG_ID, ']');
        batch(
          env.cond(CACHED_PROC)
            .then(CACHED_PROC, '.call(this,a0,a1);')
            .else(
              CACHED_PROC, '=', batchCache, '[', PROG_ID, ']=',
              env.link(function (program) {
                return createBody(emitBatchBody, env, args, program, 2)
              }), '(', PROGRAM, ');',
              CACHED_PROC, '.call(this,a0,a1);'));
      }
    }

    if (Object.keys(args.state).length > 0) {
      batch(env.shared.current, '.dirty=true;');
    }

    if (env.shared.vao) {
      batch(env.shared.vao, '.setVAO(null);');
    }
  }

  // ===================================================
  // ===================================================
  // SCOPE COMMAND
  // ===================================================
  // ===================================================
  function emitScopeProc (env, args) {
    var scope = env.proc('scope', 3);
    env.batchId = 'a2';

    var shared = env.shared;
    var CURRENT_STATE = shared.current;

    emitContext(env, scope, args.context);

    if (args.framebuffer) {
      args.framebuffer.append(env, scope);
    }

    sortState(Object.keys(args.state)).forEach(function (name) {
      var defn = args.state[name];
      var value = defn.append(env, scope);
      if (isArrayLike(value)) {
        value.forEach(function (v, i) {
          scope.set(env.next[name], '[' + i + ']', v);
        });
      } else {
        scope.set(shared.next, '.' + name, value);
      }
    });

    emitProfile(env, scope, args, true, true)

    ;[S_ELEMENTS, S_OFFSET, S_COUNT, S_INSTANCES, S_PRIMITIVE].forEach(
      function (opt) {
        var variable = args.draw[opt];
        if (!variable) {
          return
        }
        scope.set(shared.draw, '.' + opt, '' + variable.append(env, scope));
      });

    Object.keys(args.uniforms).forEach(function (opt) {
      var value = args.uniforms[opt].append(env, scope);
      if (Array.isArray(value)) {
        value = '[' + value.join() + ']';
      }
      scope.set(
        shared.uniforms,
        '[' + stringStore.id(opt) + ']',
        value);
    });

    Object.keys(args.attributes).forEach(function (name) {
      var record = args.attributes[name].append(env, scope);
      var scopeAttrib = env.scopeAttrib(name);
      Object.keys(new AttributeRecord()).forEach(function (prop) {
        scope.set(scopeAttrib, '.' + prop, record[prop]);
      });
    });

    if (args.scopeVAO) {
      scope.set(shared.vao, '.targetVAO', args.scopeVAO.append(env, scope));
    }

    function saveShader (name) {
      var shader = args.shader[name];
      if (shader) {
        scope.set(shared.shader, '.' + name, shader.append(env, scope));
      }
    }
    saveShader(S_VERT);
    saveShader(S_FRAG);

    if (Object.keys(args.state).length > 0) {
      scope(CURRENT_STATE, '.dirty=true;');
      scope.exit(CURRENT_STATE, '.dirty=true;');
    }

    scope('a1(', env.shared.context, ',a0,', env.batchId, ');');
  }

  function isDynamicObject (object) {
    if (typeof object !== 'object' || isArrayLike(object)) {
      return
    }
    var props = Object.keys(object);
    for (var i = 0; i < props.length; ++i) {
      if (dynamic.isDynamic(object[props[i]])) {
        return true
      }
    }
    return false
  }

  function splatObject (env, options, name) {
    var object = options.static[name];
    if (!object || !isDynamicObject(object)) {
      return
    }

    var globals = env.global;
    var keys = Object.keys(object);
    var thisDep = false;
    var contextDep = false;
    var propDep = false;
    var objectRef = env.global.def('{}');
    keys.forEach(function (key) {
      var value = object[key];
      if (dynamic.isDynamic(value)) {
        if (typeof value === 'function') {
          value = object[key] = dynamic.unbox(value);
        }
        var deps = createDynamicDecl(value, null);
        thisDep = thisDep || deps.thisDep;
        propDep = propDep || deps.propDep;
        contextDep = contextDep || deps.contextDep;
      } else {
        globals(objectRef, '.', key, '=');
        switch (typeof value) {
          case 'number':
            globals(value);
            break
          case 'string':
            globals('"', value, '"');
            break
          case 'object':
            if (Array.isArray(value)) {
              globals('[', value.join(), ']');
            }
            break
          default:
            globals(env.link(value));
            break
        }
        globals(';');
      }
    });

    function appendBlock (env, block) {
      keys.forEach(function (key) {
        var value = object[key];
        if (!dynamic.isDynamic(value)) {
          return
        }
        var ref = env.invoke(block, value);
        block(objectRef, '.', key, '=', ref, ';');
      });
    }

    options.dynamic[name] = new dynamic.DynamicVariable(DYN_THUNK, {
      thisDep: thisDep,
      contextDep: contextDep,
      propDep: propDep,
      ref: objectRef,
      append: appendBlock
    });
    delete options.static[name];
  }

  // ===========================================================================
  // ===========================================================================
  // MAIN DRAW COMMAND
  // ===========================================================================
  // ===========================================================================
  function compileCommand (options, attributes, uniforms, context, stats) {
    var env = createREGLEnvironment();

    // link stats, so that we can easily access it in the program.
    env.stats = env.link(stats);

    // splat options and attributes to allow for dynamic nested properties
    Object.keys(attributes.static).forEach(function (key) {
      splatObject(env, attributes, key);
    });
    NESTED_OPTIONS.forEach(function (name) {
      splatObject(env, options, name);
    });

    var args = parseArguments(options, attributes, uniforms, context, env);

    emitDrawProc(env, args);
    emitScopeProc(env, args);
    emitBatchProc(env, args);

    return extend(env.compile(), {
      destroy: function () {
        args.shader.program.destroy();
      }
    })
  }

  // ===========================================================================
  // ===========================================================================
  // POLL / REFRESH
  // ===========================================================================
  // ===========================================================================
  return {
    next: nextState,
    current: currentState,
    procs: (function () {
      var env = createREGLEnvironment();
      var poll = env.proc('poll');
      var refresh = env.proc('refresh');
      var common = env.block();
      poll(common);
      refresh(common);

      var shared = env.shared;
      var GL = shared.gl;
      var NEXT_STATE = shared.next;
      var CURRENT_STATE = shared.current;

      common(CURRENT_STATE, '.dirty=false;');

      emitPollFramebuffer(env, poll);
      emitPollFramebuffer(env, refresh, null, true);

      // Refresh updates all attribute state changes
      var INSTANCING;
      if (extInstancing) {
        INSTANCING = env.link(extInstancing);
      }

      // update vertex array bindings
      if (extensions.oes_vertex_array_object) {
        refresh(env.link(extensions.oes_vertex_array_object), '.bindVertexArrayOES(null);');
      }
      for (var i = 0; i < limits.maxAttributes; ++i) {
        var BINDING = refresh.def(shared.attributes, '[', i, ']');
        var ifte = env.cond(BINDING, '.buffer');
        ifte.then(
          GL, '.enableVertexAttribArray(', i, ');',
          GL, '.bindBuffer(',
          GL_ARRAY_BUFFER$2, ',',
          BINDING, '.buffer.buffer);',
          GL, '.vertexAttribPointer(',
          i, ',',
          BINDING, '.size,',
          BINDING, '.type,',
          BINDING, '.normalized,',
          BINDING, '.stride,',
          BINDING, '.offset);'
        ).else(
          GL, '.disableVertexAttribArray(', i, ');',
          GL, '.vertexAttrib4f(',
          i, ',',
          BINDING, '.x,',
          BINDING, '.y,',
          BINDING, '.z,',
          BINDING, '.w);',
          BINDING, '.buffer=null;');
        refresh(ifte);
        if (extInstancing) {
          refresh(
            INSTANCING, '.vertexAttribDivisorANGLE(',
            i, ',',
            BINDING, '.divisor);');
        }
      }
      refresh(
        env.shared.vao, '.currentVAO=null;',
        env.shared.vao, '.setVAO(', env.shared.vao, '.targetVAO);');

      Object.keys(GL_FLAGS).forEach(function (flag) {
        var cap = GL_FLAGS[flag];
        var NEXT = common.def(NEXT_STATE, '.', flag);
        var block = env.block();
        block('if(', NEXT, '){',
          GL, '.enable(', cap, ')}else{',
          GL, '.disable(', cap, ')}',
          CURRENT_STATE, '.', flag, '=', NEXT, ';');
        refresh(block);
        poll(
          'if(', NEXT, '!==', CURRENT_STATE, '.', flag, '){',
          block,
          '}');
      });

      Object.keys(GL_VARIABLES).forEach(function (name) {
        var func = GL_VARIABLES[name];
        var init = currentState[name];
        var NEXT, CURRENT;
        var block = env.block();
        block(GL, '.', func, '(');
        if (isArrayLike(init)) {
          var n = init.length;
          NEXT = env.global.def(NEXT_STATE, '.', name);
          CURRENT = env.global.def(CURRENT_STATE, '.', name);
          block(
            loop(n, function (i) {
              return NEXT + '[' + i + ']'
            }), ');',
            loop(n, function (i) {
              return CURRENT + '[' + i + ']=' + NEXT + '[' + i + '];'
            }).join(''));
          poll(
            'if(', loop(n, function (i) {
              return NEXT + '[' + i + ']!==' + CURRENT + '[' + i + ']'
            }).join('||'), '){',
            block,
            '}');
        } else {
          NEXT = common.def(NEXT_STATE, '.', name);
          CURRENT = common.def(CURRENT_STATE, '.', name);
          block(
            NEXT, ');',
            CURRENT_STATE, '.', name, '=', NEXT, ';');
          poll(
            'if(', NEXT, '!==', CURRENT, '){',
            block,
            '}');
        }
        refresh(block);
      });

      return env.compile()
    })(),
    compile: compileCommand
  }
}

function stats () {
  return {
    vaoCount: 0,
    bufferCount: 0,
    elementsCount: 0,
    framebufferCount: 0,
    shaderCount: 0,
    textureCount: 0,
    cubeCount: 0,
    renderbufferCount: 0,
    maxTextureUnits: 0
  }
}

var GL_QUERY_RESULT_EXT = 0x8866;
var GL_QUERY_RESULT_AVAILABLE_EXT = 0x8867;
var GL_TIME_ELAPSED_EXT = 0x88BF;

var createTimer = function (gl, extensions) {
  if (!extensions.ext_disjoint_timer_query) {
    return null
  }

  // QUERY POOL BEGIN
  var queryPool = [];
  function allocQuery () {
    return queryPool.pop() || extensions.ext_disjoint_timer_query.createQueryEXT()
  }
  function freeQuery (query) {
    queryPool.push(query);
  }
  // QUERY POOL END

  var pendingQueries = [];
  function beginQuery (stats) {
    var query = allocQuery();
    extensions.ext_disjoint_timer_query.beginQueryEXT(GL_TIME_ELAPSED_EXT, query);
    pendingQueries.push(query);
    pushScopeStats(pendingQueries.length - 1, pendingQueries.length, stats);
  }

  function endQuery () {
    extensions.ext_disjoint_timer_query.endQueryEXT(GL_TIME_ELAPSED_EXT);
  }

  //
  // Pending stats pool.
  //
  function PendingStats () {
    this.startQueryIndex = -1;
    this.endQueryIndex = -1;
    this.sum = 0;
    this.stats = null;
  }
  var pendingStatsPool = [];
  function allocPendingStats () {
    return pendingStatsPool.pop() || new PendingStats()
  }
  function freePendingStats (pendingStats) {
    pendingStatsPool.push(pendingStats);
  }
  // Pending stats pool end

  var pendingStats = [];
  function pushScopeStats (start, end, stats) {
    var ps = allocPendingStats();
    ps.startQueryIndex = start;
    ps.endQueryIndex = end;
    ps.sum = 0;
    ps.stats = stats;
    pendingStats.push(ps);
  }

  // we should call this at the beginning of the frame,
  // in order to update gpuTime
  var timeSum = [];
  var queryPtr = [];
  function update () {
    var ptr, i;

    var n = pendingQueries.length;
    if (n === 0) {
      return
    }

    // Reserve space
    queryPtr.length = Math.max(queryPtr.length, n + 1);
    timeSum.length = Math.max(timeSum.length, n + 1);
    timeSum[0] = 0;
    queryPtr[0] = 0;

    // Update all pending timer queries
    var queryTime = 0;
    ptr = 0;
    for (i = 0; i < pendingQueries.length; ++i) {
      var query = pendingQueries[i];
      if (extensions.ext_disjoint_timer_query.getQueryObjectEXT(query, GL_QUERY_RESULT_AVAILABLE_EXT)) {
        queryTime += extensions.ext_disjoint_timer_query.getQueryObjectEXT(query, GL_QUERY_RESULT_EXT);
        freeQuery(query);
      } else {
        pendingQueries[ptr++] = query;
      }
      timeSum[i + 1] = queryTime;
      queryPtr[i + 1] = ptr;
    }
    pendingQueries.length = ptr;

    // Update all pending stat queries
    ptr = 0;
    for (i = 0; i < pendingStats.length; ++i) {
      var stats = pendingStats[i];
      var start = stats.startQueryIndex;
      var end = stats.endQueryIndex;
      stats.sum += timeSum[end] - timeSum[start];
      var startPtr = queryPtr[start];
      var endPtr = queryPtr[end];
      if (endPtr === startPtr) {
        stats.stats.gpuTime += stats.sum / 1e6;
        freePendingStats(stats);
      } else {
        stats.startQueryIndex = startPtr;
        stats.endQueryIndex = endPtr;
        pendingStats[ptr++] = stats;
      }
    }
    pendingStats.length = ptr;
  }

  return {
    beginQuery: beginQuery,
    endQuery: endQuery,
    pushScopeStats: pushScopeStats,
    update: update,
    getNumPendingQueries: function () {
      return pendingQueries.length
    },
    clear: function () {
      queryPool.push.apply(queryPool, pendingQueries);
      for (var i = 0; i < queryPool.length; i++) {
        extensions.ext_disjoint_timer_query.deleteQueryEXT(queryPool[i]);
      }
      pendingQueries.length = 0;
      queryPool.length = 0;
    },
    restore: function () {
      pendingQueries.length = 0;
      queryPool.length = 0;
    }
  }
};

var GL_COLOR_BUFFER_BIT = 16384;
var GL_DEPTH_BUFFER_BIT = 256;
var GL_STENCIL_BUFFER_BIT = 1024;

var GL_ARRAY_BUFFER = 34962;

var CONTEXT_LOST_EVENT = 'webglcontextlost';
var CONTEXT_RESTORED_EVENT = 'webglcontextrestored';

var DYN_PROP = 1;
var DYN_CONTEXT = 2;
var DYN_STATE = 3;

function find (haystack, needle) {
  for (var i = 0; i < haystack.length; ++i) {
    if (haystack[i] === needle) {
      return i
    }
  }
  return -1
}

function wrapREGL (args) {
  var config = parseArgs(args);
  if (!config) {
    return null
  }

  var gl = config.gl;
  var glAttributes = gl.getContextAttributes();
  var contextLost = gl.isContextLost();

  var extensionState = createExtensionCache(gl, config);
  if (!extensionState) {
    return null
  }

  var stringStore = createStringStore();
  var stats$$1 = stats();
  var extensions = extensionState.extensions;
  var timer = createTimer(gl, extensions);

  var START_TIME = clock();
  var WIDTH = gl.drawingBufferWidth;
  var HEIGHT = gl.drawingBufferHeight;

  var contextState = {
    tick: 0,
    time: 0,
    viewportWidth: WIDTH,
    viewportHeight: HEIGHT,
    framebufferWidth: WIDTH,
    framebufferHeight: HEIGHT,
    drawingBufferWidth: WIDTH,
    drawingBufferHeight: HEIGHT,
    pixelRatio: config.pixelRatio
  };
  var uniformState = {};
  var drawState = {
    elements: null,
    primitive: 4, // GL_TRIANGLES
    count: -1,
    offset: 0,
    instances: -1
  };

  var limits = wrapLimits(gl, extensions);
  var bufferState = wrapBufferState(
    gl,
    stats$$1,
    config,
    destroyBuffer);
  var elementState = wrapElementsState(gl, extensions, bufferState, stats$$1);
  var attributeState = wrapAttributeState(
    gl,
    extensions,
    limits,
    stats$$1,
    bufferState,
    elementState,
    drawState);
  function destroyBuffer (buffer) {
    return attributeState.destroyBuffer(buffer)
  }
  var shaderState = wrapShaderState(gl, stringStore, stats$$1, config);
  var textureState = createTextureSet(
    gl,
    extensions,
    limits,
    function () { core.procs.poll(); },
    contextState,
    stats$$1,
    config);
  var renderbufferState = wrapRenderbuffers(gl, extensions, limits, stats$$1, config);
  var framebufferState = wrapFBOState(
    gl,
    extensions,
    limits,
    textureState,
    renderbufferState,
    stats$$1);
  var core = reglCore(
    gl,
    stringStore,
    extensions,
    limits,
    bufferState,
    elementState,
    textureState,
    framebufferState,
    uniformState,
    attributeState,
    shaderState,
    drawState,
    contextState,
    timer,
    config);
  var readPixels = wrapReadPixels(
    gl,
    framebufferState,
    core.procs.poll,
    contextState,
    glAttributes, extensions, limits);

  var nextState = core.next;
  var canvas = gl.canvas;

  var rafCallbacks = [];
  var lossCallbacks = [];
  var restoreCallbacks = [];
  var destroyCallbacks = [config.onDestroy];

  var activeRAF = null;
  function handleRAF () {
    if (rafCallbacks.length === 0) {
      if (timer) {
        timer.update();
      }
      activeRAF = null;
      return
    }

    // schedule next animation frame
    activeRAF = raf.next(handleRAF);

    // poll for changes
    poll();

    // fire a callback for all pending rafs
    for (var i = rafCallbacks.length - 1; i >= 0; --i) {
      var cb = rafCallbacks[i];
      if (cb) {
        cb(contextState, null, 0);
      }
    }

    // flush all pending webgl calls
    gl.flush();

    // poll GPU timers *after* gl.flush so we don't delay command dispatch
    if (timer) {
      timer.update();
    }
  }

  function startRAF () {
    if (!activeRAF && rafCallbacks.length > 0) {
      activeRAF = raf.next(handleRAF);
    }
  }

  function stopRAF () {
    if (activeRAF) {
      raf.cancel(handleRAF);
      activeRAF = null;
    }
  }

  function handleContextLoss (event) {
    event.preventDefault();

    // set context lost flag
    contextLost = true;

    // pause request animation frame
    stopRAF();

    // lose context
    lossCallbacks.forEach(function (cb) {
      cb();
    });
  }

  function handleContextRestored (event) {
    // clear error code
    gl.getError();

    // clear context lost flag
    contextLost = false;

    // refresh state
    extensionState.restore();
    shaderState.restore();
    bufferState.restore();
    textureState.restore();
    renderbufferState.restore();
    framebufferState.restore();
    attributeState.restore();
    if (timer) {
      timer.restore();
    }

    // refresh state
    core.procs.refresh();

    // restart RAF
    startRAF();

    // restore context
    restoreCallbacks.forEach(function (cb) {
      cb();
    });
  }

  if (canvas) {
    canvas.addEventListener(CONTEXT_LOST_EVENT, handleContextLoss, false);
    canvas.addEventListener(CONTEXT_RESTORED_EVENT, handleContextRestored, false);
  }

  function destroy () {
    rafCallbacks.length = 0;
    stopRAF();

    if (canvas) {
      canvas.removeEventListener(CONTEXT_LOST_EVENT, handleContextLoss);
      canvas.removeEventListener(CONTEXT_RESTORED_EVENT, handleContextRestored);
    }

    shaderState.clear();
    framebufferState.clear();
    renderbufferState.clear();
    attributeState.clear();
    textureState.clear();
    elementState.clear();
    bufferState.clear();

    if (timer) {
      timer.clear();
    }

    destroyCallbacks.forEach(function (cb) {
      cb();
    });
  }

  function compileProcedure (options) {
    check$1(!!options, 'invalid args to regl({...})');
    check$1.type(options, 'object', 'invalid args to regl({...})');

    function flattenNestedOptions (options) {
      var result = extend({}, options);
      delete result.uniforms;
      delete result.attributes;
      delete result.context;
      delete result.vao;

      if ('stencil' in result && result.stencil.op) {
        result.stencil.opBack = result.stencil.opFront = result.stencil.op;
        delete result.stencil.op;
      }

      function merge (name) {
        if (name in result) {
          var child = result[name];
          delete result[name];
          Object.keys(child).forEach(function (prop) {
            result[name + '.' + prop] = child[prop];
          });
        }
      }
      merge('blend');
      merge('depth');
      merge('cull');
      merge('stencil');
      merge('polygonOffset');
      merge('scissor');
      merge('sample');

      if ('vao' in options) {
        result.vao = options.vao;
      }

      return result
    }

    function separateDynamic (object, useArrays) {
      var staticItems = {};
      var dynamicItems = {};
      Object.keys(object).forEach(function (option) {
        var value = object[option];
        if (dynamic.isDynamic(value)) {
          dynamicItems[option] = dynamic.unbox(value, option);
          return
        } else if (useArrays && Array.isArray(value)) {
          for (var i = 0; i < value.length; ++i) {
            if (dynamic.isDynamic(value[i])) {
              dynamicItems[option] = dynamic.unbox(value, option);
              return
            }
          }
        }
        staticItems[option] = value;
      });
      return {
        dynamic: dynamicItems,
        static: staticItems
      }
    }

    // Treat context variables separate from other dynamic variables
    var context = separateDynamic(options.context || {}, true);
    var uniforms = separateDynamic(options.uniforms || {}, true);
    var attributes = separateDynamic(options.attributes || {}, false);
    var opts = separateDynamic(flattenNestedOptions(options), false);

    var stats$$1 = {
      gpuTime: 0.0,
      cpuTime: 0.0,
      count: 0
    };

    var compiled = core.compile(opts, attributes, uniforms, context, stats$$1);

    var draw = compiled.draw;
    var batch = compiled.batch;
    var scope = compiled.scope;

    // FIXME: we should modify code generation for batch commands so this
    // isn't necessary
    var EMPTY_ARRAY = [];
    function reserve (count) {
      while (EMPTY_ARRAY.length < count) {
        EMPTY_ARRAY.push(null);
      }
      return EMPTY_ARRAY
    }

    function REGLCommand (args, body) {
      var i;
      if (contextLost) {
        check$1.raise('context lost');
      }
      if (typeof args === 'function') {
        return scope.call(this, null, args, 0)
      } else if (typeof body === 'function') {
        if (typeof args === 'number') {
          for (i = 0; i < args; ++i) {
            scope.call(this, null, body, i);
          }
        } else if (Array.isArray(args)) {
          for (i = 0; i < args.length; ++i) {
            scope.call(this, args[i], body, i);
          }
        } else {
          return scope.call(this, args, body, 0)
        }
      } else if (typeof args === 'number') {
        if (args > 0) {
          return batch.call(this, reserve(args | 0), args | 0)
        }
      } else if (Array.isArray(args)) {
        if (args.length) {
          return batch.call(this, args, args.length)
        }
      } else {
        return draw.call(this, args)
      }
    }

    return extend(REGLCommand, {
      stats: stats$$1,
      destroy: function () {
        compiled.destroy();
      }
    })
  }

  var setFBO = framebufferState.setFBO = compileProcedure({
    framebuffer: dynamic.define.call(null, DYN_PROP, 'framebuffer')
  });

  function clearImpl (_, options) {
    var clearFlags = 0;
    core.procs.poll();

    var c = options.color;
    if (c) {
      gl.clearColor(+c[0] || 0, +c[1] || 0, +c[2] || 0, +c[3] || 0);
      clearFlags |= GL_COLOR_BUFFER_BIT;
    }
    if ('depth' in options) {
      gl.clearDepth(+options.depth);
      clearFlags |= GL_DEPTH_BUFFER_BIT;
    }
    if ('stencil' in options) {
      gl.clearStencil(options.stencil | 0);
      clearFlags |= GL_STENCIL_BUFFER_BIT;
    }

    check$1(!!clearFlags, 'called regl.clear with no buffer specified');
    gl.clear(clearFlags);
  }

  function clear (options) {
    check$1(
      typeof options === 'object' && options,
      'regl.clear() takes an object as input');
    if ('framebuffer' in options) {
      if (options.framebuffer &&
          options.framebuffer_reglType === 'framebufferCube') {
        for (var i = 0; i < 6; ++i) {
          setFBO(extend({
            framebuffer: options.framebuffer.faces[i]
          }, options), clearImpl);
        }
      } else {
        setFBO(options, clearImpl);
      }
    } else {
      clearImpl(null, options);
    }
  }

  function frame (cb) {
    check$1.type(cb, 'function', 'regl.frame() callback must be a function');
    rafCallbacks.push(cb);

    function cancel () {
      // FIXME:  should we check something other than equals cb here?
      // what if a user calls frame twice with the same callback...
      //
      var i = find(rafCallbacks, cb);
      check$1(i >= 0, 'cannot cancel a frame twice');
      function pendingCancel () {
        var index = find(rafCallbacks, pendingCancel);
        rafCallbacks[index] = rafCallbacks[rafCallbacks.length - 1];
        rafCallbacks.length -= 1;
        if (rafCallbacks.length <= 0) {
          stopRAF();
        }
      }
      rafCallbacks[i] = pendingCancel;
    }

    startRAF();

    return {
      cancel: cancel
    }
  }

  // poll viewport
  function pollViewport () {
    var viewport = nextState.viewport;
    var scissorBox = nextState.scissor_box;
    viewport[0] = viewport[1] = scissorBox[0] = scissorBox[1] = 0;
    contextState.viewportWidth =
      contextState.framebufferWidth =
      contextState.drawingBufferWidth =
      viewport[2] =
      scissorBox[2] = gl.drawingBufferWidth;
    contextState.viewportHeight =
      contextState.framebufferHeight =
      contextState.drawingBufferHeight =
      viewport[3] =
      scissorBox[3] = gl.drawingBufferHeight;
  }

  function poll () {
    contextState.tick += 1;
    contextState.time = now();
    pollViewport();
    core.procs.poll();
  }

  function refresh () {
    textureState.refresh();
    pollViewport();
    core.procs.refresh();
    if (timer) {
      timer.update();
    }
  }

  function now () {
    return (clock() - START_TIME) / 1000.0
  }

  refresh();

  function addListener (event, callback) {
    check$1.type(callback, 'function', 'listener callback must be a function');

    var callbacks;
    switch (event) {
      case 'frame':
        return frame(callback)
      case 'lost':
        callbacks = lossCallbacks;
        break
      case 'restore':
        callbacks = restoreCallbacks;
        break
      case 'destroy':
        callbacks = destroyCallbacks;
        break
      default:
        check$1.raise('invalid event, must be one of frame,lost,restore,destroy');
    }

    callbacks.push(callback);
    return {
      cancel: function () {
        for (var i = 0; i < callbacks.length; ++i) {
          if (callbacks[i] === callback) {
            callbacks[i] = callbacks[callbacks.length - 1];
            callbacks.pop();
            return
          }
        }
      }
    }
  }

  var regl = extend(compileProcedure, {
    // Clear current FBO
    clear: clear,

    // Short cuts for dynamic variables
    prop: dynamic.define.bind(null, DYN_PROP),
    context: dynamic.define.bind(null, DYN_CONTEXT),
    this: dynamic.define.bind(null, DYN_STATE),

    // executes an empty draw command
    draw: compileProcedure({}),

    // Resources
    buffer: function (options) {
      return bufferState.create(options, GL_ARRAY_BUFFER, false, false)
    },
    elements: function (options) {
      return elementState.create(options, false)
    },
    texture: textureState.create2D,
    cube: textureState.createCube,
    renderbuffer: renderbufferState.create,
    framebuffer: framebufferState.create,
    framebufferCube: framebufferState.createCube,
    vao: attributeState.createVAO,

    // Expose context attributes
    attributes: glAttributes,

    // Frame rendering
    frame: frame,
    on: addListener,

    // System limits
    limits: limits,
    hasExtension: function (name) {
      return limits.extensions.indexOf(name.toLowerCase()) >= 0
    },

    // Read pixels
    read: readPixels,

    // Destroy regl and all associated resources
    destroy: destroy,

    // Direct GL state manipulation
    _gl: gl,
    _refresh: refresh,

    poll: function () {
      poll();
      if (timer) {
        timer.update();
      }
    },

    // Current time
    now: now,

    // regl Statistics Information
    stats: stats$$1
  });

  config.onDone(null, regl);

  return regl
}

return wrapREGL;

})));

}(regl));

var wrapREGL = regl.exports;

var glslReadFloat = decodeFloat;

var UINT8_VIEW = new Uint8Array(4);
var FLOAT_VIEW = new Float32Array(UINT8_VIEW.buffer);

function decodeFloat(x, y, z, w) {
  UINT8_VIEW[0] = w;
  UINT8_VIEW[1] = z;
  UINT8_VIEW[2] = y;
  UINT8_VIEW[3] = x;
  return FLOAT_VIEW[0]
}

/* eslint-disable no-underscore-dangle */

class Renderer {
  // A renderer handles drawing to a display element.
  constructor(selector, tileSet, scatterplot) {
    this.scatterplot = scatterplot;
    this.holder = select(selector);
    this.canvas = select(this.holder.node().firstElementChild);
    this.tileSet = tileSet;
    this.prefs = scatterplot.prefs;
    this.width = +this.canvas.attr('width');
    this.height = +this.canvas.attr('height');
    this.deferred_functions = [];
    this._use_scale_to_download_tiles = true;
  }

  get discard_share() {
    // If jitter is temporal, e.g., or filters are in place,
    // it may make sense to estimate the number of hidden points.
    // For now, I don't actually do it.
    return 0;
  }

  get optimal_alpha() {
    let { zoom_balance, alpha, point_size } = this.prefs;
    const {
      max_ix, width, discard_share, height,
    } = this;
    const { k } = this.zoom.transform;
    alpha = alpha === undefined ? 0.25 : alpha;
    const target_share = alpha;
    const fraction_of_total_visible = 1 / k ** 2;
    const pixel_area = width * height;
    const total_intended_points = min([max_ix, this.tileSet.highest_known_ix]);
    const total_points = total_intended_points * (1 - discard_share);
    const area_of_point = (Math.PI * Math.exp(Math.log(1 * k) * zoom_balance) * point_size) ** 2;
    // average_alpha * pixel_area = total_points * fraction_of_total_visible *
    // area_of_point * target_opacity
    const target = (target_share * pixel_area)
      / (total_points * fraction_of_total_visible * area_of_point);
    return target > 1 ? 1 : target < 1 / 255 ? 1 / 255 : target;
  }

  get max_ix() {
    // By default, prefer dropping points to dropping alpha.
    const { prefs } = this;
    if (!this._use_scale_to_download_tiles) {
      return prefs.max_points;
    }
    const { k } = this.zoom.transform;
    const point_size_adjust = Math.exp(Math.log(k) * prefs.zoom_balance);
    return prefs.max_points * k * k / point_size_adjust / point_size_adjust;
  }

  is_visible(point) {
    return p_in_rect(point, this._zoom.current_corners)
    && point.ix < this.prefs.max_points * this._zoom.k;
  }

  visible_tiles() {
    // yield the currently visible tiles based on the zoom state
    // and a maximum index passed manually.
    //    console.log({ix: this.max_ix})
    const { max_ix } = this;
    const { tileSet } = this;
    // Materialize using a tileset method.
    let all_tiles;
    if (this._use_scale_to_download_tiles) {
      all_tiles = tileSet.map((d) => d)
        .filter((tile) => tile.is_visible(max_ix, this.zoom.current_corners()));
    } else {
      all_tiles = tileSet.map((d) => d)
        .filter((tile) => tile.min_ix < this.max_ix);
    }
    all_tiles.sort((a, b) => a.min_ix - b.min_ix);

    //    all_tiles.map(d => console.log(`${d.key} (${d.min_ix} - ${d.max_ix})`))

    return all_tiles;
  }

  bind_zoom(zoom) {
    this.zoom = zoom;
    return this;
  }

  set click_function(f) {
    this._current_click_function_string = this.scatterplot.prefs.click_function;
    this._click_function = Function("datum", this._current_click_function_string);
  }

  get click_function() {
    if (this._current_click_function_string && this._current_click_function_string === this.scatterplot.prefs.click_function) {
      return this._click_function;
    }
    this._current_click_function_string = this.scatterplot.prefs.click_function;
    this._click_function = Function("datum", this.scatterplot.prefs.click_function);
    return this._click_function;
  }

  * initialize() {
    // Asynchronously wait for the basic elements to be done.
    return Promise.all(this._initializations).then((d) => {
      this.zoom.restart_timer(500000);
    });
  }
}

var gaussian_blur = "precision mediump float;\n#define GLSLIFY 1\nvec4 blur13(sampler2D image,vec2 uv,vec2 resolution,vec2 direction){vec4 color=vec4(0.0);vec2 off1=vec2(1.411764705882353)*direction;vec2 off2=vec2(3.2941176470588234)*direction;vec2 off3=vec2(5.176470588235294)*direction;color+=texture2D(image,uv)*0.1964825501511404;color+=texture2D(image,uv+(off1/resolution))*0.2969069646728344;color+=texture2D(image,uv-(off1/resolution))*0.2969069646728344;color+=texture2D(image,uv+(off2/resolution))*0.09447039785044732;color+=texture2D(image,uv-(off2/resolution))*0.09447039785044732;color+=texture2D(image,uv+(off3/resolution))*0.010381362401148057;color+=texture2D(image,uv-(off3/resolution))*0.010381362401148057;return color;}uniform vec2 iResolution;uniform sampler2D iChannel0;uniform vec2 direction;void main(){vec2 uv=vec2(gl_FragCoord.xy/iResolution.xy);gl_FragColor=blur13(iChannel0,uv,iResolution.xy,direction);}"; // eslint-disable-line

var vertex_shader = "precision mediump float;\n#define GLSLIFY 1\nuniform float u_zoom_balance;uniform float u_update_time;uniform float u_transition_duration;uniform float u_jitter;uniform float u_last_jitter;uniform float u_only_color;uniform float u_grid_mode;uniform vec3 u_filter1_numeric;uniform vec3 u_last_filter1_numeric;uniform vec3 u_filter2_numeric;uniform vec3 u_last_filter2_numeric;uniform mat3 u_window_scale;uniform mat3 u_last_window_scale;uniform mat3 u_zoom;uniform float u_width;uniform float u_height;uniform float u_use_glyphset;varying vec2 letter_pos;uniform float u_maxix;uniform float u_time;uniform float u_k;uniform float u_color_picker_mode;uniform float u_base_size;uniform float u_current_alpha;uniform float u_last_alpha;uniform float u_position_interpolation_mode;/*python code to generate what follows.def autogenerate_code():ks=[\"x\",\"y\",\"jitter_radius\",\"jitter_speed\",\"size\",\"filter1\",\"filter2\",\"x0\",\"y0\"]times=[\"\",\"last_\"]print(\"\"\"\"\"\")for k in ks:for time in times:timek=time+kprint(f\"\"\"uniform float u_{timek}_buffer_num;uniform float u_{timek}_constant;uniform float u_{timek}_transform;uniform vec2 u_{timek}_domain;uniform vec2 u_{timek}_range;uniform sampler2D u_{timek}_map;uniform float u_{timek}_needs_map;float a_{timek};bool a_{timek}_is_constant;\"\"\")for i in range(0,16):print(f\"attribute float buffer_{i};\")for k in ks:for time in times:timek=time+kprint(f\"\"\"if(u_{timek}_buffer_num>-0.5){{a_{timek}=get_buffer(u_{timek}_buffer_num);a_{timek}_is_constant=false;}}else{{a_{timek}=u_{timek}_constant;a_{timek}_is_constant=true;}}\"\"\")print(\"\"\"\"\"\")autogenerate_code()*/uniform float u_x_buffer_num;uniform float u_x_constant;uniform float u_x_transform;uniform vec2 u_x_domain;uniform vec2 u_x_range;uniform sampler2D u_x_map;uniform float u_x_needs_map;float a_x;bool a_x_is_constant;uniform float u_last_x_buffer_num;uniform float u_last_x_constant;uniform float u_last_x_transform;uniform vec2 u_last_x_domain;uniform vec2 u_last_x_range;uniform sampler2D u_last_x_map;uniform float u_last_x_needs_map;float a_last_x;bool a_last_x_is_constant;uniform float u_y_buffer_num;uniform float u_y_constant;uniform float u_y_transform;uniform vec2 u_y_domain;uniform vec2 u_y_range;uniform sampler2D u_y_map;uniform float u_y_needs_map;float a_y;bool a_y_is_constant;uniform float u_last_y_buffer_num;uniform float u_last_y_constant;uniform float u_last_y_transform;uniform vec2 u_last_y_domain;uniform vec2 u_last_y_range;uniform sampler2D u_last_y_map;uniform float u_last_y_needs_map;float a_last_y;bool a_last_y_is_constant;uniform float u_jitter_radius_buffer_num;uniform float u_jitter_radius_constant;uniform float u_jitter_radius_transform;uniform vec2 u_jitter_radius_domain;uniform vec2 u_jitter_radius_range;uniform sampler2D u_jitter_radius_map;uniform float u_jitter_radius_needs_map;float a_jitter_radius;bool a_jitter_radius_is_constant;uniform float u_last_jitter_radius_buffer_num;uniform float u_last_jitter_radius_constant;uniform float u_last_jitter_radius_transform;uniform vec2 u_last_jitter_radius_domain;uniform vec2 u_last_jitter_radius_range;uniform sampler2D u_last_jitter_radius_map;uniform float u_last_jitter_radius_needs_map;float a_last_jitter_radius;bool a_last_jitter_radius_is_constant;uniform float u_jitter_speed_buffer_num;uniform float u_jitter_speed_constant;uniform float u_jitter_speed_transform;uniform vec2 u_jitter_speed_domain;uniform vec2 u_jitter_speed_range;uniform sampler2D u_jitter_speed_map;uniform float u_jitter_speed_needs_map;float a_jitter_speed;bool a_jitter_speed_is_constant;uniform float u_last_jitter_speed_buffer_num;uniform float u_last_jitter_speed_constant;uniform float u_last_jitter_speed_transform;uniform vec2 u_last_jitter_speed_domain;uniform vec2 u_last_jitter_speed_range;uniform sampler2D u_last_jitter_speed_map;uniform float u_last_jitter_speed_needs_map;float a_last_jitter_speed;bool a_last_jitter_speed_is_constant;uniform float u_size_buffer_num;uniform float u_size_constant;uniform float u_size_transform;uniform vec2 u_size_domain;uniform vec2 u_size_range;uniform sampler2D u_size_map;uniform float u_size_needs_map;float a_size;bool a_size_is_constant;uniform float u_last_size_buffer_num;uniform float u_last_size_constant;uniform float u_last_size_transform;uniform vec2 u_last_size_domain;uniform vec2 u_last_size_range;uniform sampler2D u_last_size_map;uniform float u_last_size_needs_map;float a_last_size;bool a_last_size_is_constant;uniform float u_filter1_buffer_num;uniform float u_filter1_constant;uniform float u_filter1_transform;uniform vec2 u_filter1_domain;uniform vec2 u_filter1_range;uniform sampler2D u_filter1_map;uniform float u_filter1_needs_map;float a_filter1;bool a_filter1_is_constant;uniform float u_last_filter1_buffer_num;uniform float u_last_filter1_constant;uniform float u_last_filter1_transform;uniform vec2 u_last_filter1_domain;uniform vec2 u_last_filter1_range;uniform sampler2D u_last_filter1_map;uniform float u_last_filter1_needs_map;float a_last_filter1;bool a_last_filter1_is_constant;uniform float u_filter2_buffer_num;uniform float u_filter2_constant;uniform float u_filter2_transform;uniform vec2 u_filter2_domain;uniform vec2 u_filter2_range;uniform sampler2D u_filter2_map;uniform float u_filter2_needs_map;float a_filter2;bool a_filter2_is_constant;uniform float u_last_filter2_buffer_num;uniform float u_last_filter2_constant;uniform float u_last_filter2_transform;uniform vec2 u_last_filter2_domain;uniform vec2 u_last_filter2_range;uniform sampler2D u_last_filter2_map;uniform float u_last_filter2_needs_map;float a_last_filter2;bool a_last_filter2_is_constant;uniform float u_x0_buffer_num;uniform float u_x0_constant;uniform float u_x0_transform;uniform vec2 u_x0_domain;uniform vec2 u_x0_range;uniform sampler2D u_x0_map;uniform float u_x0_needs_map;float a_x0;bool a_x0_is_constant;uniform float u_last_x0_buffer_num;uniform float u_last_x0_constant;uniform float u_last_x0_transform;uniform vec2 u_last_x0_domain;uniform vec2 u_last_x0_range;uniform sampler2D u_last_x0_map;uniform float u_last_x0_needs_map;float a_last_x0;bool a_last_x0_is_constant;uniform float u_y0_buffer_num;uniform float u_y0_constant;uniform float u_y0_transform;uniform vec2 u_y0_domain;uniform vec2 u_y0_range;uniform sampler2D u_y0_map;uniform float u_y0_needs_map;float a_y0;bool a_y0_is_constant;uniform float u_last_y0_buffer_num;uniform float u_last_y0_constant;uniform float u_last_y0_transform;uniform vec2 u_last_y0_domain;uniform vec2 u_last_y0_range;uniform sampler2D u_last_y0_map;uniform float u_last_y0_needs_map;float a_last_y0;bool a_last_y0_is_constant;attribute float buffer_0;attribute float buffer_1;attribute float buffer_2;attribute float buffer_3;attribute float buffer_4;attribute float buffer_5;attribute float buffer_6;attribute float buffer_7;attribute float buffer_8;attribute float buffer_9;attribute float buffer_10;attribute float buffer_11;attribute float buffer_12;attribute float buffer_13;attribute float buffer_14;attribute float buffer_15;highp float ix_to_random(in float ix,in float seed){highp float seed2=log(ix)+1.;vec2 co=vec2(seed2,seed);highp float a=12.9898;highp float b=78.233;highp float c=43758.5453;highp float dt=dot(co.xy,vec2(a,b));highp float sn=mod(dt,3.14);return fract(sin(sn)*c);}float a_color;float a_last_color;uniform float u_color_buffer_num;uniform float u_last_color_buffer_num;uniform vec3 u_color_constant;uniform vec3 u_last_color_constant;uniform float u_color_transform;uniform float u_last_color_transform;uniform vec2 u_color_domain;uniform vec2 u_last_color_domain;uniform sampler2D u_color_map;uniform sampler2D u_last_color_map;uniform float u_last_color_needs_map;uniform float u_color_needs_map;uniform vec3 u_constant_color;uniform vec3 u_constant_last_color;varying vec4 fill;varying float point_size;uniform float u_jitter_radius_lookup;uniform float u_jitter_radius_lookup_y_constant;uniform sampler2D u_jitter_radius_lookup_map;uniform vec2 u_jitter_radius_lookup_x_domain;uniform vec2 u_jitter_radius_lookup_y_domain;float point_size_adjust;vec4 discard_me=vec4(100.0,100.0,1.0,1.0);const float e=1.618282;const float tau=2.*3.14159265359;/*vec3 hsv2rgb(in vec3 c){vec3 rgb=clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0,0.0,1.0);rgb=rgb*rgb*(3.0-2.0*rgb);return c.z*mix(vec3(1.0),rgb,c.y);}*/float interpolate_raw(in float x,in float min,in float max){if(x<min){return 0.;}if(x>max){return 1.;}return(x-min)/(max-min);}float interpolate(in float x,in float min,in float max){if(max<min){return 1.-interpolate_raw(x,max,min);}else{return interpolate_raw(x,min,max);}}/*The following glsl code was written in python.buffers=[*range(16)]def write_buffs(buffs):if len(buffs)==1:return[f\"return buffer_{buffs[0]}\"]condition_1=[\" \"+line for line in write_buffs(buffs[:len(buffs)condition_2=[\"\"+line for line in write_buffs(buffs[len(buffs)args=[f\"if(i<{buffs[len(buffs)*condition_1,\"}\",*condition_2]return argsprint(\"\\n\".join(write_buffs(buffers)))*/float get_buffer(in float i){if(i<7.5){if(i<3.5){if(i<1.5){if(i<0.5){return buffer_0;}return buffer_1;}if(i<2.5){return buffer_2;}return buffer_3;}if(i<5.5){if(i<4.5){return buffer_4;}return buffer_5;}if(i<6.5){return buffer_6;}return buffer_7;}if(i<11.5){if(i<9.5){if(i<8.5){return buffer_8;}return buffer_9;}if(i<10.5){return buffer_10;}return buffer_11;}if(i<13.5){if(i<12.5){return buffer_12;}return buffer_13;}if(i<14.5){return buffer_14;}return buffer_15;}float linstep(in vec2 range,in float x){return interpolate(x,range.x,range.y);float scale_size=range.y-range.x;float from_left=x-range.x;return clamp(from_left/scale_size,0.0,1.0);}float linscale(in vec2 range,in float x){float scale_size=range.y-range.x;float from_left=x-range.x;return from_left/scale_size;}vec2 box_muller(in float ix,in float seed){highp float U=ix_to_random(ix,seed);highp float V=ix_to_random(ix,seed+17.123123);return vec2(sqrt(-2.*log(U))*cos(tau*V),sqrt(-2.*log(U))*sin(tau*V));}float domainify(in vec2 domain,in float transform,in float attr,in bool clamped){if(transform==2.){domain=sqrt(domain);attr=sqrt(attr);}if(transform==3.){domain=log(domain);attr=log(attr);}if(clamped){return linstep(domain,attr);}else{return linscale(domain,attr);}}mat3 pixelspace_to_glspace;float run_numeric_filter(in float a_filter,in float u_filter_op,in float u_filter_param_1,in float u_filter_param_2){bool truthy;if(u_filter_op<1.5){truthy=a_filter<u_filter_param_1;}else if(u_filter_op<2.5){truthy=a_filter>u_filter_param_1;}else if(u_filter_op<3.5){truthy=a_filter==u_filter_param_1;}else if(u_filter_op<4.5){truthy=abs(a_filter-u_filter_param_2)<u_filter_param_1;}if(truthy){return 1.;}else{return 0.;}}float choose_and_run_filter(in vec3 u_filter_numeric,in vec2 u_filter_domain,in float a_filter,in sampler2D filtermap){if(u_filter_numeric.r<0.5){float frac_filter=linstep(u_filter_domain,a_filter);return texture2D(filtermap,vec2(0.5,frac_filter)).a;}else{return run_numeric_filter(a_filter,u_filter_numeric.r,u_filter_numeric.g,u_filter_numeric.b);}}float combine_filters(in vec3 u_filter_numeric,in vec2 u_filter_domain,in float a_filter,in sampler2D u_filter_map,in vec3 u_last_filter_numeric,in vec2 u_last_filter_domain,in float a_last_filter,in sampler2D u_last_filter_map,in float ease,in float ix){float my_filter=0.;if(ix_to_random(ix,13.5)>ease){return choose_and_run_filter(u_last_filter_numeric,u_last_filter_domain,a_last_filter,u_last_filter_map);}else{return choose_and_run_filter(u_filter_numeric,u_filter_domain,a_filter,u_filter_map);}}const float tau_0=2.*3.14159265359;highp float ix_to_random_1540259130(in float ix,in float seed){highp float seed2=log(ix)+1.;vec2 co=vec2(seed2,seed);highp float a=12.9898;highp float b=78.233;highp float c=43758.5453;highp float dt=dot(co.xy,vec2(a,b));highp float sn=mod(dt,3.14);return fract(sin(sn)*c);}highp vec2 box_muller_1540259130(in float ix,in float seed){highp float U=ix_to_random_1540259130(ix,seed);highp float V=ix_to_random_1540259130(ix,seed+17.123123);return vec2(sqrt(-2.*log(U))*cos(tau_0*V),sqrt(-2.*log(U))*sin(tau_0*V));}vec2 logarithmic_spiral_jitter_1540259130(in float ix,in float a,in float angle_parameter_1540259130,in float randomize_angle_1540259130,in float max_r_1540259130,in float randomize_rotation_max_radians_1540259130,in float randomize_radius_1540259130,in float hole,in float speed_0,in float time_0,in float acceleration,in float n_spirals_1540259130,in float shear,in float aspect_ratio_1540259130){vec2 two_gaussians_1540259130=box_muller_1540259130(ix,55.1);highp float calculated_angle=angle_parameter_1540259130+two_gaussians_1540259130.x*randomize_angle_1540259130;float k=1./tan(calculated_angle);if(k>100000.){k=0.;}float arc_length=sqrt((1.+k*k)/k)*(max_r_1540259130-a);float period=arc_length/speed_0;float stagger_time=ix_to_random_1540259130(ix,3.);float time_period=period*exp(box_muller_1540259130(ix,0.031).x/6.);float varying_time=time_0+stagger_time*time_period;float relative_time=pow(1.-mod(varying_time,time_period)/time_period,acceleration);float radius=max_r_1540259130*relative_time+a;float theta=1./k*log(radius/a);/*A different way to calculate radius from the theta. Not usedfloat max_theta=1./k*log(max_r/a);float theta2=max_theta*relative_time;vec2 pos_theta_style=vec2(a*exp(k*theta2),theta2);radius=pos_theta_style.x;theta=pos_theta_style.y;*/float which_spiral=floor(ix_to_random_1540259130(ix,13.13)*n_spirals_1540259130);float which_spiral_adjust=which_spiral/n_spirals_1540259130*tau_0;theta=theta+which_spiral_adjust;vec2 polar_jitter=box_muller_1540259130(ix,24.);highp float radius_adjust=1.+polar_jitter.x*randomize_radius_1540259130;highp float theta_adjust=polar_jitter.y*randomize_rotation_max_radians_1540259130;vec2 shear_adjust=box_muller_1540259130(ix,59.1)*shear;mat3 shear_mat=mat3(1.,shear_adjust.x,0.,shear_adjust.y,1.,0.,0.,0.,1.);vec3 pos_spiral=vec3(cos(theta+theta_adjust)*(radius*radius_adjust+hole),sin(theta+theta_adjust)*(radius*radius_adjust+hole),0.);mat3 adjust_to_viewport=mat3(1./aspect_ratio_1540259130,0.,0.,0.,1.,0.,0.,0.,1.);pos_spiral=pos_spiral*shear_mat*adjust_to_viewport;return pos_spiral.xy;}\n#define FLOAT_MAX 1.70141184e38\n#define FLOAT_MIN 1.17549435e-38\nlowp vec4 encode_float_1604150559(highp float v){highp float av=abs(v);if(av<FLOAT_MIN){return vec4(0.0,0.0,0.0,0.0);}else if(v>FLOAT_MAX){return vec4(127.0,128.0,0.0,0.0)/255.0;}else if(v<-FLOAT_MAX){return vec4(255.0,128.0,0.0,0.0)/255.0;}highp vec4 c=vec4(0,0,0,0);highp float e=floor(log2(av));highp float m=av*pow(2.0,-e)-1.0;c[1]=floor(128.0*m);m-=c[1]/128.0;c[2]=floor(32768.0*m);m-=c[2]/32768.0;c[3]=floor(8388608.0*m);highp float ebias=e+127.0;c[0]=floor(ebias/2.0);ebias-=c[0]*2.0;c[1]+=floor(ebias)*128.0;c[0]+=128.0*step(0.0,-v);return c/255.0;}\n#ifndef PI\n#define PI 3.141592653589793\n#endif\nfloat sineInOut_0(float t){return-0.5*(cos(PI*t)-1.0);}\n#ifndef PI\n#define PI 3.141592653589793\n#endif\nfloat sineInOut(float t){return-0.5*(cos(PI*t)-1.0);}const vec4 decoder=vec4(1./256./256./256.,1./256./256.,1./256.,1.);float RGBAtoFloat(in vec4 floater){return dot(floater,decoder);}float texture_float_lookup(in sampler2D texture,in vec2 domain,in vec2 range,in float transform,in float attr,in float use_texture,in float y_attr,in vec2 y_range){if(transform==4.0){return attr;}float inrange=domainify(domain,transform,attr,true);if(use_texture>0.){float y_pos=0.5;vec4 encoded=texture2D(texture,vec2(y_pos,inrange));return encoded.a;return RGBAtoFloat(encoded);}else{return mix(range.x,range.y,inrange);}}float texture_float_lookup(in sampler2D texture,in vec2 domain,in vec2 range,in float transform,in float attr,in float use_texture){return texture_float_lookup(texture,domain,range,transform,attr,use_texture,1.,vec2(0.,2.));}vec2 calculate_position(in vec2 position,in float x_scale_type,in vec2 x_domain,in vec2 x_range,in float y_scale_type,in vec2 y_domain,in vec2 y_range,in mat3 window_scale,in mat3 zoom,in sampler2D x_map,in float x_needs_map,in sampler2D y_map,in float y_needs_map){float x;float y;if(x_scale_type<4.0){x=texture_float_lookup(x_map,x_domain,x_range,x_scale_type,position.x,x_needs_map,1.,vec2(0.,2.));}else{x=position.x;}if(x_scale_type<4.0){y=texture_float_lookup(y_map,y_domain,y_range,y_scale_type,position.y,y_needs_map,1.,vec2(0.,2.));}else{y=position.y;}vec3 pos2d=vec3(x,y,1.0)*window_scale*zoom*pixelspace_to_glspace;return pos2d.xy;}float cubicInOut(float t){return t<0.5? 4.0*t*t*t: 1.-4.0*pow(1.-t,3.0);}vec4 ixToRGBA(in float ix){float min=fract(ix/256.);float mid=fract((ix-min)/256.);float high=fract((ix-min-mid*256.)/(256.)/256.);return vec4(min,mid,high,1.);}vec2 circle_jitter(in float ix,in float aspect_ratio,in float time,in float radius,in float speed){vec2 two_gaussians=box_muller(ix,12.);float stagger_time=two_gaussians.y*tau;float units_per_period=radius*radius*tau/2.;float units_per_second=speed/100.;float seconds_per_period=units_per_period/units_per_second;float time_period=seconds_per_period;if(time_period>1e4){return vec2(0.,0.);}float varying_time=time+stagger_time*time_period;float relative_time=1.-mod(varying_time,time_period)/time_period;float theta=relative_time*tau;float r_mult=(sqrt(ix_to_random(ix,7.)));return vec2(cos(theta)*r_mult,aspect_ratio*sin(theta)*r_mult)*radius;}vec2 calculate_jitter(in float jitter_type,in float ix,in sampler2D jitter_radius_map,in vec2 jitter_radius_domain,in vec2 jitter_radius_range,in float jitter_radius_transform,in float jitter_radius,in float jitter_radius_needs_map,in bool jitter_radius_is_constant,in sampler2D jitter_speed_map,in vec2 jitter_speed_domain,in vec2 jitter_speed_range,in float jitter_speed_transform,in float jitter_speed,in float jitter_speed_needs_map,in bool jitter_speed_is_constant){if(jitter_type==0.){return vec2(0.,0.);}if(jitter_type==5.){float time_period=60.;float share=1./4.;float offset=ix_to_random(ix,12.);float fractional=fract((offset*time_period+u_time)/time_period);if(fractional>share){return vec2(0.,0.);}float size=0.5*(1.-cos(2.*3.1415926*min(fractional/share,1.-fractional/share)));size=clamp(size,0.,1.);return vec2(size,0.);}float jitter_r;if(jitter_radius_is_constant){jitter_r=jitter_radius;}else{jitter_r=texture_float_lookup(jitter_radius_map,jitter_radius_domain,jitter_radius_range,jitter_radius_transform,jitter_radius,0.,0.,vec2(-1.,1.));}if(jitter_type==3.){float r=box_muller(ix,1.).r*jitter_r;r=r/u_k;float theta=ix_to_random(ix,15.)*tau;return vec2(cos(theta)*r,sin(theta)*r*u_width/u_height);}if(jitter_type==2.){float theta=ix_to_random(ix,15.)*tau;float r=jitter_r*sqrt(ix_to_random(ix,115.));r=r/u_k;return vec2(cos(theta)*r,sin(theta)*r*u_width/u_height);}float p_jitter_speed=texture_float_lookup(jitter_speed_map,jitter_speed_domain,jitter_speed_range,jitter_speed_transform,jitter_speed,jitter_speed_needs_map,1.,vec2(0.,2.));if(jitter_type==1.){return logarithmic_spiral_jitter_1540259130(ix,0.005*jitter_r,1.3302036,0.005,jitter_r,0.03,0.06,0.003*point_size_adjust*jitter_r,.5*p_jitter_speed*jitter_r/point_size_adjust,u_time,0.8,2.0,.09,u_width/u_height);}if(jitter_type==4.){return circle_jitter(ix,u_width/u_height,u_time,jitter_r,p_jitter_speed);}}void run_color_fill(in float ease){if(u_only_color>=-1.5){if(u_only_color>-.5&&a_color!=u_only_color){gl_Position=discard_me;return;}else{fill=vec4(0.,0.,0.,1./255.);gl_PointSize=1.;}}else{if(u_constant_color.r>-1.){fill=vec4(u_constant_color.rgb,u_current_alpha);}else{float fractional_color=linstep(u_color_domain,a_color);fill=texture2D(u_color_map,vec2(0.,fractional_color));fill=vec4(fill.rgb,u_current_alpha);}if(ease<1.){vec4 last_fill;if(u_constant_last_color.r>0.){last_fill=vec4(u_constant_last_color.rgb,u_last_alpha);}else{float last_fractional=linstep(u_last_color_domain,a_last_color);last_fill=texture2D(u_last_color_map,vec2(0.,last_fractional));last_fill=vec4(last_fill.rgb,u_last_alpha);}fill=mix(last_fill,fill,ease);}}}void main(){float ix=buffer_0;if(ix>u_maxix){gl_Position=discard_me;return;}if(u_x_buffer_num>-0.5){a_x=get_buffer(u_x_buffer_num);a_x_is_constant=false;}else{a_x=u_x_constant;a_x_is_constant=true;}if(u_last_x_buffer_num>-0.5){a_last_x=get_buffer(u_last_x_buffer_num);a_last_x_is_constant=false;}else{a_last_x=u_last_x_constant;a_last_x_is_constant=true;}if(u_y_buffer_num>-0.5){a_y=get_buffer(u_y_buffer_num);a_y_is_constant=false;}else{a_y=u_y_constant;a_y_is_constant=true;}if(u_last_y_buffer_num>-0.5){a_last_y=get_buffer(u_last_y_buffer_num);a_last_y_is_constant=false;}else{a_last_y=u_last_y_constant;a_last_y_is_constant=true;}if(u_jitter_radius_buffer_num>-0.5){a_jitter_radius=get_buffer(u_jitter_radius_buffer_num);a_jitter_radius_is_constant=false;}else{a_jitter_radius=u_jitter_radius_constant;a_jitter_radius_is_constant=true;}if(u_last_jitter_radius_buffer_num>-0.5){a_last_jitter_radius=get_buffer(u_last_jitter_radius_buffer_num);a_last_jitter_radius_is_constant=false;}else{a_last_jitter_radius=u_last_jitter_radius_constant;a_last_jitter_radius_is_constant=true;}if(u_jitter_speed_buffer_num>-0.5){a_jitter_speed=get_buffer(u_jitter_speed_buffer_num);a_jitter_speed_is_constant=false;}else{a_jitter_speed=u_jitter_speed_constant;a_jitter_speed_is_constant=true;}if(u_last_jitter_speed_buffer_num>-0.5){a_last_jitter_speed=get_buffer(u_last_jitter_speed_buffer_num);a_last_jitter_speed_is_constant=false;}else{a_last_jitter_speed=u_last_jitter_speed_constant;a_last_jitter_speed_is_constant=true;}if(u_size_buffer_num>-0.5){a_size=get_buffer(u_size_buffer_num);a_size_is_constant=false;}else{a_size=u_size_constant;a_size_is_constant=true;}if(u_last_size_buffer_num>-0.5){a_last_size=get_buffer(u_last_size_buffer_num);a_last_size_is_constant=false;}else{a_last_size=u_last_size_constant;a_last_size_is_constant=true;}if(u_filter1_buffer_num>-0.5){a_filter1=get_buffer(u_filter1_buffer_num);a_filter1_is_constant=false;}else{a_filter1=u_filter1_constant;a_filter1_is_constant=true;}if(u_last_filter1_buffer_num>-0.5){a_last_filter1=get_buffer(u_last_filter1_buffer_num);a_last_filter1_is_constant=false;}else{a_last_filter1=u_last_filter1_constant;a_last_filter1_is_constant=true;}if(u_filter2_buffer_num>-0.5){a_filter2=get_buffer(u_filter2_buffer_num);a_filter2_is_constant=false;}else{a_filter2=u_filter2_constant;a_filter2_is_constant=true;}if(u_last_filter2_buffer_num>-0.5){a_last_filter2=get_buffer(u_last_filter2_buffer_num);a_last_filter2_is_constant=false;}else{a_last_filter2=u_last_filter2_constant;a_last_filter2_is_constant=true;}if(u_x0_buffer_num>-0.5){a_x0=get_buffer(u_x0_buffer_num);a_x0_is_constant=false;}else{a_x0=u_x0_constant;a_x0_is_constant=true;}if(u_last_x0_buffer_num>-0.5){a_last_x0=get_buffer(u_last_x0_buffer_num);a_last_x0_is_constant=false;}else{a_last_x0=u_last_x0_constant;a_last_x0_is_constant=true;}if(u_y0_buffer_num>-0.5){a_y0=get_buffer(u_y0_buffer_num);a_y0_is_constant=false;}else{a_y0=u_y0_constant;a_y0_is_constant=true;}if(u_last_y0_buffer_num>-0.5){a_last_y0=get_buffer(u_last_y0_buffer_num);a_last_y0_is_constant=false;}else{a_last_y0=u_last_y0_constant;a_last_y0_is_constant=true;}if(u_color_buffer_num>-0.5){a_color=get_buffer(u_color_buffer_num);}else{a_color=ix;}if(u_last_color_buffer_num>-0.5){a_last_color=get_buffer(u_last_color_buffer_num);}else{a_last_color=ix;}pixelspace_to_glspace=mat3(2./u_width,0.,-1.,0.,-2./u_height,1.,0.,0.,1.);float interpolation=interpolate(u_update_time,0.,u_transition_duration);float ease=interpolation;float debug_mode=0.;vec2 position=vec2(a_x,a_y);vec2 old_position=vec2(a_last_x,a_last_y);old_position=calculate_position(old_position,u_last_x_transform,u_last_x_domain,u_last_x_range,u_last_y_transform,u_last_y_domain,u_last_y_range,u_last_window_scale,u_zoom,u_last_x_map,u_last_x_needs_map,u_last_y_map,u_last_y_needs_map);bool plot_actual_position=u_grid_mode<.5;if(plot_actual_position){position=calculate_position(position,u_x_transform,u_x_domain,u_x_range,u_y_transform,u_y_domain,u_y_range,u_window_scale,u_zoom,u_x_map,u_x_needs_map,u_y_map,u_y_needs_map);float xpos=clamp((1.+position.x)/2.,0.,1.);float randy=ix_to_random(ix,13.76);float delay=xpos+randy*.1;delay=delay*3.;float frac=interpolate(u_update_time,delay,u_transition_duration+delay);if(u_position_interpolation_mode>0.){frac=fract(u_update_time/u_transition_duration);frac=fract(frac+randy);}frac=sineInOut_0(frac);if(frac<=0.){position=old_position;}else if(frac<1.){frac=fract(frac);vec2 midpoint=box_muller(ix,3.)*.05*dot(old_position-position,old_position-position)+old_position/2.+position/2.;position=mix(mix(old_position,midpoint,frac),mix(midpoint,position,frac),frac);}}else{position.x=-1.+2.*linscale(u_x_domain,position.x);vec2 jitterspec=vec2((ix_to_random(ix,3.)*a_jitter_radius)*2.,(ix_to_random(ix,1.5)*a_jitter_speed)*2.);position=position+jitterspec;}if(debug_mode>0.){gl_PointSize=1.;fill=vec4(1.,1.,1.,1.);gl_Position=vec4(position,1.,1.);return;}float filtered_by_filter1=combine_filters(u_filter1_numeric,u_filter1_domain,a_filter1,u_filter1_map,u_last_filter1_numeric,u_last_filter1_domain,a_last_filter1,u_last_filter1_map,ease,ix);if(filtered_by_filter1<=0.5){gl_Position=discard_me;return;}float filtered_by_filter2=combine_filters(u_filter2_numeric,u_filter2_domain,a_filter2,u_filter2_map,u_last_filter2_numeric,u_last_filter2_domain,a_last_filter2,u_last_filter2_map,ease,ix);if(filtered_by_filter2<=0.5){gl_Position=discard_me;return;}float size_multiplier=texture_float_lookup(u_size_map,u_size_domain,u_size_range,u_size_transform,a_size,u_size_needs_map);float last_size_multiplier=texture_float_lookup(u_last_size_map,u_last_size_domain,u_last_size_range,u_last_size_transform,a_last_size,u_last_size_needs_map);size_multiplier=u_base_size*mix(last_size_multiplier,size_multiplier,ease);float depth_size_adjust=(1.0-ix/(u_maxix));point_size_adjust=exp(log(u_k)*u_zoom_balance);gl_PointSize=point_size_adjust*size_multiplier;vec2 jitter=vec2(0.,0.);if(plot_actual_position&&(u_jitter>0.||u_last_jitter>0.)){float jitter_radius_fraction;jitter=calculate_jitter(u_jitter,ix,u_jitter_radius_map,u_jitter_radius_domain,u_jitter_radius_range,u_jitter_radius_transform,a_jitter_radius,u_jitter_radius_needs_map,a_jitter_radius_is_constant,u_jitter_speed_map,u_jitter_speed_domain,u_jitter_speed_range,u_jitter_speed_transform,a_jitter_speed,u_jitter_speed_needs_map,a_jitter_speed_is_constant);vec2 last_jitter;if(ease<1.){last_jitter=calculate_jitter(u_last_jitter,ix,u_last_jitter_radius_map,u_last_jitter_radius_domain,u_last_jitter_radius_range,u_last_jitter_radius_transform,a_last_jitter_radius,u_last_jitter_radius_needs_map,a_last_jitter_radius_is_constant,u_last_jitter_speed_map,u_last_jitter_speed_domain,u_last_jitter_speed_range,u_last_jitter_speed_transform,a_last_jitter_speed,u_last_jitter_speed_needs_map,a_last_jitter_speed_is_constant);jitter=mix(last_jitter,jitter,ease);}if(u_jitter==5.){gl_PointSize*=jitter.x;jitter=vec2(0.,0.);if(gl_PointSize<0.05){gl_Position=discard_me;return;}}gl_Position=vec4(position+jitter,0.,1.);}else{gl_Position=vec4(position+jitter,0.,1.);}if(u_color_picker_mode>0.){fill=encode_float_1604150559(ix+1.);}else{run_color_fill(ease);}point_size=gl_PointSize;if(u_use_glyphset>0.&&point_size>5.0){float random_letter=floor(64.*ix_to_random(ix,1.3));letter_pos=vec2(mod(random_letter,8.)/8.,floor(random_letter/8.)/8.);gl_PointSize*=3.0;}}"; // eslint-disable-line

var frag_shader = "#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives : enable\n#endif\nprecision mediump float;\n#define GLSLIFY 1\nvarying float pic_mode;varying vec4 fill;varying vec4 stroke;varying vec2 letter_pos;varying float point_size;uniform float u_only_color;uniform float u_color_picker_mode;uniform float u_use_glyphset;uniform sampler2D u_glyphset;float delta=0.0,alpha=1.0;bool out_of_circle(in vec2 coord){vec2 cxy=2.0*coord-1.0;float r_sq=dot(cxy,cxy);if(r_sq>1.03){return true;}return false;}bool out_of_hollow_circle(in vec2 coord){vec2 cxy=2.0*coord-1.0;float r_sq=dot(cxy,cxy);if(r_sq>1.01){return true;}float distance_from_edge=(1.0-r_sq)*point_size;if(distance_from_edge>4.0){return true;}return false;}bool out_of_triangle(in vec2 coord){if(coord.y>(2.*abs(coord.x-.5))){return false;}return true;}void main(){if(u_only_color>=-1.5){gl_FragColor=vec4(0.,0.,0.,1./255.);return;}float alpha=fill.a;if(u_use_glyphset==0.||point_size<5.0){if(out_of_circle(gl_PointCoord)){discard;return;}vec2 cxy=2.0*gl_PointCoord-1.0;float r=dot(cxy,cxy);\n#ifdef GL_OES_standard_derivatives\ndelta=fwidth(r);alpha*=(1.0-smoothstep(1.0-delta,1.0+delta,r));\n#endif\n}else{vec2 coords=letter_pos+gl_PointCoord/8.;vec4 sprite=texture2D(u_glyphset,coords);alpha*=(sprite.a);if(alpha<=0.03)discard;}if(u_color_picker_mode==1.){gl_FragColor=fill;}else{gl_FragColor=vec4(fill.rgb*alpha,alpha);}}"; // eslint-disable-line

function colors(specifier) {
  var n = specifier.length / 6 | 0, colors = new Array(n), i = 0;
  while (i < n) colors[i] = "#" + specifier.slice(i * 6, ++i * 6);
  return colors;
}

var category10 = colors("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");

var Accent = colors("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666");

var Dark2 = colors("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666");

var Paired = colors("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928");

var Pastel1 = colors("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2");

var Pastel2 = colors("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc");

var Set1 = colors("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999");

var Set2 = colors("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3");

var Set3 = colors("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");

var Tableau10 = colors("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab");

var ramp$1 = scheme => rgbBasis(scheme[scheme.length - 1]);

var scheme$q = new Array(3).concat(
  "d8b365f5f5f55ab4ac",
  "a6611adfc27d80cdc1018571",
  "a6611adfc27df5f5f580cdc1018571",
  "8c510ad8b365f6e8c3c7eae55ab4ac01665e",
  "8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e",
  "8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e",
  "8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e",
  "5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30",
  "5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30"
).map(colors);

var BrBG = ramp$1(scheme$q);

var scheme$p = new Array(3).concat(
  "af8dc3f7f7f77fbf7b",
  "7b3294c2a5cfa6dba0008837",
  "7b3294c2a5cff7f7f7a6dba0008837",
  "762a83af8dc3e7d4e8d9f0d37fbf7b1b7837",
  "762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837",
  "762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837",
  "762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837",
  "40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b",
  "40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b"
).map(colors);

var PRGn = ramp$1(scheme$p);

var scheme$o = new Array(3).concat(
  "e9a3c9f7f7f7a1d76a",
  "d01c8bf1b6dab8e1864dac26",
  "d01c8bf1b6daf7f7f7b8e1864dac26",
  "c51b7de9a3c9fde0efe6f5d0a1d76a4d9221",
  "c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221",
  "c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221",
  "c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221",
  "8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419",
  "8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419"
).map(colors);

var PiYG = ramp$1(scheme$o);

var scheme$n = new Array(3).concat(
  "998ec3f7f7f7f1a340",
  "5e3c99b2abd2fdb863e66101",
  "5e3c99b2abd2f7f7f7fdb863e66101",
  "542788998ec3d8daebfee0b6f1a340b35806",
  "542788998ec3d8daebf7f7f7fee0b6f1a340b35806",
  "5427888073acb2abd2d8daebfee0b6fdb863e08214b35806",
  "5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806",
  "2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08",
  "2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08"
).map(colors);

var PuOr = ramp$1(scheme$n);

var scheme$m = new Array(3).concat(
  "ef8a62f7f7f767a9cf",
  "ca0020f4a58292c5de0571b0",
  "ca0020f4a582f7f7f792c5de0571b0",
  "b2182bef8a62fddbc7d1e5f067a9cf2166ac",
  "b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac",
  "b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac",
  "b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac",
  "67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061",
  "67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061"
).map(colors);

var RdBu = ramp$1(scheme$m);

var scheme$l = new Array(3).concat(
  "ef8a62ffffff999999",
  "ca0020f4a582bababa404040",
  "ca0020f4a582ffffffbababa404040",
  "b2182bef8a62fddbc7e0e0e09999994d4d4d",
  "b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d",
  "b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d",
  "b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d",
  "67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a",
  "67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a"
).map(colors);

var RdGy = ramp$1(scheme$l);

var scheme$k = new Array(3).concat(
  "fc8d59ffffbf91bfdb",
  "d7191cfdae61abd9e92c7bb6",
  "d7191cfdae61ffffbfabd9e92c7bb6",
  "d73027fc8d59fee090e0f3f891bfdb4575b4",
  "d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4",
  "d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4",
  "d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4",
  "a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695",
  "a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695"
).map(colors);

var RdYlBu = ramp$1(scheme$k);

var scheme$j = new Array(3).concat(
  "fc8d59ffffbf91cf60",
  "d7191cfdae61a6d96a1a9641",
  "d7191cfdae61ffffbfa6d96a1a9641",
  "d73027fc8d59fee08bd9ef8b91cf601a9850",
  "d73027fc8d59fee08bffffbfd9ef8b91cf601a9850",
  "d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850",
  "d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850",
  "a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837",
  "a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837"
).map(colors);

var RdYlGn = ramp$1(scheme$j);

var scheme$i = new Array(3).concat(
  "fc8d59ffffbf99d594",
  "d7191cfdae61abdda42b83ba",
  "d7191cfdae61ffffbfabdda42b83ba",
  "d53e4ffc8d59fee08be6f59899d5943288bd",
  "d53e4ffc8d59fee08bffffbfe6f59899d5943288bd",
  "d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd",
  "d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd",
  "9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2",
  "9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2"
).map(colors);

var Spectral = ramp$1(scheme$i);

var scheme$h = new Array(3).concat(
  "e5f5f999d8c92ca25f",
  "edf8fbb2e2e266c2a4238b45",
  "edf8fbb2e2e266c2a42ca25f006d2c",
  "edf8fbccece699d8c966c2a42ca25f006d2c",
  "edf8fbccece699d8c966c2a441ae76238b45005824",
  "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824",
  "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b"
).map(colors);

var BuGn = ramp$1(scheme$h);

var scheme$g = new Array(3).concat(
  "e0ecf49ebcda8856a7",
  "edf8fbb3cde38c96c688419d",
  "edf8fbb3cde38c96c68856a7810f7c",
  "edf8fbbfd3e69ebcda8c96c68856a7810f7c",
  "edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b",
  "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b",
  "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b"
).map(colors);

var BuPu = ramp$1(scheme$g);

var scheme$f = new Array(3).concat(
  "e0f3dba8ddb543a2ca",
  "f0f9e8bae4bc7bccc42b8cbe",
  "f0f9e8bae4bc7bccc443a2ca0868ac",
  "f0f9e8ccebc5a8ddb57bccc443a2ca0868ac",
  "f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e",
  "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e",
  "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081"
).map(colors);

var GnBu = ramp$1(scheme$f);

var scheme$e = new Array(3).concat(
  "fee8c8fdbb84e34a33",
  "fef0d9fdcc8afc8d59d7301f",
  "fef0d9fdcc8afc8d59e34a33b30000",
  "fef0d9fdd49efdbb84fc8d59e34a33b30000",
  "fef0d9fdd49efdbb84fc8d59ef6548d7301f990000",
  "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000",
  "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000"
).map(colors);

var OrRd = ramp$1(scheme$e);

var scheme$d = new Array(3).concat(
  "ece2f0a6bddb1c9099",
  "f6eff7bdc9e167a9cf02818a",
  "f6eff7bdc9e167a9cf1c9099016c59",
  "f6eff7d0d1e6a6bddb67a9cf1c9099016c59",
  "f6eff7d0d1e6a6bddb67a9cf3690c002818a016450",
  "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450",
  "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636"
).map(colors);

var PuBuGn = ramp$1(scheme$d);

var scheme$c = new Array(3).concat(
  "ece7f2a6bddb2b8cbe",
  "f1eef6bdc9e174a9cf0570b0",
  "f1eef6bdc9e174a9cf2b8cbe045a8d",
  "f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d",
  "f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b",
  "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b",
  "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858"
).map(colors);

var PuBu = ramp$1(scheme$c);

var scheme$b = new Array(3).concat(
  "e7e1efc994c7dd1c77",
  "f1eef6d7b5d8df65b0ce1256",
  "f1eef6d7b5d8df65b0dd1c77980043",
  "f1eef6d4b9dac994c7df65b0dd1c77980043",
  "f1eef6d4b9dac994c7df65b0e7298ace125691003f",
  "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f",
  "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f"
).map(colors);

var PuRd = ramp$1(scheme$b);

var scheme$a = new Array(3).concat(
  "fde0ddfa9fb5c51b8a",
  "feebe2fbb4b9f768a1ae017e",
  "feebe2fbb4b9f768a1c51b8a7a0177",
  "feebe2fcc5c0fa9fb5f768a1c51b8a7a0177",
  "feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177",
  "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177",
  "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a"
).map(colors);

var RdPu = ramp$1(scheme$a);

var scheme$9 = new Array(3).concat(
  "edf8b17fcdbb2c7fb8",
  "ffffcca1dab441b6c4225ea8",
  "ffffcca1dab441b6c42c7fb8253494",
  "ffffccc7e9b47fcdbb41b6c42c7fb8253494",
  "ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84",
  "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84",
  "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58"
).map(colors);

var YlGnBu = ramp$1(scheme$9);

var scheme$8 = new Array(3).concat(
  "f7fcb9addd8e31a354",
  "ffffccc2e69978c679238443",
  "ffffccc2e69978c67931a354006837",
  "ffffccd9f0a3addd8e78c67931a354006837",
  "ffffccd9f0a3addd8e78c67941ab5d238443005a32",
  "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32",
  "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529"
).map(colors);

var YlGn = ramp$1(scheme$8);

var scheme$7 = new Array(3).concat(
  "fff7bcfec44fd95f0e",
  "ffffd4fed98efe9929cc4c02",
  "ffffd4fed98efe9929d95f0e993404",
  "ffffd4fee391fec44ffe9929d95f0e993404",
  "ffffd4fee391fec44ffe9929ec7014cc4c028c2d04",
  "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04",
  "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506"
).map(colors);

var YlOrBr = ramp$1(scheme$7);

var scheme$6 = new Array(3).concat(
  "ffeda0feb24cf03b20",
  "ffffb2fecc5cfd8d3ce31a1c",
  "ffffb2fecc5cfd8d3cf03b20bd0026",
  "ffffb2fed976feb24cfd8d3cf03b20bd0026",
  "ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026",
  "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026",
  "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026"
).map(colors);

var YlOrRd = ramp$1(scheme$6);

var scheme$5 = new Array(3).concat(
  "deebf79ecae13182bd",
  "eff3ffbdd7e76baed62171b5",
  "eff3ffbdd7e76baed63182bd08519c",
  "eff3ffc6dbef9ecae16baed63182bd08519c",
  "eff3ffc6dbef9ecae16baed64292c62171b5084594",
  "f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594",
  "f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b"
).map(colors);

var Blues = ramp$1(scheme$5);

var scheme$4 = new Array(3).concat(
  "e5f5e0a1d99b31a354",
  "edf8e9bae4b374c476238b45",
  "edf8e9bae4b374c47631a354006d2c",
  "edf8e9c7e9c0a1d99b74c47631a354006d2c",
  "edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32",
  "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32",
  "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b"
).map(colors);

var Greens = ramp$1(scheme$4);

var scheme$3 = new Array(3).concat(
  "f0f0f0bdbdbd636363",
  "f7f7f7cccccc969696525252",
  "f7f7f7cccccc969696636363252525",
  "f7f7f7d9d9d9bdbdbd969696636363252525",
  "f7f7f7d9d9d9bdbdbd969696737373525252252525",
  "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525",
  "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000"
).map(colors);

var Greys = ramp$1(scheme$3);

var scheme$2 = new Array(3).concat(
  "efedf5bcbddc756bb1",
  "f2f0f7cbc9e29e9ac86a51a3",
  "f2f0f7cbc9e29e9ac8756bb154278f",
  "f2f0f7dadaebbcbddc9e9ac8756bb154278f",
  "f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486",
  "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486",
  "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d"
).map(colors);

var Purples = ramp$1(scheme$2);

var scheme$1 = new Array(3).concat(
  "fee0d2fc9272de2d26",
  "fee5d9fcae91fb6a4acb181d",
  "fee5d9fcae91fb6a4ade2d26a50f15",
  "fee5d9fcbba1fc9272fb6a4ade2d26a50f15",
  "fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d",
  "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d",
  "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d"
).map(colors);

var Reds = ramp$1(scheme$1);

var scheme = new Array(3).concat(
  "fee6cefdae6be6550d",
  "feeddefdbe85fd8d3cd94701",
  "feeddefdbe85fd8d3ce6550da63603",
  "feeddefdd0a2fdae6bfd8d3ce6550da63603",
  "feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04",
  "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04",
  "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704"
).map(colors);

var Oranges = ramp$1(scheme);

function cividis(t) {
  t = Math.max(0, Math.min(1, t));
  return "rgb("
      + Math.max(0, Math.min(255, Math.round(-4.54 - t * (35.34 - t * (2381.73 - t * (6402.7 - t * (7024.72 - t * 2710.57))))))) + ", "
      + Math.max(0, Math.min(255, Math.round(32.49 + t * (170.73 + t * (52.82 - t * (131.46 - t * (176.58 - t * 67.37))))))) + ", "
      + Math.max(0, Math.min(255, Math.round(81.24 + t * (442.36 - t * (2482.43 - t * (6167.24 - t * (6614.94 - t * 2475.67)))))))
      + ")";
}

var cubehelix = cubehelixLong(cubehelix$2(300, 0.5, 0.0), cubehelix$2(-240, 0.5, 1.0));

var warm = cubehelixLong(cubehelix$2(-100, 0.75, 0.35), cubehelix$2(80, 1.50, 0.8));

var cool = cubehelixLong(cubehelix$2(260, 0.75, 0.35), cubehelix$2(80, 1.50, 0.8));

var c$1 = cubehelix$2();

function rainbow(t) {
  if (t < 0 || t > 1) t -= Math.floor(t);
  var ts = Math.abs(t - 0.5);
  c$1.h = 360 * t - 100;
  c$1.s = 1.5 - 1.5 * ts;
  c$1.l = 0.8 - 0.9 * ts;
  return c$1 + "";
}

var c = rgb(),
    pi_1_3 = Math.PI / 3,
    pi_2_3 = Math.PI * 2 / 3;

function sinebow(t) {
  var x;
  t = (0.5 - t) * Math.PI;
  c.r = 255 * (x = Math.sin(t)) * x;
  c.g = 255 * (x = Math.sin(t + pi_1_3)) * x;
  c.b = 255 * (x = Math.sin(t + pi_2_3)) * x;
  return c + "";
}

function turbo(t) {
  t = Math.max(0, Math.min(1, t));
  return "rgb("
      + Math.max(0, Math.min(255, Math.round(34.61 + t * (1172.33 - t * (10793.56 - t * (33300.12 - t * (38394.49 - t * 14825.05))))))) + ", "
      + Math.max(0, Math.min(255, Math.round(23.31 + t * (557.33 + t * (1225.33 - t * (3574.96 - t * (1073.77 + t * 707.56))))))) + ", "
      + Math.max(0, Math.min(255, Math.round(27.2 + t * (3211.1 - t * (15327.97 - t * (27814 - t * (22569.18 - t * 6838.66)))))))
      + ")";
}

function ramp(range) {
  var n = range.length;
  return function(t) {
    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
  };
}

var viridis = ramp(colors("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));

var magma = ramp(colors("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));

var inferno = ramp(colors("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));

var plasma = ramp(colors("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));

var d3Chromatic = /*#__PURE__*/Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: 'Module',
  schemeCategory10: category10,
  schemeAccent: Accent,
  schemeDark2: Dark2,
  schemePaired: Paired,
  schemePastel1: Pastel1,
  schemePastel2: Pastel2,
  schemeSet1: Set1,
  schemeSet2: Set2,
  schemeSet3: Set3,
  schemeTableau10: Tableau10,
  interpolateBrBG: BrBG,
  schemeBrBG: scheme$q,
  interpolatePRGn: PRGn,
  schemePRGn: scheme$p,
  interpolatePiYG: PiYG,
  schemePiYG: scheme$o,
  interpolatePuOr: PuOr,
  schemePuOr: scheme$n,
  interpolateRdBu: RdBu,
  schemeRdBu: scheme$m,
  interpolateRdGy: RdGy,
  schemeRdGy: scheme$l,
  interpolateRdYlBu: RdYlBu,
  schemeRdYlBu: scheme$k,
  interpolateRdYlGn: RdYlGn,
  schemeRdYlGn: scheme$j,
  interpolateSpectral: Spectral,
  schemeSpectral: scheme$i,
  interpolateBuGn: BuGn,
  schemeBuGn: scheme$h,
  interpolateBuPu: BuPu,
  schemeBuPu: scheme$g,
  interpolateGnBu: GnBu,
  schemeGnBu: scheme$f,
  interpolateOrRd: OrRd,
  schemeOrRd: scheme$e,
  interpolatePuBuGn: PuBuGn,
  schemePuBuGn: scheme$d,
  interpolatePuBu: PuBu,
  schemePuBu: scheme$c,
  interpolatePuRd: PuRd,
  schemePuRd: scheme$b,
  interpolateRdPu: RdPu,
  schemeRdPu: scheme$a,
  interpolateYlGnBu: YlGnBu,
  schemeYlGnBu: scheme$9,
  interpolateYlGn: YlGn,
  schemeYlGn: scheme$8,
  interpolateYlOrBr: YlOrBr,
  schemeYlOrBr: scheme$7,
  interpolateYlOrRd: YlOrRd,
  schemeYlOrRd: scheme$6,
  interpolateBlues: Blues,
  schemeBlues: scheme$5,
  interpolateGreens: Greens,
  schemeGreens: scheme$4,
  interpolateGreys: Greys,
  schemeGreys: scheme$3,
  interpolatePurples: Purples,
  schemePurples: scheme$2,
  interpolateReds: Reds,
  schemeReds: scheme$1,
  interpolateOranges: Oranges,
  schemeOranges: scheme,
  interpolateCividis: cividis,
  interpolateCubehelixDefault: cubehelix,
  interpolateRainbow: rainbow,
  interpolateWarm: warm,
  interpolateCool: cool,
  interpolateSinebow: sinebow,
  interpolateTurbo: turbo,
  interpolateViridis: viridis,
  interpolateMagma: magma,
  interpolateInferno: inferno,
  interpolatePlasma: plasma
});

const scales = {
  sqrt: sqrt,
  log: log,
  linear: linear,
  literal: identity
};
const palette_size = 4096;
function to_buffer(data) {
  const output = new Uint8Array(4 * palette_size);
  output.set(data.flat());
  return output;
}
function materialize_color_interplator(interpolator) {
  const rawValues = range(palette_size).map((i) => {
    const p = rgb(interpolator(i / palette_size));
    return [p.r, p.g, p.b, 255];
  });
  return to_buffer(rawValues);
}
const color_palettes = {
  white: range(palette_size).map(() => [255, 255, 255, 255])
};
const schemes = {};
for (const [k, v] of Object.entries(d3Chromatic)) {
  if (k.startsWith("scheme") && typeof v[0] === "string") {
    const colors = new Array(palette_size);
    const scheme = v.map((v2) => {
      const col = rgb(v2);
      return [col.r, col.g, col.b, 255];
    });
    for (const i of range(palette_size)) {
      colors[i] = scheme[i % v.length];
    }
    const name = k.replace("scheme", "").toLowerCase();
    color_palettes[name] = to_buffer(colors);
    schemes[name] = v;
  }
  if (k.startsWith("interpolate")) {
    const name = k.replace("interpolate", "").toLowerCase();
    color_palettes[name] = materialize_color_interplator(v);
    if (name === "rainbow") {
      color_palettes.shufbow = shuffle(color_palettes[name]);
    }
  }
}
function okabe() {
  const okabe_palette = ["#E69F00", "#CC79A7", "#56B4E9", "#009E73", "#0072B2", "#D55E00", "#F0E442"];
  const colors = new Array(palette_size);
  const scheme = okabe_palette.map((v) => {
    const col = rgb(v);
    return [col.r, col.g, col.b, 255];
  });
  for (const i of range(palette_size)) {
    colors[i] = scheme[i % okabe_palette.length];
  }
  color_palettes.okabe = to_buffer(colors);
  schemes.okabe = okabe_palette;
}
okabe();
const default_aesthetics = {
  x: {
    field: "x",
    constant: 1,
    range: [0, 500],
    transform: "literal"
  },
  y: {
    field: "y",
    constant: 1,
    range: [0, 500],
    transform: "literal"
  },
  x0: {
    constant: 0,
    range: [0, 500],
    transform: "literal"
  },
  y0: {
    constant: 0,
    range: [0, 500],
    transform: "literal"
  },
  color: {
    constant: [1, 1, 1],
    range: color_palettes.white,
    transform: "linear"
  },
  jitter_radius: {
    constant: 0,
    range: [0, 1],
    transform: "linear"
  },
  jitter_speed: {
    constant: 0,
    range: [0.05, 1],
    transform: "linear"
  },
  size: {
    constant: 1.5,
    range: [0.5, 5],
    transform: "sqrt"
  },
  filter1: {
    constant: 1,
    range: [0, 1],
    transform: "linear"
  },
  filter2: {
    constant: 1,
    range: [0, 1],
    transform: "linear"
  }
};
class Aesthetic {
  constructor(label, scatterplot, regl, tile) {
    this.label = label;
    this.scatterplot = scatterplot;
    this.regl = regl;
    this._domain = this.default_domain;
    this._range = this.default_range;
    this._transform = default_aesthetics[label].transform;
    this.tileSet = tile;
    this.needs_transitions = true;
    this._domains = {};
  }
  get default_val() {
    return 1;
  }
  get texture_size() {
    return 4096;
  }
  apply(point) {
    return this.scale(this.value_for(point));
  }
  get transform() {
    if (this._transform)
      return this._transform;
    return default_aesthetics[this.label].transform;
  }
  get default_range() {
    return default_aesthetics[this.label].range;
  }
  get scale() {
    function capitalize(r) {
      return r.charAt(0).toUpperCase() + r.slice(1);
    }
    let scale = scales[this.transform]().domain(this.domain).range(this.range);
    const range = this.range;
    if (typeof range == "string") {
      const interpolator = d3Chromatic["interpolate" + capitalize(range)];
      if (interpolator !== void 0) {
        if (this.transform === "sqrt") {
          return sequentialPow(interpolator).exponent(0.5).domain(this.domain);
        } else if (this.transform === "log") {
          return sequentialLog(interpolator).domain(this.domain);
        } else {
          return sequential(interpolator).domain(this.domain);
        }
      }
    }
    if (this.is_dictionary()) {
      scale = ordinal().range(range).domain(this.domain);
      if (schemes[range]) {
        scale.range(schemes[range]).domain(this.column.dictionary.toArray());
      }
    }
    return scale;
  }
  get column() {
    return this.tileSet.table.getColumn(this.field);
  }
  get default_domain() {
    if (this.field == void 0) {
      return [1, 1];
    }
    if (this._domains[this.field]) {
      return this._domains[this.field];
    }
    if (!this.tileSet.table) {
      return [1, 1];
    }
    const { column } = this;
    if (column.type.dictionary) {
      this._domains[this.field] = [0, this.texture_size - 1];
    } else {
      this._domains[this.field] = extent(column.toArray());
    }
    return this._domains[this.field];
  }
  default_data() {
    return Array(this.texture_size).fill(this.default_val);
  }
  get domain() {
    return this._domain || this.default_domain;
  }
  get range() {
    return this._range || this.default_range;
  }
  value_for(point) {
    const field = this.field || this.partner.field;
    return point[field];
  }
  get texture_buffer() {
    if (this._texture_buffer) {
      return this._texture_buffer;
    }
    this._texture_buffer = new Float32Array(this.texture_size);
    this._texture_buffer.set(this.default_data());
    return this._texture_buffer;
  }
  get textures() {
    if (this._textures) {
      return this._textures;
    }
    this.texture_type = this.regl.hasExtension("OES_texture_float") ? "float" : this.regl.hasExtension("OES_texture_half_float") ? "half float" : "uint8";
    this.texture_format = this.texture_type === "uint8" ? "rgba" : "alpha";
    const params = {
      width: 1,
      height: this.texture_size,
      type: this.texture_type,
      format: this.texture_format,
      data: this.default_data()
    };
    this._textures = {
      one_d: this.regl.texture(params)
    };
    return this._textures;
  }
  key() {
    return this.field + this.domain + this.range + this.transform;
  }
  post_to_regl_buffer(buffer_name) {
    this.textures[buffer_name].subimage({
      data: this.texture_buffer,
      width: 1,
      height: this.texture_size
    });
  }
  clear() {
    this.texture_buffer.set(this.default_data());
    this.post_to_regl_buffer("one_d");
    this.lookup = void 0;
    this.field = void 0;
    this._domain = void 0;
    this._range = void 0;
    this._transform = void 0;
  }
  get use_lookup() {
    const { lookup } = this;
    return lookup ? 1 : 0;
  }
  get lookup_texture() {
    const { lookup } = this;
    if (lookup === void 0) {
      return {
        texture: this.textures.one_d,
        y_domain: [-1, 1],
        x_domain: [-1, 1],
        z_domain: [-1, 1],
        y_constant: 0
      };
    }
    const { field } = this;
    const {
      table,
      value,
      y,
      z
    } = lookup;
    if (!y.constant) {
      throw "Only constant lookups for the secondary dimension are currently supported.";
    }
    const dimensions2 = {
      x: field,
      y: y.field,
      z: z.field
    };
    const lookup_handler = this.scatterplot.lookup_tables.get(table);
    const x_names = () => this.arrow_column().data.dictionary.toArray();
    let actual_values;
    if (lookup_handler === void 0) {
      actual_values = {
        texture: this.textures.one_d,
        y_domain: [-1, 1],
        z_domain: [-1, 1],
        x_domain: [-1, 1]
      };
    } else {
      actual_values = lookup_handler.get_cached_crosstab_texture(dimensions2, { x: x_names }, this.regl);
    }
    const {
      texture,
      z_domain,
      y_domain,
      x_domain,
      shape,
      crosstabs
    } = actual_values;
    return {
      value: y.constant || 0,
      crosstabs,
      texture,
      shape,
      x_domain,
      y_domain,
      z_domain
    };
  }
  update(encoding) {
    if (encoding === null) {
      this.clear();
      return;
    }
    if (encoding === void 0) {
      throw "This should have been removed earlier";
    }
    if ((encoding.field === "x" || encoding.field === "y") && encoding.range) {
      console.warn(`Asked for an x or y range, but it will be automatically
                    set to the window scale.`);
    }
    this.stringversion = JSON.parse(JSON.stringify(encoding));
    if (encoding.field === this.field && encoding.op && this.field !== void 0) {
      return;
    }
    if (typeof encoding === "string") {
      encoding = parseLambdaString(encoding, false);
      if (this.label.startsWith("filter")) {
        encoding.domain = [-2047, 2047];
      }
    }
    if (typeof encoding === "number" || encoding.length) {
      encoding = {
        constant: encoding,
        transform: "literal"
      };
    }
    if (encoding.lambda && typeof encoding.lambda === "string") {
      Object.assign(encoding, parseLambdaString(encoding.lambda, false));
    }
    this.lookup = encoding.lookup;
    this.field = encoding.field;
    this._domain = safe_expand(encoding.domain);
    this._range = safe_expand(encoding.range);
    this._constant = encoding.constant;
    const {
      lambda,
      field
    } = encoding;
    this._transform = encoding.transform || this.default_transform;
    if (lambda) {
      this.apply_function_to_textures(field, this.domain, lambda);
    } else if (encoding.range) {
      this.encode_for_textures(this.range);
      this.post_to_regl_buffer("one_d");
    }
  }
  encode_for_textures(range) {
    const values = new Array(this.texture_size);
    this.scaleFunc = scales[this.transform]().range(range).domain([0, this.texture_size - 1]);
    for (let i = 0; i < this.texture_size; i += 1) {
      values[i] = this.scaleFunc(i);
    }
    this.texture_buffer.set(values);
  }
  arrow_column() {
    const c = this.tileSet.table.getColumn(this.field);
    if (c === null) {
      throw `No column ${this.field} on arrow table for aesthetic ${this.label}`;
    }
    return c;
  }
  is_dictionary() {
    if (this.field == void 0) {
      return false;
    }
    return this.arrow_column().type.dictionary;
  }
  get constant() {
    return this._constant;
  }
  get use_map_on_regl() {
    if (this.is_dictionary()) {
      if (this.domain[0] === -2047 && this.domain[1] == 2047) {
        return 1;
      }
    }
    return 0;
  }
  apply_function_to_textures(field, range$1, function_reference) {
    let func;
    if (typeof function_reference === "string") {
      const [name, lambda] = function_reference.split("=>").map((d) => d.trim());
      if (lambda === void 0) {
        func = Function("x", function_reference);
      } else {
        func = Function(name, lambda);
      }
    } else {
      func = function_reference;
    }
    this.scaleFunc = linear().range(range$1).domain([0, this.texture_size - 1]);
    let input = range(this.texture_size);
    if (field === void 0 || this.tileSet.table === void 0) {
      this.texture_buffer.set(range(this.texture_size).map((i) => 1));
      return;
    }
    const { column } = this;
    if (!column) {
      throw `Column ${field} does not exist on table.`;
    }
    if (column.type.dictionary) {
      input.fill("");
      const dvals = column.data.dictionary.toArray();
      dvals.forEach((d, i) => {
        input[i] = d;
      });
    } else {
      input = input.map((d) => this.scaleFunc(d));
    }
    const values = input.map((i) => func(i));
    this.texture_buffer.set(values);
    this.post_to_regl_buffer("one_d");
  }
}
class Size extends Aesthetic {
  get default_val() {
    return 1;
  }
}
class X extends Aesthetic {
  constructor(...args) {
    super(...args);
    this._transform = "literal";
  }
  get range() {
    return this.tileSet.extent ? this.tileSet.extent.x : [-20, 20];
  }
  get previous_range() {
    return this.range;
  }
  get default_val() {
    return 1;
  }
}
class X0 extends X {
}
class Y extends X {
  get range() {
    const [min, max] = this.tileSet.extent ? this.tileSet.extent.y : [-20, 20];
    return [max, min];
  }
  get previous_range() {
    return this.range;
  }
}
class Y0 extends Y {
}
class Filter extends Aesthetic {
  get default_val() {
    return 1;
  }
  get domain() {
    return this.is_dictionary() ? [-2047, 2047] : [0, 1];
  }
  get_function() {
    const input = this.stringversion;
    if (input && input.op) {
      if (input.op == "gt") {
        return (d) => d > input.a;
      }
      if (input.op == "lt") {
        return (d) => d < input.a;
      }
      if (input.op == "eq") {
        return (d) => d == input.a;
      }
      if (input.op == "within") {
        return (d) => Math.abs(d - input.a) <= input.b;
      }
    }
    if (!this.encoding) {
      return () => true;
    }
    const {
      lambda,
      field
    } = this.encoding;
    if (!lambda) {
      return (d) => true;
    }
    return (d) => lambda(d[field]);
  }
  ops_to_array() {
    const input = this.stringversion;
    if (!input || !input.op) {
      return [0, 0, 0];
    }
    const val = [
      [null, "lt", "gt", "eq", "within"].indexOf(input.op),
      input.a || 0,
      input.b || 0
    ];
    return val;
  }
}
function safe_expand(range) {
  if (typeof range === "string") {
    return range;
  }
  if (typeof range === "number") {
    return [range, range];
  }
  if (range === void 0) {
    return [1, 1];
  }
  try {
    return [...range];
  } catch (err) {
    console.warn("No list for range", range);
    return [1, 1];
  }
}
class Filter1 extends Filter {
}
class Filter2 extends Filter {
}
class Jitter_speed extends Aesthetic {
  get default_val() {
    return 0.1;
  }
}
function encode_jitter_to_int(jitter) {
  if (jitter === "spiral") {
    return 1;
  }
  if (jitter === "uniform") {
    return 2;
  }
  if (jitter === "normal") {
    return 3;
  }
  if (jitter === "circle") {
    return 4;
  }
  if (jitter === "time") {
    return 5;
  }
  return 0;
}
class Jitter_radius extends Aesthetic {
  constructor(...args) {
    super(...args);
    this.method = "None";
  }
  get default_val() {
    return 0.05;
  }
  update(encoding) {
    if (typeof encoding === "number") {
      encoding = { constant: encoding };
    }
    if (encoding.method) {
      this.method = encoding.method;
    } else if (this.partner.method) {
      this.method = this.partner.method;
    }
    if (encoding.method === null) {
      this.method = "None";
    }
    super.update(encoding);
  }
  get jitter_int_format() {
    return encode_jitter_to_int(this.method);
  }
}
class Color extends Aesthetic {
  get default_val() {
    return [128, 150, 213, 255];
  }
  default_data() {
    return color_palettes.viridis;
  }
  get texture_buffer() {
    if (this._texture_buffer) {
      return this._texture_buffer;
    }
    this._texture_buffer = new Uint8Array(this.texture_size * 4);
    this._texture_buffer.set(this.default_data());
    return this._texture_buffer;
  }
  get textures() {
    if (this._textures) {
      return this._textures;
    }
    const params = {
      width: 1,
      height: this.texture_size,
      type: "uint8",
      format: "rgba",
      data: this.default_data()
    };
    this._textures = {
      one_d: this.regl.texture(params)
    };
    this.post_to_regl_buffer("one_d");
    return this._textures;
  }
  get constant() {
    if (this._constant === void 0) {
      return void 0;
    }
    if (typeof this._constant === "string") {
      const { r, g, b } = rgb(this._constant);
      this._constant = [r / 255, g / 255, b / 255];
      return this._constant;
    }
    return this._constant;
  }
  encode_for_textures(range$1) {
    this._scale = scales[this.transform]().range(range$1).domain(this.domain);
    if (color_palettes[range$1]) {
      this.texture_buffer.set(color_palettes[range$1]);
    } else if (range$1.length === this.texture_size * 4) {
      this.texture_buffer.set(range$1);
    } else if (range$1.length && range$1[0].length && range$1[0].length === 3) {
      const r = range(palette_size).map((i) => {
        const [r2, g, b] = range$1[i % range$1.length];
        return [r2, g, b, 255];
      });
      this.texture_buffer.set(r.flat());
    } else {
      console.warn(`request range of ${range$1} for color ${this.field} unknown`);
    }
  }
}
const dimensions = {
  Size,
  Jitter_speed,
  Jitter_radius,
  Color,
  Filter1,
  Filter2,
  X,
  Y,
  X0,
  Y0
};
class StatefulAesthetic {
  constructor(label, scatterplot, regl, tile) {
    this.states = [];
    const lower = label.toLowerCase();
    const Factory = dimensions[label];
    this.states.push(new Factory(lower, scatterplot, regl, tile));
    this.states.push(new Factory(lower, scatterplot, regl, tile));
    const [first, second] = this.states;
    first.partner = second;
    second.partner = first;
    for (const state of this.states) {
      state.update({ constant: default_aesthetics[lower].constant });
    }
    this.current_encoding = JSON.stringify({ constant: default_aesthetics[lower].constant });
  }
  get current() {
    return this.states[0];
  }
  get last() {
    return this.states[1];
  }
  update(encoding) {
    const stringy = JSON.stringify(encoding);
    if (stringy == this.current_encoding || encoding === void 0) {
      if (this.needs_transitions) {
        this.states[1].update(JSON.parse(this.current_encoding));
      }
      this.needs_transitions = false;
      return;
    }
    this.states.reverse();
    this.states[0].update(encoding);
    this.needs_transitions = true;
    this.current_encoding = stringy;
  }
}
function parseLambdaString(lambdastring, materialize = false) {
  let [field, lambda] = lambdastring.split("=>").map((d) => d.trim());
  if (lambda === void 0) {
    throw `Couldn't parse ${lambdastring} into a function`;
  }
  if (lambda.slice(0, 1) !== "{" && lambda.slice(0, 6) !== "return") {
    lambda = `return ${lambda}`;
  }
  const func = `${field} => ${lambda}`;
  if (materialize) {
    return Function(field, lambda);
  }
  return {
    field,
    lambda: func
  };
}

/* eslint-disable no-param-reassign */

const aesthetic_variables = Array.from(Object.keys(dimensions))
  .map((d) => d.toLowerCase());

class AestheticSet {
  constructor(scatterplot, regl, tileSet, fields = null) {
    this.is_aesthetic_set = true; // For type checking.
    this.scatterplot = scatterplot;
    this.regl = regl;
    this.tileSet = tileSet;
    if (fields === null) {
      for (const field of Array.from(Object.keys(dimensions))) {
        const aes = field;// .toLowerCase()
        const args = [aes, this.scatterplot, this.regl, tileSet];
        /* if (aes == "x") {
          args.unshift(scatterplot.width)
        }
        if (aes == "y") {
          args.unshift(scatterplot.height)
        } */
        this[aes.toLowerCase()] = new StatefulAesthetic(...args);
      }
    }

    const starting_aesthetics = {};

    for (const [k, v] of Object.entries(default_aesthetics)) {
      starting_aesthetics[k] = v.constant || v;
    }

    this.encoding = JSON.parse(JSON.stringify(starting_aesthetics));

    this.apply_encoding(this.encoding);
  }

  interpret_position(encoding) {
    if (encoding) {
      // First--set position interpolation mode to
      // true if x0 or position0 has been manually passed.

      // If it hasn't, set it to false *only* if the positional
      // parameters have changed.
      if (encoding.x0 || encoding.position0) {
        this.position_interpolation = true;
      } else if (encoding.x || encoding.position) {
        this.position_interpolation = false;
      }
      for (const p of ['position', 'position0']) {
        const suffix = p.replace('position', '');
        if (encoding[p]) {
          if (encoding[p] === 'literal') {
          // A shortcut.
            encoding[`x${suffix}`] = {
              field: 'x', transform: 'literal',
            };
            encoding[`y${suffix}`] = {
              field: 'y', transform: 'literal',
            };
          } else {
            const field = encoding[p];
            encoding[`x${suffix}`] = {
              field: `${field}.x`, transform: 'literal',
            };
            encoding[`y${suffix}`] = {
              field: `${field}.y`, transform: 'literal',
            };
          }
          delete encoding[p];
        }
      }
    }
    delete encoding.position;
    delete encoding.position0;
  }

  apply_encoding(encoding) {
    if (encoding === undefined || encoding === null) {
      encoding = {};
    }

    if (encoding.filter) {
      encoding.filter1 = encoding.filter;
      delete encoding.filter;
    }
    // Overwrite position fields.
    this.interpret_position(encoding);

    // Make believe that that the x0 and y0 values were there already.
    if (encoding.x0) {
      this.x.update(encoding.x0);
    }

    if (encoding.y0) {
      this.y.update(encoding.y0);
    }

    for (const k of aesthetic_variables) {
      this[k].update(encoding[k]);
    }
  }
}

/* eslint-disable no-underscore-dangle */

// eslint-disable-next-line import/prefer-default-export
class ReglRenderer extends Renderer {
  constructor(selector, tileSet, scatterplot) {
    super(selector, tileSet, scatterplot);
    this.regl = wrapREGL(
      {
        //      extensions: 'angle_instanced_arrays',
        optionalExtensions: [
          'OES_standard_derivatives',
          'OES_element_index_uint',
          'OES_texture_float',
          'OES_texture_half_float',
        ],
        canvas: this.canvas.node(),
      },
    );

    this.aes = new AestheticSet(scatterplot, this.regl, tileSet);
    // allocate buffers in 64 MB blocks.
    this.buffer_size = 1024 * 1024 * 64;

    this.initialize_textures();
    // Not the right way, for sure.
    this._initializations = [
    // some things that need to be initialized before the renderer is loaded.
      this.tileSet
        .promise
        .then(() => {
          this.remake_renderer();
          this._webgl_scale_history = [this.default_webgl_scale, this.default_webgl_scale];
        }),
    ];
    this.initialize();
  }

  get buffers() {
    this._buffers = this._buffers
    || new MultipurposeBufferSet(this.regl, this.buffer_size);
    return this._buffers;
  }

  data(dataset) {
    if (dataset === undefined) {
      return this.tileSet;
    }
    this.tileSet = dataset;
    return this;
  }

  apply_webgl_scale() {
  // Should probably be attached to AestheticSet, not to this class.

    // The webgl transform can either be 'literal', in which case it uses
    // the settings linked to the zoom pyramid, or semantic (linear, log, etc.)
    // in which case it has to calculate off of the x and y dimensions.

    this._use_scale_to_download_tiles = true;
    if (
      (this.aes.encoding.x.transform && this.aes.encoding.x.transform !== 'literal')
    || (this.aes.encoding.y.transform && this.aes.encoding.y.transform !== 'literal')
    ) {
      const webglscale = window_transform(this.aes.x.scale, this.aes.y.scale).flat();
      this._webgl_scale_history.unshift(webglscale);
      this._use_scale_to_download_tiles = false;
    } else {
      if (!this._webgl_scale_history) {
        this._webgl_scale_history = [];
      }
      // Use the default linked to the coordinates used to build the tree.
      this._webgl_scale_history.unshift(this.default_webgl_scale);
    }
  }

  get props() {
    const { prefs } = this;
    const { transform } = this.zoom;
    const { aes_to_buffer_num, buffer_num_to_variable, variable_to_buffer_num } = this.allocate_aesthetic_buffers();
    const props = {
    // Copy the aesthetic as a string.
      aes: { encoding: this.aes.encoding },
      colors_as_grid: 0,
      corners: this.zoom.current_corners(),
      zoom_balance: prefs.zoom_balance,
      transform,
      max_ix: this.max_ix,
      time: (Date.now() - this.zoom._start) / 1000,
      update_time: (Date.now() - this.most_recent_restart) / 1000,
      string_index: 0,
      prefs: JSON.parse(JSON.stringify(prefs)),
      color_type: undefined,
      start_time: this.most_recent_restart,
      webgl_scale: this._webgl_scale_history[0],
      last_webgl_scale: this._webgl_scale_history[1],
      use_scale_for_tiles: this._use_scale_to_download_tiles,
      grid_mode: 0,
      buffer_num_to_variable,
      aes_to_buffer_num,
      variable_to_buffer_num,
      color_picker_mode: 0, // whether to draw as a color picker.
    };

    props.zoom_matrix = [
      [props.transform.k, 0, props.transform.x],
      [0, props.transform.k, props.transform.y],
      [0, 0, 1],
    ].flat();

    // Clone.
    return JSON.parse(JSON.stringify(props));
  }

  get default_webgl_scale() {
    if (this._default_webgl_scale) {
      return this._default_webgl_scale;
    }
    this._default_webgl_scale = this.zoom.webgl_scale();
    return this._default_webgl_scale;
  }

  render_points(props) {
  // Regl is faster if it can render a large number of draw calls together.
    const prop_list = [];
    for (const tile of this.visible_tiles()) {
    // Do the binding operation; returns truthy if it's already done.
      const manager = new TileBufferManager(this.regl, tile, this);
      try {
        if (!manager.ready(props.prefs, props.block_for_buffers)) {
        // The 'ready' call also pushes a creation request into
        // the deferred_functions queue.
          continue;
        }
      } catch (err) {
        //       console.warn(err);
      // throw "Dead"
        continue;
      }

      const this_props = {
        manager,
        image_locations: manager.image_locations,
        sprites: this.sprites,
      };
      Object.assign(this_props, props);
      prop_list.push(this_props);
    }

    if (this._renderer === undefined) {
      if (this._zoom && this._zoom._timer) {
        this._zoom._timer.stop();
      }
      return;
    }
    // Do the lowest tiles first.
    prop_list.reverse();
    this._renderer(prop_list);
  }

  tick() {
    const { prefs } = this;
    const { regl, tileSet } = this;
    const { props } = this;

    this.tick_num = this.tick_num || 0;
    this.tick_num++;

    // Set a download call in motion.
    if (this._use_scale_to_download_tiles) {
      tileSet.download_most_needed_tiles(this.zoom.current_corners(), this.props.max_ix);
    } else {
      tileSet.download_to_depth(prefs.max_points);
    }

    regl.clear({
      color: [0.9, 0.9, 0.93, 0],
      depth: 1,
    });

    const start = Date.now();
    let current = () => undefined;
    while (Date.now() - start < 10 && this.deferred_functions.length) {
    // Keep popping deferred functions off the queue until we've spent 10 milliseconds doing it.
      current = this.deferred_functions.shift();
      try {
        current();
      } catch (err) {
        console.warn(err, current);
      }
    }

    this.render_all(props);
  }

  render_jpeg(props) {

  }

  single_blur_pass(fbo1, fbo2, direction) {
    const { regl } = this;
    fbo2.use(() => {
      regl.clear({ color: [0, 0, 0, 0] });
      regl(
        {
          frag: gaussian_blur,
          uniforms: {
            iResolution: ({ viewportWidth, viewportHeight }) => [viewportWidth, viewportHeight],
            iChannel0: fbo1,
            direction,
          },
          /* blend: {
        enable: true,
        func: {
          srcRGB: 'one',
          srcAlpha: 'one',
          dstRGB: 'one minus src alpha',
          dstAlpha: 'one minus src alpha',
        },
      }, */
          vert: `
        precision mediump float;
        attribute vec2 position;
        varying vec2 uv;
        void main() {
          uv = 0.5 * (position + 1.0);
          gl_Position = vec4(position, 0, 1);
        }`,
          attributes: {
            position: [-4, -4, 4, -4, 0, 4],
          },
          depth: { enable: false },
          count: 3,
        },
      )();
    });
  }

  blur(fbo1, fbo2, passes = 3) {
    let remaining = passes - 1;
    while (remaining > -1) {
      this.single_blur_pass(fbo1, fbo2, [2 ** remaining, 0]);
      this.single_blur_pass(fbo2, fbo1, [0, 2 ** remaining]);
      remaining -= 1;
    }
  }

  render_all(props) {
    const { regl } = this;


    this.fbos.points.use(() => {
      regl.clear({ color: [0, 0, 0, 0] });
      this.render_points(props);
    });
    /*
    if (this.geolines) {
      this.fbos.lines.use(() => {
        regl.clear({ color: [0, 0, 0, 0] });
        this.geolines.render(props);
      });
    }

    if (this.geo_polygons && this.geo_polygons.length) {
      this.fbos.lines.use(() => {
        regl.clear({ color: [0, 0, 0, 0] });
        for (const handler of this.geo_polygons) {
          handler.render(props);
        }
      });
    }
    */
    regl.clear({ color: [0, 0, 0, 0] });
    this.fbos.lines.use(() => regl.clear({ color: [0, 0, 0, 0] }));
    if (this.scatterplot.trimap) {
      // Allows binding a TriMap from `trifeather` object to the regl package without any import.
      // This is the best way to do it that I can think of for now.
      this.fbos.lines.use(() => {
        this.scatterplot.trimap.zoom = this.zoom;
        this.scatterplot.trimap.tick('polygon');
      });
    }
    // Copy the points buffer to the main buffer.

    for (const layer of [this.fbos.lines, this.fbos.points]) {
      regl({
        profile: true,
        blend: {
          enable: true,
          func: {
            srcRGB: 'one',
            srcAlpha: 'one',
            dstRGB: 'one minus src alpha',
            dstAlpha: 'one minus src alpha',
          },
        },

        frag: `
        precision mediump float;
        varying vec2 uv;
        uniform sampler2D tex;
        uniform float wRcp, hRcp;
        void main() {
          gl_FragColor = texture2D(tex, uv);
        }
      `,
        vert: `
        precision mediump float;
        attribute vec2 position;
        varying vec2 uv;
        void main() {
          uv = 0.5 * (position + 1.0);
          gl_Position = vec4(position, 0, 1);
        }
      `,
        attributes: {
          position: this.fill_buffer,
        },
        depth: { enable: false },
        count: 3,
        uniforms: {
          tex: () => layer,
          wRcp: ({ viewportWidth }) => 1.0 / viewportWidth,
          hRcp: ({ viewportHeight }) => 1.0 / viewportHeight,
        },
      })();
    }
  }

  set_image_data(tile, ix) {

    this.initialize_sprites(tile);

    //    const { sprites, image_locations } = tile._regl_elements;
    const { current_position } = sprites;
    if (current_position[1] > (4096 - 18 * 2)) {
      console.error(`First spritesheet overflow on ${tile.key}`);
      // Just move back to the beginning. Will cause all sorts of havoc.
      sprites.current_position = [0, 0];
      return;
    }
    if (!tile.table.get(ix)._jpeg) ;
  }

  spritesheet_setter(word) {
  // Set if not there.
    let ctx = 0;
    if (!this.spritesheet) {
      const offscreen = create$1('canvas')
        .attr('width', 4096)
        .attr('width', 4096)
        .style('display', 'none');

      ctx = offscreen.node().getContext('2d');
      const font_size = 32;
      ctx.font = `${font_size}px Times New Roman`;
      ctx.fillStyle = 'black';
      ctx.lookups = new Map();
      ctx.position = [0, font_size - font_size / 4.0];
      this.spritesheet = ctx;
    } else {
      ctx = this.spritesheet;
    }
    let [x, y] = ctx.position;

    if (ctx.lookups.get(word)) {
      return ctx.lookups.get(word);
    }
    const w_ = ctx.measureText(word).width;
    if (w_ > 4096) {
      return;
    }
    if ((x + w_) > 4096) {
      x = 0;
      y += font_size;
    }
    ctx.fillText(word, x, y);
    lookups.set(word, { x, y, width: w_ });
    // ctx.strokeRect(x, y - font_size, width, font_size)
    x += w_;
    ctx.position = [x, y];
    return lookups.get(word);
  }

  initialize_textures() {
    const { regl } = this;
    this.fbos = this.fbos || {};
    this.fbos.empty_texture = regl.texture(
      range(128).map((d) => range(128).map((d) => [0, 0, 0])),
    );

    this.fbos.minicounter = regl.framebuffer({
      width: 512,
      height: 512,
      depth: false,
    });

    this.fbos.lines = regl.framebuffer({
      // type: 'half float',
      width: this.width,
      height: this.height,
      depth: false,
    });

    this.fbos.points = regl.framebuffer({
      // type: 'half float',
      width: this.width,
      height: this.height,
      depth: false,
    });

    this.fbos.ping = regl.framebuffer({
      width: this.width,
      height: this.height,
      depth: false,
    });

    this.fbos.pong = regl.framebuffer({
      width: this.width,
      height: this.height,
      depth: false,
    });

    this.fbos.contour = this.fbos.contour
    || regl.framebuffer({
      width: this.width,
      height: this.height,
      depth: false,
    });

    this.fbos.colorpicker = this.fbos.colorpicker
    || regl.framebuffer({
      width: this.width,
      height: this.height,
      depth: false,
    });

    this.fbos.dummy = this.fbos.dummy || regl.framebuffer({
      width: 1,
      height: 1,
      depth: false,
    });

    this.fbos.dummy_buffer = regl.buffer(10);
  }

  get_image_texture(url) {
    const { regl } = this;
    this.textures = this.textures || {};
    if (this.textures[url]) {
      return this.textures[url];
    }
    const image = new Image();
    image.src = url;
    this.textures[url] = this.fbos.minicounter;
    image.onload = () => {
      console.log('loaded image', url);
      this.textures[url] = regl.texture(image);
    };
    return this.textures[url];
  }

  plot_as_grid(x_field, y_field, buffer = this.fbos.minicounter) {
    console.log('plotting as grid');
    const { scatterplot, regl, tileSet } = this.aes;

    const saved_aes = this.aes;

    if (buffer === undefined) {
    // Mock up dummy syntax to use the main draw buffer.
      buffer = {
        width: this.width,
        height: this.height,
        use: (f) => f(),
      };
    }

    const { width, height } = buffer;

    this.aes = new AestheticSet(scatterplot, regl, tileSet);

    const x_length = map._root.table.getColumn(x_field).data.dictionary.length;

    let nearest_pow_2 = 1;
    while (nearest_pow_2 < x_length) {
      nearest_pow_2 *= 2;
    }

    const encoding = {
      x: {
        field: x_field,
        transform: 'linear',
        domain: [-2047, -2047 + nearest_pow_2],
      },
      y: y_field !== undefined ? {
        field: y_field,
        transform: 'linear',
        domain: [-2047, -2020],

      } : { constant: -1 },
      size: 1,
      color: {
        constant: [0, 0, 0],
        transform: 'literal',
      },
      jitter_radius: {
        constant: 1 / 2560, // maps to x jitter
        method: 'uniform', // Means x in radius and y in speed.
      },

      jitter_speed: y_field === undefined ? 1 : 1 / 256, // maps to y jitter
    };
    console.log(`map.plotAPI({encoding: ${JSON.stringify(encoding)}})`);
    // Twice to overwrite the defaults and avoid interpolation.
    this.aes.apply_encoding(encoding);
    this.aes.apply_encoding(encoding);
    this.aes.x[1] = saved_aes.x[0];
    this.aes.y[1] = saved_aes.y[0];
    this.aes.filter1 = saved_aes.filter1;
    this.aes.filter2 = saved_aes.filter2;

    const { props } = this;
    props.block_for_buffers = true;
    props.grid_mode = 1;

    const minilist = new Uint8Array(width * height * 4);

    buffer.use(() => {
      this.regl.clear({ color: [0, 0, 0, 0] });
      this.render_points(props);
      regl.read({ data: minilist });
    });
    // Then revert back.
    this.aes = saved_aes;
  }

  count_colors(field) {
    const { regl, props } = this;
    props.prefs.jitter = null;
    if (field !== undefined) {
      console.warn('PROBABLY BROKEN BECAUSE OF THE NEW AES', field, props.prefs, field);
      props.aes.encoding.color = {
        field,
        domain: [-2047, 2047],
      // range: "shufbow"
      };
    } else {
      field = this.aes.color.field;
    }

    props.only_color = -1;
    props.colors_as_grid = 1.0;
    props.block_for_buffers = true;

    const { width, height } = this.fbos.minicounter;
    const minilist = new Uint8Array(width * height * 4);
    const counts = new Map();
    this.fbos.minicounter.use(() => {
      regl.clear({ color: [0, 0, 0, 0] });
      this.render_points(props);
      regl.read(
        { data: minilist },
      );
    });
    for (const [k, v] of this.tileSet.dictionary_lookups[field]) {
      if (typeof (k) === 'string') { continue; }
      const col = Math.floor(k / 64);
      const row = (k % 64);
      const step = width / 64;
      let score = 0;
      let overflown = false;
      for (const j of range(step)) {
        for (const i of range(step)) {
          const value = minilist[
            col * step * 4 + i * 4 // column
          + row * step * 4 * width + j * width * 4 // row
          + 3];
          // Can't be sure that we've got precision up above half precision.
          // So for factors with > 128 items, count them manually.
          if (value >= 128) {
            overflown = true;
            continue;
          }
          score += value;
        }
      }
      if (!overflown) {
      // The cells might be filled up at 128;
        counts.set(v, score);
      } else {
        console.log(k, v, 'overflown, performing manually');
        counts.set(v, this.n_visible(k));
      }
      //        console.log(k, v, col, row, score)
    }
    return counts;
  }

  n_visible(only_color = -1) {
    let { width, height } = this;
    width = Math.floor(width);
    height = Math.floor(height);
    this.contour_vals = this.contour_vals || new Uint8Array(4 * width * height);

    const { props } = this;
    props.only_color = only_color;
    let v;
    this.fbos.contour.use(() => {
      this.regl.clear({ color: [0, 0, 0, 0] });
      // read onto the contour vals.
      this.render_points(props);
      this.regl.read(this.contour_vals);
      // Could be done faster on the GPU itself.
      // But would require writing to float textures, which
      // can be hard.
      v = sum$1(this.contour_vals);
    });
    return v;
  }

  /*
  calculate_contours(field = 'lc0') {
    const { width, height } = this;
    const ix = 16;
    let contour_set = [];
    const contour_machine = contours()
      .size([parseInt(width), parseInt(height)])
      .thresholds(range(-1, 9).map((p) => Math.pow(2, p * 2)));

    for (const ix of range(this.tileSet.dictionary_lookups[field].size / 2)) {
      this.draw_contour_buffer(field, ix);
      // Rather than take the fourth element of each channel, I can use
      // a Uint32Array view of the data directly since rgb channels are all
      // zero. This just gives a view 256 * 256 * 256 larger than the actual numbers.
      const my_contours = contour_machine(this.contour_alpha_vals);
      //    console.log(sum(this.contour_alpha_vals))
      my_contours.forEach((d) => {
        d.label = this.tileSet.dictionary_lookups[field].get(ix);
      });
      contour_set = contour_set.concat(my_contours);
    }
    return contour_set;
  }
  */
  color_pick(x, y) {
    const { props, height } = this;

    props.color_picker_mode = 1;

    let color_at_point;

    this.fbos.colorpicker.use(() => {
      this.regl.clear({ color: [0, 0, 0, 0] });

      // read onto the contour vals.
      this.render_points(props);
      // Must be flipped
      try {
        color_at_point = this.regl.read({
          x, y: height - y, width: 1, height: 1,
        });
      } catch (err) {
        console.warn('Read bad data from', {
          x, y, height, attempted: height - y,
        });
        color_at_point = [0, 0, 0, 0];
      }
    });

    // Subtract one. This inverts the operation `fill = packFloat(ix + 1.);`
    // in glsl/general.vert, to avoid off-by-one errors with the point selected.
    const point_as_float = glslReadFloat(...color_at_point) - 1;

    // Coerce to int. unpackFloat returns float but findPoint expects int.
    const point_as_int = Math.round(point_as_float);
    const p = this.tileSet.findPoint(point_as_int);

    if (p.length === 0) { return undefined; }

    return p[0];
  }

  /* blur(fbo) {
  var passes = [];
  var radii = [Math.round(
    Math.max(1, state.bloom.radius * pixelRatio / state.bloom.downsample))];
  for (var radius = nextPow2(radii[0]) / 2; radius >= 1; radius /= 2) {
    radii.push(radius);
  }
  radii.forEach(radius => {
    for (var pass = 0; pass < state.bloom.blur.passes; pass++) {
      passes.push({
        kernel: 13,
        src: bloomFbo[0],
        dst: bloomFbo[1],
        direction: [radius, 0]
      }, {
        kernel: 13,
        src: bloomFbo[1],
        dst: bloomFbo[0],
        direction: [0, radius]
      });
    }
  })
} */
  get fill_buffer() {
    //
    if (!this._fill_buffer) {
      const { regl } = this;
      this._fill_buffer = regl.buffer(
        { data: [-4, -4, 4, -4, 0, 4] },
      );
    }
    return this._fill_buffer;
  }

  draw_contour_buffer(field, ix) {
    let { width, height } = this;
    width = Math.floor(width);
    height = Math.floor(height);

    this.contour_vals = this.contour_vals || new Uint8Array(4 * width * height);
    this.contour_alpha_vals = this.contour_alpha_vals || new Uint16Array(width * height);

    const { props } = this;

    props.aes.encoding.color = {
      field,
    };

    props.only_color = ix;

    this.fbos.contour.use(() => {
      this.regl.clear({ color: [0, 0, 0, 0] });
      // read onto the contour vals.
      this.render_points(props);
      this.regl.read(this.contour_vals);
      console.log(
        this.contour_vals.filter((d) => d !== 0)
          .map((d) => d / 6).reduce((a, b) => a + b, 0),
      );
    });

    // 3-pass blur
    this.blur(this.fbos.contour, this.fbos.ping, 3);

    this.fbos.contour.use(() => {
      this.regl.read(this.contour_vals);
      console.log(
        this.contour_vals.filter((d) => d != 0)
          .map((d) => d / 6)
          .reduce((a, b) => a + b, 0),
      );
    });

    let i = 0;

    while (i < width * height * 4) {
      this.contour_alpha_vals[i / 4] = this.contour_vals[i + 3] * 255;
      i += 4;
    }
    return this.contour_alpha_vals;
  }

  remake_renderer() {
    console.log('Remaking renderers');

    const { regl } = this;
    // This should be scoped somewhere to allow resizing.

    const parameters = {
      depth: { enable: false },
      stencil: { enable: false },
      blend: {
        enable(_, { color_picker_mode }) { return color_picker_mode < 0.5; },
        func: {
          srcRGB: 'one',
          srcAlpha: 'one',
          dstRGB: 'one minus src alpha',
          dstAlpha: 'one minus src alpha',
        },
      },
      primitive: 'points',
      frag: frag_shader,
      vert: vertex_shader,
      count(_, props) {
        return props.manager.count;
      },
      attributes: {
        buffer_0: (_, props) => props.manager.regl_elements.get('ix'),
      }, // Filled below.
      uniforms: {
        u_update_time: regl.prop('update_time'),
        u_transition_duration(_, props) {
        // const fraction = (props.time)/props.prefs.duration;
          return props.prefs.duration;
        },
        u_only_color(_, props) {
          if (props.only_color !== undefined) {
            return props.only_color;
          }
          // Use -2 to disable color plotting. -1 is a special
          // value to plot all.
          // Other values plot a specific value of the color-encoded field.
          return -2;
        },
        u_use_glyphset: (_, { prefs }) => (prefs.glyph_set ? 1 : 0),
        u_glyphset: (_, { prefs }) => {
          if (prefs.glyph_set) {
            return this.get_image_texture(prefs.glyph_set);
          }
          return this.fbos.empty_texture;
        },
        u_color_picker_mode: regl.prop('color_picker_mode'),
        u_position_interpolation_mode() {
        // 1 indicates that there should be a continuous loop between the two points.
          if (this.aes.position_interpolation) {
            return 1;
          }
          return 0;
        },
        u_grid_mode: (_, { grid_mode }) => grid_mode,
        u_colors_as_grid: regl.prop('colors_as_grid'),

        u_constant_color: () => (this.aes.color.current.constant !== undefined
          ? this.aes.color.current.constant
          : [-1, -1, -1]),
        u_constant_last_color: () => (this.aes.color.last.constant != undefined
          ? this.aes.color.last.constant
          : [-1, -1, -1]),

        u_width: ({ viewportWidth }) => viewportWidth,
        u_height: ({ viewportHeight }) => viewportHeight,
        u_aspect_ratio: ({ viewportWidth, viewportHeight }) => viewportWidth / viewportHeight,
        u_zoom_balance: regl.prop('zoom_balance'),
        u_base_size: (_, { prefs }) => prefs.point_size,
        u_maxix: (_, props) => props.max_ix,
        u_k(_, props) {
          return props.transform.k;
        },
        // Allow interpolation between different coordinate systems.
        u_window_scale: regl.prop('webgl_scale'),
        u_last_window_scale: regl.prop('last_webgl_scale'),
        u_time: ({ time }) => time,
        u_filter1_numeric() {
          return this.aes.filter1.current.ops_to_array();
        },
        u_last_filter1_numeric() {
          return this.aes.filter1.last.ops_to_array();
        },
        u_filter2_numeric() {
          return this.aes.filter2.current.ops_to_array();
        },
        u_last_filter2_numeric() {
          return this.aes.filter2.last.ops_to_array();
        },
        u_current_alpha: () => this.optimal_alpha,
        u_last_alpha: () => this.optimal_alpha,
        u_jitter: () => this.aes.jitter_radius.current.jitter_int_format,
        u_last_jitter: () => this.aes.jitter_radius.last.jitter_int_format,
        u_zoom(_, props) {
          return props.zoom_matrix;
        },
      },
    };

    // store needed buffers
    for (const i of range(0, 16)) {
      parameters.attributes[`buffer_${i}`] = (_, { manager, buffer_num_to_variable }) => {
        const c = manager.regl_elements.get(buffer_num_to_variable[i]);
        return c || { constant: 0 };
      };
    }

    for (const k of ['x', 'y', 'color', 'jitter_radius',
      'jitter_speed', 'size', 'filter1', 'filter2', 'character', 'x0', 'y0']) {
      for (const time of ['current', 'last']) {
        const temporal = time === 'current' ? '' : 'last_';
        parameters.uniforms[`u_${temporal}${k}_map`] = () => this.aes[k][time].textures.one_d;
        parameters.uniforms[`u_${temporal}${k}_needs_map`] = () => this.aes[k][time].use_map_on_regl;
        // Currently, a texture lookup is only used for dictionaries.
        /* db join code
        if (k === 'jitter_radius' && temporal === '') {
          const base_string = `u_${temporal}${k}_lookup`;

          parameters.uniforms[base_string] = () =>
          // return 1;
            (this.aes[k][time].use_lookup ? 1 : 0);

          parameters.uniforms[`${base_string}_map`] = () => this.aes[k][time].lookup_texture.texture;
          parameters.uniforms[`${base_string}_y_constant`] = () => +this.aes[k][time].lookup_texture.value || 0.5;
          parameters.uniforms[`${base_string}_y_domain`] = () => this.aes[k][time].lookup_texture.y_domain;
          parameters.uniforms[`${base_string}_z_domain`] = () => this.aes[k][time].lookup_texture.z_domain;
          parameters.uniforms[`${base_string}_x_domain`] = () => this.aes[k][time].lookup_texture.x_domain;
        }
        */
        parameters.uniforms[`u_${temporal}${k}_domain`] = () => this.aes[k][time].domain;

        if (k !== 'color') {
          parameters.uniforms[`u_${temporal}${k}_range`] = () => this.aes[k][time].range;
        }

        parameters.uniforms[`u_${temporal}${k}_transform`] = () => {
          const t = this.aes[k][time].transform;
          if (t === 'linear') return 1;
          if (t === 'sqrt') return 2;
          if (t === 'log') return 3;
          if (t === 'literal') return 4;
          throw 'Invalid transform';
        };

        parameters.uniforms[`u_${temporal}${k}_constant`] = () => {
          if (this.aes[k][time].constant !== undefined) {
            return this.aes[k][time].constant;
          }
          return this.aes[k][time].default_val;
        };

        parameters.uniforms[`u_${temporal}${k}_buffer_num`] = (_, { aes_to_buffer_num }) => {
          const val = aes_to_buffer_num[`${k}--${time}`];
          if (val === undefined) { return -1; }
          return val;
        };
      }
    // Copy the parameters from the data name.
    }
    this._renderer = regl(parameters);
    return this._renderer;
  }

  allocate_aesthetic_buffers() {
    // There are only 15 attribute buffers available to use,
    // once we pass in the index. The order here determines
    // how important it is to capture transitions for them.

    const buffers = [];
    const priorities = ['x', 'y', 'color', 'size', 'jitter_radius',
      'jitter_speed', 'character', 'x0', 'y0', 'filter1', 'filter2'];

    for (const aesthetic of priorities) {
      for (const time of ['current', 'last']) {
        if (this.aes[aesthetic]) {
          if (this.aes[aesthetic][time].field) {
            buffers.push({ aesthetic, time, field: this.aes[aesthetic][time].field });
          }
        }
      }
    }

    buffers.sort((a, b) => {
      // Current values always come first.
      if (a.time < b.time) { return -1; } // current < last.
      if (b.time < a.time) { return 1; }
      return priorities.indexOf(a.aesthetic) - priorities.indexOf(b.aesthetic);
    });

    const aes_to_buffer_num = {}; // eg 'x' => 3

    // Pre-allocate the 'ix' buffer.
    const variable_to_buffer_num = { ix: 0 }; // eg 'year' =>  3
    let num = 0;
    for (const { aesthetic, time, field } of buffers) {
      const k = `${aesthetic}--${time}`;
      if (variable_to_buffer_num[field] !== undefined) {
        aes_to_buffer_num[k] = variable_to_buffer_num[field];
        continue;
      }
      if (num++ < 16) {
        aes_to_buffer_num[k] = num;
        variable_to_buffer_num[field] = num;
        continue;
      } else {
        // Don't use the last value, use the current value.
        aes_to_buffer_num[k] = aes_to_buffer_num[`${aesthetic}--current`];
      }
    }
    const buffer_num_to_variable = [...Object.keys(variable_to_buffer_num)];
    return { aes_to_buffer_num, variable_to_buffer_num, buffer_num_to_variable };
  }

  get discard_share() {
    // If jitter is temporal, e.g., or filters are in place,
    // it may make sense to estimate the number of hidden points.
    return 0;
  }
}

class TileBufferManager {
// Handle the interactions of a tile with a regl state.

  // binds elements directly to the tile, so it's safe
  // to re-run this multiple times on the same tile.
  constructor(regl, tile, renderer) {
    this.tile = tile;
    this.regl = regl;
    this.renderer = renderer;
    tile._regl_elements = tile._regl_elements || new Map();
    this.regl_elements = tile._regl_elements;
  }

  ready(prefs, block_for_buffers = true) {
    const { renderer, regl_elements } = this;
    const { aes } = renderer;
    if (!aes.is_aesthetic_set) {
      throw 'Aesthetic must be an aesthetic set';
    }
    let keys = [...Object.entries(aes)];
    keys = keys
      .map(([k, v]) => {
        if (aesthetic_variables.indexOf(k) === -1) {
          return [];
        }
        const needed = [];
        for (const aesthetic of [v.current, v.last]) {
          if (aesthetic.field) needed.push(aesthetic.field);
        }
        return needed;
      })

      .flat();

    for (const key of keys.concat(['ix'])) {
      const current = this.regl_elements.get(key);
      if (current === null) {
      // It's in the process of being built.
        return false;
      } if (current === undefined) {
        if (!this.tile.ready) {
        // Can't build b/c no tile ready.
          return false;
        }
        // Request that the buffer be created before returning false.
        regl_elements.set(key, null);
        if (block_for_buffers) {
          this.create_regl_buffer(key);
        } else {
          renderer.deferred_functions.push(() => this.create_regl_buffer(key));
          return false;
        }
      }
    }
    return true;
  }

  get count() {
    const { tile, regl_elements } = this;
    if (regl_elements.has('_count')) {
      return regl_elements.get('_count');
    }
    if (tile.ready) {
      regl_elements.set('_count', tile.table.length);
      return regl_elements.get('_count');
    }
  }
  /*
  create_position_buffer() {
    const { table } = this.tile;
    const x = table.getColumn('x').data.values;
    const y = table.getColumn('y').data.values;
    const buffer = new Float32Array(this.count * 2);
    for (let i = 0; i < this.count; i += 1) {
      buffer[i * 2] = x[i];
      buffer[i * 2 + 1] = y[i];
    }
    return buffer;
  } */

  create_buffer_data(key) {
    const { tile } = this;
    if (!tile.ready) {
      throw 'Tile table not present.';
    }
    const column = tile.table.getColumn(`${key}_dict_index`) || tile.table.getColumn(key);

    /* if (key == 'position') {
      console.warn('CREATING POSITION BUFFER (DEPRECATED)');
      return this.create_position_buffer();
    } */

    if (!column) {
      const col_names = tile.table.schema.fields.map((d) => d.name);
      throw `Requested ${key} but table has columns ${col_names.join(', ')}`;
    }

    if (column.dictionary) {
      const buffer = new Float32Array(tile.table.length);
      let row = 0;
      for (const val of column.data.values) {
        const char_value = tile.local_dictionary_lookups[key].get(val);
        buffer[row] = tile.dictionary_lookups[key].get(char_value);
        row += 1;
      }
      return buffer;
    } if (column.data.values.constructor !== Float32Array) {
      const buffer = new Float32Array(tile.table.length);
      for (let i = 0; i < tile.table.length; i++) {
        buffer[i] = column.data.values[i];
      }
      return buffer;
    }
    // For numeric data, it's safe to simply return the data straight up.
    return column.data.values;
  }

  create_regl_buffer(key) {
    const { regl, regl_elements } = this;

    const data = this.create_buffer_data(key);
    const item_size = 4;
    const data_length = data.length;

    const buffer_desc = this.renderer.buffers.allocate_block(
      data_length, item_size,
    );

    regl_elements.set(
      key,
      buffer_desc,
    );
    //    if (key === 'ix') {console.warn(buffer_desc)}
    buffer_desc.buffer.subdata(data, buffer_desc.offset);
  }
}

class MultipurposeBufferSet {
  constructor(regl, buffer_size) {
    this.regl = regl;
    this.buffer_size = buffer_size;
    this.buffers = [];
    // Track the ends in case we want to allocate smaller items.
    this.buffer_offsets = [];
    this.generate_new_buffer();
  }

  generate_new_buffer() {
  // Adds to beginning of list.
    if (this.pointer) { this.buffer_offsets.unshift(this.pointer); }
    this.pointer = 0;
    this.buffers.unshift(
      this.regl.buffer({
        type: 'float',
        length: this.buffer_size,
        usage: 'dynamic',
      }),
    );
  }

  allocate_block(items, bytes_per_item) {
  // Allocate a block of this buffer.
  // NB size is in **bytes**
    if (this.pointer + items * bytes_per_item > this.buffer_size) {
    // May lead to ragged ends. Could be smarter about reallocation here,
    // too.
      this.generate_new_buffer();
    }
    const value = {
    // First slot stores the active buffer.
      buffer: this.buffers[0],
      offset: this.pointer,
      stride: bytes_per_item,
    };
    this.pointer += items * bytes_per_item;
    return value;
  }
}

var Arrow_dom = {};

var adapters = {};

var tslib = {exports: {}};

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

(function (module) {
/* global global, define, System, Reflect, Promise */
var __extends;
var __assign;
var __rest;
var __decorate;
var __param;
var __metadata;
var __awaiter;
var __generator;
var __exportStar;
var __values;
var __read;
var __spread;
var __spreadArrays;
var __spreadArray;
var __await;
var __asyncGenerator;
var __asyncDelegator;
var __asyncValues;
var __makeTemplateObject;
var __importStar;
var __importDefault;
var __classPrivateFieldGet;
var __classPrivateFieldSet;
var __createBinding;
(function (factory) {
    var root = typeof commonjsGlobal === "object" ? commonjsGlobal : typeof self === "object" ? self : typeof this === "object" ? this : {};
    {
        factory(createExporter(root, createExporter(module.exports)));
    }
    function createExporter(exports, previous) {
        if (exports !== root) {
            if (typeof Object.create === "function") {
                Object.defineProperty(exports, "__esModule", { value: true });
            }
            else {
                exports.__esModule = true;
            }
        }
        return function (id, v) { return exports[id] = previous ? previous(id, v) : v; };
    }
})
(function (exporter) {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };

    __extends = function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };

    __assign = Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };

    __rest = function (s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    };

    __decorate = function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };

    __param = function (paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    };

    __metadata = function (metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    };

    __awaiter = function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };

    __generator = function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };

    __exportStar = function(m, o) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
    };

    __createBinding = Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    });

    __values = function (o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };

    __read = function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };

    /** @deprecated */
    __spread = function () {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    };

    /** @deprecated */
    __spreadArrays = function () {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    __spreadArray = function (to, from, pack) {
        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
        return to.concat(ar || Array.prototype.slice.call(from));
    };

    __await = function (v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    };

    __asyncGenerator = function (thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    };

    __asyncDelegator = function (o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    };

    __asyncValues = function (o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    };

    __makeTemplateObject = function (cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    var __setModuleDefault = Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    };

    __importStar = function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };

    __importDefault = function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };

    __classPrivateFieldGet = function (receiver, state, kind, f) {
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };

    __classPrivateFieldSet = function (receiver, state, value, kind, f) {
        if (kind === "m") throw new TypeError("Private method is not writable");
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    };

    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__spreadArray", __spreadArray);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
});
}(tslib));

var buffer$1 = {};

/// @file
/// @addtogroup flatbuffers_javascript_api
/// @{
/// @cond FLATBUFFERS_INTERNAL

/**
 * @fileoverview
 *
 * Need to suppress 'global this' error so the Node.js export line doesn't cause
 * closure compile to error out.
 * @suppress {globalThis}
 */

/**
 * @const
 * @namespace
 */
var flatbuffers = {};

/**
 * @typedef {number}
 */
flatbuffers.Offset;

/**
 * @typedef {{
 *   bb: flatbuffers.ByteBuffer,
 *   bb_pos: number
 * }}
 */
flatbuffers.Table;

/**
 * @type {number}
 * @const
 */
flatbuffers.SIZEOF_SHORT = 2;

/**
 * @type {number}
 * @const
 */
flatbuffers.SIZEOF_INT = 4;

/**
 * @type {number}
 * @const
 */
flatbuffers.FILE_IDENTIFIER_LENGTH = 4;

/**
 * @type {number}
 * @const
 */
flatbuffers.SIZE_PREFIX_LENGTH = 4;

/**
 * @enum {number}
 */
flatbuffers.Encoding = {
  UTF8_BYTES: 1,
  UTF16_STRING: 2
};

/**
 * @type {Int32Array}
 * @const
 */
flatbuffers.int32 = new Int32Array(2);

/**
 * @type {Float32Array}
 * @const
 */
flatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);

/**
 * @type {Float64Array}
 * @const
 */
flatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);

/**
 * @type {boolean}
 * @const
 */
flatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;

////////////////////////////////////////////////////////////////////////////////

/**
 * @constructor
 * @param {number} low
 * @param {number} high
 */
flatbuffers.Long = function(low, high) {
  /**
   * @type {number}
   * @const
   */
  this.low = low | 0;

  /**
   * @type {number}
   * @const
   */
  this.high = high | 0;
};

/**
 * @param {number} low
 * @param {number} high
 * @returns {!flatbuffers.Long}
 */
flatbuffers.Long.create = function(low, high) {
  // Special-case zero to avoid GC overhead for default values
  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);
};

/**
 * @returns {number}
 */
flatbuffers.Long.prototype.toFloat64 = function() {
  return (this.low >>> 0) + this.high * 0x100000000;
};

/**
 * @param {flatbuffers.Long} other
 * @returns {boolean}
 */
flatbuffers.Long.prototype.equals = function(other) {
  return this.low == other.low && this.high == other.high;
};

/**
 * @type {!flatbuffers.Long}
 * @const
 */
flatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);

/// @endcond
////////////////////////////////////////////////////////////////////////////////
/**
 * Create a FlatBufferBuilder.
 *
 * @constructor
 * @param {number=} opt_initial_size
 */
flatbuffers.Builder = function(opt_initial_size) {
  if (!opt_initial_size) {
    var initial_size = 1024;
  } else {
    var initial_size = opt_initial_size;
  }

  /**
   * @type {flatbuffers.ByteBuffer}
   * @private
   */
  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);

  /**
   * Remaining space in the ByteBuffer.
   *
   * @type {number}
   * @private
   */
  this.space = initial_size;

  /**
   * Minimum alignment encountered so far.
   *
   * @type {number}
   * @private
   */
  this.minalign = 1;

  /**
   * The vtable for the current table.
   *
   * @type {Array.<number>}
   * @private
   */
  this.vtable = null;

  /**
   * The amount of fields we're actually using.
   *
   * @type {number}
   * @private
   */
  this.vtable_in_use = 0;

  /**
   * Whether we are currently serializing a table.
   *
   * @type {boolean}
   * @private
   */
  this.isNested = false;

  /**
   * Starting offset of the current struct/table.
   *
   * @type {number}
   * @private
   */
  this.object_start = 0;

  /**
   * List of offsets of all vtables.
   *
   * @type {Array.<number>}
   * @private
   */
  this.vtables = [];

  /**
   * For the current vector being built.
   *
   * @type {number}
   * @private
   */
  this.vector_num_elems = 0;

  /**
   * False omits default values from the serialized data
   *
   * @type {boolean}
   * @private
   */
  this.force_defaults = false;
};

flatbuffers.Builder.prototype.clear = function() {
  this.bb.clear();
  this.space = this.bb.capacity();
  this.minalign = 1;
  this.vtable = null;
  this.vtable_in_use = 0;
  this.isNested = false;
  this.object_start = 0;
  this.vtables = [];
  this.vector_num_elems = 0;
  this.force_defaults = false;
};

/**
 * In order to save space, fields that are set to their default value
 * don't get serialized into the buffer. Forcing defaults provides a
 * way to manually disable this optimization.
 *
 * @param {boolean} forceDefaults true always serializes default values
 */
flatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {
  this.force_defaults = forceDefaults;
};

/**
 * Get the ByteBuffer representing the FlatBuffer. Only call this after you've
 * called finish(). The actual data starts at the ByteBuffer's current position,
 * not necessarily at 0.
 *
 * @returns {flatbuffers.ByteBuffer}
 */
flatbuffers.Builder.prototype.dataBuffer = function() {
  return this.bb;
};

/**
 * Get the bytes representing the FlatBuffer. Only call this after you've
 * called finish().
 *
 * @returns {!Uint8Array}
 */
flatbuffers.Builder.prototype.asUint8Array = function() {
  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());
};

/// @cond FLATBUFFERS_INTERNAL
/**
 * Prepare to write an element of `size` after `additional_bytes` have been
 * written, e.g. if you write a string, you need to align such the int length
 * field is aligned to 4 bytes, and the string data follows it directly. If all
 * you need to do is alignment, `additional_bytes` will be 0.
 *
 * @param {number} size This is the of the new element to write
 * @param {number} additional_bytes The padding size
 */
flatbuffers.Builder.prototype.prep = function(size, additional_bytes) {
  // Track the biggest thing we've ever aligned to.
  if (size > this.minalign) {
    this.minalign = size;
  }

  // Find the amount of alignment needed such that `size` is properly
  // aligned after `additional_bytes`
  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);

  // Reallocate the buffer if needed.
  while (this.space < align_size + size + additional_bytes) {
    var old_buf_size = this.bb.capacity();
    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);
    this.space += this.bb.capacity() - old_buf_size;
  }

  this.pad(align_size);
};

/**
 * @param {number} byte_size
 */
flatbuffers.Builder.prototype.pad = function(byte_size) {
  for (var i = 0; i < byte_size; i++) {
    this.bb.writeInt8(--this.space, 0);
  }
};

/**
 * @param {number} value
 */
flatbuffers.Builder.prototype.writeInt8 = function(value) {
  this.bb.writeInt8(this.space -= 1, value);
};

/**
 * @param {number} value
 */
flatbuffers.Builder.prototype.writeInt16 = function(value) {
  this.bb.writeInt16(this.space -= 2, value);
};

/**
 * @param {number} value
 */
flatbuffers.Builder.prototype.writeInt32 = function(value) {
  this.bb.writeInt32(this.space -= 4, value);
};

/**
 * @param {flatbuffers.Long} value
 */
flatbuffers.Builder.prototype.writeInt64 = function(value) {
  this.bb.writeInt64(this.space -= 8, value);
};

/**
 * @param {number} value
 */
flatbuffers.Builder.prototype.writeFloat32 = function(value) {
  this.bb.writeFloat32(this.space -= 4, value);
};

/**
 * @param {number} value
 */
flatbuffers.Builder.prototype.writeFloat64 = function(value) {
  this.bb.writeFloat64(this.space -= 8, value);
};
/// @endcond

/**
 * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).
 * @param {number} value The `int8` to add the the buffer.
 */
flatbuffers.Builder.prototype.addInt8 = function(value) {
  this.prep(1, 0);
  this.writeInt8(value);
};

/**
 * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).
 * @param {number} value The `int16` to add the the buffer.
 */
flatbuffers.Builder.prototype.addInt16 = function(value) {
  this.prep(2, 0);
  this.writeInt16(value);
};

/**
 * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).
 * @param {number} value The `int32` to add the the buffer.
 */
flatbuffers.Builder.prototype.addInt32 = function(value) {
  this.prep(4, 0);
  this.writeInt32(value);
};

/**
 * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).
 * @param {flatbuffers.Long} value The `int64` to add the the buffer.
 */
flatbuffers.Builder.prototype.addInt64 = function(value) {
  this.prep(8, 0);
  this.writeInt64(value);
};

/**
 * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).
 * @param {number} value The `float32` to add the the buffer.
 */
flatbuffers.Builder.prototype.addFloat32 = function(value) {
  this.prep(4, 0);
  this.writeFloat32(value);
};

/**
 * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).
 * @param {number} value The `float64` to add the the buffer.
 */
flatbuffers.Builder.prototype.addFloat64 = function(value) {
  this.prep(8, 0);
  this.writeFloat64(value);
};

/// @cond FLATBUFFERS_INTERNAL
/**
 * @param {number} voffset
 * @param {number} value
 * @param {number} defaultValue
 */
flatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {
  if (this.force_defaults || value != defaultValue) {
    this.addInt8(value);
    this.slot(voffset);
  }
};

/**
 * @param {number} voffset
 * @param {number} value
 * @param {number} defaultValue
 */
flatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {
  if (this.force_defaults || value != defaultValue) {
    this.addInt16(value);
    this.slot(voffset);
  }
};

/**
 * @param {number} voffset
 * @param {number} value
 * @param {number} defaultValue
 */
flatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {
  if (this.force_defaults || value != defaultValue) {
    this.addInt32(value);
    this.slot(voffset);
  }
};

/**
 * @param {number} voffset
 * @param {flatbuffers.Long} value
 * @param {flatbuffers.Long} defaultValue
 */
flatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {
  if (this.force_defaults || !value.equals(defaultValue)) {
    this.addInt64(value);
    this.slot(voffset);
  }
};

/**
 * @param {number} voffset
 * @param {number} value
 * @param {number} defaultValue
 */
flatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {
  if (this.force_defaults || value != defaultValue) {
    this.addFloat32(value);
    this.slot(voffset);
  }
};

/**
 * @param {number} voffset
 * @param {number} value
 * @param {number} defaultValue
 */
flatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {
  if (this.force_defaults || value != defaultValue) {
    this.addFloat64(value);
    this.slot(voffset);
  }
};

/**
 * @param {number} voffset
 * @param {flatbuffers.Offset} value
 * @param {flatbuffers.Offset} defaultValue
 */
flatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {
  if (this.force_defaults || value != defaultValue) {
    this.addOffset(value);
    this.slot(voffset);
  }
};

/**
 * Structs are stored inline, so nothing additional is being added. `d` is always 0.
 *
 * @param {number} voffset
 * @param {flatbuffers.Offset} value
 * @param {flatbuffers.Offset} defaultValue
 */
flatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {
  if (value != defaultValue) {
    this.nested(value);
    this.slot(voffset);
  }
};

/**
 * Structures are always stored inline, they need to be created right
 * where they're used.  You'll get this assertion failure if you
 * created it elsewhere.
 *
 * @param {flatbuffers.Offset} obj The offset of the created object
 */
flatbuffers.Builder.prototype.nested = function(obj) {
  if (obj != this.offset()) {
    throw new Error('FlatBuffers: struct must be serialized inline.');
  }
};

/**
 * Should not be creating any other object, string or vector
 * while an object is being constructed
 */
flatbuffers.Builder.prototype.notNested = function() {
  if (this.isNested) {
    throw new Error('FlatBuffers: object serialization must not be nested.');
  }
};

/**
 * Set the current vtable at `voffset` to the current location in the buffer.
 *
 * @param {number} voffset
 */
flatbuffers.Builder.prototype.slot = function(voffset) {
  this.vtable[voffset] = this.offset();
};

/**
 * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.
 */
flatbuffers.Builder.prototype.offset = function() {
  return this.bb.capacity() - this.space;
};

/**
 * Doubles the size of the backing ByteBuffer and copies the old data towards
 * the end of the new buffer (since we build the buffer backwards).
 *
 * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data
 * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied
 * to it. The data is located at the end of the buffer.
 *
 * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass
 * it a uint8Array we need to suppress the type check:
 * @suppress {checkTypes}
 */
flatbuffers.Builder.growByteBuffer = function(bb) {
  var old_buf_size = bb.capacity();

  // Ensure we don't grow beyond what fits in an int.
  if (old_buf_size & 0xC0000000) {
    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');
  }

  var new_buf_size = old_buf_size << 1;
  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);
  nbb.setPosition(new_buf_size - old_buf_size);
  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);
  return nbb;
};
/// @endcond

/**
 * Adds on offset, relative to where it will be written.
 *
 * @param {flatbuffers.Offset} offset The offset to add.
 */
flatbuffers.Builder.prototype.addOffset = function(offset) {
  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.
  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);
};

/// @cond FLATBUFFERS_INTERNAL
/**
 * Start encoding a new object in the buffer.  Users will not usually need to
 * call this directly. The FlatBuffers compiler will generate helper methods
 * that call this method internally.
 *
 * @param {number} numfields
 */
flatbuffers.Builder.prototype.startObject = function(numfields) {
  this.notNested();
  if (this.vtable == null) {
    this.vtable = [];
  }
  this.vtable_in_use = numfields;
  for (var i = 0; i < numfields; i++) {
    this.vtable[i] = 0; // This will push additional elements as needed
  }
  this.isNested = true;
  this.object_start = this.offset();
};

/**
 * Finish off writing the object that is under construction.
 *
 * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`
 */
flatbuffers.Builder.prototype.endObject = function() {
  if (this.vtable == null || !this.isNested) {
    throw new Error('FlatBuffers: endObject called without startObject');
  }

  this.addInt32(0);
  var vtableloc = this.offset();

  // Trim trailing zeroes.
  var i = this.vtable_in_use - 1;
  for (; i >= 0 && this.vtable[i] == 0; i--) {}
  var trimmed_size = i + 1;

  // Write out the current vtable.
  for (; i >= 0; i--) {
    // Offset relative to the start of the table.
    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);
  }

  var standard_fields = 2; // The fields below:
  this.addInt16(vtableloc - this.object_start);
  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;
  this.addInt16(len);

  // Search for an existing vtable that matches the current one.
  var existing_vtable = 0;
  var vt1 = this.space;
outer_loop:
  for (i = 0; i < this.vtables.length; i++) {
    var vt2 = this.bb.capacity() - this.vtables[i];
    if (len == this.bb.readInt16(vt2)) {
      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {
        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {
          continue outer_loop;
        }
      }
      existing_vtable = this.vtables[i];
      break;
    }
  }

  if (existing_vtable) {
    // Found a match:
    // Remove the current vtable.
    this.space = this.bb.capacity() - vtableloc;

    // Point table to existing vtable.
    this.bb.writeInt32(this.space, existing_vtable - vtableloc);
  } else {
    // No match:
    // Add the location of the current vtable to the list of vtables.
    this.vtables.push(this.offset());

    // Point table to current vtable.
    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);
  }

  this.isNested = false;
  return vtableloc;
};
/// @endcond

/**
 * Finalize a buffer, poiting to the given `root_table`.
 *
 * @param {flatbuffers.Offset} root_table
 * @param {string=} opt_file_identifier
 * @param {boolean=} opt_size_prefix
 */
flatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {
  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;
  if (opt_file_identifier) {
    var file_identifier = opt_file_identifier;
    this.prep(this.minalign, flatbuffers.SIZEOF_INT +
      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);
    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {
      throw new Error('FlatBuffers: file identifier must be length ' +
        flatbuffers.FILE_IDENTIFIER_LENGTH);
    }
    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {
      this.writeInt8(file_identifier.charCodeAt(i));
    }
  }
  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);
  this.addOffset(root_table);
  if (size_prefix) {
    this.addInt32(this.bb.capacity() - this.space);
  }
  this.bb.setPosition(this.space);
};

/**
 * Finalize a size prefixed buffer, pointing to the given `root_table`.
 *
 * @param {flatbuffers.Offset} root_table
 * @param {string=} opt_file_identifier
 */
flatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {
  this.finish(root_table, opt_file_identifier, true);
};

/// @cond FLATBUFFERS_INTERNAL
/**
 * This checks a required field has been set in a given table that has
 * just been constructed.
 *
 * @param {flatbuffers.Offset} table
 * @param {number} field
 */
flatbuffers.Builder.prototype.requiredField = function(table, field) {
  var table_start = this.bb.capacity() - table;
  var vtable_start = table_start - this.bb.readInt32(table_start);
  var ok = this.bb.readInt16(vtable_start + field) != 0;

  // If this fails, the caller will show what field needs to be set.
  if (!ok) {
    throw new Error('FlatBuffers: field ' + field + ' must be set');
  }
};

/**
 * Start a new array/vector of objects.  Users usually will not call
 * this directly. The FlatBuffers compiler will create a start/end
 * method for vector types in generated code.
 *
 * @param {number} elem_size The size of each element in the array
 * @param {number} num_elems The number of elements in the array
 * @param {number} alignment The alignment of the array
 */
flatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {
  this.notNested();
  this.vector_num_elems = num_elems;
  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);
  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.
};

/**
 * Finish off the creation of an array and all its elements. The array must be
 * created with `startVector`.
 *
 * @returns {flatbuffers.Offset} The offset at which the newly created array
 * starts.
 */
flatbuffers.Builder.prototype.endVector = function() {
  this.writeInt32(this.vector_num_elems);
  return this.offset();
};
/// @endcond

/**
 * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed
 * instead of a string, it is assumed to contain valid UTF-8 encoded data.
 *
 * @param {string|Uint8Array} s The string to encode
 * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts
 */
flatbuffers.Builder.prototype.createString = function(s) {
  if (s instanceof Uint8Array) {
    var utf8 = s;
  } else {
    var utf8 = [];
    var i = 0;

    while (i < s.length) {
      var codePoint;

      // Decode UTF-16
      var a = s.charCodeAt(i++);
      if (a < 0xD800 || a >= 0xDC00) {
        codePoint = a;
      } else {
        var b = s.charCodeAt(i++);
        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);
      }

      // Encode UTF-8
      if (codePoint < 0x80) {
        utf8.push(codePoint);
      } else {
        if (codePoint < 0x800) {
          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);
        } else {
          if (codePoint < 0x10000) {
            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);
          } else {
            utf8.push(
              ((codePoint >> 18) & 0x07) | 0xF0,
              ((codePoint >> 12) & 0x3F) | 0x80);
          }
          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);
        }
        utf8.push((codePoint & 0x3F) | 0x80);
      }
    }
  }

  this.addInt8(0);
  this.startVector(1, utf8.length, 1);
  this.bb.setPosition(this.space -= utf8.length);
  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {
    bytes[offset++] = utf8[i];
  }
  return this.endVector();
};

/**
 * A helper function to avoid generated code depending on this file directly.
 *
 * @param {number} low
 * @param {number} high
 * @returns {!flatbuffers.Long}
 */
flatbuffers.Builder.prototype.createLong = function(low, high) {
  return flatbuffers.Long.create(low, high);
};
////////////////////////////////////////////////////////////////////////////////
/// @cond FLATBUFFERS_INTERNAL
/**
 * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).
 *
 * @constructor
 * @param {Uint8Array} bytes
 */
flatbuffers.ByteBuffer = function(bytes) {
  /**
   * @type {Uint8Array}
   * @private
   */
  this.bytes_ = bytes;

  /**
   * @type {number}
   * @private
   */
  this.position_ = 0;
};

/**
 * Create and allocate a new ByteBuffer with a given size.
 *
 * @param {number} byte_size
 * @returns {!flatbuffers.ByteBuffer}
 */
flatbuffers.ByteBuffer.allocate = function(byte_size) {
  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));
};

flatbuffers.ByteBuffer.prototype.clear = function() {
  this.position_ = 0;
};

/**
 * Get the underlying `Uint8Array`.
 *
 * @returns {Uint8Array}
 */
flatbuffers.ByteBuffer.prototype.bytes = function() {
  return this.bytes_;
};

/**
 * Get the buffer's position.
 *
 * @returns {number}
 */
flatbuffers.ByteBuffer.prototype.position = function() {
  return this.position_;
};

/**
 * Set the buffer's position.
 *
 * @param {number} position
 */
flatbuffers.ByteBuffer.prototype.setPosition = function(position) {
  this.position_ = position;
};

/**
 * Get the buffer's capacity.
 *
 * @returns {number}
 */
flatbuffers.ByteBuffer.prototype.capacity = function() {
  return this.bytes_.length;
};

/**
 * @param {number} offset
 * @returns {number}
 */
flatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {
  return this.readUint8(offset) << 24 >> 24;
};

/**
 * @param {number} offset
 * @returns {number}
 */
flatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {
  return this.bytes_[offset];
};

/**
 * @param {number} offset
 * @returns {number}
 */
flatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {
  return this.readUint16(offset) << 16 >> 16;
};

/**
 * @param {number} offset
 * @returns {number}
 */
flatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {
  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;
};

/**
 * @param {number} offset
 * @returns {number}
 */
flatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {
  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;
};

/**
 * @param {number} offset
 * @returns {number}
 */
flatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {
  return this.readInt32(offset) >>> 0;
};

/**
 * @param {number} offset
 * @returns {!flatbuffers.Long}
 */
flatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {
  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));
};

/**
 * @param {number} offset
 * @returns {!flatbuffers.Long}
 */
flatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {
  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));
};

/**
 * @param {number} offset
 * @returns {number}
 */
flatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {
  flatbuffers.int32[0] = this.readInt32(offset);
  return flatbuffers.float32[0];
};

/**
 * @param {number} offset
 * @returns {number}
 */
flatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {
  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);
  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);
  return flatbuffers.float64[0];
};

/**
 * @param {number} offset
 * @param {number|boolean} value
 */
flatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {
  this.bytes_[offset] = /** @type {number} */(value);
};

/**
 * @param {number} offset
 * @param {number} value
 */
flatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {
  this.bytes_[offset] = value;
};

/**
 * @param {number} offset
 * @param {number} value
 */
flatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {
  this.bytes_[offset] = value;
  this.bytes_[offset + 1] = value >> 8;
};

/**
 * @param {number} offset
 * @param {number} value
 */
flatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {
    this.bytes_[offset] = value;
    this.bytes_[offset + 1] = value >> 8;
};

/**
 * @param {number} offset
 * @param {number} value
 */
flatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {
  this.bytes_[offset] = value;
  this.bytes_[offset + 1] = value >> 8;
  this.bytes_[offset + 2] = value >> 16;
  this.bytes_[offset + 3] = value >> 24;
};

/**
 * @param {number} offset
 * @param {number} value
 */
flatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {
    this.bytes_[offset] = value;
    this.bytes_[offset + 1] = value >> 8;
    this.bytes_[offset + 2] = value >> 16;
    this.bytes_[offset + 3] = value >> 24;
};

/**
 * @param {number} offset
 * @param {flatbuffers.Long} value
 */
flatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {
  this.writeInt32(offset, value.low);
  this.writeInt32(offset + 4, value.high);
};

/**
 * @param {number} offset
 * @param {flatbuffers.Long} value
 */
flatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {
    this.writeUint32(offset, value.low);
    this.writeUint32(offset + 4, value.high);
};

/**
 * @param {number} offset
 * @param {number} value
 */
flatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {
  flatbuffers.float32[0] = value;
  this.writeInt32(offset, flatbuffers.int32[0]);
};

/**
 * @param {number} offset
 * @param {number} value
 */
flatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {
  flatbuffers.float64[0] = value;
  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);
  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);
};

/**
 * Return the file identifier.   Behavior is undefined for FlatBuffers whose
 * schema does not include a file_identifier (likely points at padding or the
 * start of a the root vtable).
 * @returns {string}
 */
flatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {
  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +
      flatbuffers.FILE_IDENTIFIER_LENGTH) {
    throw new Error(
        'FlatBuffers: ByteBuffer is too short to contain an identifier.');
  }
  var result = "";
  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {
    result += String.fromCharCode(
        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));
  }
  return result;
};

/**
 * Look up a field in the vtable, return an offset into the object, or 0 if the
 * field is not present.
 *
 * @param {number} bb_pos
 * @param {number} vtable_offset
 * @returns {number}
 */
flatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {
  var vtable = bb_pos - this.readInt32(bb_pos);
  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;
};

/**
 * Initialize any Table-derived type to point to the union at the given offset.
 *
 * @param {flatbuffers.Table} t
 * @param {number} offset
 * @returns {flatbuffers.Table}
 */
flatbuffers.ByteBuffer.prototype.__union = function(t, offset) {
  t.bb_pos = offset + this.readInt32(offset);
  t.bb = this;
  return t;
};

/**
 * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.
 * This allocates a new string and converts to wide chars upon each access.
 *
 * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as
 * the "optionalEncoding" argument. This is useful for avoiding conversion to
 * and from UTF-16 when the data will just be packaged back up in another
 * FlatBuffer later on.
 *
 * @param {number} offset
 * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING
 * @returns {string|!Uint8Array}
 */
flatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {
  offset += this.readInt32(offset);

  var length = this.readInt32(offset);
  var result = '';
  var i = 0;

  offset += flatbuffers.SIZEOF_INT;

  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {
    return this.bytes_.subarray(offset, offset + length);
  }

  while (i < length) {
    var codePoint;

    // Decode UTF-8
    var a = this.readUint8(offset + i++);
    if (a < 0xC0) {
      codePoint = a;
    } else {
      var b = this.readUint8(offset + i++);
      if (a < 0xE0) {
        codePoint =
          ((a & 0x1F) << 6) |
          (b & 0x3F);
      } else {
        var c = this.readUint8(offset + i++);
        if (a < 0xF0) {
          codePoint =
            ((a & 0x0F) << 12) |
            ((b & 0x3F) << 6) |
            (c & 0x3F);
        } else {
          var d = this.readUint8(offset + i++);
          codePoint =
            ((a & 0x07) << 18) |
            ((b & 0x3F) << 12) |
            ((c & 0x3F) << 6) |
            (d & 0x3F);
        }
      }
    }

    // Encode UTF-16
    if (codePoint < 0x10000) {
      result += String.fromCharCode(codePoint);
    } else {
      codePoint -= 0x10000;
      result += String.fromCharCode(
        (codePoint >> 10) + 0xD800,
        (codePoint & ((1 << 10) - 1)) + 0xDC00);
    }
  }

  return result;
};

/**
 * Retrieve the relative offset stored at "offset"
 * @param {number} offset
 * @returns {number}
 */
flatbuffers.ByteBuffer.prototype.__indirect = function(offset) {
  return offset + this.readInt32(offset);
};

/**
 * Get the start of data of a vector whose offset is stored at "offset" in this object.
 *
 * @param {number} offset
 * @returns {number}
 */
flatbuffers.ByteBuffer.prototype.__vector = function(offset) {
  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length
};

/**
 * Get the length of a vector whose offset is stored at "offset" in this object.
 *
 * @param {number} offset
 * @returns {number}
 */
flatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {
  return this.readInt32(offset + this.readInt32(offset));
};

/**
 * @param {string} ident
 * @returns {boolean}
 */
flatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {
  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {
    throw new Error('FlatBuffers: file identifier must be length ' +
                    flatbuffers.FILE_IDENTIFIER_LENGTH);
  }
  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {
    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {
      return false;
    }
  }
  return true;
};

/**
 * A helper function to avoid generated code depending on this file directly.
 *
 * @param {number} low
 * @param {number} high
 * @returns {!flatbuffers.Long}
 */
flatbuffers.ByteBuffer.prototype.createLong = function(low, high) {
  return flatbuffers.Long.create(low, high);
};

/// @endcond
/// @}

var flatbuffers$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: 'Module',
  flatbuffers: flatbuffers
});

var require$$2 = /*@__PURE__*/getAugmentedNamespace(flatbuffers$1);

var utf8$2 = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(utf8$2, "__esModule", { value: true });
utf8$2.encodeUtf8 = utf8$2.decodeUtf8 = void 0;
var decoder = new TextDecoder('utf-8');
/** @ignore */
utf8$2.decodeUtf8 = function (buffer) { return decoder.decode(buffer); };
var encoder = new TextEncoder();
/** @ignore */
utf8$2.encodeUtf8 = function (value) { return encoder.encode(value); };

var compat = {};

var interfaces = {};

(function (exports) {
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AsyncQueue = exports.ReadableInterop = exports.ArrowJSON = exports.ITERATOR_DONE = void 0;
var tslib_1 = tslib.exports;
var adapters_1 = adapters;
/** @ignore */
exports.ITERATOR_DONE = Object.freeze({ done: true, value: void (0) });
/** @ignore */
var ArrowJSON = /** @class */ (function () {
    function ArrowJSON(_json) {
        this._json = _json;
    }
    Object.defineProperty(ArrowJSON.prototype, "schema", {
        get: function () { return this._json['schema']; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArrowJSON.prototype, "batches", {
        get: function () { return (this._json['batches'] || []); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArrowJSON.prototype, "dictionaries", {
        get: function () { return (this._json['dictionaries'] || []); },
        enumerable: false,
        configurable: true
    });
    return ArrowJSON;
}());
exports.ArrowJSON = ArrowJSON;
/** @ignore */
var ReadableInterop = /** @class */ (function () {
    function ReadableInterop() {
    }
    ReadableInterop.prototype.tee = function () {
        return this._getDOMStream().tee();
    };
    ReadableInterop.prototype.pipe = function (writable, options) {
        return this._getNodeStream().pipe(writable, options);
    };
    ReadableInterop.prototype.pipeTo = function (writable, options) { return this._getDOMStream().pipeTo(writable, options); };
    ReadableInterop.prototype.pipeThrough = function (duplex, options) {
        return this._getDOMStream().pipeThrough(duplex, options);
    };
    ReadableInterop.prototype._getDOMStream = function () {
        return this._DOMStream || (this._DOMStream = this.toDOMStream());
    };
    ReadableInterop.prototype._getNodeStream = function () {
        return this._nodeStream || (this._nodeStream = this.toNodeStream());
    };
    return ReadableInterop;
}());
exports.ReadableInterop = ReadableInterop;
/** @ignore */
var AsyncQueue = /** @class */ (function (_super) {
    tslib_1.__extends(AsyncQueue, _super);
    function AsyncQueue() {
        var _this = _super.call(this) || this;
        _this._values = [];
        _this.resolvers = [];
        _this._closedPromise = new Promise(function (r) { return _this._closedPromiseResolve = r; });
        return _this;
    }
    Object.defineProperty(AsyncQueue.prototype, "closed", {
        get: function () { return this._closedPromise; },
        enumerable: false,
        configurable: true
    });
    AsyncQueue.prototype.cancel = function (reason) {
        return tslib_1.__awaiter(this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, this.return(reason)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        }); });
    };
    AsyncQueue.prototype.write = function (value) {
        if (this._ensureOpen()) {
            this.resolvers.length <= 0
                ? (this._values.push(value))
                : (this.resolvers.shift().resolve({ done: false, value: value }));
        }
    };
    AsyncQueue.prototype.abort = function (value) {
        if (this._closedPromiseResolve) {
            this.resolvers.length <= 0
                ? (this._error = { error: value })
                : (this.resolvers.shift().reject({ done: true, value: value }));
        }
    };
    AsyncQueue.prototype.close = function () {
        if (this._closedPromiseResolve) {
            var resolvers = this.resolvers;
            while (resolvers.length > 0) {
                resolvers.shift().resolve(exports.ITERATOR_DONE);
            }
            this._closedPromiseResolve();
            this._closedPromiseResolve = undefined;
        }
    };
    AsyncQueue.prototype[Symbol.asyncIterator] = function () { return this; };
    AsyncQueue.prototype.toDOMStream = function (options) {
        return adapters_1.default.toDOMStream((this._closedPromiseResolve || this._error)
            ? this
            : this._values, options);
    };
    AsyncQueue.prototype.toNodeStream = function (options) {
        return adapters_1.default.toNodeStream((this._closedPromiseResolve || this._error)
            ? this
            : this._values, options);
    };
    AsyncQueue.prototype.throw = function (_) {
        return tslib_1.__awaiter(this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, this.abort(_)];
                case 1:
                    _a.sent();
                    return [2 /*return*/, exports.ITERATOR_DONE];
            }
        }); });
    };
    AsyncQueue.prototype.return = function (_) {
        return tslib_1.__awaiter(this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, this.close()];
                case 1:
                    _a.sent();
                    return [2 /*return*/, exports.ITERATOR_DONE];
            }
        }); });
    };
    AsyncQueue.prototype.read = function (size) {
        return tslib_1.__awaiter(this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, this.next(size, 'read')];
                case 1: return [2 /*return*/, (_a.sent()).value];
            }
        }); });
    };
    AsyncQueue.prototype.peek = function (size) {
        return tslib_1.__awaiter(this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, this.next(size, 'peek')];
                case 1: return [2 /*return*/, (_a.sent()).value];
            }
        }); });
    };
    AsyncQueue.prototype.next = function () {
        var _this = this;
        var _args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            _args[_i] = arguments[_i];
        }
        if (this._values.length > 0) {
            return Promise.resolve({ done: false, value: this._values.shift() });
        }
        else if (this._error) {
            return Promise.reject({ done: true, value: this._error.error });
        }
        else if (!this._closedPromiseResolve) {
            return Promise.resolve(exports.ITERATOR_DONE);
        }
        else {
            return new Promise(function (resolve, reject) {
                _this.resolvers.push({ resolve: resolve, reject: reject });
            });
        }
    };
    AsyncQueue.prototype._ensureOpen = function () {
        if (this._closedPromiseResolve) {
            return true;
        }
        throw new Error("AsyncQueue is closed");
    };
    return AsyncQueue;
}(ReadableInterop));
exports.AsyncQueue = AsyncQueue;


}(interfaces));

(function (exports) {
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.isReadableNodeStream = exports.isWritableNodeStream = exports.isReadableDOMStream = exports.isWritableDOMStream = exports.isFetchResponse = exports.isFSReadStream = exports.isFileHandle = exports.isUnderlyingSink = exports.isIteratorResult = exports.isArrayLike = exports.isArrowJSON = exports.isAsyncIterable = exports.isIterable = exports.isObservable = exports.isPromise = exports.isObject = exports.BigUint64ArrayAvailable = exports.BigUint64Array = exports.BigInt64ArrayAvailable = exports.BigInt64Array = exports.BigIntAvailable = exports.BigInt = void 0;
var tslib_1 = tslib.exports;
var interfaces_1 = interfaces;
/** @ignore */
var _a = tslib_1.__read((function () {
    var BigIntUnavailableError = function () { throw new Error('BigInt is not available in this environment'); };
    function BigIntUnavailable() { throw BigIntUnavailableError(); }
    BigIntUnavailable.asIntN = function () { throw BigIntUnavailableError(); };
    BigIntUnavailable.asUintN = function () { throw BigIntUnavailableError(); };
    return typeof BigInt !== 'undefined' ? [BigInt, true] : [BigIntUnavailable, false];
})(), 2), BigIntCtor = _a[0], BigIntAvailable = _a[1];
exports.BigInt = BigIntCtor;
exports.BigIntAvailable = BigIntAvailable;
/** @ignore */
var _b = tslib_1.__read((function () {
    var BigInt64ArrayUnavailableError = function () { throw new Error('BigInt64Array is not available in this environment'); };
    var BigInt64ArrayUnavailable = /** @class */ (function () {
        function BigInt64ArrayUnavailable() {
            throw BigInt64ArrayUnavailableError();
        }
        Object.defineProperty(BigInt64ArrayUnavailable, "BYTES_PER_ELEMENT", {
            get: function () { return 8; },
            enumerable: false,
            configurable: true
        });
        BigInt64ArrayUnavailable.of = function () { throw BigInt64ArrayUnavailableError(); };
        BigInt64ArrayUnavailable.from = function () { throw BigInt64ArrayUnavailableError(); };
        return BigInt64ArrayUnavailable;
    }());
    return typeof BigInt64Array !== 'undefined' ? [BigInt64Array, true] : [BigInt64ArrayUnavailable, false];
})(), 2), BigInt64ArrayCtor = _b[0], BigInt64ArrayAvailable = _b[1];
exports.BigInt64Array = BigInt64ArrayCtor;
exports.BigInt64ArrayAvailable = BigInt64ArrayAvailable;
/** @ignore */
var _c = tslib_1.__read((function () {
    var BigUint64ArrayUnavailableError = function () { throw new Error('BigUint64Array is not available in this environment'); };
    var BigUint64ArrayUnavailable = /** @class */ (function () {
        function BigUint64ArrayUnavailable() {
            throw BigUint64ArrayUnavailableError();
        }
        Object.defineProperty(BigUint64ArrayUnavailable, "BYTES_PER_ELEMENT", {
            get: function () { return 8; },
            enumerable: false,
            configurable: true
        });
        BigUint64ArrayUnavailable.of = function () { throw BigUint64ArrayUnavailableError(); };
        BigUint64ArrayUnavailable.from = function () { throw BigUint64ArrayUnavailableError(); };
        return BigUint64ArrayUnavailable;
    }());
    return typeof BigUint64Array !== 'undefined' ? [BigUint64Array, true] : [BigUint64ArrayUnavailable, false];
})(), 2), BigUint64ArrayCtor = _c[0], BigUint64ArrayAvailable = _c[1];
exports.BigUint64Array = BigUint64ArrayCtor;
exports.BigUint64ArrayAvailable = BigUint64ArrayAvailable;
/** @ignore */ var isNumber = function (x) { return typeof x === 'number'; };
/** @ignore */ var isBoolean = function (x) { return typeof x === 'boolean'; };
/** @ignore */ var isFunction = function (x) { return typeof x === 'function'; };
/** @ignore */
// eslint-disable-next-line @typescript-eslint/ban-types
exports.isObject = function (x) { return x != null && Object(x) === x; };
/** @ignore */
exports.isPromise = function (x) {
    return exports.isObject(x) && isFunction(x.then);
};
/** @ignore */
exports.isObservable = function (x) {
    return exports.isObject(x) && isFunction(x.subscribe);
};
/** @ignore */
exports.isIterable = function (x) {
    return exports.isObject(x) && isFunction(x[Symbol.iterator]);
};
/** @ignore */
exports.isAsyncIterable = function (x) {
    return exports.isObject(x) && isFunction(x[Symbol.asyncIterator]);
};
/** @ignore */
exports.isArrowJSON = function (x) {
    return exports.isObject(x) && exports.isObject(x['schema']);
};
/** @ignore */
exports.isArrayLike = function (x) {
    return exports.isObject(x) && isNumber(x['length']);
};
/** @ignore */
exports.isIteratorResult = function (x) {
    return exports.isObject(x) && ('done' in x) && ('value' in x);
};
/** @ignore */
exports.isUnderlyingSink = function (x) {
    return exports.isObject(x) &&
        isFunction(x['abort']) &&
        isFunction(x['close']) &&
        isFunction(x['start']) &&
        isFunction(x['write']);
};
/** @ignore */
exports.isFileHandle = function (x) {
    return exports.isObject(x) && isFunction(x['stat']) && isNumber(x['fd']);
};
/** @ignore */
exports.isFSReadStream = function (x) {
    return exports.isReadableNodeStream(x) && isNumber(x['bytesRead']);
};
/** @ignore */
exports.isFetchResponse = function (x) {
    return exports.isObject(x) && exports.isReadableDOMStream(x['body']);
};
/** @ignore */
exports.isWritableDOMStream = function (x) {
    return exports.isObject(x) &&
        isFunction(x['abort']) &&
        isFunction(x['getWriter']) &&
        !(x instanceof interfaces_1.ReadableInterop);
};
/** @ignore */
exports.isReadableDOMStream = function (x) {
    return exports.isObject(x) &&
        isFunction(x['cancel']) &&
        isFunction(x['getReader']) &&
        !(x instanceof interfaces_1.ReadableInterop);
};
/** @ignore */
exports.isWritableNodeStream = function (x) {
    return exports.isObject(x) &&
        isFunction(x['end']) &&
        isFunction(x['write']) &&
        isBoolean(x['writable']) &&
        !(x instanceof interfaces_1.ReadableInterop);
};
/** @ignore */
exports.isReadableNodeStream = function (x) {
    return exports.isObject(x) &&
        isFunction(x['read']) &&
        isFunction(x['pipe']) &&
        isBoolean(x['readable']) &&
        !(x instanceof interfaces_1.ReadableInterop);
};


}(compat));

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(buffer$1, "__esModule", { value: true });
buffer$1.compareArrayLike = buffer$1.rebaseValueOffsets = buffer$1.toUint8ClampedArrayAsyncIterator = buffer$1.toFloat64ArrayAsyncIterator = buffer$1.toFloat32ArrayAsyncIterator = buffer$1.toUint32ArrayAsyncIterator = buffer$1.toUint16ArrayAsyncIterator = buffer$1.toUint8ArrayAsyncIterator = buffer$1.toInt32ArrayAsyncIterator = buffer$1.toInt16ArrayAsyncIterator = buffer$1.toInt8ArrayAsyncIterator = buffer$1.toArrayBufferViewAsyncIterator = buffer$1.toUint8ClampedArrayIterator = buffer$1.toFloat64ArrayIterator = buffer$1.toFloat32ArrayIterator = buffer$1.toUint32ArrayIterator = buffer$1.toUint16ArrayIterator = buffer$1.toUint8ArrayIterator = buffer$1.toInt32ArrayIterator = buffer$1.toInt16ArrayIterator = buffer$1.toInt8ArrayIterator = buffer$1.toArrayBufferViewIterator = buffer$1.toUint8ClampedArray = buffer$1.toFloat64Array = buffer$1.toFloat32Array = buffer$1.toBigUint64Array = buffer$1.toUint32Array = buffer$1.toUint16Array = buffer$1.toUint8Array = buffer$1.toBigInt64Array = buffer$1.toInt32Array = buffer$1.toInt16Array = buffer$1.toInt8Array = buffer$1.toArrayBufferView = buffer$1.joinUint8Arrays = buffer$1.memcpy = void 0;
var tslib_1$1e = tslib.exports;
var flatbuffers_1$4 = require$$2;
var utf8_1$7 = utf8$2;
var ByteBuffer$2 = flatbuffers_1$4.flatbuffers.ByteBuffer;
var compat_1$b = compat;
/** @ignore */
var SharedArrayBuf = (typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : ArrayBuffer);
/** @ignore */
function collapseContiguousByteRanges(chunks) {
    var result = chunks[0] ? [chunks[0]] : [];
    var xOffset, yOffset, xLen, yLen;
    for (var x = void 0, y = void 0, i = 0, j = 0, n = chunks.length; ++i < n;) {
        x = result[j];
        y = chunks[i];
        // continue if x and y don't share the same underlying ArrayBuffer, or if x isn't before y
        if (!x || !y || x.buffer !== y.buffer || y.byteOffset < x.byteOffset) {
            y && (result[++j] = y);
            continue;
        }
        (xOffset = x.byteOffset, xLen = x.byteLength);
        (yOffset = y.byteOffset, yLen = y.byteLength);
        // continue if the byte ranges of x and y aren't contiguous
        if ((xOffset + xLen) < yOffset || (yOffset + yLen) < xOffset) {
            y && (result[++j] = y);
            continue;
        }
        result[j] = new Uint8Array(x.buffer, xOffset, yOffset - xOffset + yLen);
    }
    return result;
}
/** @ignore */
function memcpy(target, source, targetByteOffset, sourceByteLength) {
    if (targetByteOffset === void 0) { targetByteOffset = 0; }
    if (sourceByteLength === void 0) { sourceByteLength = source.byteLength; }
    var targetByteLength = target.byteLength;
    var dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);
    var src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));
    dst.set(src, targetByteOffset);
    return target;
}
buffer$1.memcpy = memcpy;
/** @ignore */
function joinUint8Arrays(chunks, size) {
    // collapse chunks that share the same underlying ArrayBuffer and whose byte ranges overlap,
    // to avoid unnecessarily copying the bytes to do this buffer join. This is a common case during
    // streaming, where we may be reading partial byte ranges out of the same underlying ArrayBuffer
    var result = collapseContiguousByteRanges(chunks);
    var byteLength = result.reduce(function (x, b) { return x + b.byteLength; }, 0);
    var source, sliced, buffer;
    var offset = 0, index = -1;
    var length = Math.min(size || Infinity, byteLength);
    for (var n = result.length; ++index < n;) {
        source = result[index];
        sliced = source.subarray(0, Math.min(source.length, length - offset));
        if (length <= (offset + sliced.length)) {
            if (sliced.length < source.length) {
                result[index] = source.subarray(sliced.length);
            }
            else if (sliced.length === source.length) {
                index++;
            }
            buffer ? memcpy(buffer, sliced, offset) : (buffer = sliced);
            break;
        }
        memcpy(buffer || (buffer = new Uint8Array(length)), sliced, offset);
        offset += sliced.length;
    }
    return [buffer || new Uint8Array(0), result.slice(index), byteLength - (buffer ? buffer.byteLength : 0)];
}
buffer$1.joinUint8Arrays = joinUint8Arrays;
function toArrayBufferView(ArrayBufferViewCtor, input) {
    var value = compat_1$b.isIteratorResult(input) ? input.value : input;
    if (value instanceof ArrayBufferViewCtor) {
        if (ArrayBufferViewCtor === Uint8Array) {
            // Node's `Buffer` class passes the `instanceof Uint8Array` check, but we need
            // a real Uint8Array, since Buffer#slice isn't the same as Uint8Array#slice :/
            return new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength);
        }
        return value;
    }
    if (!value) {
        return new ArrayBufferViewCtor(0);
    }
    if (typeof value === 'string') {
        value = utf8_1$7.encodeUtf8(value);
    }
    if (value instanceof ArrayBuffer) {
        return new ArrayBufferViewCtor(value);
    }
    if (value instanceof SharedArrayBuf) {
        return new ArrayBufferViewCtor(value);
    }
    if (value instanceof ByteBuffer$2) {
        return toArrayBufferView(ArrayBufferViewCtor, value.bytes());
    }
    return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : value.byteLength <= 0 ? new ArrayBufferViewCtor(0)
        : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);
}
buffer$1.toArrayBufferView = toArrayBufferView;
/** @ignore */ buffer$1.toInt8Array = function (input) { return toArrayBufferView(Int8Array, input); };
/** @ignore */ buffer$1.toInt16Array = function (input) { return toArrayBufferView(Int16Array, input); };
/** @ignore */ buffer$1.toInt32Array = function (input) { return toArrayBufferView(Int32Array, input); };
/** @ignore */ buffer$1.toBigInt64Array = function (input) { return toArrayBufferView(compat_1$b.BigInt64Array, input); };
/** @ignore */ buffer$1.toUint8Array = function (input) { return toArrayBufferView(Uint8Array, input); };
/** @ignore */ buffer$1.toUint16Array = function (input) { return toArrayBufferView(Uint16Array, input); };
/** @ignore */ buffer$1.toUint32Array = function (input) { return toArrayBufferView(Uint32Array, input); };
/** @ignore */ buffer$1.toBigUint64Array = function (input) { return toArrayBufferView(compat_1$b.BigUint64Array, input); };
/** @ignore */ buffer$1.toFloat32Array = function (input) { return toArrayBufferView(Float32Array, input); };
/** @ignore */ buffer$1.toFloat64Array = function (input) { return toArrayBufferView(Float64Array, input); };
/** @ignore */ buffer$1.toUint8ClampedArray = function (input) { return toArrayBufferView(Uint8ClampedArray, input); };
/** @ignore */
var pump$1 = function (iterator) { iterator.next(); return iterator; };
/** @ignore */
function toArrayBufferViewIterator(ArrayCtor, source) {
    var wrap, buffers;
    return tslib_1$1e.__generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                wrap = function (x) { return tslib_1$1e.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, x];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                }); };
                buffers = (typeof source === 'string') ? wrap(source)
                    : (ArrayBuffer.isView(source)) ? wrap(source)
                        : (source instanceof ArrayBuffer) ? wrap(source)
                            : (source instanceof SharedArrayBuf) ? wrap(source)
                                : !compat_1$b.isIterable(source) ? wrap(source) : source;
                return [5 /*yield**/, tslib_1$1e.__values(pump$1((function (it) {
                        var r, _a, _b;
                        return tslib_1$1e.__generator(this, function (_c) {
                            switch (_c.label) {
                                case 0:
                                    r = null;
                                    _c.label = 1;
                                case 1:
                                    _b = (_a = it).next;
                                    return [4 /*yield*/, toArrayBufferView(ArrayCtor, r)];
                                case 2:
                                    r = _b.apply(_a, [_c.sent()]);
                                    _c.label = 3;
                                case 3:
                                    if (!r.done) return [3 /*break*/, 1];
                                    _c.label = 4;
                                case 4: return [2 /*return*/];
                            }
                        });
                    })(buffers[Symbol.iterator]())))];
            case 1:
                _a.sent();
                return [2 /*return*/, new ArrayCtor()];
        }
    });
}
buffer$1.toArrayBufferViewIterator = toArrayBufferViewIterator;
/** @ignore */ buffer$1.toInt8ArrayIterator = function (input) { return toArrayBufferViewIterator(Int8Array, input); };
/** @ignore */ buffer$1.toInt16ArrayIterator = function (input) { return toArrayBufferViewIterator(Int16Array, input); };
/** @ignore */ buffer$1.toInt32ArrayIterator = function (input) { return toArrayBufferViewIterator(Int32Array, input); };
/** @ignore */ buffer$1.toUint8ArrayIterator = function (input) { return toArrayBufferViewIterator(Uint8Array, input); };
/** @ignore */ buffer$1.toUint16ArrayIterator = function (input) { return toArrayBufferViewIterator(Uint16Array, input); };
/** @ignore */ buffer$1.toUint32ArrayIterator = function (input) { return toArrayBufferViewIterator(Uint32Array, input); };
/** @ignore */ buffer$1.toFloat32ArrayIterator = function (input) { return toArrayBufferViewIterator(Float32Array, input); };
/** @ignore */ buffer$1.toFloat64ArrayIterator = function (input) { return toArrayBufferViewIterator(Float64Array, input); };
/** @ignore */ buffer$1.toUint8ClampedArrayIterator = function (input) { return toArrayBufferViewIterator(Uint8ClampedArray, input); };
/** @ignore */
function toArrayBufferViewAsyncIterator(ArrayCtor, source) {
    return tslib_1$1e.__asyncGenerator(this, arguments, function toArrayBufferViewAsyncIterator_1() {
        var _a, _b, wrap, emit, buffers;
        return tslib_1$1e.__generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    if (!compat_1$b.isPromise(source)) return [3 /*break*/, 5];
                    _a = toArrayBufferViewAsyncIterator;
                    _b = [ArrayCtor];
                    return [4 /*yield*/, tslib_1$1e.__await(source)];
                case 1: return [5 /*yield**/, tslib_1$1e.__values(tslib_1$1e.__asyncDelegator.apply(void 0, [tslib_1$1e.__asyncValues.apply(void 0, [_a.apply(void 0, _b.concat([_c.sent()]))])]))];
                case 2: return [4 /*yield*/, tslib_1$1e.__await.apply(void 0, [_c.sent()])];
                case 3: return [4 /*yield*/, tslib_1$1e.__await.apply(void 0, [_c.sent()])];
                case 4: return [2 /*return*/, _c.sent()];
                case 5:
                    wrap = function (x) { return tslib_1$1e.__asyncGenerator(this, arguments, function () { return tslib_1$1e.__generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, tslib_1$1e.__await(x)];
                            case 1: return [4 /*yield*/, tslib_1$1e.__await.apply(void 0, [_a.sent()])];
                            case 2: return [4 /*yield*/, _a.sent()];
                            case 3:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    }); }); };
                    emit = function (source) {
                        return tslib_1$1e.__asyncGenerator(this, arguments, function () {
                            return tslib_1$1e.__generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [5 /*yield**/, tslib_1$1e.__values(tslib_1$1e.__asyncDelegator(tslib_1$1e.__asyncValues(pump$1((function (it) {
                                            var r, _a, _b;
                                            return tslib_1$1e.__generator(this, function (_c) {
                                                switch (_c.label) {
                                                    case 0:
                                                        r = null;
                                                        _c.label = 1;
                                                    case 1:
                                                        _b = (_a = it).next;
                                                        return [4 /*yield*/, r === null || r === void 0 ? void 0 : r.value];
                                                    case 2:
                                                        r = _b.apply(_a, [_c.sent()]);
                                                        _c.label = 3;
                                                    case 3:
                                                        if (!r.done) return [3 /*break*/, 1];
                                                        _c.label = 4;
                                                    case 4: return [2 /*return*/];
                                                }
                                            });
                                        })(source[Symbol.iterator]())))))];
                                    case 1: return [4 /*yield*/, tslib_1$1e.__await.apply(void 0, [_a.sent()])];
                                    case 2:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        });
                    };
                    buffers = (typeof source === 'string') ? wrap(source) // if string, wrap in an AsyncIterableIterator
                        : (ArrayBuffer.isView(source)) ? wrap(source) // if TypedArray, wrap in an AsyncIterableIterator
                            : (source instanceof ArrayBuffer) ? wrap(source) // if ArrayBuffer, wrap in an AsyncIterableIterator
                                : (source instanceof SharedArrayBuf) ? wrap(source) // if SharedArrayBuffer, wrap in an AsyncIterableIterator
                                    : compat_1$b.isIterable(source) ? emit(source) // If Iterable, wrap in an AsyncIterableIterator and compose the `next` values
                                        : !compat_1$b.isAsyncIterable(source) ? wrap(source) // If not an AsyncIterable, treat as a sentinel and wrap in an AsyncIterableIterator
                                            : source;
                    return [5 /*yield**/, // otherwise if AsyncIterable, use it
                        tslib_1$1e.__values(tslib_1$1e.__asyncDelegator(tslib_1$1e.__asyncValues(pump$1((function (it) {
                            return tslib_1$1e.__asyncGenerator(this, arguments, function () {
                                var r, _a, _b;
                                return tslib_1$1e.__generator(this, function (_c) {
                                    switch (_c.label) {
                                        case 0:
                                            r = null;
                                            _c.label = 1;
                                        case 1:
                                            _b = (_a = it).next;
                                            return [4 /*yield*/, tslib_1$1e.__await(toArrayBufferView(ArrayCtor, r))];
                                        case 2: return [4 /*yield*/, _c.sent()];
                                        case 3: return [4 /*yield*/, tslib_1$1e.__await.apply(void 0, [_b.apply(_a, [_c.sent()])])];
                                        case 4:
                                            r = _c.sent();
                                            _c.label = 5;
                                        case 5:
                                            if (!r.done) return [3 /*break*/, 1];
                                            _c.label = 6;
                                        case 6: return [2 /*return*/];
                                    }
                                });
                            });
                        })(buffers[Symbol.asyncIterator]())))))];
                case 6: // otherwise if AsyncIterable, use it
                return [4 /*yield*/, tslib_1$1e.__await.apply(void 0, [// otherwise if AsyncIterable, use it
                        _c.sent()])];
                case 7:
                    _c.sent();
                    return [4 /*yield*/, tslib_1$1e.__await(new ArrayCtor())];
                case 8: return [2 /*return*/, _c.sent()];
            }
        });
    });
}
buffer$1.toArrayBufferViewAsyncIterator = toArrayBufferViewAsyncIterator;
/** @ignore */ buffer$1.toInt8ArrayAsyncIterator = function (input) { return toArrayBufferViewAsyncIterator(Int8Array, input); };
/** @ignore */ buffer$1.toInt16ArrayAsyncIterator = function (input) { return toArrayBufferViewAsyncIterator(Int16Array, input); };
/** @ignore */ buffer$1.toInt32ArrayAsyncIterator = function (input) { return toArrayBufferViewAsyncIterator(Int32Array, input); };
/** @ignore */ buffer$1.toUint8ArrayAsyncIterator = function (input) { return toArrayBufferViewAsyncIterator(Uint8Array, input); };
/** @ignore */ buffer$1.toUint16ArrayAsyncIterator = function (input) { return toArrayBufferViewAsyncIterator(Uint16Array, input); };
/** @ignore */ buffer$1.toUint32ArrayAsyncIterator = function (input) { return toArrayBufferViewAsyncIterator(Uint32Array, input); };
/** @ignore */ buffer$1.toFloat32ArrayAsyncIterator = function (input) { return toArrayBufferViewAsyncIterator(Float32Array, input); };
/** @ignore */ buffer$1.toFloat64ArrayAsyncIterator = function (input) { return toArrayBufferViewAsyncIterator(Float64Array, input); };
/** @ignore */ buffer$1.toUint8ClampedArrayAsyncIterator = function (input) { return toArrayBufferViewAsyncIterator(Uint8ClampedArray, input); };
/** @ignore */
function rebaseValueOffsets(offset, length, valueOffsets) {
    // If we have a non-zero offset, create a new offsets array with the values
    // shifted by the start offset, such that the new start offset is 0
    if (offset !== 0) {
        valueOffsets = valueOffsets.slice(0, length + 1);
        for (var i = -1; ++i <= length;) {
            valueOffsets[i] += offset;
        }
    }
    return valueOffsets;
}
buffer$1.rebaseValueOffsets = rebaseValueOffsets;
/** @ignore */
function compareArrayLike(a, b) {
    var i = 0;
    var n = a.length;
    if (n !== b.length) {
        return false;
    }
    if (n > 0) {
        do {
            if (a[i] !== b[i]) {
                return false;
            }
        } while (++i < n);
    }
    return true;
}
buffer$1.compareArrayLike = compareArrayLike;

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(adapters, "__esModule", { value: true });
var tslib_1$1d = tslib.exports;
var buffer_1$j = buffer$1;
/** @ignore */
adapters.default = {
    fromIterable: function (source) {
        return pump(fromIterable(source));
    },
    fromAsyncIterable: function (source) {
        return pump(fromAsyncIterable(source));
    },
    fromDOMStream: function (source) {
        return pump(fromDOMStream(source));
    },
    fromNodeStream: function (stream) {
        return pump(fromNodeStream(stream));
    },
    // @ts-ignore
    toDOMStream: function (source, options) {
        throw new Error("\"toDOMStream\" not available in this environment");
    },
    // @ts-ignore
    toNodeStream: function (source, options) {
        throw new Error("\"toNodeStream\" not available in this environment");
    },
};
/** @ignore */
var pump = function (iterator) { iterator.next(); return iterator; };
/** @ignore */
function fromIterable(source) {
    function byteRange() {
        var _a;
        if (cmd === 'peek') {
            return buffer_1$j.joinUint8Arrays(buffers, size)[0];
        }
        _a = tslib_1$1d.__read(buffer_1$j.joinUint8Arrays(buffers, size), 3), buffer = _a[0], buffers = _a[1], bufferLength = _a[2];
        return buffer;
    }
    var done, threw, buffers, buffer, cmd, size, bufferLength, it, e_1;
    var _a, _b, _c;
    return tslib_1$1d.__generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                threw = false;
                buffers = [];
                bufferLength = 0;
                return [4 /*yield*/, null];
            case 1:
                // Yield so the caller can inject the read command before creating the source Iterator
                (_a = _d.sent(), cmd = _a.cmd, size = _a.size);
                it = buffer_1$j.toUint8ArrayIterator(source)[Symbol.iterator]();
                _d.label = 2;
            case 2:
                _d.trys.push([2, 9, 10, 11]);
                _d.label = 3;
            case 3:
                // read the next value
                (_b = isNaN(size - bufferLength) ?
                    it.next(undefined) : it.next(size - bufferLength), done = _b.done, buffer = _b.value);
                // if chunk is not null or empty, push it onto the queue
                if (!done && buffer.byteLength > 0) {
                    buffers.push(buffer);
                    bufferLength += buffer.byteLength;
                }
                if (!(done || size <= bufferLength)) return [3 /*break*/, 7];
                _d.label = 4;
            case 4: return [4 /*yield*/, byteRange()];
            case 5:
                (_c = _d.sent(), cmd = _c.cmd, size = _c.size);
                _d.label = 6;
            case 6:
                if (size < bufferLength) return [3 /*break*/, 4];
                _d.label = 7;
            case 7:
                if (!done) return [3 /*break*/, 3];
                _d.label = 8;
            case 8: return [3 /*break*/, 11];
            case 9:
                e_1 = _d.sent();
                (threw = true) && (typeof it.throw === 'function') && (it.throw(e_1));
                return [3 /*break*/, 11];
            case 10:
                (threw === false) && (typeof it.return === 'function') && (it.return(null));
                return [7 /*endfinally*/];
            case 11: return [2 /*return*/, null];
        }
    });
}
/** @ignore */
function fromAsyncIterable(source) {
    return tslib_1$1d.__asyncGenerator(this, arguments, function fromAsyncIterable_1() {
        function byteRange() {
            var _a;
            if (cmd === 'peek') {
                return buffer_1$j.joinUint8Arrays(buffers, size)[0];
            }
            _a = tslib_1$1d.__read(buffer_1$j.joinUint8Arrays(buffers, size), 3), buffer = _a[0], buffers = _a[1], bufferLength = _a[2];
            return buffer;
        }
        var done, threw, buffers, buffer, cmd, size, bufferLength, it, _a, e_2, _b, _c;
        var _d, _e, _f;
        return tslib_1$1d.__generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    threw = false;
                    buffers = [];
                    bufferLength = 0;
                    return [4 /*yield*/, tslib_1$1d.__await(null)];
                case 1: return [4 /*yield*/, _g.sent()];
                case 2:
                    // Yield so the caller can inject the read command before creating the source AsyncIterator
                    (_d = (_g.sent()), cmd = _d.cmd, size = _d.size);
                    it = buffer_1$j.toUint8ArrayAsyncIterator(source)[Symbol.asyncIterator]();
                    _g.label = 3;
                case 3:
                    _g.trys.push([3, 15, 18, 21]);
                    _g.label = 4;
                case 4:
                    if (!isNaN(size - bufferLength)) return [3 /*break*/, 6];
                    return [4 /*yield*/, tslib_1$1d.__await(it.next(undefined))];
                case 5:
                    _a = _g.sent();
                    return [3 /*break*/, 8];
                case 6: return [4 /*yield*/, tslib_1$1d.__await(it.next(size - bufferLength))];
                case 7:
                    _a = _g.sent();
                    _g.label = 8;
                case 8:
                    // read the next value
                    (_e = _a, done = _e.done, buffer = _e.value);
                    // if chunk is not null or empty, push it onto the queue
                    if (!done && buffer.byteLength > 0) {
                        buffers.push(buffer);
                        bufferLength += buffer.byteLength;
                    }
                    if (!(done || size <= bufferLength)) return [3 /*break*/, 13];
                    _g.label = 9;
                case 9: return [4 /*yield*/, tslib_1$1d.__await(byteRange())];
                case 10: return [4 /*yield*/, _g.sent()];
                case 11:
                    (_f = _g.sent(), cmd = _f.cmd, size = _f.size);
                    _g.label = 12;
                case 12:
                    if (size < bufferLength) return [3 /*break*/, 9];
                    _g.label = 13;
                case 13:
                    if (!done) return [3 /*break*/, 4];
                    _g.label = 14;
                case 14: return [3 /*break*/, 21];
                case 15:
                    e_2 = _g.sent();
                    _b = (threw = true) && (typeof it.throw === 'function');
                    if (!_b) return [3 /*break*/, 17];
                    return [4 /*yield*/, tslib_1$1d.__await(it.throw(e_2))];
                case 16:
                    _b = (_g.sent());
                    _g.label = 17;
                case 17:
                    return [3 /*break*/, 21];
                case 18:
                    _c = (threw === false) && (typeof it.return === 'function');
                    if (!_c) return [3 /*break*/, 20];
                    return [4 /*yield*/, tslib_1$1d.__await(it.return(new Uint8Array(0)))];
                case 19:
                    _c = (_g.sent());
                    _g.label = 20;
                case 20:
                    return [7 /*endfinally*/];
                case 21: return [4 /*yield*/, tslib_1$1d.__await(null)];
                case 22: return [2 /*return*/, _g.sent()];
            }
        });
    });
}
// All this manual Uint8Array chunk management can be avoided if/when engines
// add support for ArrayBuffer.transfer() or ArrayBuffer.prototype.realloc():
// https://github.com/domenic/proposal-arraybuffer-transfer
/** @ignore */
function fromDOMStream(source) {
    return tslib_1$1d.__asyncGenerator(this, arguments, function fromDOMStream_1() {
        function byteRange() {
            var _a;
            if (cmd === 'peek') {
                return buffer_1$j.joinUint8Arrays(buffers, size)[0];
            }
            _a = tslib_1$1d.__read(buffer_1$j.joinUint8Arrays(buffers, size), 3), buffer = _a[0], buffers = _a[1], bufferLength = _a[2];
            return buffer;
        }
        var done, threw, buffers, buffer, cmd, size, bufferLength, it, _a, e_3, _b;
        var _d, _e, _f;
        return tslib_1$1d.__generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    done = false, threw = false;
                    buffers = [];
                    bufferLength = 0;
                    return [4 /*yield*/, tslib_1$1d.__await(null)];
                case 1: return [4 /*yield*/, _g.sent()];
                case 2:
                    // Yield so the caller can inject the read command before we establish the ReadableStream lock
                    (_d = _g.sent(), cmd = _d.cmd, size = _d.size);
                    it = new AdaptiveByteReader(source);
                    _g.label = 3;
                case 3:
                    _g.trys.push([3, 15, 18, 22]);
                    _g.label = 4;
                case 4:
                    if (!isNaN(size - bufferLength)) return [3 /*break*/, 6];
                    return [4 /*yield*/, tslib_1$1d.__await(it['read'](undefined))];
                case 5:
                    _a = _g.sent();
                    return [3 /*break*/, 8];
                case 6: return [4 /*yield*/, tslib_1$1d.__await(it['read'](size - bufferLength))];
                case 7:
                    _a = _g.sent();
                    _g.label = 8;
                case 8:
                    // read the next value
                    (_e = _a, done = _e.done, buffer = _e.value);
                    // if chunk is not null or empty, push it onto the queue
                    if (!done && buffer.byteLength > 0) {
                        buffers.push(buffer_1$j.toUint8Array(buffer));
                        bufferLength += buffer.byteLength;
                    }
                    if (!(done || size <= bufferLength)) return [3 /*break*/, 13];
                    _g.label = 9;
                case 9: return [4 /*yield*/, tslib_1$1d.__await(byteRange())];
                case 10: return [4 /*yield*/, _g.sent()];
                case 11:
                    (_f = _g.sent(), cmd = _f.cmd, size = _f.size);
                    _g.label = 12;
                case 12:
                    if (size < bufferLength) return [3 /*break*/, 9];
                    _g.label = 13;
                case 13:
                    if (!done) return [3 /*break*/, 4];
                    _g.label = 14;
                case 14: return [3 /*break*/, 22];
                case 15:
                    e_3 = _g.sent();
                    _b = (threw = true);
                    if (!_b) return [3 /*break*/, 17];
                    return [4 /*yield*/, tslib_1$1d.__await(it['cancel'](e_3))];
                case 16:
                    _b = (_g.sent());
                    _g.label = 17;
                case 17:
                    return [3 /*break*/, 22];
                case 18:
                    if (!(threw === false)) return [3 /*break*/, 20];
                    return [4 /*yield*/, tslib_1$1d.__await(it['cancel']())];
                case 19:
                    (_g.sent());
                    return [3 /*break*/, 21];
                case 20:
                    source['locked'] && it.releaseLock();
                    _g.label = 21;
                case 21:
                    return [7 /*endfinally*/];
                case 22: return [4 /*yield*/, tslib_1$1d.__await(null)];
                case 23: return [2 /*return*/, _g.sent()];
            }
        });
    });
}
/** @ignore */
var AdaptiveByteReader = /** @class */ (function () {
    function AdaptiveByteReader(source) {
        this.source = source;
        this.byobReader = null;
        this.defaultReader = null;
        try {
            this.supportsBYOB = !!(this.reader = this.getBYOBReader());
        }
        catch (e) {
            this.supportsBYOB = !(this.reader = this.getDefaultReader());
        }
    }
    Object.defineProperty(AdaptiveByteReader.prototype, "closed", {
        get: function () {
            return this.reader ? this.reader['closed'].catch(function () { }) : Promise.resolve();
        },
        enumerable: false,
        configurable: true
    });
    AdaptiveByteReader.prototype.releaseLock = function () {
        if (this.reader) {
            this.reader.releaseLock();
        }
        this.reader = this.byobReader = this.defaultReader = null;
    };
    AdaptiveByteReader.prototype.cancel = function (reason) {
        return tslib_1$1d.__awaiter(this, void 0, void 0, function () {
            var _a, reader, source, _b;
            return tslib_1$1d.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = this, reader = _a.reader, source = _a.source;
                        _b = reader;
                        if (!_b) return [3 /*break*/, 2];
                        return [4 /*yield*/, reader['cancel'](reason).catch(function () { })];
                    case 1:
                        _b = (_c.sent());
                        _c.label = 2;
                    case 2:
                        source && (source['locked'] && this.releaseLock());
                        return [2 /*return*/];
                }
            });
        });
    };
    AdaptiveByteReader.prototype.read = function (size) {
        return tslib_1$1d.__awaiter(this, void 0, void 0, function () {
            var result, _a;
            return tslib_1$1d.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (size === 0) {
                            return [2 /*return*/, { done: this.reader == null, value: new Uint8Array(0) }];
                        }
                        if (!(!this.supportsBYOB || typeof size !== 'number')) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.getDefaultReader().read()];
                    case 1:
                        _a = _b.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.readFromBYOBReader(size)];
                    case 3:
                        _a = _b.sent();
                        _b.label = 4;
                    case 4:
                        result = _a;
                        !result.done && (result.value = buffer_1$j.toUint8Array(result));
                        return [2 /*return*/, result];
                }
            });
        });
    };
    AdaptiveByteReader.prototype.getDefaultReader = function () {
        if (this.byobReader) {
            this.releaseLock();
        }
        if (!this.defaultReader) {
            this.defaultReader = this.source['getReader']();
            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions
            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified
            // about why these errors are raised, but I'm sure there's some important spec reason that
            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the
            // only solution in this case :/
            this.defaultReader['closed'].catch(function () { });
        }
        return (this.reader = this.defaultReader);
    };
    AdaptiveByteReader.prototype.getBYOBReader = function () {
        if (this.defaultReader) {
            this.releaseLock();
        }
        if (!this.byobReader) {
            this.byobReader = this.source['getReader']({ mode: 'byob' });
            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions
            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified
            // about why these errors are raised, but I'm sure there's some important spec reason that
            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the
            // only solution in this case :/
            this.byobReader['closed'].catch(function () { });
        }
        return (this.reader = this.byobReader);
    };
    // This strategy plucked from the example in the streams spec:
    // https://streams.spec.whatwg.org/#example-manual-read-bytes
    AdaptiveByteReader.prototype.readFromBYOBReader = function (size) {
        return tslib_1$1d.__awaiter(this, void 0, void 0, function () {
            return tslib_1$1d.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, readInto(this.getBYOBReader(), new ArrayBuffer(size), 0, size)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return AdaptiveByteReader;
}());
/** @ignore */
function readInto(reader, buffer, offset, size) {
    return tslib_1$1d.__awaiter(this, void 0, void 0, function () {
        var _a, done, value;
        return tslib_1$1d.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (offset >= size) {
                        return [2 /*return*/, { done: false, value: new Uint8Array(buffer, 0, size) }];
                    }
                    return [4 /*yield*/, reader.read(new Uint8Array(buffer, offset, size - offset))];
                case 1:
                    _a = _b.sent(), done = _a.done, value = _a.value;
                    if (!(((offset += value.byteLength) < size) && !done)) return [3 /*break*/, 3];
                    return [4 /*yield*/, readInto(reader, value.buffer, offset, size)];
                case 2: return [2 /*return*/, _b.sent()];
                case 3: return [2 /*return*/, { done: done, value: new Uint8Array(value.buffer, 0, offset) }];
            }
        });
    });
}
/** @ignore */
var onEvent = function (stream, event) {
    var handler = function (_) { return resolve([event, _]); };
    var resolve;
    return [event, handler, new Promise(function (r) { return (resolve = r) && stream['once'](event, handler); })];
};
/** @ignore */
function fromNodeStream(stream) {
    return tslib_1$1d.__asyncGenerator(this, arguments, function fromNodeStream_1() {
        function byteRange() {
            var _a;
            if (cmd === 'peek') {
                return buffer_1$j.joinUint8Arrays(buffers, size)[0];
            }
            _a = tslib_1$1d.__read(buffer_1$j.joinUint8Arrays(buffers, size), 3), buffer = _a[0], buffers = _a[1], bufferLength = _a[2];
            return buffer;
        }
        function cleanup(events, err) {
            buffer = buffers = null;
            return new Promise(function (resolve, reject) {
                var e_4, _a;
                try {
                    for (var events_1 = tslib_1$1d.__values(events), events_1_1 = events_1.next(); !events_1_1.done; events_1_1 = events_1.next()) {
                        var _b = tslib_1$1d.__read(events_1_1.value, 2), evt = _b[0], fn = _b[1];
                        stream['off'](evt, fn);
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (events_1_1 && !events_1_1.done && (_a = events_1.return)) _a.call(events_1);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
                try {
                    // Some stream implementations don't call the destroy callback,
                    // because it's really a node-internal API. Just calling `destroy`
                    // here should be enough to conform to the ReadableStream contract
                    var destroy = stream['destroy'];
                    destroy && destroy.call(stream, err);
                    err = undefined;
                }
                catch (e) {
                    err = e || err;
                }
                finally {
                    err != null ? reject(err) : resolve();
                }
            });
        }
        var events, event, done, err, cmd, size, bufferLength, buffers, buffer;
        var _a, _b, _c;
        return tslib_1$1d.__generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    events = [];
                    event = 'error';
                    done = false, err = null;
                    bufferLength = 0;
                    buffers = [];
                    return [4 /*yield*/, tslib_1$1d.__await(null)];
                case 1: return [4 /*yield*/, _d.sent()];
                case 2:
                    // Yield so the caller can inject the read command before we
                    // add the listener for the source stream's 'readable' event.
                    (_a = _d.sent(), cmd = _a.cmd, size = _a.size);
                    if (!stream['isTTY']) return [3 /*break*/, 6];
                    return [4 /*yield*/, tslib_1$1d.__await(new Uint8Array(0))];
                case 3: return [4 /*yield*/, _d.sent()];
                case 4:
                    _d.sent();
                    return [4 /*yield*/, tslib_1$1d.__await(null)];
                case 5: return [2 /*return*/, _d.sent()];
                case 6:
                    _d.trys.push([6, , 15, 17]);
                    // initialize the stream event handlers
                    events[0] = onEvent(stream, 'end');
                    events[1] = onEvent(stream, 'error');
                    _d.label = 7;
                case 7:
                    events[2] = onEvent(stream, 'readable');
                    return [4 /*yield*/, tslib_1$1d.__await(Promise.race(events.map(function (x) { return x[2]; })))];
                case 8:
                    // wait on the first message event from the stream
                    _b = tslib_1$1d.__read.apply(void 0, [_d.sent(), 2]), event = _b[0], err = _b[1];
                    // if the stream emitted an Error, rethrow it
                    if (event === 'error') {
                        return [3 /*break*/, 14];
                    }
                    if (!(done = event === 'end')) {
                        // If the size is NaN, request to read everything in the stream's internal buffer
                        if (!isFinite(size - bufferLength)) {
                            buffer = buffer_1$j.toUint8Array(stream['read'](undefined));
                        }
                        else {
                            buffer = buffer_1$j.toUint8Array(stream['read'](size - bufferLength));
                            // If the byteLength is 0, then the requested amount is more than the stream has
                            // in its internal buffer. In this case the stream needs a "kick" to tell it to
                            // continue emitting readable events, so request to read everything the stream
                            // has in its internal buffer right now.
                            if (buffer.byteLength < (size - bufferLength)) {
                                buffer = buffer_1$j.toUint8Array(stream['read'](undefined));
                            }
                        }
                        // if chunk is not null or empty, push it onto the queue
                        if (buffer.byteLength > 0) {
                            buffers.push(buffer);
                            bufferLength += buffer.byteLength;
                        }
                    }
                    if (!(done || size <= bufferLength)) return [3 /*break*/, 13];
                    _d.label = 9;
                case 9: return [4 /*yield*/, tslib_1$1d.__await(byteRange())];
                case 10: return [4 /*yield*/, _d.sent()];
                case 11:
                    (_c = _d.sent(), cmd = _c.cmd, size = _c.size);
                    _d.label = 12;
                case 12:
                    if (size < bufferLength) return [3 /*break*/, 9];
                    _d.label = 13;
                case 13:
                    if (!done) return [3 /*break*/, 7];
                    _d.label = 14;
                case 14: return [3 /*break*/, 17];
                case 15: return [4 /*yield*/, tslib_1$1d.__await(cleanup(events, event === 'error' ? err : null))];
                case 16:
                    _d.sent();
                    return [7 /*endfinally*/];
                case 17: return [4 /*yield*/, tslib_1$1d.__await(null)];
                case 18: return [2 /*return*/, _d.sent()];
            }
        });
    });
}

var builder$2 = {};

var builder$1 = {};

var vector$2 = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(vector$2, "__esModule", { value: true });
vector$2.Vector = vector$2.AbstractVector = void 0;
var AbstractVector = /** @class */ (function () {
    function AbstractVector() {
    }
    return AbstractVector;
}());
vector$2.AbstractVector = AbstractVector;
vector$2.Vector = AbstractVector;
AbstractVector.prototype.data = null;

var _enum = {};

var Schema$1 = {};

(function (exports) {
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.Schema = exports.Buffer = exports.Field = exports.DictionaryEncoding = exports.KeyValue = exports.Duration = exports.Interval = exports.Timestamp = exports.Time = exports.Date = exports.Decimal = exports.Bool = exports.FixedSizeBinary = exports.LargeBinary = exports.LargeUtf8 = exports.Binary = exports.Utf8 = exports.FloatingPoint = exports.Int = exports.Union = exports.Map = exports.FixedSizeList = exports.LargeList = exports.List = exports.Struct_ = exports.Null = exports.Endianness = exports.DictionaryKind = exports.Type = exports.IntervalUnit = exports.TimeUnit = exports.DateUnit = exports.Precision = exports.UnionMode = exports.Feature = exports.MetadataVersion = void 0;
var flatbuffers_1 = require$$2;
(function (MetadataVersion) {
    /**
     * 0.1.0 (October 2016).
     */
    MetadataVersion[MetadataVersion["V1"] = 0] = "V1";
    /**
     * 0.2.0 (February 2017). Non-backwards compatible with V1.
     */
    MetadataVersion[MetadataVersion["V2"] = 1] = "V2";
    /**
     * 0.3.0 -> 0.7.1 (May - December 2017). Non-backwards compatible with V2.
     */
    MetadataVersion[MetadataVersion["V3"] = 2] = "V3";
    /**
     * >= 0.8.0 (December 2017). Non-backwards compatible with V3.
     */
    MetadataVersion[MetadataVersion["V4"] = 3] = "V4";
    /**
     * >= 1.0.0 (July 2020. Backwards compatible with V4 (V5 readers can read V4
     * metadata and IPC messages). Implementations are recommended to provide a
     * V4 compatibility mode with V5 format changes disabled.
     *
     * Incompatible changes between V4 and V5:
     * - Union buffer layout has changed. In V5, Unions don't have a validity
     *   bitmap buffer.
     */
    MetadataVersion[MetadataVersion["V5"] = 4] = "V5";
})(exports.MetadataVersion || (exports.MetadataVersion = {}));
(function (Feature) {
    /**
     * Needed to make flatbuffers happy.
     */
    Feature[Feature["UNUSED"] = 0] = "UNUSED";
    /**
     * The stream makes use of multiple full dictionaries with the
     * same ID and assumes clients implement dictionary replacement
     * correctly.
     */
    Feature[Feature["DICTIONARY_REPLACEMENT"] = 1] = "DICTIONARY_REPLACEMENT";
    /**
     * The stream makes use of compressed bodies as described
     * in Message.fbs.
     */
    Feature[Feature["COMPRESSED_BODY"] = 2] = "COMPRESSED_BODY";
})(exports.Feature || (exports.Feature = {}));
/**
 * @enum {number}
 */
var UnionMode;
(function (UnionMode) {
    UnionMode[UnionMode["Sparse"] = 0] = "Sparse";
    UnionMode[UnionMode["Dense"] = 1] = "Dense";
})(UnionMode = exports.UnionMode || (exports.UnionMode = {}));
/**
 * @enum {number}
 */
var Precision;
(function (Precision) {
    Precision[Precision["HALF"] = 0] = "HALF";
    Precision[Precision["SINGLE"] = 1] = "SINGLE";
    Precision[Precision["DOUBLE"] = 2] = "DOUBLE";
})(Precision = exports.Precision || (exports.Precision = {}));
/**
 * @enum {number}
 */
var DateUnit;
(function (DateUnit) {
    DateUnit[DateUnit["DAY"] = 0] = "DAY";
    DateUnit[DateUnit["MILLISECOND"] = 1] = "MILLISECOND";
})(DateUnit = exports.DateUnit || (exports.DateUnit = {}));
/**
 * @enum {number}
 */
var TimeUnit;
(function (TimeUnit) {
    TimeUnit[TimeUnit["SECOND"] = 0] = "SECOND";
    TimeUnit[TimeUnit["MILLISECOND"] = 1] = "MILLISECOND";
    TimeUnit[TimeUnit["MICROSECOND"] = 2] = "MICROSECOND";
    TimeUnit[TimeUnit["NANOSECOND"] = 3] = "NANOSECOND";
})(TimeUnit = exports.TimeUnit || (exports.TimeUnit = {}));
/**
 * @enum {number}
 */
var IntervalUnit;
(function (IntervalUnit) {
    IntervalUnit[IntervalUnit["YEAR_MONTH"] = 0] = "YEAR_MONTH";
    IntervalUnit[IntervalUnit["DAY_TIME"] = 1] = "DAY_TIME";
})(IntervalUnit = exports.IntervalUnit || (exports.IntervalUnit = {}));
/**
 * ----------------------------------------------------------------------
 * Top-level Type value, enabling extensible type-specific metadata. We can
 * add new logical types to Type without breaking backwards compatibility
 *
 * @enum {number}
 */
var Type;
(function (Type) {
    Type[Type["NONE"] = 0] = "NONE";
    Type[Type["Null"] = 1] = "Null";
    Type[Type["Int"] = 2] = "Int";
    Type[Type["FloatingPoint"] = 3] = "FloatingPoint";
    Type[Type["Binary"] = 4] = "Binary";
    Type[Type["Utf8"] = 5] = "Utf8";
    Type[Type["Bool"] = 6] = "Bool";
    Type[Type["Decimal"] = 7] = "Decimal";
    Type[Type["Date"] = 8] = "Date";
    Type[Type["Time"] = 9] = "Time";
    Type[Type["Timestamp"] = 10] = "Timestamp";
    Type[Type["Interval"] = 11] = "Interval";
    Type[Type["List"] = 12] = "List";
    Type[Type["Struct_"] = 13] = "Struct_";
    Type[Type["Union"] = 14] = "Union";
    Type[Type["FixedSizeBinary"] = 15] = "FixedSizeBinary";
    Type[Type["FixedSizeList"] = 16] = "FixedSizeList";
    Type[Type["Map"] = 17] = "Map";
    Type[Type["Duration"] = 18] = "Duration";
    Type[Type["LargeBinary"] = 19] = "LargeBinary";
    Type[Type["LargeUtf8"] = 20] = "LargeUtf8";
    Type[Type["LargeList"] = 21] = "LargeList";
})(Type = exports.Type || (exports.Type = {}));
/**
 * ----------------------------------------------------------------------
 * Dictionary encoding metadata
 * Maintained for forwards compatibility, in the future
 * Dictionaries might be explicit maps between integers and values
 * allowing for non-contiguous index values
 *
 * @enum {number}
 */
var DictionaryKind;
(function (DictionaryKind) {
    DictionaryKind[DictionaryKind["DenseArray"] = 0] = "DenseArray";
})(DictionaryKind = exports.DictionaryKind || (exports.DictionaryKind = {}));
/**
 * ----------------------------------------------------------------------
 * Endianness of the platform producing the data
 *
 * @enum {number}
 */
var Endianness;
(function (Endianness) {
    Endianness[Endianness["Little"] = 0] = "Little";
    Endianness[Endianness["Big"] = 1] = "Big";
})(Endianness = exports.Endianness || (exports.Endianness = {}));
/**
 * These are stored in the flatbuffer in the Type union below
 *
 * @constructor
 */
var Null = /** @class */ (function () {
    function Null() {
        this.bb = null;
        this.bb_pos = 0;
    }
    /**
     * @param number i
     * @param flatbuffers.ByteBuffer bb
     * @returns Null
     */
    Null.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param Null= obj
     * @returns Null
     */
    Null.getRootAsNull = function (bb, obj) {
        return (obj || new Null()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param Null= obj
     * @returns Null
     */
    Null.getSizePrefixedRootAsNull = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Null()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @param flatbuffers.Builder builder
     */
    Null.startNull = function (builder) {
        builder.startObject(0);
    };
    /**
     * @param flatbuffers.Builder builder
     * @returns flatbuffers.Offset
     */
    Null.endNull = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Null.createNull = function (builder) {
        Null.startNull(builder);
        return Null.endNull(builder);
    };
    return Null;
}());
exports.Null = Null;
/**
 * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct
 * (according to the physical memory layout). We used Struct_ here as
 * Struct is a reserved word in Flatbuffers
 *
 * @constructor
 */
var Struct_ = /** @class */ (function () {
    function Struct_() {
        this.bb = null;
        this.bb_pos = 0;
    }
    /**
     * @param number i
     * @param flatbuffers.ByteBuffer bb
     * @returns Struct_
     */
    Struct_.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param Struct_= obj
     * @returns Struct_
     */
    Struct_.getRootAsStruct_ = function (bb, obj) {
        return (obj || new Struct_()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param Struct_= obj
     * @returns Struct_
     */
    Struct_.getSizePrefixedRootAsStruct_ = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Struct_()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @param flatbuffers.Builder builder
     */
    Struct_.startStruct_ = function (builder) {
        builder.startObject(0);
    };
    /**
     * @param flatbuffers.Builder builder
     * @returns flatbuffers.Offset
     */
    Struct_.endStruct_ = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Struct_.createStruct_ = function (builder) {
        Struct_.startStruct_(builder);
        return Struct_.endStruct_(builder);
    };
    return Struct_;
}());
exports.Struct_ = Struct_;
/**
 * @constructor
 */
var List = /** @class */ (function () {
    function List() {
        this.bb = null;
        this.bb_pos = 0;
    }
    /**
     * @param number i
     * @param flatbuffers.ByteBuffer bb
     * @returns List
     */
    List.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param List= obj
     * @returns List
     */
    List.getRootAsList = function (bb, obj) {
        return (obj || new List()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param List= obj
     * @returns List
     */
    List.getSizePrefixedRootAsList = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new List()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @param flatbuffers.Builder builder
     */
    List.startList = function (builder) {
        builder.startObject(0);
    };
    /**
     * @param flatbuffers.Builder builder
     * @returns flatbuffers.Offset
     */
    List.endList = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    List.createList = function (builder) {
        List.startList(builder);
        return List.endList(builder);
    };
    return List;
}());
exports.List = List;
/**
 * Same as List, but with 64-bit offsets, allowing to represent
 * extremely large data values.
 *
 * @constructor
 */
var LargeList = /** @class */ (function () {
    function LargeList() {
        this.bb = null;
        this.bb_pos = 0;
    }
    /**
     * @param number i
     * @param flatbuffers.ByteBuffer bb
     * @returns LargeList
     */
    LargeList.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param LargeList= obj
     * @returns LargeList
     */
    LargeList.getRootAsLargeList = function (bb, obj) {
        return (obj || new LargeList()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param LargeList= obj
     * @returns LargeList
     */
    LargeList.getSizePrefixedRootAsLargeList = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new LargeList()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @param flatbuffers.Builder builder
     */
    LargeList.startLargeList = function (builder) {
        builder.startObject(0);
    };
    /**
     * @param flatbuffers.Builder builder
     * @returns flatbuffers.Offset
     */
    LargeList.endLargeList = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    LargeList.createLargeList = function (builder) {
        LargeList.startLargeList(builder);
        return LargeList.endLargeList(builder);
    };
    return LargeList;
}());
exports.LargeList = LargeList;
/**
 * @constructor
 */
var FixedSizeList = /** @class */ (function () {
    function FixedSizeList() {
        this.bb = null;
        this.bb_pos = 0;
    }
    /**
     * @param number i
     * @param flatbuffers.ByteBuffer bb
     * @returns FixedSizeList
     */
    FixedSizeList.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param FixedSizeList= obj
     * @returns FixedSizeList
     */
    FixedSizeList.getRootAsFixedSizeList = function (bb, obj) {
        return (obj || new FixedSizeList()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param FixedSizeList= obj
     * @returns FixedSizeList
     */
    FixedSizeList.getSizePrefixedRootAsFixedSizeList = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new FixedSizeList()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * Number of list items per value
     *
     * @returns number
     */
    FixedSizeList.prototype.listSize = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    /**
     * @param flatbuffers.Builder builder
     */
    FixedSizeList.startFixedSizeList = function (builder) {
        builder.startObject(1);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param number listSize
     */
    FixedSizeList.addListSize = function (builder, listSize) {
        builder.addFieldInt32(0, listSize, 0);
    };
    /**
     * @param flatbuffers.Builder builder
     * @returns flatbuffers.Offset
     */
    FixedSizeList.endFixedSizeList = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    FixedSizeList.createFixedSizeList = function (builder, listSize) {
        FixedSizeList.startFixedSizeList(builder);
        FixedSizeList.addListSize(builder, listSize);
        return FixedSizeList.endFixedSizeList(builder);
    };
    return FixedSizeList;
}());
exports.FixedSizeList = FixedSizeList;
/**
 * A Map is a logical nested type that is represented as
 *
 * List<entries: Struct<key: K, value: V>>
 *
 * In this layout, the keys and values are each respectively contiguous. We do
 * not constrain the key and value types, so the application is responsible
 * for ensuring that the keys are hashable and unique. Whether the keys are sorted
 * may be set in the metadata for this field.
 *
 * In a field with Map type, the field has a child Struct field, which then
 * has two children: key type and the second the value type. The names of the
 * child fields may be respectively "entries", "key", and "value", but this is
 * not enforced.
 *
 * Map
 *   - child[0] entries: Struct
 *     - child[0] key: K
 *     - child[1] value: V
 *
 * Neither the "entries" field nor the "key" field may be nullable.
 *
 * The metadata is structured so that Arrow systems without special handling
 * for Map can make Map an alias for List. The "layout" attribute for the Map
 * field must have the same contents as a List.
 *
 * @constructor
 */
var Map = /** @class */ (function () {
    function Map() {
        this.bb = null;
        this.bb_pos = 0;
    }
    /**
     * @param number i
     * @param flatbuffers.ByteBuffer bb
     * @returns Map
     */
    Map.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param Map= obj
     * @returns Map
     */
    Map.getRootAsMap = function (bb, obj) {
        return (obj || new Map()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param Map= obj
     * @returns Map
     */
    Map.getSizePrefixedRootAsMap = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Map()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * Set to true if the keys within each value are sorted
     *
     * @returns boolean
     */
    Map.prototype.keysSorted = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    /**
     * @param flatbuffers.Builder builder
     */
    Map.startMap = function (builder) {
        builder.startObject(1);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param boolean keysSorted
     */
    Map.addKeysSorted = function (builder, keysSorted) {
        builder.addFieldInt8(0, +keysSorted, +false);
    };
    /**
     * @param flatbuffers.Builder builder
     * @returns flatbuffers.Offset
     */
    Map.endMap = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Map.createMap = function (builder, keysSorted) {
        Map.startMap(builder);
        Map.addKeysSorted(builder, keysSorted);
        return Map.endMap(builder);
    };
    return Map;
}());
exports.Map = Map;
/**
 * A union is a complex type with children in Field
 * By default ids in the type vector refer to the offsets in the children
 * optionally typeIds provides an indirection between the child offset and the type id
 * for each child typeIds[offset] is the id used in the type vector
 *
 * @constructor
 */
var Union = /** @class */ (function () {
    function Union() {
        this.bb = null;
        this.bb_pos = 0;
    }
    /**
     * @param number i
     * @param flatbuffers.ByteBuffer bb
     * @returns Union
     */
    Union.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param Union= obj
     * @returns Union
     */
    Union.getRootAsUnion = function (bb, obj) {
        return (obj || new Union()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param Union= obj
     * @returns Union
     */
    Union.getSizePrefixedRootAsUnion = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Union()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @returns UnionMode
     */
    Union.prototype.mode = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? /**  */ (this.bb.readInt16(this.bb_pos + offset)) : UnionMode.Sparse;
    };
    /**
     * @param number index
     * @returns number
     */
    Union.prototype.typeIds = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    /**
     * @returns number
     */
    Union.prototype.typeIdsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    /**
     * @returns Int32Array
     */
    Union.prototype.typeIdsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    /**
     * @param flatbuffers.Builder builder
     */
    Union.startUnion = function (builder) {
        builder.startObject(2);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param UnionMode mode
     */
    Union.addMode = function (builder, mode) {
        builder.addFieldInt16(0, mode, UnionMode.Sparse);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Offset typeIdsOffset
     */
    Union.addTypeIds = function (builder, typeIdsOffset) {
        builder.addFieldOffset(1, typeIdsOffset, 0);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param Array.<number> data
     * @returns flatbuffers.Offset
     */
    Union.createTypeIdsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    };
    /**
     * @param flatbuffers.Builder builder
     * @param number numElems
     */
    Union.startTypeIdsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    /**
     * @param flatbuffers.Builder builder
     * @returns flatbuffers.Offset
     */
    Union.endUnion = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Union.createUnion = function (builder, mode, typeIdsOffset) {
        Union.startUnion(builder);
        Union.addMode(builder, mode);
        Union.addTypeIds(builder, typeIdsOffset);
        return Union.endUnion(builder);
    };
    return Union;
}());
exports.Union = Union;
/**
 * @constructor
 */
var Int = /** @class */ (function () {
    function Int() {
        this.bb = null;
        this.bb_pos = 0;
    }
    /**
     * @param number i
     * @param flatbuffers.ByteBuffer bb
     * @returns Int
     */
    Int.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param Int= obj
     * @returns Int
     */
    Int.getRootAsInt = function (bb, obj) {
        return (obj || new Int()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param Int= obj
     * @returns Int
     */
    Int.getSizePrefixedRootAsInt = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Int()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @returns number
     */
    Int.prototype.bitWidth = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    /**
     * @returns boolean
     */
    Int.prototype.isSigned = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    /**
     * @param flatbuffers.Builder builder
     */
    Int.startInt = function (builder) {
        builder.startObject(2);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param number bitWidth
     */
    Int.addBitWidth = function (builder, bitWidth) {
        builder.addFieldInt32(0, bitWidth, 0);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param boolean isSigned
     */
    Int.addIsSigned = function (builder, isSigned) {
        builder.addFieldInt8(1, +isSigned, +false);
    };
    /**
     * @param flatbuffers.Builder builder
     * @returns flatbuffers.Offset
     */
    Int.endInt = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Int.createInt = function (builder, bitWidth, isSigned) {
        Int.startInt(builder);
        Int.addBitWidth(builder, bitWidth);
        Int.addIsSigned(builder, isSigned);
        return Int.endInt(builder);
    };
    return Int;
}());
exports.Int = Int;
/**
 * @constructor
 */
var FloatingPoint = /** @class */ (function () {
    function FloatingPoint() {
        this.bb = null;
        this.bb_pos = 0;
    }
    /**
     * @param number i
     * @param flatbuffers.ByteBuffer bb
     * @returns FloatingPoint
     */
    FloatingPoint.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param FloatingPoint= obj
     * @returns FloatingPoint
     */
    FloatingPoint.getRootAsFloatingPoint = function (bb, obj) {
        return (obj || new FloatingPoint()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param FloatingPoint= obj
     * @returns FloatingPoint
     */
    FloatingPoint.getSizePrefixedRootAsFloatingPoint = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new FloatingPoint()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @returns Precision
     */
    FloatingPoint.prototype.precision = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? /**  */ (this.bb.readInt16(this.bb_pos + offset)) : Precision.HALF;
    };
    /**
     * @param flatbuffers.Builder builder
     */
    FloatingPoint.startFloatingPoint = function (builder) {
        builder.startObject(1);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param Precision precision
     */
    FloatingPoint.addPrecision = function (builder, precision) {
        builder.addFieldInt16(0, precision, Precision.HALF);
    };
    /**
     * @param flatbuffers.Builder builder
     * @returns flatbuffers.Offset
     */
    FloatingPoint.endFloatingPoint = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    FloatingPoint.createFloatingPoint = function (builder, precision) {
        FloatingPoint.startFloatingPoint(builder);
        FloatingPoint.addPrecision(builder, precision);
        return FloatingPoint.endFloatingPoint(builder);
    };
    return FloatingPoint;
}());
exports.FloatingPoint = FloatingPoint;
/**
 * Unicode with UTF-8 encoding
 *
 * @constructor
 */
var Utf8 = /** @class */ (function () {
    function Utf8() {
        this.bb = null;
        this.bb_pos = 0;
    }
    /**
     * @param number i
     * @param flatbuffers.ByteBuffer bb
     * @returns Utf8
     */
    Utf8.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param Utf8= obj
     * @returns Utf8
     */
    Utf8.getRootAsUtf8 = function (bb, obj) {
        return (obj || new Utf8()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param Utf8= obj
     * @returns Utf8
     */
    Utf8.getSizePrefixedRootAsUtf8 = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Utf8()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @param flatbuffers.Builder builder
     */
    Utf8.startUtf8 = function (builder) {
        builder.startObject(0);
    };
    /**
     * @param flatbuffers.Builder builder
     * @returns flatbuffers.Offset
     */
    Utf8.endUtf8 = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Utf8.createUtf8 = function (builder) {
        Utf8.startUtf8(builder);
        return Utf8.endUtf8(builder);
    };
    return Utf8;
}());
exports.Utf8 = Utf8;
/**
 * Opaque binary data
 *
 * @constructor
 */
var Binary = /** @class */ (function () {
    function Binary() {
        this.bb = null;
        this.bb_pos = 0;
    }
    /**
     * @param number i
     * @param flatbuffers.ByteBuffer bb
     * @returns Binary
     */
    Binary.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param Binary= obj
     * @returns Binary
     */
    Binary.getRootAsBinary = function (bb, obj) {
        return (obj || new Binary()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param Binary= obj
     * @returns Binary
     */
    Binary.getSizePrefixedRootAsBinary = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Binary()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @param flatbuffers.Builder builder
     */
    Binary.startBinary = function (builder) {
        builder.startObject(0);
    };
    /**
     * @param flatbuffers.Builder builder
     * @returns flatbuffers.Offset
     */
    Binary.endBinary = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Binary.createBinary = function (builder) {
        Binary.startBinary(builder);
        return Binary.endBinary(builder);
    };
    return Binary;
}());
exports.Binary = Binary;
/**
 * Same as Utf8, but with 64-bit offsets, allowing to represent
 * extremely large data values.
 *
 * @constructor
 */
var LargeUtf8 = /** @class */ (function () {
    function LargeUtf8() {
        this.bb = null;
        this.bb_pos = 0;
    }
    /**
     * @param number i
     * @param flatbuffers.ByteBuffer bb
     * @returns LargeUtf8
     */
    LargeUtf8.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param LargeUtf8= obj
     * @returns LargeUtf8
     */
    LargeUtf8.getRootAsLargeUtf8 = function (bb, obj) {
        return (obj || new LargeUtf8()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param LargeUtf8= obj
     * @returns LargeUtf8
     */
    LargeUtf8.getSizePrefixedRootAsLargeUtf8 = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new LargeUtf8()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @param flatbuffers.Builder builder
     */
    LargeUtf8.startLargeUtf8 = function (builder) {
        builder.startObject(0);
    };
    /**
     * @param flatbuffers.Builder builder
     * @returns flatbuffers.Offset
     */
    LargeUtf8.endLargeUtf8 = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    LargeUtf8.createLargeUtf8 = function (builder) {
        LargeUtf8.startLargeUtf8(builder);
        return LargeUtf8.endLargeUtf8(builder);
    };
    return LargeUtf8;
}());
exports.LargeUtf8 = LargeUtf8;
/**
 * Same as Binary, but with 64-bit offsets, allowing to represent
 * extremely large data values.
 *
 * @constructor
 */
var LargeBinary = /** @class */ (function () {
    function LargeBinary() {
        this.bb = null;
        this.bb_pos = 0;
    }
    /**
     * @param number i
     * @param flatbuffers.ByteBuffer bb
     * @returns LargeBinary
     */
    LargeBinary.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param LargeBinary= obj
     * @returns LargeBinary
     */
    LargeBinary.getRootAsLargeBinary = function (bb, obj) {
        return (obj || new LargeBinary()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param LargeBinary= obj
     * @returns LargeBinary
     */
    LargeBinary.getSizePrefixedRootAsLargeBinary = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new LargeBinary()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @param flatbuffers.Builder builder
     */
    LargeBinary.startLargeBinary = function (builder) {
        builder.startObject(0);
    };
    /**
     * @param flatbuffers.Builder builder
     * @returns flatbuffers.Offset
     */
    LargeBinary.endLargeBinary = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    LargeBinary.createLargeBinary = function (builder) {
        LargeBinary.startLargeBinary(builder);
        return LargeBinary.endLargeBinary(builder);
    };
    return LargeBinary;
}());
exports.LargeBinary = LargeBinary;
/**
 * @constructor
 */
var FixedSizeBinary = /** @class */ (function () {
    function FixedSizeBinary() {
        this.bb = null;
        this.bb_pos = 0;
    }
    /**
     * @param number i
     * @param flatbuffers.ByteBuffer bb
     * @returns FixedSizeBinary
     */
    FixedSizeBinary.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param FixedSizeBinary= obj
     * @returns FixedSizeBinary
     */
    FixedSizeBinary.getRootAsFixedSizeBinary = function (bb, obj) {
        return (obj || new FixedSizeBinary()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param FixedSizeBinary= obj
     * @returns FixedSizeBinary
     */
    FixedSizeBinary.getSizePrefixedRootAsFixedSizeBinary = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new FixedSizeBinary()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * Number of bytes per value
     *
     * @returns number
     */
    FixedSizeBinary.prototype.byteWidth = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    /**
     * @param flatbuffers.Builder builder
     */
    FixedSizeBinary.startFixedSizeBinary = function (builder) {
        builder.startObject(1);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param number byteWidth
     */
    FixedSizeBinary.addByteWidth = function (builder, byteWidth) {
        builder.addFieldInt32(0, byteWidth, 0);
    };
    /**
     * @param flatbuffers.Builder builder
     * @returns flatbuffers.Offset
     */
    FixedSizeBinary.endFixedSizeBinary = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    FixedSizeBinary.createFixedSizeBinary = function (builder, byteWidth) {
        FixedSizeBinary.startFixedSizeBinary(builder);
        FixedSizeBinary.addByteWidth(builder, byteWidth);
        return FixedSizeBinary.endFixedSizeBinary(builder);
    };
    return FixedSizeBinary;
}());
exports.FixedSizeBinary = FixedSizeBinary;
/**
 * @constructor
 */
var Bool = /** @class */ (function () {
    function Bool() {
        this.bb = null;
        this.bb_pos = 0;
    }
    /**
     * @param number i
     * @param flatbuffers.ByteBuffer bb
     * @returns Bool
     */
    Bool.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param Bool= obj
     * @returns Bool
     */
    Bool.getRootAsBool = function (bb, obj) {
        return (obj || new Bool()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param Bool= obj
     * @returns Bool
     */
    Bool.getSizePrefixedRootAsBool = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Bool()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @param flatbuffers.Builder builder
     */
    Bool.startBool = function (builder) {
        builder.startObject(0);
    };
    /**
     * @param flatbuffers.Builder builder
     * @returns flatbuffers.Offset
     */
    Bool.endBool = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Bool.createBool = function (builder) {
        Bool.startBool(builder);
        return Bool.endBool(builder);
    };
    return Bool;
}());
exports.Bool = Bool;
/**
 * Exact decimal value represented as an integer value in two's
 * complement. Currently only 128-bit (16-byte) and 256-bit (32-byte) integers
 * are used. The representation uses the endianness indicated
 * in the Schema.
 *
 * @constructor
 */
var Decimal = /** @class */ (function () {
    function Decimal() {
        this.bb = null;
        this.bb_pos = 0;
    }
    /**
     * @param number i
     * @param flatbuffers.ByteBuffer bb
     * @returns Decimal
     */
    Decimal.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param Decimal= obj
     * @returns Decimal
     */
    Decimal.getRootAsDecimal = function (bb, obj) {
        return (obj || new Decimal()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param Decimal= obj
     * @returns Decimal
     */
    Decimal.getSizePrefixedRootAsDecimal = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Decimal()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * Total number of decimal digits
     *
     * @returns number
     */
    Decimal.prototype.precision = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    /**
     * Number of digits after the decimal point "."
     *
     * @returns number
     */
    Decimal.prototype.scale = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    /**
     * Number of bits per value. The only accepted widths are 128 and 256.
     * We use bitWidth for consistency with Int::bitWidth.
     *
     * @returns number
     */
    Decimal.prototype.bitWidth = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 128;
    };
    /**
     * @param flatbuffers.Builder builder
     */
    Decimal.startDecimal = function (builder) {
        builder.startObject(3);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param number precision
     */
    Decimal.addPrecision = function (builder, precision) {
        builder.addFieldInt32(0, precision, 0);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param number scale
     */
    Decimal.addScale = function (builder, scale) {
        builder.addFieldInt32(1, scale, 0);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param number bitWidth
     */
    Decimal.addBitWidth = function (builder, bitWidth) {
        builder.addFieldInt32(2, bitWidth, 128);
    };
    /**
     * @param flatbuffers.Builder builder
     * @returns flatbuffers.Offset
     */
    Decimal.endDecimal = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Decimal.createDecimal = function (builder, precision, scale, bitWidth) {
        Decimal.startDecimal(builder);
        Decimal.addPrecision(builder, precision);
        Decimal.addScale(builder, scale);
        Decimal.addBitWidth(builder, bitWidth);
        return Decimal.endDecimal(builder);
    };
    return Decimal;
}());
exports.Decimal = Decimal;
/**
 * Date is either a 32-bit or 64-bit type representing elapsed time since UNIX
 * epoch (1970-01-01), stored in either of two units:
 *
 * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no
 *   leap seconds), where the values are evenly divisible by 86400000
 * * Days (32 bits) since the UNIX epoch
 *
 * @constructor
 */
var Date = /** @class */ (function () {
    function Date() {
        this.bb = null;
        this.bb_pos = 0;
    }
    /**
     * @param number i
     * @param flatbuffers.ByteBuffer bb
     * @returns Date
     */
    Date.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param Date= obj
     * @returns Date
     */
    Date.getRootAsDate = function (bb, obj) {
        return (obj || new Date()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param Date= obj
     * @returns Date
     */
    Date.getSizePrefixedRootAsDate = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Date()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @returns DateUnit
     */
    Date.prototype.unit = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? /**  */ (this.bb.readInt16(this.bb_pos + offset)) : DateUnit.MILLISECOND;
    };
    /**
     * @param flatbuffers.Builder builder
     */
    Date.startDate = function (builder) {
        builder.startObject(1);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param DateUnit unit
     */
    Date.addUnit = function (builder, unit) {
        builder.addFieldInt16(0, unit, DateUnit.MILLISECOND);
    };
    /**
     * @param flatbuffers.Builder builder
     * @returns flatbuffers.Offset
     */
    Date.endDate = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Date.createDate = function (builder, unit) {
        Date.startDate(builder);
        Date.addUnit(builder, unit);
        return Date.endDate(builder);
    };
    return Date;
}());
exports.Date = Date;
/**
 * Time type. The physical storage type depends on the unit
 * - SECOND and MILLISECOND: 32 bits
 * - MICROSECOND and NANOSECOND: 64 bits
 *
 * @constructor
 */
var Time = /** @class */ (function () {
    function Time() {
        this.bb = null;
        this.bb_pos = 0;
    }
    /**
     * @param number i
     * @param flatbuffers.ByteBuffer bb
     * @returns Time
     */
    Time.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param Time= obj
     * @returns Time
     */
    Time.getRootAsTime = function (bb, obj) {
        return (obj || new Time()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param Time= obj
     * @returns Time
     */
    Time.getSizePrefixedRootAsTime = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Time()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @returns TimeUnit
     */
    Time.prototype.unit = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? /**  */ (this.bb.readInt16(this.bb_pos + offset)) : TimeUnit.MILLISECOND;
    };
    /**
     * @returns number
     */
    Time.prototype.bitWidth = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 32;
    };
    /**
     * @param flatbuffers.Builder builder
     */
    Time.startTime = function (builder) {
        builder.startObject(2);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param TimeUnit unit
     */
    Time.addUnit = function (builder, unit) {
        builder.addFieldInt16(0, unit, TimeUnit.MILLISECOND);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param number bitWidth
     */
    Time.addBitWidth = function (builder, bitWidth) {
        builder.addFieldInt32(1, bitWidth, 32);
    };
    /**
     * @param flatbuffers.Builder builder
     * @returns flatbuffers.Offset
     */
    Time.endTime = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Time.createTime = function (builder, unit, bitWidth) {
        Time.startTime(builder);
        Time.addUnit(builder, unit);
        Time.addBitWidth(builder, bitWidth);
        return Time.endTime(builder);
    };
    return Time;
}());
exports.Time = Time;
/**
 * Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding
 * leap seconds, as a 64-bit integer. Note that UNIX time does not include
 * leap seconds.
 *
 * The Timestamp metadata supports both "time zone naive" and "time zone
 * aware" timestamps. Read about the timezone attribute for more detail
 *
 * @constructor
 */
var Timestamp = /** @class */ (function () {
    function Timestamp() {
        this.bb = null;
        this.bb_pos = 0;
    }
    /**
     * @param number i
     * @param flatbuffers.ByteBuffer bb
     * @returns Timestamp
     */
    Timestamp.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param Timestamp= obj
     * @returns Timestamp
     */
    Timestamp.getRootAsTimestamp = function (bb, obj) {
        return (obj || new Timestamp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param Timestamp= obj
     * @returns Timestamp
     */
    Timestamp.getSizePrefixedRootAsTimestamp = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Timestamp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @returns TimeUnit
     */
    Timestamp.prototype.unit = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? /**  */ (this.bb.readInt16(this.bb_pos + offset)) : TimeUnit.SECOND;
    };
    Timestamp.prototype.timezone = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    /**
     * @param flatbuffers.Builder builder
     */
    Timestamp.startTimestamp = function (builder) {
        builder.startObject(2);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param TimeUnit unit
     */
    Timestamp.addUnit = function (builder, unit) {
        builder.addFieldInt16(0, unit, TimeUnit.SECOND);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Offset timezoneOffset
     */
    Timestamp.addTimezone = function (builder, timezoneOffset) {
        builder.addFieldOffset(1, timezoneOffset, 0);
    };
    /**
     * @param flatbuffers.Builder builder
     * @returns flatbuffers.Offset
     */
    Timestamp.endTimestamp = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Timestamp.createTimestamp = function (builder, unit, timezoneOffset) {
        Timestamp.startTimestamp(builder);
        Timestamp.addUnit(builder, unit);
        Timestamp.addTimezone(builder, timezoneOffset);
        return Timestamp.endTimestamp(builder);
    };
    return Timestamp;
}());
exports.Timestamp = Timestamp;
/**
 * @constructor
 */
var Interval = /** @class */ (function () {
    function Interval() {
        this.bb = null;
        this.bb_pos = 0;
    }
    /**
     * @param number i
     * @param flatbuffers.ByteBuffer bb
     * @returns Interval
     */
    Interval.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param Interval= obj
     * @returns Interval
     */
    Interval.getRootAsInterval = function (bb, obj) {
        return (obj || new Interval()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param Interval= obj
     * @returns Interval
     */
    Interval.getSizePrefixedRootAsInterval = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Interval()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @returns IntervalUnit
     */
    Interval.prototype.unit = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? /**  */ (this.bb.readInt16(this.bb_pos + offset)) : IntervalUnit.YEAR_MONTH;
    };
    /**
     * @param flatbuffers.Builder builder
     */
    Interval.startInterval = function (builder) {
        builder.startObject(1);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param IntervalUnit unit
     */
    Interval.addUnit = function (builder, unit) {
        builder.addFieldInt16(0, unit, IntervalUnit.YEAR_MONTH);
    };
    /**
     * @param flatbuffers.Builder builder
     * @returns flatbuffers.Offset
     */
    Interval.endInterval = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Interval.createInterval = function (builder, unit) {
        Interval.startInterval(builder);
        Interval.addUnit(builder, unit);
        return Interval.endInterval(builder);
    };
    return Interval;
}());
exports.Interval = Interval;
/**
 * @constructor
 */
var Duration = /** @class */ (function () {
    function Duration() {
        this.bb = null;
        this.bb_pos = 0;
    }
    /**
     * @param number i
     * @param flatbuffers.ByteBuffer bb
     * @returns Duration
     */
    Duration.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param Duration= obj
     * @returns Duration
     */
    Duration.getRootAsDuration = function (bb, obj) {
        return (obj || new Duration()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param Duration= obj
     * @returns Duration
     */
    Duration.getSizePrefixedRootAsDuration = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Duration()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @returns TimeUnit
     */
    Duration.prototype.unit = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? /**  */ (this.bb.readInt16(this.bb_pos + offset)) : TimeUnit.MILLISECOND;
    };
    /**
     * @param flatbuffers.Builder builder
     */
    Duration.startDuration = function (builder) {
        builder.startObject(1);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param TimeUnit unit
     */
    Duration.addUnit = function (builder, unit) {
        builder.addFieldInt16(0, unit, TimeUnit.MILLISECOND);
    };
    /**
     * @param flatbuffers.Builder builder
     * @returns flatbuffers.Offset
     */
    Duration.endDuration = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Duration.createDuration = function (builder, unit) {
        Duration.startDuration(builder);
        Duration.addUnit(builder, unit);
        return Duration.endDuration(builder);
    };
    return Duration;
}());
exports.Duration = Duration;
/**
 * ----------------------------------------------------------------------
 * user defined key value pairs to add custom metadata to arrow
 * key namespacing is the responsibility of the user
 *
 * @constructor
 */
var KeyValue = /** @class */ (function () {
    function KeyValue() {
        this.bb = null;
        this.bb_pos = 0;
    }
    /**
     * @param number i
     * @param flatbuffers.ByteBuffer bb
     * @returns KeyValue
     */
    KeyValue.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param KeyValue= obj
     * @returns KeyValue
     */
    KeyValue.getRootAsKeyValue = function (bb, obj) {
        return (obj || new KeyValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param KeyValue= obj
     * @returns KeyValue
     */
    KeyValue.getSizePrefixedRootAsKeyValue = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new KeyValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    KeyValue.prototype.key = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    KeyValue.prototype.value = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    /**
     * @param flatbuffers.Builder builder
     */
    KeyValue.startKeyValue = function (builder) {
        builder.startObject(2);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Offset keyOffset
     */
    KeyValue.addKey = function (builder, keyOffset) {
        builder.addFieldOffset(0, keyOffset, 0);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Offset valueOffset
     */
    KeyValue.addValue = function (builder, valueOffset) {
        builder.addFieldOffset(1, valueOffset, 0);
    };
    /**
     * @param flatbuffers.Builder builder
     * @returns flatbuffers.Offset
     */
    KeyValue.endKeyValue = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    KeyValue.createKeyValue = function (builder, keyOffset, valueOffset) {
        KeyValue.startKeyValue(builder);
        KeyValue.addKey(builder, keyOffset);
        KeyValue.addValue(builder, valueOffset);
        return KeyValue.endKeyValue(builder);
    };
    return KeyValue;
}());
exports.KeyValue = KeyValue;
/**
 * @constructor
 */
var DictionaryEncoding = /** @class */ (function () {
    function DictionaryEncoding() {
        this.bb = null;
        this.bb_pos = 0;
    }
    /**
     * @param number i
     * @param flatbuffers.ByteBuffer bb
     * @returns DictionaryEncoding
     */
    DictionaryEncoding.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param DictionaryEncoding= obj
     * @returns DictionaryEncoding
     */
    DictionaryEncoding.getRootAsDictionaryEncoding = function (bb, obj) {
        return (obj || new DictionaryEncoding()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param DictionaryEncoding= obj
     * @returns DictionaryEncoding
     */
    DictionaryEncoding.getSizePrefixedRootAsDictionaryEncoding = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new DictionaryEncoding()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * The known dictionary id in the application where this data is used. In
     * the file or streaming formats, the dictionary ids are found in the
     * DictionaryBatch messages
     *
     * @returns flatbuffers.Long
     */
    DictionaryEncoding.prototype.id = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);
    };
    /**
     * The dictionary indices are constrained to be non-negative integers. If
     * this field is null, the indices must be signed int32. To maximize
     * cross-language compatibility and performance, implementations are
     * recommended to prefer signed integer types over unsigned integer types
     * and to avoid uint64 indices unless they are required by an application.
     *
     * @param Int= obj
     * @returns Int|null
     */
    DictionaryEncoding.prototype.indexType = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new Int()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    };
    /**
     * By default, dictionaries are not ordered, or the order does not have
     * semantic meaning. In some statistical, applications, dictionary-encoding
     * is used to represent ordered categorical data, and we provide a way to
     * preserve that metadata here
     *
     * @returns boolean
     */
    DictionaryEncoding.prototype.isOrdered = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    /**
     * @returns DictionaryKind
     */
    DictionaryEncoding.prototype.dictionaryKind = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? /**  */ (this.bb.readInt16(this.bb_pos + offset)) : DictionaryKind.DenseArray;
    };
    /**
     * @param flatbuffers.Builder builder
     */
    DictionaryEncoding.startDictionaryEncoding = function (builder) {
        builder.startObject(4);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Long id
     */
    DictionaryEncoding.addId = function (builder, id) {
        builder.addFieldInt64(0, id, builder.createLong(0, 0));
    };
    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Offset indexTypeOffset
     */
    DictionaryEncoding.addIndexType = function (builder, indexTypeOffset) {
        builder.addFieldOffset(1, indexTypeOffset, 0);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param boolean isOrdered
     */
    DictionaryEncoding.addIsOrdered = function (builder, isOrdered) {
        builder.addFieldInt8(2, +isOrdered, +false);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param DictionaryKind dictionaryKind
     */
    DictionaryEncoding.addDictionaryKind = function (builder, dictionaryKind) {
        builder.addFieldInt16(3, dictionaryKind, DictionaryKind.DenseArray);
    };
    /**
     * @param flatbuffers.Builder builder
     * @returns flatbuffers.Offset
     */
    DictionaryEncoding.endDictionaryEncoding = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    DictionaryEncoding.createDictionaryEncoding = function (builder, id, indexTypeOffset, isOrdered, dictionaryKind) {
        DictionaryEncoding.startDictionaryEncoding(builder);
        DictionaryEncoding.addId(builder, id);
        DictionaryEncoding.addIndexType(builder, indexTypeOffset);
        DictionaryEncoding.addIsOrdered(builder, isOrdered);
        DictionaryEncoding.addDictionaryKind(builder, dictionaryKind);
        return DictionaryEncoding.endDictionaryEncoding(builder);
    };
    return DictionaryEncoding;
}());
exports.DictionaryEncoding = DictionaryEncoding;
/**
 * ----------------------------------------------------------------------
 * A field represents a named column in a record / row batch or child of a
 * nested type.
 *
 * @constructor
 */
var Field = /** @class */ (function () {
    function Field() {
        this.bb = null;
        this.bb_pos = 0;
    }
    /**
     * @param number i
     * @param flatbuffers.ByteBuffer bb
     * @returns Field
     */
    Field.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param Field= obj
     * @returns Field
     */
    Field.getRootAsField = function (bb, obj) {
        return (obj || new Field()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param Field= obj
     * @returns Field
     */
    Field.getSizePrefixedRootAsField = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Field()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Field.prototype.name = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    /**
     * Whether or not this field can contain nulls. Should be true in general.
     *
     * @returns boolean
     */
    Field.prototype.nullable = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    /**
     * @returns Type
     */
    Field.prototype.typeType = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? /**  */ (this.bb.readUint8(this.bb_pos + offset)) : Type.NONE;
    };
    /**
     * This is the type of the decoded value if the field is dictionary encoded.
     *
     * @param flatbuffers.Table obj
     * @returns ?flatbuffers.Table
     */
    Field.prototype.type = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
    };
    /**
     * Present only if the field is dictionary encoded.
     *
     * @param DictionaryEncoding= obj
     * @returns DictionaryEncoding|null
     */
    Field.prototype.dictionary = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? (obj || new DictionaryEncoding()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    };
    /**
     * children apply only to nested data types like Struct, List and Union. For
     * primitive types children will have length 0.
     *
     * @param number index
     * @param Field= obj
     * @returns Field
     */
    Field.prototype.children = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? (obj || new Field()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    /**
     * @returns number
     */
    Field.prototype.childrenLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    /**
     * User-defined metadata
     *
     * @param number index
     * @param KeyValue= obj
     * @returns KeyValue
     */
    Field.prototype.customMetadata = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? (obj || new KeyValue()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    /**
     * @returns number
     */
    Field.prototype.customMetadataLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    /**
     * @param flatbuffers.Builder builder
     */
    Field.startField = function (builder) {
        builder.startObject(7);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Offset nameOffset
     */
    Field.addName = function (builder, nameOffset) {
        builder.addFieldOffset(0, nameOffset, 0);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param boolean nullable
     */
    Field.addNullable = function (builder, nullable) {
        builder.addFieldInt8(1, +nullable, +false);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param Type typeType
     */
    Field.addTypeType = function (builder, typeType) {
        builder.addFieldInt8(2, typeType, Type.NONE);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Offset typeOffset
     */
    Field.addType = function (builder, typeOffset) {
        builder.addFieldOffset(3, typeOffset, 0);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Offset dictionaryOffset
     */
    Field.addDictionary = function (builder, dictionaryOffset) {
        builder.addFieldOffset(4, dictionaryOffset, 0);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Offset childrenOffset
     */
    Field.addChildren = function (builder, childrenOffset) {
        builder.addFieldOffset(5, childrenOffset, 0);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param Array.<flatbuffers.Offset> data
     * @returns flatbuffers.Offset
     */
    Field.createChildrenVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    /**
     * @param flatbuffers.Builder builder
     * @param number numElems
     */
    Field.startChildrenVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Offset customMetadataOffset
     */
    Field.addCustomMetadata = function (builder, customMetadataOffset) {
        builder.addFieldOffset(6, customMetadataOffset, 0);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param Array.<flatbuffers.Offset> data
     * @returns flatbuffers.Offset
     */
    Field.createCustomMetadataVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    /**
     * @param flatbuffers.Builder builder
     * @param number numElems
     */
    Field.startCustomMetadataVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    /**
     * @param flatbuffers.Builder builder
     * @returns flatbuffers.Offset
     */
    Field.endField = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Field.createField = function (builder, nameOffset, nullable, typeType, typeOffset, dictionaryOffset, childrenOffset, customMetadataOffset) {
        Field.startField(builder);
        Field.addName(builder, nameOffset);
        Field.addNullable(builder, nullable);
        Field.addTypeType(builder, typeType);
        Field.addType(builder, typeOffset);
        Field.addDictionary(builder, dictionaryOffset);
        Field.addChildren(builder, childrenOffset);
        Field.addCustomMetadata(builder, customMetadataOffset);
        return Field.endField(builder);
    };
    return Field;
}());
exports.Field = Field;
/**
 * ----------------------------------------------------------------------
 * A Buffer represents a single contiguous memory segment
 *
 * @constructor
 */
var Buffer = /** @class */ (function () {
    function Buffer() {
        this.bb = null;
        this.bb_pos = 0;
    }
    /**
     * @param number i
     * @param flatbuffers.ByteBuffer bb
     * @returns Buffer
     */
    Buffer.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    /**
     * The relative offset into the shared memory page where the bytes for this
     * buffer starts
     *
     * @returns flatbuffers.Long
     */
    Buffer.prototype.offset = function () {
        return this.bb.readInt64(this.bb_pos);
    };
    /**
     * The absolute length (in bytes) of the memory buffer. The memory is found
     * from offset (inclusive) to offset + length (non-inclusive). When building
     * messages using the encapsulated IPC message, padding bytes may be written
     * after a buffer, but such padding bytes do not need to be accounted for in
     * the size here.
     *
     * @returns flatbuffers.Long
     */
    Buffer.prototype.length = function () {
        return this.bb.readInt64(this.bb_pos + 8);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Long offset
     * @param flatbuffers.Long length
     * @returns flatbuffers.Offset
     */
    Buffer.createBuffer = function (builder, offset, length) {
        builder.prep(8, 16);
        builder.writeInt64(length);
        builder.writeInt64(offset);
        return builder.offset();
    };
    return Buffer;
}());
exports.Buffer = Buffer;
/**
 * ----------------------------------------------------------------------
 * A Schema describes the columns in a row batch
 *
 * @constructor
 */
var Schema = /** @class */ (function () {
    function Schema() {
        this.bb = null;
        this.bb_pos = 0;
    }
    /**
     * @param number i
     * @param flatbuffers.ByteBuffer bb
     * @returns Schema
     */
    Schema.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param Schema= obj
     * @returns Schema
     */
    Schema.getRootAsSchema = function (bb, obj) {
        return (obj || new Schema()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param Schema= obj
     * @returns Schema
     */
    Schema.getSizePrefixedRootAsSchema = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Schema()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * endianness of the buffer
     * it is Little Endian by default
     * if endianness doesn't match the underlying system then the vectors need to be converted
     *
     * @returns Endianness
     */
    Schema.prototype.endianness = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? /**  */ (this.bb.readInt16(this.bb_pos + offset)) : Endianness.Little;
    };
    /**
     * @param number index
     * @param Field= obj
     * @returns Field
     */
    Schema.prototype.fields = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new Field()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    /**
     * @returns number
     */
    Schema.prototype.fieldsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    /**
     * @param number index
     * @param KeyValue= obj
     * @returns KeyValue
     */
    Schema.prototype.customMetadata = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? (obj || new KeyValue()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    /**
     * @returns number
     */
    Schema.prototype.customMetadataLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    /**
     * Features used in the stream/file.
     *
     * @param number index
     * @returns flatbuffers.Long
     */
    Schema.prototype.features = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? /**  */ (this.bb.readInt64(this.bb.__vector(this.bb_pos + offset) + index * 8)) : this.bb.createLong(0, 0);
    };
    /**
     * @returns number
     */
    Schema.prototype.featuresLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    /**
     * @param flatbuffers.Builder builder
     */
    Schema.startSchema = function (builder) {
        builder.startObject(4);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param Endianness endianness
     */
    Schema.addEndianness = function (builder, endianness) {
        builder.addFieldInt16(0, endianness, Endianness.Little);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Offset fieldsOffset
     */
    Schema.addFields = function (builder, fieldsOffset) {
        builder.addFieldOffset(1, fieldsOffset, 0);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param Array.<flatbuffers.Offset> data
     * @returns flatbuffers.Offset
     */
    Schema.createFieldsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    /**
     * @param flatbuffers.Builder builder
     * @param number numElems
     */
    Schema.startFieldsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Offset customMetadataOffset
     */
    Schema.addCustomMetadata = function (builder, customMetadataOffset) {
        builder.addFieldOffset(2, customMetadataOffset, 0);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param Array.<flatbuffers.Offset> data
     * @returns flatbuffers.Offset
     */
    Schema.createCustomMetadataVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    /**
     * @param flatbuffers.Builder builder
     * @param number numElems
     */
    Schema.startCustomMetadataVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Offset featuresOffset
     */
    Schema.addFeatures = function (builder, featuresOffset) {
        builder.addFieldOffset(3, featuresOffset, 0);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param Array.<flatbuffers.Long> data
     * @returns flatbuffers.Offset
     */
    Schema.createFeaturesVector = function (builder, data) {
        builder.startVector(8, data.length, 8);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt64(data[i]);
        }
        return builder.endVector();
    };
    /**
     * @param flatbuffers.Builder builder
     * @param number numElems
     */
    Schema.startFeaturesVector = function (builder, numElems) {
        builder.startVector(8, numElems, 8);
    };
    /**
     * @param flatbuffers.Builder builder
     * @returns flatbuffers.Offset
     */
    Schema.endSchema = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Offset offset
     */
    Schema.finishSchemaBuffer = function (builder, offset) {
        builder.finish(offset);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Offset offset
     */
    Schema.finishSizePrefixedSchemaBuffer = function (builder, offset) {
        builder.finish(offset, undefined, true);
    };
    Schema.createSchema = function (builder, endianness, fieldsOffset, customMetadataOffset, featuresOffset) {
        Schema.startSchema(builder);
        Schema.addEndianness(builder, endianness);
        Schema.addFields(builder, fieldsOffset);
        Schema.addCustomMetadata(builder, customMetadataOffset);
        Schema.addFeatures(builder, featuresOffset);
        return Schema.endSchema(builder);
    };
    return Schema;
}());
exports.Schema = Schema;


}(Schema$1));

var Message$1 = {};

(function (exports) {
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.Message = exports.DictionaryBatch = exports.RecordBatch = exports.BodyCompression = exports.FieldNode = exports.MessageHeader = exports.BodyCompressionMethod = exports.CompressionType = void 0;
var flatbuffers_1 = require$$2;
var NS13596923344997147894 = Schema$1;
/**
 * @enum {number}
 */
var CompressionType;
(function (CompressionType) {
    CompressionType[CompressionType["LZ4_FRAME"] = 0] = "LZ4_FRAME";
    CompressionType[CompressionType["ZSTD"] = 1] = "ZSTD";
})(CompressionType = exports.CompressionType || (exports.CompressionType = {}));
/**
 * Provided for forward compatibility in case we need to support different
 * strategies for compressing the IPC message body (like whole-body
 * compression rather than buffer-level) in the future
 *
 * @enum {number}
 */
var BodyCompressionMethod;
(function (BodyCompressionMethod) {
    /**
     * Each constituent buffer is first compressed with the indicated
     * compressor, and then written with the uncompressed length in the first 8
     * bytes as a 64-bit little-endian signed integer followed by the compressed
     * buffer bytes (and then padding as required by the protocol). The
     * uncompressed length may be set to -1 to indicate that the data that
     * follows is not compressed, which can be useful for cases where
     * compression does not yield appreciable savings.
     */
    BodyCompressionMethod[BodyCompressionMethod["BUFFER"] = 0] = "BUFFER";
})(BodyCompressionMethod = exports.BodyCompressionMethod || (exports.BodyCompressionMethod = {}));
/**
 * ----------------------------------------------------------------------
 * The root Message type
 * This union enables us to easily send different message types without
 * redundant storage, and in the future we can easily add new message types.
 *
 * Arrow implementations do not need to implement all of the message types,
 * which may include experimental metadata types. For maximum compatibility,
 * it is best to send data using RecordBatch
 *
 * @enum {number}
 */
var MessageHeader;
(function (MessageHeader) {
    MessageHeader[MessageHeader["NONE"] = 0] = "NONE";
    MessageHeader[MessageHeader["Schema"] = 1] = "Schema";
    MessageHeader[MessageHeader["DictionaryBatch"] = 2] = "DictionaryBatch";
    MessageHeader[MessageHeader["RecordBatch"] = 3] = "RecordBatch";
    MessageHeader[MessageHeader["Tensor"] = 4] = "Tensor";
    MessageHeader[MessageHeader["SparseTensor"] = 5] = "SparseTensor";
})(MessageHeader = exports.MessageHeader || (exports.MessageHeader = {}));
/**
 * ----------------------------------------------------------------------
 * Data structures for describing a table row batch (a collection of
 * equal-length Arrow arrays)
 * Metadata about a field at some level of a nested type tree (but not
 * its children).
 *
 * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]
 * would have {length: 5, null_count: 2} for its List node, and {length: 6,
 * null_count: 0} for its Int16 node, as separate FieldNode structs
 *
 * @constructor
 */
var FieldNode = /** @class */ (function () {
    function FieldNode() {
        this.bb = null;
        this.bb_pos = 0;
    }
    /**
     * @param number i
     * @param flatbuffers.ByteBuffer bb
     * @returns FieldNode
     */
    FieldNode.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    /**
     * The number of value slots in the Arrow array at this level of a nested
     * tree
     *
     * @returns flatbuffers.Long
     */
    FieldNode.prototype.length = function () {
        return this.bb.readInt64(this.bb_pos);
    };
    /**
     * The number of observed nulls. Fields with null_count == 0 may choose not
     * to write their physical validity bitmap out as a materialized buffer,
     * instead setting the length of the bitmap buffer to 0.
     *
     * @returns flatbuffers.Long
     */
    FieldNode.prototype.nullCount = function () {
        return this.bb.readInt64(this.bb_pos + 8);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Long length
     * @param flatbuffers.Long null_count
     * @returns flatbuffers.Offset
     */
    FieldNode.createFieldNode = function (builder, length, null_count) {
        builder.prep(8, 16);
        builder.writeInt64(null_count);
        builder.writeInt64(length);
        return builder.offset();
    };
    return FieldNode;
}());
exports.FieldNode = FieldNode;
/**
 * Optional compression for the memory buffers constituting IPC message
 * bodies. Intended for use with RecordBatch but could be used for other
 * message types
 *
 * @constructor
 */
var BodyCompression = /** @class */ (function () {
    function BodyCompression() {
        this.bb = null;
        this.bb_pos = 0;
    }
    /**
     * @param number i
     * @param flatbuffers.ByteBuffer bb
     * @returns BodyCompression
     */
    BodyCompression.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param BodyCompression= obj
     * @returns BodyCompression
     */
    BodyCompression.getRootAsBodyCompression = function (bb, obj) {
        return (obj || new BodyCompression()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param BodyCompression= obj
     * @returns BodyCompression
     */
    BodyCompression.getSizePrefixedRootAsBodyCompression = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new BodyCompression()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * Compressor library
     *
     * @returns CompressionType
     */
    BodyCompression.prototype.codec = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? /**  */ (this.bb.readInt8(this.bb_pos + offset)) : CompressionType.LZ4_FRAME;
    };
    /**
     * Indicates the way the record batch body was compressed
     *
     * @returns BodyCompressionMethod
     */
    BodyCompression.prototype.method = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? /**  */ (this.bb.readInt8(this.bb_pos + offset)) : BodyCompressionMethod.BUFFER;
    };
    /**
     * @param flatbuffers.Builder builder
     */
    BodyCompression.startBodyCompression = function (builder) {
        builder.startObject(2);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param CompressionType codec
     */
    BodyCompression.addCodec = function (builder, codec) {
        builder.addFieldInt8(0, codec, CompressionType.LZ4_FRAME);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param BodyCompressionMethod method
     */
    BodyCompression.addMethod = function (builder, method) {
        builder.addFieldInt8(1, method, BodyCompressionMethod.BUFFER);
    };
    /**
     * @param flatbuffers.Builder builder
     * @returns flatbuffers.Offset
     */
    BodyCompression.endBodyCompression = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    BodyCompression.createBodyCompression = function (builder, codec, method) {
        BodyCompression.startBodyCompression(builder);
        BodyCompression.addCodec(builder, codec);
        BodyCompression.addMethod(builder, method);
        return BodyCompression.endBodyCompression(builder);
    };
    return BodyCompression;
}());
exports.BodyCompression = BodyCompression;
/**
 * A data header describing the shared memory layout of a "record" or "row"
 * batch. Some systems call this a "row batch" internally and others a "record
 * batch".
 *
 * @constructor
 */
var RecordBatch = /** @class */ (function () {
    function RecordBatch() {
        this.bb = null;
        this.bb_pos = 0;
    }
    /**
     * @param number i
     * @param flatbuffers.ByteBuffer bb
     * @returns RecordBatch
     */
    RecordBatch.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param RecordBatch= obj
     * @returns RecordBatch
     */
    RecordBatch.getRootAsRecordBatch = function (bb, obj) {
        return (obj || new RecordBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param RecordBatch= obj
     * @returns RecordBatch
     */
    RecordBatch.getSizePrefixedRootAsRecordBatch = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new RecordBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * number of records / rows. The arrays in the batch should all have this
     * length
     *
     * @returns flatbuffers.Long
     */
    RecordBatch.prototype.length = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);
    };
    /**
     * Nodes correspond to the pre-ordered flattened logical schema
     *
     * @param number index
     * @param FieldNode= obj
     * @returns FieldNode
     */
    RecordBatch.prototype.nodes = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new FieldNode()).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;
    };
    /**
     * @returns number
     */
    RecordBatch.prototype.nodesLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    /**
     * Buffers correspond to the pre-ordered flattened buffer tree
     *
     * The number of buffers appended to this list depends on the schema. For
     * example, most primitive arrays will have 2 buffers, 1 for the validity
     * bitmap and 1 for the values. For struct arrays, there will only be a
     * single buffer for the validity (nulls) bitmap
     *
     * @param number index
     * @param Buffer= obj
     * @returns Buffer
     */
    RecordBatch.prototype.buffers = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? (obj || new NS13596923344997147894.Buffer()).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;
    };
    /**
     * @returns number
     */
    RecordBatch.prototype.buffersLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    /**
     * Optional compression of the message body
     *
     * @param BodyCompression= obj
     * @returns BodyCompression|null
     */
    RecordBatch.prototype.compression = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? (obj || new BodyCompression()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    };
    /**
     * @param flatbuffers.Builder builder
     */
    RecordBatch.startRecordBatch = function (builder) {
        builder.startObject(4);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Long length
     */
    RecordBatch.addLength = function (builder, length) {
        builder.addFieldInt64(0, length, builder.createLong(0, 0));
    };
    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Offset nodesOffset
     */
    RecordBatch.addNodes = function (builder, nodesOffset) {
        builder.addFieldOffset(1, nodesOffset, 0);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param number numElems
     */
    RecordBatch.startNodesVector = function (builder, numElems) {
        builder.startVector(16, numElems, 8);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Offset buffersOffset
     */
    RecordBatch.addBuffers = function (builder, buffersOffset) {
        builder.addFieldOffset(2, buffersOffset, 0);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param number numElems
     */
    RecordBatch.startBuffersVector = function (builder, numElems) {
        builder.startVector(16, numElems, 8);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Offset compressionOffset
     */
    RecordBatch.addCompression = function (builder, compressionOffset) {
        builder.addFieldOffset(3, compressionOffset, 0);
    };
    /**
     * @param flatbuffers.Builder builder
     * @returns flatbuffers.Offset
     */
    RecordBatch.endRecordBatch = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    RecordBatch.createRecordBatch = function (builder, length, nodesOffset, buffersOffset, compressionOffset) {
        RecordBatch.startRecordBatch(builder);
        RecordBatch.addLength(builder, length);
        RecordBatch.addNodes(builder, nodesOffset);
        RecordBatch.addBuffers(builder, buffersOffset);
        RecordBatch.addCompression(builder, compressionOffset);
        return RecordBatch.endRecordBatch(builder);
    };
    return RecordBatch;
}());
exports.RecordBatch = RecordBatch;
/**
 * For sending dictionary encoding information. Any Field can be
 * dictionary-encoded, but in this case none of its children may be
 * dictionary-encoded.
 * There is one vector / column per dictionary, but that vector / column
 * may be spread across multiple dictionary batches by using the isDelta
 * flag
 *
 * @constructor
 */
var DictionaryBatch = /** @class */ (function () {
    function DictionaryBatch() {
        this.bb = null;
        this.bb_pos = 0;
    }
    /**
     * @param number i
     * @param flatbuffers.ByteBuffer bb
     * @returns DictionaryBatch
     */
    DictionaryBatch.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param DictionaryBatch= obj
     * @returns DictionaryBatch
     */
    DictionaryBatch.getRootAsDictionaryBatch = function (bb, obj) {
        return (obj || new DictionaryBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param DictionaryBatch= obj
     * @returns DictionaryBatch
     */
    DictionaryBatch.getSizePrefixedRootAsDictionaryBatch = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new DictionaryBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @returns flatbuffers.Long
     */
    DictionaryBatch.prototype.id = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);
    };
    /**
     * @param RecordBatch= obj
     * @returns RecordBatch|null
     */
    DictionaryBatch.prototype.data = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new RecordBatch()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    };
    /**
     * If isDelta is true the values in the dictionary are to be appended to a
     * dictionary with the indicated id. If isDelta is false this dictionary
     * should replace the existing dictionary.
     *
     * @returns boolean
     */
    DictionaryBatch.prototype.isDelta = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    /**
     * @param flatbuffers.Builder builder
     */
    DictionaryBatch.startDictionaryBatch = function (builder) {
        builder.startObject(3);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Long id
     */
    DictionaryBatch.addId = function (builder, id) {
        builder.addFieldInt64(0, id, builder.createLong(0, 0));
    };
    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Offset dataOffset
     */
    DictionaryBatch.addData = function (builder, dataOffset) {
        builder.addFieldOffset(1, dataOffset, 0);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param boolean isDelta
     */
    DictionaryBatch.addIsDelta = function (builder, isDelta) {
        builder.addFieldInt8(2, +isDelta, +false);
    };
    /**
     * @param flatbuffers.Builder builder
     * @returns flatbuffers.Offset
     */
    DictionaryBatch.endDictionaryBatch = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    DictionaryBatch.createDictionaryBatch = function (builder, id, dataOffset, isDelta) {
        DictionaryBatch.startDictionaryBatch(builder);
        DictionaryBatch.addId(builder, id);
        DictionaryBatch.addData(builder, dataOffset);
        DictionaryBatch.addIsDelta(builder, isDelta);
        return DictionaryBatch.endDictionaryBatch(builder);
    };
    return DictionaryBatch;
}());
exports.DictionaryBatch = DictionaryBatch;
/**
 * @constructor
 */
var Message = /** @class */ (function () {
    function Message() {
        this.bb = null;
        this.bb_pos = 0;
    }
    /**
     * @param number i
     * @param flatbuffers.ByteBuffer bb
     * @returns Message
     */
    Message.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param Message= obj
     * @returns Message
     */
    Message.getRootAsMessage = function (bb, obj) {
        return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param Message= obj
     * @returns Message
     */
    Message.getSizePrefixedRootAsMessage = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @returns MetadataVersion
     */
    Message.prototype.version = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? /**  */ (this.bb.readInt16(this.bb_pos + offset)) : NS13596923344997147894.MetadataVersion.V1;
    };
    /**
     * @returns MessageHeader
     */
    Message.prototype.headerType = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? /**  */ (this.bb.readUint8(this.bb_pos + offset)) : MessageHeader.NONE;
    };
    /**
     * @param flatbuffers.Table obj
     * @returns ?flatbuffers.Table
     */
    Message.prototype.header = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
    };
    /**
     * @returns flatbuffers.Long
     */
    Message.prototype.bodyLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);
    };
    /**
     * @param number index
     * @param KeyValue= obj
     * @returns KeyValue
     */
    Message.prototype.customMetadata = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? (obj || new NS13596923344997147894.KeyValue()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    /**
     * @returns number
     */
    Message.prototype.customMetadataLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    /**
     * @param flatbuffers.Builder builder
     */
    Message.startMessage = function (builder) {
        builder.startObject(5);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param MetadataVersion version
     */
    Message.addVersion = function (builder, version) {
        builder.addFieldInt16(0, version, NS13596923344997147894.MetadataVersion.V1);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param MessageHeader headerType
     */
    Message.addHeaderType = function (builder, headerType) {
        builder.addFieldInt8(1, headerType, MessageHeader.NONE);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Offset headerOffset
     */
    Message.addHeader = function (builder, headerOffset) {
        builder.addFieldOffset(2, headerOffset, 0);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Long bodyLength
     */
    Message.addBodyLength = function (builder, bodyLength) {
        builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));
    };
    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Offset customMetadataOffset
     */
    Message.addCustomMetadata = function (builder, customMetadataOffset) {
        builder.addFieldOffset(4, customMetadataOffset, 0);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param Array.<flatbuffers.Offset> data
     * @returns flatbuffers.Offset
     */
    Message.createCustomMetadataVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    /**
     * @param flatbuffers.Builder builder
     * @param number numElems
     */
    Message.startCustomMetadataVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    /**
     * @param flatbuffers.Builder builder
     * @returns flatbuffers.Offset
     */
    Message.endMessage = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Offset offset
     */
    Message.finishMessageBuffer = function (builder, offset) {
        builder.finish(offset);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Offset offset
     */
    Message.finishSizePrefixedMessageBuffer = function (builder, offset) {
        builder.finish(offset, undefined, true);
    };
    Message.createMessage = function (builder, version, headerType, headerOffset, bodyLength, customMetadataOffset) {
        Message.startMessage(builder);
        Message.addVersion(builder, version);
        Message.addHeaderType(builder, headerType);
        Message.addHeader(builder, headerOffset);
        Message.addBodyLength(builder, bodyLength);
        Message.addCustomMetadata(builder, customMetadataOffset);
        return Message.endMessage(builder);
    };
    return Message;
}());
exports.Message = Message;


}(Message$1));

(function (exports) {
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.BufferType = exports.Type = exports.MessageHeader = exports.MetadataVersion = exports.IntervalUnit = exports.UnionMode = exports.Precision = exports.TimeUnit = exports.DateUnit = void 0;
var Schema_1 = Schema$1;
Object.defineProperty(exports, "DateUnit", { enumerable: true, get: function () { return Schema_1.DateUnit; } });
Object.defineProperty(exports, "TimeUnit", { enumerable: true, get: function () { return Schema_1.TimeUnit; } });
Object.defineProperty(exports, "Precision", { enumerable: true, get: function () { return Schema_1.Precision; } });
Object.defineProperty(exports, "UnionMode", { enumerable: true, get: function () { return Schema_1.UnionMode; } });
Object.defineProperty(exports, "IntervalUnit", { enumerable: true, get: function () { return Schema_1.IntervalUnit; } });
Object.defineProperty(exports, "MetadataVersion", { enumerable: true, get: function () { return Schema_1.MetadataVersion; } });
var Message_1 = Message$1;
Object.defineProperty(exports, "MessageHeader", { enumerable: true, get: function () { return Message_1.MessageHeader; } });
(function (Type) {
    /** The default placeholder type */
    Type[Type["NONE"] = 0] = "NONE";
    /** A NULL type having no physical storage */
    Type[Type["Null"] = 1] = "Null";
    /** Signed or unsigned 8, 16, 32, or 64-bit little-endian integer */
    Type[Type["Int"] = 2] = "Int";
    /** 2, 4, or 8-byte floating point value */
    Type[Type["Float"] = 3] = "Float";
    /** Variable-length bytes (no guarantee of UTF8-ness) */
    Type[Type["Binary"] = 4] = "Binary";
    /** UTF8 variable-length string as List<Char> */
    Type[Type["Utf8"] = 5] = "Utf8";
    /** Boolean as 1 bit, LSB bit-packed ordering */
    Type[Type["Bool"] = 6] = "Bool";
    /** Precision-and-scale-based decimal type. Storage type depends on the parameters. */
    Type[Type["Decimal"] = 7] = "Decimal";
    /** int32_t days or int64_t milliseconds since the UNIX epoch */
    Type[Type["Date"] = 8] = "Date";
    /** Time as signed 32 or 64-bit integer, representing either seconds, milliseconds, microseconds, or nanoseconds since midnight since midnight */
    Type[Type["Time"] = 9] = "Time";
    /** Exact timestamp encoded with int64 since UNIX epoch (Default unit millisecond) */
    Type[Type["Timestamp"] = 10] = "Timestamp";
    /** YEAR_MONTH or DAY_TIME interval in SQL style */
    Type[Type["Interval"] = 11] = "Interval";
    /** A list of some logical data type */
    Type[Type["List"] = 12] = "List";
    /** Struct of logical types */
    Type[Type["Struct"] = 13] = "Struct";
    /** Union of logical types */
    Type[Type["Union"] = 14] = "Union";
    /** Fixed-size binary. Each value occupies the same number of bytes */
    Type[Type["FixedSizeBinary"] = 15] = "FixedSizeBinary";
    /** Fixed-size list. Each value occupies the same number of bytes */
    Type[Type["FixedSizeList"] = 16] = "FixedSizeList";
    /** Map of named logical types */
    Type[Type["Map"] = 17] = "Map";
    /** Dictionary aka Category type */
    Type[Type["Dictionary"] = -1] = "Dictionary";
    Type[Type["Int8"] = -2] = "Int8";
    Type[Type["Int16"] = -3] = "Int16";
    Type[Type["Int32"] = -4] = "Int32";
    Type[Type["Int64"] = -5] = "Int64";
    Type[Type["Uint8"] = -6] = "Uint8";
    Type[Type["Uint16"] = -7] = "Uint16";
    Type[Type["Uint32"] = -8] = "Uint32";
    Type[Type["Uint64"] = -9] = "Uint64";
    Type[Type["Float16"] = -10] = "Float16";
    Type[Type["Float32"] = -11] = "Float32";
    Type[Type["Float64"] = -12] = "Float64";
    Type[Type["DateDay"] = -13] = "DateDay";
    Type[Type["DateMillisecond"] = -14] = "DateMillisecond";
    Type[Type["TimestampSecond"] = -15] = "TimestampSecond";
    Type[Type["TimestampMillisecond"] = -16] = "TimestampMillisecond";
    Type[Type["TimestampMicrosecond"] = -17] = "TimestampMicrosecond";
    Type[Type["TimestampNanosecond"] = -18] = "TimestampNanosecond";
    Type[Type["TimeSecond"] = -19] = "TimeSecond";
    Type[Type["TimeMillisecond"] = -20] = "TimeMillisecond";
    Type[Type["TimeMicrosecond"] = -21] = "TimeMicrosecond";
    Type[Type["TimeNanosecond"] = -22] = "TimeNanosecond";
    Type[Type["DenseUnion"] = -23] = "DenseUnion";
    Type[Type["SparseUnion"] = -24] = "SparseUnion";
    Type[Type["IntervalDayTime"] = -25] = "IntervalDayTime";
    Type[Type["IntervalYearMonth"] = -26] = "IntervalYearMonth";
})(exports.Type || (exports.Type = {}));
(function (BufferType) {
    /**
     * used in List type, Dense Union and variable length primitive types (String, Binary)
     */
    BufferType[BufferType["OFFSET"] = 0] = "OFFSET";
    /**
     * actual data, either wixed width primitive types in slots or variable width delimited by an OFFSET vector
     */
    BufferType[BufferType["DATA"] = 1] = "DATA";
    /**
     * Bit vector indicating if each value is null
     */
    BufferType[BufferType["VALIDITY"] = 2] = "VALIDITY";
    /**
     * Type vector used in Union type
     */
    BufferType[BufferType["TYPE"] = 3] = "TYPE";
})(exports.BufferType || (exports.BufferType = {}));


}(_enum));

var data$1 = {};

var bit = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(bit, "__esModule", { value: true });
bit.popcnt_uint32 = bit.popcnt_array = bit.popcnt_bit_range = bit.BitIterator = bit.packBools = bit.truncateBitmap = bit.setBool = bit.getBit = bit.getBool = void 0;
var tslib_1$1c = tslib.exports;
/** @ignore */
function getBool$1(_data, _index, byte, bit) {
    return (byte & 1 << bit) !== 0;
}
bit.getBool = getBool$1;
/** @ignore */
function getBit(_data, _index, byte, bit) {
    return (byte & 1 << bit) >> bit;
}
bit.getBit = getBit;
/** @ignore */
function setBool$1(bytes, index, value) {
    return value ?
        !!(bytes[index >> 3] |= (1 << (index % 8))) || true :
        !(bytes[index >> 3] &= ~(1 << (index % 8))) && false;
}
bit.setBool = setBool$1;
/** @ignore */
function truncateBitmap(offset, length, bitmap) {
    var alignedSize = (bitmap.byteLength + 7) & ~7;
    if (offset > 0 || bitmap.byteLength < alignedSize) {
        var bytes = new Uint8Array(alignedSize);
        // If the offset is a multiple of 8 bits, it's safe to slice the bitmap
        bytes.set(offset % 8 === 0 ? bitmap.subarray(offset >> 3) :
            // Otherwise iterate each bit from the offset and return a new one
            packBools(new BitIterator(bitmap, offset, length, null, getBool$1)).subarray(0, alignedSize));
        return bytes;
    }
    return bitmap;
}
bit.truncateBitmap = truncateBitmap;
/** @ignore */
function packBools(values) {
    var e_1, _a;
    var xs = [];
    var i = 0, bit = 0, byte = 0;
    try {
        for (var values_1 = tslib_1$1c.__values(values), values_1_1 = values_1.next(); !values_1_1.done; values_1_1 = values_1.next()) {
            var value = values_1_1.value;
            value && (byte |= 1 << bit);
            if (++bit === 8) {
                xs[i++] = byte;
                byte = bit = 0;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (values_1_1 && !values_1_1.done && (_a = values_1.return)) _a.call(values_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    if (i === 0 || bit > 0) {
        xs[i++] = byte;
    }
    var b = new Uint8Array((xs.length + 7) & ~7);
    b.set(xs);
    return b;
}
bit.packBools = packBools;
/** @ignore */
var BitIterator = /** @class */ (function () {
    function BitIterator(bytes, begin, length, context, get) {
        this.bytes = bytes;
        this.length = length;
        this.context = context;
        this.get = get;
        this.bit = begin % 8;
        this.byteIndex = begin >> 3;
        this.byte = bytes[this.byteIndex++];
        this.index = 0;
    }
    BitIterator.prototype.next = function () {
        if (this.index < this.length) {
            if (this.bit === 8) {
                this.bit = 0;
                this.byte = this.bytes[this.byteIndex++];
            }
            return {
                value: this.get(this.context, this.index++, this.byte, this.bit++)
            };
        }
        return { done: true, value: null };
    };
    BitIterator.prototype[Symbol.iterator] = function () {
        return this;
    };
    return BitIterator;
}());
bit.BitIterator = BitIterator;
/**
 * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.
 * @param vector The Uint8Array of bits for which to compute the population count.
 * @param lhs The range's left-hand side (or start) bit
 * @param rhs The range's right-hand side (or end) bit
 */
/** @ignore */
function popcnt_bit_range(data, lhs, rhs) {
    var e_2, _a;
    if (rhs - lhs <= 0) {
        return 0;
    }
    // If the bit range is less than one byte, sum the 1 bits in the bit range
    if (rhs - lhs < 8) {
        var sum = 0;
        try {
            for (var _b = tslib_1$1c.__values(new BitIterator(data, lhs, rhs - lhs, data, getBit)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var bit = _c.value;
                sum += bit;
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return sum;
    }
    // Get the next lowest multiple of 8 from the right hand side
    var rhsInside = rhs >> 3 << 3;
    // Get the next highest multiple of 8 from the left hand side
    var lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);
    return (
    // Get the popcnt of bits between the left hand side, and the next highest multiple of 8
    popcnt_bit_range(data, lhs, lhsInside) +
        // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8
        popcnt_bit_range(data, rhsInside, rhs) +
        // Get the popcnt of all bits between the left and right hand sides' multiples of 8
        popcnt_array(data, lhsInside >> 3, (rhsInside - lhsInside) >> 3));
}
bit.popcnt_bit_range = popcnt_bit_range;
/** @ignore */
function popcnt_array(arr, byteOffset, byteLength) {
    var cnt = 0, pos = byteOffset | 0;
    var view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
    var len = byteLength === void 0 ? arr.byteLength : pos + byteLength;
    while (len - pos >= 4) {
        cnt += popcnt_uint32(view.getUint32(pos));
        pos += 4;
    }
    while (len - pos >= 2) {
        cnt += popcnt_uint32(view.getUint16(pos));
        pos += 2;
    }
    while (len - pos >= 1) {
        cnt += popcnt_uint32(view.getUint8(pos));
        pos += 1;
    }
    return cnt;
}
bit.popcnt_array = popcnt_array;
/** @ignore */
function popcnt_uint32(uint32) {
    var i = uint32 | 0;
    i = i - ((i >>> 1) & 0x55555555);
    i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);
    return (((i + (i >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;
}
bit.popcnt_uint32 = popcnt_uint32;

var type = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(type, "__esModule", { value: true });
type.strideForType = type.Dictionary = type.Map_ = type.FixedSizeList = type.FixedSizeBinary = type.SparseUnion = type.DenseUnion = type.Union = type.Struct = type.List = type.IntervalYearMonth = type.IntervalDayTime = type.Interval = type.TimestampNanosecond = type.TimestampMicrosecond = type.TimestampMillisecond = type.TimestampSecond = type.Timestamp = type.TimeNanosecond = type.TimeMicrosecond = type.TimeMillisecond = type.TimeSecond = type.Time = type.DateMillisecond = type.DateDay = type.Date_ = type.Decimal = type.Bool = type.Utf8 = type.Binary = type.Float64 = type.Float32 = type.Float16 = type.Float = type.Uint64 = type.Uint32 = type.Uint16 = type.Uint8 = type.Int64 = type.Int32 = type.Int16 = type.Int8 = type.Int = type.Null = type.DataType = void 0;
var tslib_1$1b = tslib.exports;
var enum_1$i = _enum;
/**
 * An abstract base class for classes that encapsulate metadata about each of
 * the logical types that Arrow can represent.
 */
var DataType = /** @class */ (function () {
    function DataType() {
    }
    /** @nocollapse */ DataType.isNull = function (x) { return (x === null || x === void 0 ? void 0 : x.typeId) === enum_1$i.Type.Null; };
    /** @nocollapse */ DataType.isInt = function (x) { return (x === null || x === void 0 ? void 0 : x.typeId) === enum_1$i.Type.Int; };
    /** @nocollapse */ DataType.isFloat = function (x) { return (x === null || x === void 0 ? void 0 : x.typeId) === enum_1$i.Type.Float; };
    /** @nocollapse */ DataType.isBinary = function (x) { return (x === null || x === void 0 ? void 0 : x.typeId) === enum_1$i.Type.Binary; };
    /** @nocollapse */ DataType.isUtf8 = function (x) { return (x === null || x === void 0 ? void 0 : x.typeId) === enum_1$i.Type.Utf8; };
    /** @nocollapse */ DataType.isBool = function (x) { return (x === null || x === void 0 ? void 0 : x.typeId) === enum_1$i.Type.Bool; };
    /** @nocollapse */ DataType.isDecimal = function (x) { return (x === null || x === void 0 ? void 0 : x.typeId) === enum_1$i.Type.Decimal; };
    /** @nocollapse */ DataType.isDate = function (x) { return (x === null || x === void 0 ? void 0 : x.typeId) === enum_1$i.Type.Date; };
    /** @nocollapse */ DataType.isTime = function (x) { return (x === null || x === void 0 ? void 0 : x.typeId) === enum_1$i.Type.Time; };
    /** @nocollapse */ DataType.isTimestamp = function (x) { return (x === null || x === void 0 ? void 0 : x.typeId) === enum_1$i.Type.Timestamp; };
    /** @nocollapse */ DataType.isInterval = function (x) { return (x === null || x === void 0 ? void 0 : x.typeId) === enum_1$i.Type.Interval; };
    /** @nocollapse */ DataType.isList = function (x) { return (x === null || x === void 0 ? void 0 : x.typeId) === enum_1$i.Type.List; };
    /** @nocollapse */ DataType.isStruct = function (x) { return (x === null || x === void 0 ? void 0 : x.typeId) === enum_1$i.Type.Struct; };
    /** @nocollapse */ DataType.isUnion = function (x) { return (x === null || x === void 0 ? void 0 : x.typeId) === enum_1$i.Type.Union; };
    /** @nocollapse */ DataType.isFixedSizeBinary = function (x) { return (x === null || x === void 0 ? void 0 : x.typeId) === enum_1$i.Type.FixedSizeBinary; };
    /** @nocollapse */ DataType.isFixedSizeList = function (x) { return (x === null || x === void 0 ? void 0 : x.typeId) === enum_1$i.Type.FixedSizeList; };
    /** @nocollapse */ DataType.isMap = function (x) { return (x === null || x === void 0 ? void 0 : x.typeId) === enum_1$i.Type.Map; };
    /** @nocollapse */ DataType.isDictionary = function (x) { return (x === null || x === void 0 ? void 0 : x.typeId) === enum_1$i.Type.Dictionary; };
    Object.defineProperty(DataType.prototype, "typeId", {
        get: function () { return enum_1$i.Type.NONE; },
        enumerable: false,
        configurable: true
    });
    DataType[Symbol.toStringTag] = (function (proto) {
        proto.children = null;
        proto.ArrayType = Array;
        return proto[Symbol.toStringTag] = 'DataType';
    })(DataType.prototype);
    return DataType;
}());
type.DataType = DataType;
/** @ignore */
var Null = /** @class */ (function (_super) {
    tslib_1$1b.__extends(Null, _super);
    function Null() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Null.prototype.toString = function () { return "Null"; };
    Object.defineProperty(Null.prototype, "typeId", {
        get: function () { return enum_1$i.Type.Null; },
        enumerable: false,
        configurable: true
    });
    Null[Symbol.toStringTag] = (function (proto) {
        return proto[Symbol.toStringTag] = 'Null';
    })(Null.prototype);
    return Null;
}(DataType));
type.Null = Null;
/** @ignore */
var Int_ = /** @class */ (function (_super) {
    tslib_1$1b.__extends(Int_, _super);
    function Int_(isSigned, bitWidth) {
        var _this = _super.call(this) || this;
        _this.isSigned = isSigned;
        _this.bitWidth = bitWidth;
        return _this;
    }
    Object.defineProperty(Int_.prototype, "typeId", {
        get: function () { return enum_1$i.Type.Int; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Int_.prototype, "ArrayType", {
        get: function () {
            switch (this.bitWidth) {
                case 8: return this.isSigned ? Int8Array : Uint8Array;
                case 16: return this.isSigned ? Int16Array : Uint16Array;
                case 32: return this.isSigned ? Int32Array : Uint32Array;
                case 64: return this.isSigned ? Int32Array : Uint32Array;
            }
            throw new Error("Unrecognized " + this[Symbol.toStringTag] + " type");
        },
        enumerable: false,
        configurable: true
    });
    Int_.prototype.toString = function () { return (this.isSigned ? "I" : "Ui") + "nt" + this.bitWidth; };
    Int_[Symbol.toStringTag] = (function (proto) {
        proto.isSigned = null;
        proto.bitWidth = null;
        return proto[Symbol.toStringTag] = 'Int';
    })(Int_.prototype);
    return Int_;
}(DataType));
type.Int = Int_;
/** @ignore */
var Int8 = /** @class */ (function (_super) {
    tslib_1$1b.__extends(Int8, _super);
    function Int8() {
        return _super.call(this, true, 8) || this;
    }
    return Int8;
}(Int_));
type.Int8 = Int8;
/** @ignore */
var Int16 = /** @class */ (function (_super) {
    tslib_1$1b.__extends(Int16, _super);
    function Int16() {
        return _super.call(this, true, 16) || this;
    }
    return Int16;
}(Int_));
type.Int16 = Int16;
/** @ignore */
var Int32 = /** @class */ (function (_super) {
    tslib_1$1b.__extends(Int32, _super);
    function Int32() {
        return _super.call(this, true, 32) || this;
    }
    return Int32;
}(Int_));
type.Int32 = Int32;
/** @ignore */
var Int64$1 = /** @class */ (function (_super) {
    tslib_1$1b.__extends(Int64, _super);
    function Int64() {
        return _super.call(this, true, 64) || this;
    }
    return Int64;
}(Int_));
type.Int64 = Int64$1;
/** @ignore */
var Uint8 = /** @class */ (function (_super) {
    tslib_1$1b.__extends(Uint8, _super);
    function Uint8() {
        return _super.call(this, false, 8) || this;
    }
    return Uint8;
}(Int_));
type.Uint8 = Uint8;
/** @ignore */
var Uint16 = /** @class */ (function (_super) {
    tslib_1$1b.__extends(Uint16, _super);
    function Uint16() {
        return _super.call(this, false, 16) || this;
    }
    return Uint16;
}(Int_));
type.Uint16 = Uint16;
/** @ignore */
var Uint32 = /** @class */ (function (_super) {
    tslib_1$1b.__extends(Uint32, _super);
    function Uint32() {
        return _super.call(this, false, 32) || this;
    }
    return Uint32;
}(Int_));
type.Uint32 = Uint32;
/** @ignore */
var Uint64$1 = /** @class */ (function (_super) {
    tslib_1$1b.__extends(Uint64, _super);
    function Uint64() {
        return _super.call(this, false, 64) || this;
    }
    return Uint64;
}(Int_));
type.Uint64 = Uint64$1;
Object.defineProperty(Int8.prototype, 'ArrayType', { value: Int8Array });
Object.defineProperty(Int16.prototype, 'ArrayType', { value: Int16Array });
Object.defineProperty(Int32.prototype, 'ArrayType', { value: Int32Array });
Object.defineProperty(Int64$1.prototype, 'ArrayType', { value: Int32Array });
Object.defineProperty(Uint8.prototype, 'ArrayType', { value: Uint8Array });
Object.defineProperty(Uint16.prototype, 'ArrayType', { value: Uint16Array });
Object.defineProperty(Uint32.prototype, 'ArrayType', { value: Uint32Array });
Object.defineProperty(Uint64$1.prototype, 'ArrayType', { value: Uint32Array });
/** @ignore */
var Float = /** @class */ (function (_super) {
    tslib_1$1b.__extends(Float, _super);
    function Float(precision) {
        var _this = _super.call(this) || this;
        _this.precision = precision;
        return _this;
    }
    Object.defineProperty(Float.prototype, "typeId", {
        get: function () { return enum_1$i.Type.Float; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Float.prototype, "ArrayType", {
        get: function () {
            switch (this.precision) {
                case enum_1$i.Precision.HALF: return Uint16Array;
                case enum_1$i.Precision.SINGLE: return Float32Array;
                case enum_1$i.Precision.DOUBLE: return Float64Array;
            }
            // @ts-ignore
            throw new Error("Unrecognized " + this[Symbol.toStringTag] + " type");
        },
        enumerable: false,
        configurable: true
    });
    Float.prototype.toString = function () { return "Float" + ((this.precision << 5) || 16); };
    Float[Symbol.toStringTag] = (function (proto) {
        proto.precision = null;
        return proto[Symbol.toStringTag] = 'Float';
    })(Float.prototype);
    return Float;
}(DataType));
type.Float = Float;
/** @ignore */
var Float16 = /** @class */ (function (_super) {
    tslib_1$1b.__extends(Float16, _super);
    function Float16() {
        return _super.call(this, enum_1$i.Precision.HALF) || this;
    }
    return Float16;
}(Float));
type.Float16 = Float16;
/** @ignore */
var Float32 = /** @class */ (function (_super) {
    tslib_1$1b.__extends(Float32, _super);
    function Float32() {
        return _super.call(this, enum_1$i.Precision.SINGLE) || this;
    }
    return Float32;
}(Float));
type.Float32 = Float32;
/** @ignore */
var Float64 = /** @class */ (function (_super) {
    tslib_1$1b.__extends(Float64, _super);
    function Float64() {
        return _super.call(this, enum_1$i.Precision.DOUBLE) || this;
    }
    return Float64;
}(Float));
type.Float64 = Float64;
Object.defineProperty(Float16.prototype, 'ArrayType', { value: Uint16Array });
Object.defineProperty(Float32.prototype, 'ArrayType', { value: Float32Array });
Object.defineProperty(Float64.prototype, 'ArrayType', { value: Float64Array });
/** @ignore */
var Binary = /** @class */ (function (_super) {
    tslib_1$1b.__extends(Binary, _super);
    function Binary() {
        return _super.call(this) || this;
    }
    Object.defineProperty(Binary.prototype, "typeId", {
        get: function () { return enum_1$i.Type.Binary; },
        enumerable: false,
        configurable: true
    });
    Binary.prototype.toString = function () { return "Binary"; };
    Binary[Symbol.toStringTag] = (function (proto) {
        proto.ArrayType = Uint8Array;
        return proto[Symbol.toStringTag] = 'Binary';
    })(Binary.prototype);
    return Binary;
}(DataType));
type.Binary = Binary;
/** @ignore */
var Utf8 = /** @class */ (function (_super) {
    tslib_1$1b.__extends(Utf8, _super);
    function Utf8() {
        return _super.call(this) || this;
    }
    Object.defineProperty(Utf8.prototype, "typeId", {
        get: function () { return enum_1$i.Type.Utf8; },
        enumerable: false,
        configurable: true
    });
    Utf8.prototype.toString = function () { return "Utf8"; };
    Utf8[Symbol.toStringTag] = (function (proto) {
        proto.ArrayType = Uint8Array;
        return proto[Symbol.toStringTag] = 'Utf8';
    })(Utf8.prototype);
    return Utf8;
}(DataType));
type.Utf8 = Utf8;
/** @ignore */
var Bool = /** @class */ (function (_super) {
    tslib_1$1b.__extends(Bool, _super);
    function Bool() {
        return _super.call(this) || this;
    }
    Object.defineProperty(Bool.prototype, "typeId", {
        get: function () { return enum_1$i.Type.Bool; },
        enumerable: false,
        configurable: true
    });
    Bool.prototype.toString = function () { return "Bool"; };
    Bool[Symbol.toStringTag] = (function (proto) {
        proto.ArrayType = Uint8Array;
        return proto[Symbol.toStringTag] = 'Bool';
    })(Bool.prototype);
    return Bool;
}(DataType));
type.Bool = Bool;
/** @ignore */
var Decimal = /** @class */ (function (_super) {
    tslib_1$1b.__extends(Decimal, _super);
    function Decimal(scale, precision) {
        var _this = _super.call(this) || this;
        _this.scale = scale;
        _this.precision = precision;
        return _this;
    }
    Object.defineProperty(Decimal.prototype, "typeId", {
        get: function () { return enum_1$i.Type.Decimal; },
        enumerable: false,
        configurable: true
    });
    Decimal.prototype.toString = function () { return "Decimal[" + this.precision + "e" + (this.scale > 0 ? "+" : "") + this.scale + "]"; };
    Decimal[Symbol.toStringTag] = (function (proto) {
        proto.scale = null;
        proto.precision = null;
        proto.ArrayType = Uint32Array;
        return proto[Symbol.toStringTag] = 'Decimal';
    })(Decimal.prototype);
    return Decimal;
}(DataType));
type.Decimal = Decimal;
/** @ignore */
var Date_ = /** @class */ (function (_super) {
    tslib_1$1b.__extends(Date_, _super);
    function Date_(unit) {
        var _this = _super.call(this) || this;
        _this.unit = unit;
        return _this;
    }
    Object.defineProperty(Date_.prototype, "typeId", {
        get: function () { return enum_1$i.Type.Date; },
        enumerable: false,
        configurable: true
    });
    Date_.prototype.toString = function () { return "Date" + (this.unit + 1) * 32 + "<" + enum_1$i.DateUnit[this.unit] + ">"; };
    Date_[Symbol.toStringTag] = (function (proto) {
        proto.unit = null;
        proto.ArrayType = Int32Array;
        return proto[Symbol.toStringTag] = 'Date';
    })(Date_.prototype);
    return Date_;
}(DataType));
type.Date_ = Date_;
/** @ignore */
var DateDay = /** @class */ (function (_super) {
    tslib_1$1b.__extends(DateDay, _super);
    function DateDay() {
        return _super.call(this, enum_1$i.DateUnit.DAY) || this;
    }
    return DateDay;
}(Date_));
type.DateDay = DateDay;
/** @ignore */
var DateMillisecond = /** @class */ (function (_super) {
    tslib_1$1b.__extends(DateMillisecond, _super);
    function DateMillisecond() {
        return _super.call(this, enum_1$i.DateUnit.MILLISECOND) || this;
    }
    return DateMillisecond;
}(Date_));
type.DateMillisecond = DateMillisecond;
/** @ignore */
var Time_ = /** @class */ (function (_super) {
    tslib_1$1b.__extends(Time_, _super);
    function Time_(unit, bitWidth) {
        var _this = _super.call(this) || this;
        _this.unit = unit;
        _this.bitWidth = bitWidth;
        return _this;
    }
    Object.defineProperty(Time_.prototype, "typeId", {
        get: function () { return enum_1$i.Type.Time; },
        enumerable: false,
        configurable: true
    });
    Time_.prototype.toString = function () { return "Time" + this.bitWidth + "<" + enum_1$i.TimeUnit[this.unit] + ">"; };
    Time_[Symbol.toStringTag] = (function (proto) {
        proto.unit = null;
        proto.bitWidth = null;
        proto.ArrayType = Int32Array;
        return proto[Symbol.toStringTag] = 'Time';
    })(Time_.prototype);
    return Time_;
}(DataType));
type.Time = Time_;
/** @ignore */
var TimeSecond = /** @class */ (function (_super) {
    tslib_1$1b.__extends(TimeSecond, _super);
    function TimeSecond() {
        return _super.call(this, enum_1$i.TimeUnit.SECOND, 32) || this;
    }
    return TimeSecond;
}(Time_));
type.TimeSecond = TimeSecond;
/** @ignore */
var TimeMillisecond = /** @class */ (function (_super) {
    tslib_1$1b.__extends(TimeMillisecond, _super);
    function TimeMillisecond() {
        return _super.call(this, enum_1$i.TimeUnit.MILLISECOND, 32) || this;
    }
    return TimeMillisecond;
}(Time_));
type.TimeMillisecond = TimeMillisecond;
/** @ignore */
var TimeMicrosecond = /** @class */ (function (_super) {
    tslib_1$1b.__extends(TimeMicrosecond, _super);
    function TimeMicrosecond() {
        return _super.call(this, enum_1$i.TimeUnit.MICROSECOND, 64) || this;
    }
    return TimeMicrosecond;
}(Time_));
type.TimeMicrosecond = TimeMicrosecond;
/** @ignore */
var TimeNanosecond = /** @class */ (function (_super) {
    tslib_1$1b.__extends(TimeNanosecond, _super);
    function TimeNanosecond() {
        return _super.call(this, enum_1$i.TimeUnit.NANOSECOND, 64) || this;
    }
    return TimeNanosecond;
}(Time_));
type.TimeNanosecond = TimeNanosecond;
/** @ignore */
var Timestamp_ = /** @class */ (function (_super) {
    tslib_1$1b.__extends(Timestamp_, _super);
    function Timestamp_(unit, timezone) {
        var _this = _super.call(this) || this;
        _this.unit = unit;
        _this.timezone = timezone;
        return _this;
    }
    Object.defineProperty(Timestamp_.prototype, "typeId", {
        get: function () { return enum_1$i.Type.Timestamp; },
        enumerable: false,
        configurable: true
    });
    Timestamp_.prototype.toString = function () { return "Timestamp<" + enum_1$i.TimeUnit[this.unit] + (this.timezone ? ", " + this.timezone : "") + ">"; };
    Timestamp_[Symbol.toStringTag] = (function (proto) {
        proto.unit = null;
        proto.timezone = null;
        proto.ArrayType = Int32Array;
        return proto[Symbol.toStringTag] = 'Timestamp';
    })(Timestamp_.prototype);
    return Timestamp_;
}(DataType));
type.Timestamp = Timestamp_;
/** @ignore */
var TimestampSecond = /** @class */ (function (_super) {
    tslib_1$1b.__extends(TimestampSecond, _super);
    function TimestampSecond(timezone) {
        return _super.call(this, enum_1$i.TimeUnit.SECOND, timezone) || this;
    }
    return TimestampSecond;
}(Timestamp_));
type.TimestampSecond = TimestampSecond;
/** @ignore */
var TimestampMillisecond = /** @class */ (function (_super) {
    tslib_1$1b.__extends(TimestampMillisecond, _super);
    function TimestampMillisecond(timezone) {
        return _super.call(this, enum_1$i.TimeUnit.MILLISECOND, timezone) || this;
    }
    return TimestampMillisecond;
}(Timestamp_));
type.TimestampMillisecond = TimestampMillisecond;
/** @ignore */
var TimestampMicrosecond = /** @class */ (function (_super) {
    tslib_1$1b.__extends(TimestampMicrosecond, _super);
    function TimestampMicrosecond(timezone) {
        return _super.call(this, enum_1$i.TimeUnit.MICROSECOND, timezone) || this;
    }
    return TimestampMicrosecond;
}(Timestamp_));
type.TimestampMicrosecond = TimestampMicrosecond;
/** @ignore */
var TimestampNanosecond = /** @class */ (function (_super) {
    tslib_1$1b.__extends(TimestampNanosecond, _super);
    function TimestampNanosecond(timezone) {
        return _super.call(this, enum_1$i.TimeUnit.NANOSECOND, timezone) || this;
    }
    return TimestampNanosecond;
}(Timestamp_));
type.TimestampNanosecond = TimestampNanosecond;
/** @ignore */
var Interval_ = /** @class */ (function (_super) {
    tslib_1$1b.__extends(Interval_, _super);
    function Interval_(unit) {
        var _this = _super.call(this) || this;
        _this.unit = unit;
        return _this;
    }
    Object.defineProperty(Interval_.prototype, "typeId", {
        get: function () { return enum_1$i.Type.Interval; },
        enumerable: false,
        configurable: true
    });
    Interval_.prototype.toString = function () { return "Interval<" + enum_1$i.IntervalUnit[this.unit] + ">"; };
    Interval_[Symbol.toStringTag] = (function (proto) {
        proto.unit = null;
        proto.ArrayType = Int32Array;
        return proto[Symbol.toStringTag] = 'Interval';
    })(Interval_.prototype);
    return Interval_;
}(DataType));
type.Interval = Interval_;
/** @ignore */
var IntervalDayTime = /** @class */ (function (_super) {
    tslib_1$1b.__extends(IntervalDayTime, _super);
    function IntervalDayTime() {
        return _super.call(this, enum_1$i.IntervalUnit.DAY_TIME) || this;
    }
    return IntervalDayTime;
}(Interval_));
type.IntervalDayTime = IntervalDayTime;
/** @ignore */
var IntervalYearMonth = /** @class */ (function (_super) {
    tslib_1$1b.__extends(IntervalYearMonth, _super);
    function IntervalYearMonth() {
        return _super.call(this, enum_1$i.IntervalUnit.YEAR_MONTH) || this;
    }
    return IntervalYearMonth;
}(Interval_));
type.IntervalYearMonth = IntervalYearMonth;
/** @ignore */
var List = /** @class */ (function (_super) {
    tslib_1$1b.__extends(List, _super);
    function List(child) {
        var _this = _super.call(this) || this;
        _this.children = [child];
        return _this;
    }
    Object.defineProperty(List.prototype, "typeId", {
        get: function () { return enum_1$i.Type.List; },
        enumerable: false,
        configurable: true
    });
    List.prototype.toString = function () { return "List<" + this.valueType + ">"; };
    Object.defineProperty(List.prototype, "valueType", {
        get: function () { return this.children[0].type; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(List.prototype, "valueField", {
        get: function () { return this.children[0]; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(List.prototype, "ArrayType", {
        get: function () { return this.valueType.ArrayType; },
        enumerable: false,
        configurable: true
    });
    List[Symbol.toStringTag] = (function (proto) {
        proto.children = null;
        return proto[Symbol.toStringTag] = 'List';
    })(List.prototype);
    return List;
}(DataType));
type.List = List;
/** @ignore */
var Struct = /** @class */ (function (_super) {
    tslib_1$1b.__extends(Struct, _super);
    function Struct(children) {
        var _this = _super.call(this) || this;
        _this.children = children;
        return _this;
    }
    Object.defineProperty(Struct.prototype, "typeId", {
        get: function () { return enum_1$i.Type.Struct; },
        enumerable: false,
        configurable: true
    });
    Struct.prototype.toString = function () { return "Struct<{" + this.children.map(function (f) { return f.name + ":" + f.type; }).join(", ") + "}>"; };
    Struct[Symbol.toStringTag] = (function (proto) {
        proto.children = null;
        return proto[Symbol.toStringTag] = 'Struct';
    })(Struct.prototype);
    return Struct;
}(DataType));
type.Struct = Struct;
/** @ignore */
var Union_ = /** @class */ (function (_super) {
    tslib_1$1b.__extends(Union_, _super);
    function Union_(mode, typeIds, children) {
        var _this = _super.call(this) || this;
        _this.mode = mode;
        _this.children = children;
        _this.typeIds = typeIds = Int32Array.from(typeIds);
        _this.typeIdToChildIndex = typeIds.reduce(function (typeIdToChildIndex, typeId, idx) {
            return (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex;
        }, Object.create(null));
        return _this;
    }
    Object.defineProperty(Union_.prototype, "typeId", {
        get: function () { return enum_1$i.Type.Union; },
        enumerable: false,
        configurable: true
    });
    Union_.prototype.toString = function () {
        return this[Symbol.toStringTag] + "<" + this.children.map(function (x) { return "" + x.type; }).join(" | ") + ">";
    };
    Union_[Symbol.toStringTag] = (function (proto) {
        proto.mode = null;
        proto.typeIds = null;
        proto.children = null;
        proto.typeIdToChildIndex = null;
        proto.ArrayType = Int8Array;
        return proto[Symbol.toStringTag] = 'Union';
    })(Union_.prototype);
    return Union_;
}(DataType));
type.Union = Union_;
/** @ignore */
var DenseUnion = /** @class */ (function (_super) {
    tslib_1$1b.__extends(DenseUnion, _super);
    function DenseUnion(typeIds, children) {
        return _super.call(this, enum_1$i.UnionMode.Dense, typeIds, children) || this;
    }
    return DenseUnion;
}(Union_));
type.DenseUnion = DenseUnion;
/** @ignore */
var SparseUnion = /** @class */ (function (_super) {
    tslib_1$1b.__extends(SparseUnion, _super);
    function SparseUnion(typeIds, children) {
        return _super.call(this, enum_1$i.UnionMode.Sparse, typeIds, children) || this;
    }
    return SparseUnion;
}(Union_));
type.SparseUnion = SparseUnion;
/** @ignore */
var FixedSizeBinary = /** @class */ (function (_super) {
    tslib_1$1b.__extends(FixedSizeBinary, _super);
    function FixedSizeBinary(byteWidth) {
        var _this = _super.call(this) || this;
        _this.byteWidth = byteWidth;
        return _this;
    }
    Object.defineProperty(FixedSizeBinary.prototype, "typeId", {
        get: function () { return enum_1$i.Type.FixedSizeBinary; },
        enumerable: false,
        configurable: true
    });
    FixedSizeBinary.prototype.toString = function () { return "FixedSizeBinary[" + this.byteWidth + "]"; };
    FixedSizeBinary[Symbol.toStringTag] = (function (proto) {
        proto.byteWidth = null;
        proto.ArrayType = Uint8Array;
        return proto[Symbol.toStringTag] = 'FixedSizeBinary';
    })(FixedSizeBinary.prototype);
    return FixedSizeBinary;
}(DataType));
type.FixedSizeBinary = FixedSizeBinary;
/** @ignore */
var FixedSizeList = /** @class */ (function (_super) {
    tslib_1$1b.__extends(FixedSizeList, _super);
    function FixedSizeList(listSize, child) {
        var _this = _super.call(this) || this;
        _this.listSize = listSize;
        _this.children = [child];
        return _this;
    }
    Object.defineProperty(FixedSizeList.prototype, "typeId", {
        get: function () { return enum_1$i.Type.FixedSizeList; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FixedSizeList.prototype, "valueType", {
        get: function () { return this.children[0].type; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FixedSizeList.prototype, "valueField", {
        get: function () { return this.children[0]; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FixedSizeList.prototype, "ArrayType", {
        get: function () { return this.valueType.ArrayType; },
        enumerable: false,
        configurable: true
    });
    FixedSizeList.prototype.toString = function () { return "FixedSizeList[" + this.listSize + "]<" + this.valueType + ">"; };
    FixedSizeList[Symbol.toStringTag] = (function (proto) {
        proto.children = null;
        proto.listSize = null;
        return proto[Symbol.toStringTag] = 'FixedSizeList';
    })(FixedSizeList.prototype);
    return FixedSizeList;
}(DataType));
type.FixedSizeList = FixedSizeList;
/** @ignore */
var Map_ = /** @class */ (function (_super) {
    tslib_1$1b.__extends(Map_, _super);
    function Map_(child, keysSorted) {
        if (keysSorted === void 0) { keysSorted = false; }
        var _this = _super.call(this) || this;
        _this.children = [child];
        _this.keysSorted = keysSorted;
        return _this;
    }
    Object.defineProperty(Map_.prototype, "typeId", {
        get: function () { return enum_1$i.Type.Map; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Map_.prototype, "keyType", {
        get: function () { return this.children[0].type.children[0].type; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Map_.prototype, "valueType", {
        get: function () { return this.children[0].type.children[1].type; },
        enumerable: false,
        configurable: true
    });
    Map_.prototype.toString = function () { return "Map<{" + this.children[0].type.children.map(function (f) { return f.name + ":" + f.type; }).join(", ") + "}>"; };
    Map_[Symbol.toStringTag] = (function (proto) {
        proto.children = null;
        proto.keysSorted = null;
        return proto[Symbol.toStringTag] = 'Map_';
    })(Map_.prototype);
    return Map_;
}(DataType));
type.Map_ = Map_;
/** @ignore */
var getId = (function (atomicDictionaryId) { return function () { return ++atomicDictionaryId; }; })(-1);
/** @ignore */
var Dictionary = /** @class */ (function (_super) {
    tslib_1$1b.__extends(Dictionary, _super);
    function Dictionary(dictionary, indices, id, isOrdered) {
        var _this = _super.call(this) || this;
        _this.indices = indices;
        _this.dictionary = dictionary;
        _this.isOrdered = isOrdered || false;
        _this.id = id == null ? getId() : typeof id === 'number' ? id : id.low;
        return _this;
    }
    Object.defineProperty(Dictionary.prototype, "typeId", {
        get: function () { return enum_1$i.Type.Dictionary; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Dictionary.prototype, "children", {
        get: function () { return this.dictionary.children; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Dictionary.prototype, "valueType", {
        get: function () { return this.dictionary; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Dictionary.prototype, "ArrayType", {
        get: function () { return this.dictionary.ArrayType; },
        enumerable: false,
        configurable: true
    });
    Dictionary.prototype.toString = function () { return "Dictionary<" + this.indices + ", " + this.dictionary + ">"; };
    Dictionary[Symbol.toStringTag] = (function (proto) {
        proto.id = null;
        proto.indices = null;
        proto.isOrdered = null;
        proto.dictionary = null;
        return proto[Symbol.toStringTag] = 'Dictionary';
    })(Dictionary.prototype);
    return Dictionary;
}(DataType));
type.Dictionary = Dictionary;
/** @ignore */
function strideForType(type) {
    var t = type;
    switch (type.typeId) {
        case enum_1$i.Type.Decimal: return 4;
        case enum_1$i.Type.Timestamp: return 2;
        case enum_1$i.Type.Date: return 1 + t.unit;
        case enum_1$i.Type.Interval: return 1 + t.unit;
        case enum_1$i.Type.Int: return 1 + +(t.bitWidth > 32);
        case enum_1$i.Type.Time: return 1 + +(t.bitWidth > 32);
        case enum_1$i.Type.FixedSizeList: return t.listSize;
        case enum_1$i.Type.FixedSizeBinary: return t.byteWidth;
        default: return 1;
    }
}
type.strideForType = strideForType;

(function (exports) {
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Data = exports.kUnknownNullCount = void 0;
var bit_1 = bit;
var bit_2 = bit;
var enum_1 = _enum;
var type_1 = type;
var buffer_1 = buffer$1;
/** @ignore */ exports.kUnknownNullCount = -1;
/** @ignore */
var Data = /** @class */ (function () {
    function Data(type, offset, length, nullCount, buffers, childData, dictionary) {
        this.type = type;
        this.dictionary = dictionary;
        this.offset = Math.floor(Math.max(offset || 0, 0));
        this.length = Math.floor(Math.max(length || 0, 0));
        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));
        this.childData = (childData || []).map(function (x) { return x instanceof Data ? x : x.data; });
        var buffer;
        if (buffers instanceof Data) {
            this.stride = buffers.stride;
            this.values = buffers.values;
            this.typeIds = buffers.typeIds;
            this.nullBitmap = buffers.nullBitmap;
            this.valueOffsets = buffers.valueOffsets;
        }
        else {
            this.stride = type_1.strideForType(type);
            if (buffers) {
                (buffer = buffers[0]) && (this.valueOffsets = buffer);
                (buffer = buffers[1]) && (this.values = buffer);
                (buffer = buffers[2]) && (this.nullBitmap = buffer);
                (buffer = buffers[3]) && (this.typeIds = buffer);
            }
        }
    }
    Object.defineProperty(Data.prototype, "typeId", {
        get: function () { return this.type.typeId; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Data.prototype, "ArrayType", {
        get: function () { return this.type.ArrayType; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Data.prototype, "buffers", {
        get: function () {
            return [this.valueOffsets, this.values, this.nullBitmap, this.typeIds];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Data.prototype, "byteLength", {
        get: function () {
            var byteLength = 0;
            var _a = this, valueOffsets = _a.valueOffsets, values = _a.values, nullBitmap = _a.nullBitmap, typeIds = _a.typeIds;
            valueOffsets && (byteLength += valueOffsets.byteLength);
            values && (byteLength += values.byteLength);
            nullBitmap && (byteLength += nullBitmap.byteLength);
            typeIds && (byteLength += typeIds.byteLength);
            return this.childData.reduce(function (byteLength, child) { return byteLength + child.byteLength; }, byteLength);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Data.prototype, "nullCount", {
        get: function () {
            var nullCount = this._nullCount;
            var nullBitmap;
            if (nullCount <= exports.kUnknownNullCount && (nullBitmap = this.nullBitmap)) {
                this._nullCount = nullCount = this.length - bit_2.popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);
            }
            return nullCount;
        },
        enumerable: false,
        configurable: true
    });
    Data.prototype.clone = function (type, offset, length, nullCount, buffers, childData) {
        if (offset === void 0) { offset = this.offset; }
        if (length === void 0) { length = this.length; }
        if (nullCount === void 0) { nullCount = this._nullCount; }
        if (buffers === void 0) { buffers = this; }
        if (childData === void 0) { childData = this.childData; }
        return new Data(type, offset, length, nullCount, buffers, childData, this.dictionary);
    };
    Data.prototype.slice = function (offset, length) {
        var _a = this, stride = _a.stride, typeId = _a.typeId, childData = _a.childData;
        // +true === 1, +false === 0, so this means
        // we keep nullCount at 0 if it's already 0,
        // otherwise set to the invalidated flag -1
        var nullCount = +(this._nullCount === 0) - 1;
        var childStride = typeId === 16 /* FixedSizeList */ ? stride : 1;
        var buffers = this._sliceBuffers(offset, length, stride, typeId);
        return this.clone(this.type, this.offset + offset, length, nullCount, buffers, 
        // Don't slice children if we have value offsets (the variable-width types)
        (!childData.length || this.valueOffsets) ? childData : this._sliceChildren(childData, childStride * offset, childStride * length));
    };
    Data.prototype._changeLengthAndBackfillNullBitmap = function (newLength) {
        if (this.typeId === enum_1.Type.Null) {
            return this.clone(this.type, 0, newLength, 0);
        }
        var _a = this, length = _a.length, nullCount = _a.nullCount;
        // start initialized with 0s (nulls), then fill from 0 to length with 1s (not null)
        var bitmap = new Uint8Array(((newLength + 63) & ~63) >> 3).fill(255, 0, length >> 3);
        // set all the bits in the last byte (up to bit `length - length % 8`) to 1 (not null)
        bitmap[length >> 3] = (1 << (length - (length & ~7))) - 1;
        // if we have a nullBitmap, truncate + slice and set it over the pre-filled 1s
        if (nullCount > 0) {
            bitmap.set(bit_1.truncateBitmap(this.offset, length, this.nullBitmap), 0);
        }
        var buffers = this.buffers;
        buffers[enum_1.BufferType.VALIDITY] = bitmap;
        return this.clone(this.type, 0, newLength, nullCount + (newLength - length), buffers);
    };
    Data.prototype._sliceBuffers = function (offset, length, stride, typeId) {
        var arr;
        var buffers = this.buffers;
        // If typeIds exist, slice the typeIds buffer
        (arr = buffers[enum_1.BufferType.TYPE]) && (buffers[enum_1.BufferType.TYPE] = arr.subarray(offset, offset + length));
        // If offsets exist, only slice the offsets buffer
        (arr = buffers[enum_1.BufferType.OFFSET]) && (buffers[enum_1.BufferType.OFFSET] = arr.subarray(offset, offset + length + 1)) ||
            // Otherwise if no offsets, slice the data buffer. Don't slice the data vector for Booleans, since the offset goes by bits not bytes
            (arr = buffers[enum_1.BufferType.DATA]) && (buffers[enum_1.BufferType.DATA] = typeId === 6 ? arr : arr.subarray(stride * offset, stride * (offset + length)));
        return buffers;
    };
    Data.prototype._sliceChildren = function (childData, offset, length) {
        return childData.map(function (child) { return child.slice(offset, length); });
    };
    //
    // Convenience methods for creating Data instances for each of the Arrow Vector types
    //
    /** @nocollapse */
    Data.new = function (type, offset, length, nullCount, buffers, childData, dictionary) {
        if (buffers instanceof Data) {
            buffers = buffers.buffers;
        }
        else if (!buffers) {
            buffers = [];
        }
        switch (type.typeId) {
            case enum_1.Type.Null: return Data.Null(type, offset, length);
            case enum_1.Type.Int: return Data.Int(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.DATA] || []);
            case enum_1.Type.Dictionary: return Data.Dictionary(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.DATA] || [], dictionary);
            case enum_1.Type.Float: return Data.Float(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.DATA] || []);
            case enum_1.Type.Bool: return Data.Bool(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.DATA] || []);
            case enum_1.Type.Decimal: return Data.Decimal(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.DATA] || []);
            case enum_1.Type.Date: return Data.Date(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.DATA] || []);
            case enum_1.Type.Time: return Data.Time(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.DATA] || []);
            case enum_1.Type.Timestamp: return Data.Timestamp(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.DATA] || []);
            case enum_1.Type.Interval: return Data.Interval(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.DATA] || []);
            case enum_1.Type.FixedSizeBinary: return Data.FixedSizeBinary(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.DATA] || []);
            case enum_1.Type.Binary: return Data.Binary(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.OFFSET] || [], buffers[enum_1.BufferType.DATA] || []);
            case enum_1.Type.Utf8: return Data.Utf8(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.OFFSET] || [], buffers[enum_1.BufferType.DATA] || []);
            case enum_1.Type.List: return Data.List(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.OFFSET] || [], (childData || [])[0]);
            case enum_1.Type.FixedSizeList: return Data.FixedSizeList(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], (childData || [])[0]);
            case enum_1.Type.Struct: return Data.Struct(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], childData || []);
            case enum_1.Type.Map: return Data.Map(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.OFFSET] || [], (childData || [])[0]);
            case enum_1.Type.Union: return Data.Union(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.TYPE] || [], buffers[enum_1.BufferType.OFFSET] || childData, childData);
        }
        throw new Error("Unrecognized typeId " + type.typeId);
    };
    /** @nocollapse */
    Data.Null = function (type, offset, length) {
        return new Data(type, offset, length, 0);
    };
    /** @nocollapse */
    Data.Int = function (type, offset, length, nullCount, nullBitmap, data) {
        return new Data(type, offset, length, nullCount, [undefined, buffer_1.toArrayBufferView(type.ArrayType, data), buffer_1.toUint8Array(nullBitmap)]);
    };
    /** @nocollapse */
    Data.Dictionary = function (type, offset, length, nullCount, nullBitmap, data, dictionary) {
        return new Data(type, offset, length, nullCount, [undefined, buffer_1.toArrayBufferView(type.indices.ArrayType, data), buffer_1.toUint8Array(nullBitmap)], [], dictionary);
    };
    /** @nocollapse */
    Data.Float = function (type, offset, length, nullCount, nullBitmap, data) {
        return new Data(type, offset, length, nullCount, [undefined, buffer_1.toArrayBufferView(type.ArrayType, data), buffer_1.toUint8Array(nullBitmap)]);
    };
    /** @nocollapse */
    Data.Bool = function (type, offset, length, nullCount, nullBitmap, data) {
        return new Data(type, offset, length, nullCount, [undefined, buffer_1.toArrayBufferView(type.ArrayType, data), buffer_1.toUint8Array(nullBitmap)]);
    };
    /** @nocollapse */
    Data.Decimal = function (type, offset, length, nullCount, nullBitmap, data) {
        return new Data(type, offset, length, nullCount, [undefined, buffer_1.toArrayBufferView(type.ArrayType, data), buffer_1.toUint8Array(nullBitmap)]);
    };
    /** @nocollapse */
    Data.Date = function (type, offset, length, nullCount, nullBitmap, data) {
        return new Data(type, offset, length, nullCount, [undefined, buffer_1.toArrayBufferView(type.ArrayType, data), buffer_1.toUint8Array(nullBitmap)]);
    };
    /** @nocollapse */
    Data.Time = function (type, offset, length, nullCount, nullBitmap, data) {
        return new Data(type, offset, length, nullCount, [undefined, buffer_1.toArrayBufferView(type.ArrayType, data), buffer_1.toUint8Array(nullBitmap)]);
    };
    /** @nocollapse */
    Data.Timestamp = function (type, offset, length, nullCount, nullBitmap, data) {
        return new Data(type, offset, length, nullCount, [undefined, buffer_1.toArrayBufferView(type.ArrayType, data), buffer_1.toUint8Array(nullBitmap)]);
    };
    /** @nocollapse */
    Data.Interval = function (type, offset, length, nullCount, nullBitmap, data) {
        return new Data(type, offset, length, nullCount, [undefined, buffer_1.toArrayBufferView(type.ArrayType, data), buffer_1.toUint8Array(nullBitmap)]);
    };
    /** @nocollapse */
    Data.FixedSizeBinary = function (type, offset, length, nullCount, nullBitmap, data) {
        return new Data(type, offset, length, nullCount, [undefined, buffer_1.toArrayBufferView(type.ArrayType, data), buffer_1.toUint8Array(nullBitmap)]);
    };
    /** @nocollapse */
    Data.Binary = function (type, offset, length, nullCount, nullBitmap, valueOffsets, data) {
        return new Data(type, offset, length, nullCount, [buffer_1.toInt32Array(valueOffsets), buffer_1.toUint8Array(data), buffer_1.toUint8Array(nullBitmap)]);
    };
    /** @nocollapse */
    Data.Utf8 = function (type, offset, length, nullCount, nullBitmap, valueOffsets, data) {
        return new Data(type, offset, length, nullCount, [buffer_1.toInt32Array(valueOffsets), buffer_1.toUint8Array(data), buffer_1.toUint8Array(nullBitmap)]);
    };
    /** @nocollapse */
    Data.List = function (type, offset, length, nullCount, nullBitmap, valueOffsets, child) {
        return new Data(type, offset, length, nullCount, [buffer_1.toInt32Array(valueOffsets), undefined, buffer_1.toUint8Array(nullBitmap)], child ? [child] : []);
    };
    /** @nocollapse */
    Data.FixedSizeList = function (type, offset, length, nullCount, nullBitmap, child) {
        return new Data(type, offset, length, nullCount, [undefined, undefined, buffer_1.toUint8Array(nullBitmap)], child ? [child] : []);
    };
    /** @nocollapse */
    Data.Struct = function (type, offset, length, nullCount, nullBitmap, children) {
        return new Data(type, offset, length, nullCount, [undefined, undefined, buffer_1.toUint8Array(nullBitmap)], children);
    };
    /** @nocollapse */
    Data.Map = function (type, offset, length, nullCount, nullBitmap, valueOffsets, child) {
        return new Data(type, offset, length, nullCount, [buffer_1.toInt32Array(valueOffsets), undefined, buffer_1.toUint8Array(nullBitmap)], child ? [child] : []);
    };
    /** @nocollapse */
    Data.Union = function (type, offset, length, nullCount, nullBitmap, typeIds, valueOffsetsOrChildren, children) {
        var buffers = [
            undefined, undefined,
            buffer_1.toUint8Array(nullBitmap),
            buffer_1.toArrayBufferView(type.ArrayType, typeIds)
        ];
        if (type.mode === enum_1.UnionMode.Sparse) {
            return new Data(type, offset, length, nullCount, buffers, valueOffsetsOrChildren);
        }
        buffers[enum_1.BufferType.OFFSET] = buffer_1.toInt32Array(valueOffsetsOrChildren);
        return new Data(type, offset, length, nullCount, buffers, children);
    };
    return Data;
}());
exports.Data = Data;
Data.prototype.childData = Object.freeze([]);


}(data$1));

var valid = {};

var pretty = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(pretty, "__esModule", { value: true });
pretty.valueToString = void 0;
/** @ignore */ var undf = void (0);
/** @ignore */
function valueToString(x) {
    if (x === null) {
        return 'null';
    }
    if (x === undf) {
        return 'undefined';
    }
    switch (typeof x) {
        case 'number': return "" + x;
        case 'bigint': return "" + x;
        case 'string': return "\"" + x + "\"";
    }
    // If [Symbol.toPrimitive] is implemented (like in BN)
    // use it instead of JSON.stringify(). This ensures we
    // print BigInts, Decimals, and Binary in their native
    // representation
    if (typeof x[Symbol.toPrimitive] === 'function') {
        return x[Symbol.toPrimitive]('string');
    }
    return ArrayBuffer.isView(x) ? "[" + x + "]" : JSON.stringify(x);
}
pretty.valueToString = valueToString;

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(valid, "__esModule", { value: true });
valid.createIsValidFunction = void 0;
var pretty_1$1 = pretty;
var compat_1$a = compat;
/**
 * Dynamically compile the null values into an `isValid()` function whose
 * implementation is a switch statement. Microbenchmarks in v8 indicate
 * this approach is 25% faster than using an ES6 Map.
 *
 * @example
 * console.log(createIsValidFunction([null, 'N/A', NaN]));
 * `function (x) {
 *     if (x !== x) return false;
 *     switch (x) {
 *         case null:
 *         case "N/A":
 *             return false;
 *     }
 *     return true;
 * }`
 *
 * @ignore
 * @param nullValues
 */
function createIsValidFunction(nullValues) {
    if (!nullValues || nullValues.length <= 0) {
        // @ts-ignore
        return function isValid(value) { return true; };
    }
    var fnBody = '';
    var noNaNs = nullValues.filter(function (x) { return x === x; });
    if (noNaNs.length > 0) {
        fnBody = "\n    switch (x) {" + noNaNs.map(function (x) { return "\n        case " + valueToCase(x) + ":"; }).join('') + "\n            return false;\n    }";
    }
    // NaN doesn't equal anything including itself, so it doesn't work as a
    // switch case. Instead we must explicitly check for NaN before the switch.
    if (nullValues.length !== noNaNs.length) {
        fnBody = "if (x !== x) return false;\n" + fnBody;
    }
    return new Function("x", fnBody + "\nreturn true;");
}
valid.createIsValidFunction = createIsValidFunction;
/** @ignore */
function valueToCase(x) {
    if (typeof x !== 'bigint') {
        return pretty_1$1.valueToString(x);
    }
    else if (compat_1$a.BigIntAvailable) {
        return pretty_1$1.valueToString(x) + "n";
    }
    return "\"" + pretty_1$1.valueToString(x) + "\"";
}

var buffer = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(buffer, "__esModule", { value: true });
buffer.WideBufferBuilder = buffer.OffsetsBufferBuilder = buffer.BitmapBufferBuilder = buffer.DataBufferBuilder = buffer.BufferBuilder = void 0;
var tslib_1$1a = tslib.exports;
var buffer_1$i = buffer$1;
var compat_1$9 = compat;
/** @ignore */
var roundLengthUpToNearest64Bytes = function (len, BPE) { return ((((len * BPE) + 63) & ~63) || 64) / BPE; };
/** @ignore */
var sliceOrExtendArray = function (arr, len) {
    if (len === void 0) { len = 0; }
    return (arr.length >= len ? arr.subarray(0, len) : buffer_1$i.memcpy(new arr.constructor(len), arr, 0));
};
/** @ignore */
var BufferBuilder = /** @class */ (function () {
    function BufferBuilder(buffer, stride) {
        if (stride === void 0) { stride = 1; }
        this.buffer = buffer;
        this.stride = stride;
        this.BYTES_PER_ELEMENT = buffer.BYTES_PER_ELEMENT;
        this.ArrayType = buffer.constructor;
        this._resize(this.length = buffer.length / stride | 0);
    }
    Object.defineProperty(BufferBuilder.prototype, "byteLength", {
        get: function () { return this.length * this.stride * this.BYTES_PER_ELEMENT | 0; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BufferBuilder.prototype, "reservedLength", {
        get: function () { return this.buffer.length / this.stride; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BufferBuilder.prototype, "reservedByteLength", {
        get: function () { return this.buffer.byteLength; },
        enumerable: false,
        configurable: true
    });
    // @ts-ignore
    BufferBuilder.prototype.set = function (index, value) { return this; };
    BufferBuilder.prototype.append = function (value) { return this.set(this.length, value); };
    BufferBuilder.prototype.reserve = function (extra) {
        if (extra > 0) {
            this.length += extra;
            var stride = this.stride;
            var length_1 = this.length * stride;
            var reserved = this.buffer.length;
            if (length_1 >= reserved) {
                this._resize(reserved === 0
                    ? roundLengthUpToNearest64Bytes(length_1 * 1, this.BYTES_PER_ELEMENT)
                    : roundLengthUpToNearest64Bytes(length_1 * 2, this.BYTES_PER_ELEMENT));
            }
        }
        return this;
    };
    BufferBuilder.prototype.flush = function (length) {
        if (length === void 0) { length = this.length; }
        length = roundLengthUpToNearest64Bytes(length * this.stride, this.BYTES_PER_ELEMENT);
        var array = sliceOrExtendArray(this.buffer, length);
        this.clear();
        return array;
    };
    BufferBuilder.prototype.clear = function () {
        this.length = 0;
        this._resize(0);
        return this;
    };
    BufferBuilder.prototype._resize = function (newLength) {
        return this.buffer = buffer_1$i.memcpy(new this.ArrayType(newLength), this.buffer);
    };
    return BufferBuilder;
}());
buffer.BufferBuilder = BufferBuilder;
BufferBuilder.prototype.offset = 0;
/** @ignore */
var DataBufferBuilder = /** @class */ (function (_super) {
    tslib_1$1a.__extends(DataBufferBuilder, _super);
    function DataBufferBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DataBufferBuilder.prototype.last = function () { return this.get(this.length - 1); };
    DataBufferBuilder.prototype.get = function (index) { return this.buffer[index]; };
    DataBufferBuilder.prototype.set = function (index, value) {
        this.reserve(index - this.length + 1);
        this.buffer[index * this.stride] = value;
        return this;
    };
    return DataBufferBuilder;
}(BufferBuilder));
buffer.DataBufferBuilder = DataBufferBuilder;
/** @ignore */
var BitmapBufferBuilder = /** @class */ (function (_super) {
    tslib_1$1a.__extends(BitmapBufferBuilder, _super);
    function BitmapBufferBuilder(data) {
        if (data === void 0) { data = new Uint8Array(0); }
        var _this = _super.call(this, data, 1 / 8) || this;
        _this.numValid = 0;
        return _this;
    }
    Object.defineProperty(BitmapBufferBuilder.prototype, "numInvalid", {
        get: function () { return this.length - this.numValid; },
        enumerable: false,
        configurable: true
    });
    BitmapBufferBuilder.prototype.get = function (idx) { return this.buffer[idx >> 3] >> idx % 8 & 1; };
    BitmapBufferBuilder.prototype.set = function (idx, val) {
        var buffer = this.reserve(idx - this.length + 1).buffer;
        var byte = idx >> 3, bit = idx % 8, cur = buffer[byte] >> bit & 1;
        // If `val` is truthy and the current bit is 0, flip it to 1 and increment `numValid`.
        // If `val` is falsey and the current bit is 1, flip it to 0 and decrement `numValid`.
        val ? cur === 0 && ((buffer[byte] |= (1 << bit)), ++this.numValid)
            : cur === 1 && ((buffer[byte] &= ~(1 << bit)), --this.numValid);
        return this;
    };
    BitmapBufferBuilder.prototype.clear = function () {
        this.numValid = 0;
        return _super.prototype.clear.call(this);
    };
    return BitmapBufferBuilder;
}(DataBufferBuilder));
buffer.BitmapBufferBuilder = BitmapBufferBuilder;
/** @ignore */
var OffsetsBufferBuilder = /** @class */ (function (_super) {
    tslib_1$1a.__extends(OffsetsBufferBuilder, _super);
    function OffsetsBufferBuilder(data) {
        if (data === void 0) { data = new Int32Array(1); }
        return _super.call(this, data, 1) || this;
    }
    OffsetsBufferBuilder.prototype.append = function (value) {
        return this.set(this.length - 1, value);
    };
    OffsetsBufferBuilder.prototype.set = function (index, value) {
        var offset = this.length - 1;
        var buffer = this.reserve(index - offset + 1).buffer;
        if (offset < index++) {
            buffer.fill(buffer[offset], offset, index);
        }
        buffer[index] = buffer[index - 1] + value;
        return this;
    };
    OffsetsBufferBuilder.prototype.flush = function (length) {
        if (length === void 0) { length = this.length - 1; }
        if (length > this.length) {
            this.set(length - 1, 0);
        }
        return _super.prototype.flush.call(this, length + 1);
    };
    return OffsetsBufferBuilder;
}(DataBufferBuilder));
buffer.OffsetsBufferBuilder = OffsetsBufferBuilder;
/** @ignore */
var WideBufferBuilder = /** @class */ (function (_super) {
    tslib_1$1a.__extends(WideBufferBuilder, _super);
    function WideBufferBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(WideBufferBuilder.prototype, "ArrayType64", {
        get: function () {
            return this._ArrayType64 || (this._ArrayType64 = (this.buffer instanceof Int32Array ? compat_1$9.BigInt64Array : compat_1$9.BigUint64Array));
        },
        enumerable: false,
        configurable: true
    });
    WideBufferBuilder.prototype.set = function (index, value) {
        this.reserve(index - this.length + 1);
        switch (typeof value) {
            case 'bigint':
                this.buffer64[index] = value;
                break;
            case 'number':
                this.buffer[index * this.stride] = value;
                break;
            default: this.buffer.set(value, index * this.stride);
        }
        return this;
    };
    WideBufferBuilder.prototype._resize = function (newLength) {
        var data = _super.prototype._resize.call(this, newLength);
        var length = data.byteLength / (this.BYTES_PER_ELEMENT * this.stride);
        if (compat_1$9.BigIntAvailable) {
            this.buffer64 = new this.ArrayType64(data.buffer, data.byteOffset, length);
        }
        return data;
    };
    return WideBufferBuilder;
}(BufferBuilder));
buffer.WideBufferBuilder = WideBufferBuilder;

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(builder$1, "__esModule", { value: true });
builder$1.VariableWidthBuilder = builder$1.FixedWidthBuilder = builder$1.Builder = void 0;
var tslib_1$19 = tslib.exports;
var vector_1$i = vector$2;
var enum_1$h = _enum;
var data_1$8 = data$1;
var valid_1 = valid;
var buffer_1$h = buffer;
var type_1$r = type;
/**
 * An abstract base class for types that construct Arrow Vectors from arbitrary JavaScript values.
 *
 * A `Builder` is responsible for writing arbitrary JavaScript values
 * to ArrayBuffers and/or child Builders according to the Arrow specification
 * for each DataType, creating or resizing the underlying ArrayBuffers as necessary.
 *
 * The `Builder` for each Arrow `DataType` handles converting and appending
 * values for a given `DataType`. The high-level {@link Builder.new `Builder.new()`} convenience
 * method creates the specific `Builder` subclass for the supplied `DataType`.
 *
 * Once created, `Builder` instances support both appending values to the end
 * of the `Builder`, and random-access writes to specific indices
 * (`Builder.prototype.append(value)` is a convenience method for
 * `builder.set(builder.length, value)`). Appending or setting values beyond the
 * Builder's current length may cause the builder to grow its underlying buffers
 * or child Builders (if applicable) to accommodate the new values.
 *
 * After enough values have been written to a `Builder`, `Builder.prototype.flush()`
 * will commit the values to the underlying ArrayBuffers (or child Builders). The
 * internal Builder state will be reset, and an instance of `Data<T>` is returned.
 * Alternatively, `Builder.prototype.toVector()` will flush the `Builder` and return
 * an instance of `Vector<T>` instead.
 *
 * When there are no more values to write, use `Builder.prototype.finish()` to
 * finalize the `Builder`. This does not reset the internal state, so it is
 * necessary to call `Builder.prototype.flush()` or `toVector()` one last time
 * if there are still values queued to be flushed.
 *
 * Note: calling `Builder.prototype.finish()` is required when using a `DictionaryBuilder`,
 * because this is when it flushes the values that have been enqueued in its internal
 * dictionary's `Builder`, and creates the `dictionaryVector` for the `Dictionary` `DataType`.
 *
 * ```ts
 * import { Builder, Utf8 } from 'apache-arrow';
 *
 * const utf8Builder = Builder.new({
 *     type: new Utf8(),
 *     nullValues: [null, 'n/a']
 * });
 *
 * utf8Builder
 *     .append('hello')
 *     .append('n/a')
 *     .append('world')
 *     .append(null);
 *
 * const utf8Vector = utf8Builder.finish().toVector();
 *
 * console.log(utf8Vector.toJSON());
 * // > ["hello", null, "world", null]
 * ```
 *
 * @typeparam T The `DataType` of this `Builder`.
 * @typeparam TNull The type(s) of values which will be considered null-value sentinels.
 */
var Builder$2 = /** @class */ (function () {
    /**
     * Construct a builder with the given Arrow DataType with optional null values,
     * which will be interpreted as "null" when set or appended to the `Builder`.
     * @param {{ type: T, nullValues?: any[] }} options A `BuilderOptions` object used to create this `Builder`.
     */
    function Builder(_a) {
        var type = _a["type"], nulls = _a["nullValues"];
        /**
         * The number of values written to the `Builder` that haven't been flushed yet.
         * @readonly
         */
        this.length = 0;
        /**
         * A boolean indicating whether `Builder.prototype.finish()` has been called on this `Builder`.
         * @readonly
         */
        this.finished = false;
        this.type = type;
        this.children = [];
        this.nullValues = nulls;
        this.stride = type_1$r.strideForType(type);
        this._nulls = new buffer_1$h.BitmapBufferBuilder();
        if (nulls && nulls.length > 0) {
            this._isValid = valid_1.createIsValidFunction(nulls);
        }
    }
    /**
     * Create a `Builder` instance based on the `type` property of the supplied `options` object.
     * @param {BuilderOptions<T, TNull>} options An object with a required `DataType` instance
     * and other optional parameters to be passed to the `Builder` subclass for the given `type`.
     *
     * @typeparam T The `DataType` of the `Builder` to create.
     * @typeparam TNull The type(s) of values which will be considered null-value sentinels.
     * @nocollapse
     */
    // @ts-ignore
    Builder.new = function (options) { };
    /** @nocollapse */
    // @ts-ignore
    Builder.throughNode = function (options) {
        throw new Error("\"throughNode\" not available in this environment");
    };
    /** @nocollapse */
    // @ts-ignore
    Builder.throughDOM = function (options) {
        throw new Error("\"throughDOM\" not available in this environment");
    };
    /**
     * Transform a synchronous `Iterable` of arbitrary JavaScript values into a
     * sequence of Arrow Vector<T> following the chunking semantics defined in
     * the supplied `options` argument.
     *
     * This function returns a function that accepts an `Iterable` of values to
     * transform. When called, this function returns an Iterator of `Vector<T>`.
     *
     * The resulting `Iterator<Vector<T>>` yields Vectors based on the
     * `queueingStrategy` and `highWaterMark` specified in the `options` argument.
     *
     * * If `queueingStrategy` is `"count"` (or omitted), The `Iterator<Vector<T>>`
     *   will flush the underlying `Builder` (and yield a new `Vector<T>`) once the
     *   Builder's `length` reaches or exceeds the supplied `highWaterMark`.
     * * If `queueingStrategy` is `"bytes"`, the `Iterator<Vector<T>>` will flush
     *   the underlying `Builder` (and yield a new `Vector<T>`) once its `byteLength`
     *   reaches or exceeds the supplied `highWaterMark`.
     *
     * @param {IterableBuilderOptions<T, TNull>} options An object of properties which determine the `Builder` to create and the chunking semantics to use.
     * @returns A function which accepts a JavaScript `Iterable` of values to
     *          write, and returns an `Iterator` that yields Vectors according
     *          to the chunking semantics defined in the `options` argument.
     * @nocollapse
     */
    Builder.throughIterable = function (options) {
        return throughIterable(options);
    };
    /**
     * Transform an `AsyncIterable` of arbitrary JavaScript values into a
     * sequence of Arrow Vector<T> following the chunking semantics defined in
     * the supplied `options` argument.
     *
     * This function returns a function that accepts an `AsyncIterable` of values to
     * transform. When called, this function returns an AsyncIterator of `Vector<T>`.
     *
     * The resulting `AsyncIterator<Vector<T>>` yields Vectors based on the
     * `queueingStrategy` and `highWaterMark` specified in the `options` argument.
     *
     * * If `queueingStrategy` is `"count"` (or omitted), The `AsyncIterator<Vector<T>>`
     *   will flush the underlying `Builder` (and yield a new `Vector<T>`) once the
     *   Builder's `length` reaches or exceeds the supplied `highWaterMark`.
     * * If `queueingStrategy` is `"bytes"`, the `AsyncIterator<Vector<T>>` will flush
     *   the underlying `Builder` (and yield a new `Vector<T>`) once its `byteLength`
     *   reaches or exceeds the supplied `highWaterMark`.
     *
     * @param {IterableBuilderOptions<T, TNull>} options An object of properties which determine the `Builder` to create and the chunking semantics to use.
     * @returns A function which accepts a JavaScript `AsyncIterable` of values
     *          to write, and returns an `AsyncIterator` that yields Vectors
     *          according to the chunking semantics defined in the `options`
     *          argument.
     * @nocollapse
     */
    Builder.throughAsyncIterable = function (options) {
        return throughAsyncIterable(options);
    };
    /**
     * Flush the `Builder` and return a `Vector<T>`.
     * @returns {Vector<T>} A `Vector<T>` of the flushed values.
     */
    Builder.prototype.toVector = function () { return vector_1$i.Vector.new(this.flush()); };
    Object.defineProperty(Builder.prototype, "ArrayType", {
        get: function () { return this.type.ArrayType; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builder.prototype, "nullCount", {
        get: function () { return this._nulls.numInvalid; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builder.prototype, "numChildren", {
        get: function () { return this.children.length; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builder.prototype, "byteLength", {
        /**
         * @returns The aggregate length (in bytes) of the values that have been written.
         */
        get: function () {
            var size = 0;
            this._offsets && (size += this._offsets.byteLength);
            this._values && (size += this._values.byteLength);
            this._nulls && (size += this._nulls.byteLength);
            this._typeIds && (size += this._typeIds.byteLength);
            return this.children.reduce(function (size, child) { return size + child.byteLength; }, size);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builder.prototype, "reservedLength", {
        /**
         * @returns The aggregate number of rows that have been reserved to write new values.
         */
        get: function () {
            return this._nulls.reservedLength;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builder.prototype, "reservedByteLength", {
        /**
         * @returns The aggregate length (in bytes) that has been reserved to write new values.
         */
        get: function () {
            var size = 0;
            this._offsets && (size += this._offsets.reservedByteLength);
            this._values && (size += this._values.reservedByteLength);
            this._nulls && (size += this._nulls.reservedByteLength);
            this._typeIds && (size += this._typeIds.reservedByteLength);
            return this.children.reduce(function (size, child) { return size + child.reservedByteLength; }, size);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builder.prototype, "valueOffsets", {
        get: function () { return this._offsets ? this._offsets.buffer : null; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builder.prototype, "values", {
        get: function () { return this._values ? this._values.buffer : null; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builder.prototype, "nullBitmap", {
        get: function () { return this._nulls ? this._nulls.buffer : null; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builder.prototype, "typeIds", {
        get: function () { return this._typeIds ? this._typeIds.buffer : null; },
        enumerable: false,
        configurable: true
    });
    /**
     * Appends a value (or null) to this `Builder`.
     * This is equivalent to `builder.set(builder.length, value)`.
     * @param {T['TValue'] | TNull } value The value to append.
     */
    Builder.prototype.append = function (value) { return this.set(this.length, value); };
    /**
     * Validates whether a value is valid (true), or null (false)
     * @param {T['TValue'] | TNull } value The value to compare against null the value representations
     */
    Builder.prototype.isValid = function (value) { return this._isValid(value); };
    /**
     * Write a value (or null-value sentinel) at the supplied index.
     * If the value matches one of the null-value representations, a 1-bit is
     * written to the null `BitmapBufferBuilder`. Otherwise, a 0 is written to
     * the null `BitmapBufferBuilder`, and the value is passed to
     * `Builder.prototype.setValue()`.
     * @param {number} index The index of the value to write.
     * @param {T['TValue'] | TNull } value The value to write at the supplied index.
     * @returns {this} The updated `Builder` instance.
     */
    Builder.prototype.set = function (index, value) {
        if (this.setValid(index, this.isValid(value))) {
            this.setValue(index, value);
        }
        return this;
    };
    /**
     * Write a value to the underlying buffers at the supplied index, bypassing
     * the null-value check. This is a low-level method that
     * @param {number} index
     * @param {T['TValue'] | TNull } value
     */
    Builder.prototype.setValue = function (index, value) { this._setValue(this, index, value); };
    Builder.prototype.setValid = function (index, valid) {
        this.length = this._nulls.set(index, +valid).length;
        return valid;
    };
    // @ts-ignore
    Builder.prototype.addChild = function (child, name) {
        if (name === void 0) { name = "" + this.numChildren; }
        throw new Error("Cannot append children to non-nested type \"" + this.type + "\"");
    };
    /**
     * Retrieve the child `Builder` at the supplied `index`, or null if no child
     * exists at that index.
     * @param {number} index The index of the child `Builder` to retrieve.
     * @returns {Builder | null} The child Builder at the supplied index or null.
     */
    Builder.prototype.getChildAt = function (index) {
        return this.children[index] || null;
    };
    /**
     * Commit all the values that have been written to their underlying
     * ArrayBuffers, including any child Builders if applicable, and reset
     * the internal `Builder` state.
     * @returns A `Data<T>` of the buffers and childData representing the values written.
     */
    Builder.prototype.flush = function () {
        var buffers = [];
        var values = this._values;
        var offsets = this._offsets;
        var typeIds = this._typeIds;
        var _a = this, length = _a.length, nullCount = _a.nullCount;
        if (typeIds) { /* Unions */
            buffers[enum_1$h.BufferType.TYPE] = typeIds.flush(length);
            // DenseUnions
            offsets && (buffers[enum_1$h.BufferType.OFFSET] = offsets.flush(length));
        }
        else if (offsets) { /* Variable-width primitives (Binary, Utf8) and Lists */
            // Binary, Utf8
            values && (buffers[enum_1$h.BufferType.DATA] = values.flush(offsets.last()));
            buffers[enum_1$h.BufferType.OFFSET] = offsets.flush(length);
        }
        else if (values) { /* Fixed-width primitives (Int, Float, Decimal, Time, Timestamp, and Interval) */
            buffers[enum_1$h.BufferType.DATA] = values.flush(length);
        }
        nullCount > 0 && (buffers[enum_1$h.BufferType.VALIDITY] = this._nulls.flush(length));
        var data = data_1$8.Data.new(this.type, 0, length, nullCount, buffers, this.children.map(function (child) { return child.flush(); }));
        this.clear();
        return data;
    };
    /**
     * Finalize this `Builder`, and child builders if applicable.
     * @returns {this} The finalized `Builder` instance.
     */
    Builder.prototype.finish = function () {
        this.finished = true;
        this.children.forEach(function (child) { return child.finish(); });
        return this;
    };
    /**
     * Clear this Builder's internal state, including child Builders if applicable, and reset the length to 0.
     * @returns {this} The cleared `Builder` instance.
     */
    Builder.prototype.clear = function () {
        this.length = 0;
        this._offsets && (this._offsets.clear());
        this._values && (this._values.clear());
        this._nulls && (this._nulls.clear());
        this._typeIds && (this._typeIds.clear());
        this.children.forEach(function (child) { return child.clear(); });
        return this;
    };
    return Builder;
}());
builder$1.Builder = Builder$2;
Builder$2.prototype.length = 1;
Builder$2.prototype.stride = 1;
Builder$2.prototype.children = null;
Builder$2.prototype.finished = false;
Builder$2.prototype.nullValues = null;
Builder$2.prototype._isValid = function () { return true; };
/** @ignore */
var FixedWidthBuilder = /** @class */ (function (_super) {
    tslib_1$19.__extends(FixedWidthBuilder, _super);
    function FixedWidthBuilder(opts) {
        var _this = _super.call(this, opts) || this;
        _this._values = new buffer_1$h.DataBufferBuilder(new _this.ArrayType(0), _this.stride);
        return _this;
    }
    FixedWidthBuilder.prototype.setValue = function (index, value) {
        var values = this._values;
        values.reserve(index - values.length + 1);
        return _super.prototype.setValue.call(this, index, value);
    };
    return FixedWidthBuilder;
}(Builder$2));
builder$1.FixedWidthBuilder = FixedWidthBuilder;
/** @ignore */
var VariableWidthBuilder = /** @class */ (function (_super) {
    tslib_1$19.__extends(VariableWidthBuilder, _super);
    function VariableWidthBuilder(opts) {
        var _this = _super.call(this, opts) || this;
        _this._pendingLength = 0;
        _this._offsets = new buffer_1$h.OffsetsBufferBuilder();
        return _this;
    }
    VariableWidthBuilder.prototype.setValue = function (index, value) {
        var pending = this._pending || (this._pending = new Map());
        var current = pending.get(index);
        current && (this._pendingLength -= current.length);
        this._pendingLength += value.length;
        pending.set(index, value);
    };
    VariableWidthBuilder.prototype.setValid = function (index, isValid) {
        if (!_super.prototype.setValid.call(this, index, isValid)) {
            (this._pending || (this._pending = new Map())).set(index, undefined);
            return false;
        }
        return true;
    };
    VariableWidthBuilder.prototype.clear = function () {
        this._pendingLength = 0;
        this._pending = undefined;
        return _super.prototype.clear.call(this);
    };
    VariableWidthBuilder.prototype.flush = function () {
        this._flush();
        return _super.prototype.flush.call(this);
    };
    VariableWidthBuilder.prototype.finish = function () {
        this._flush();
        return _super.prototype.finish.call(this);
    };
    VariableWidthBuilder.prototype._flush = function () {
        var pending = this._pending;
        var pendingLength = this._pendingLength;
        this._pendingLength = 0;
        this._pending = undefined;
        if (pending && pending.size > 0) {
            this._flushPending(pending, pendingLength);
        }
        return this;
    };
    return VariableWidthBuilder;
}(Builder$2));
builder$1.VariableWidthBuilder = VariableWidthBuilder;
/** @ignore */
function throughIterable(options) {
    var _a = options["queueingStrategy"], queueingStrategy = _a === void 0 ? 'count' : _a;
    var _b = options["highWaterMark"], highWaterMark = _b === void 0 ? queueingStrategy !== 'bytes' ? 1000 : Math.pow(2, 14) : _b;
    var sizeProperty = queueingStrategy !== 'bytes' ? 'length' : 'byteLength';
    return function (source) {
        var numChunks, builder, source_1, source_1_1, value, _a, e_1_1;
        var e_1, _b;
        return tslib_1$19.__generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    numChunks = 0;
                    builder = Builder$2.new(options);
                    _c.label = 1;
                case 1:
                    _c.trys.push([1, 7, 8, 9]);
                    source_1 = tslib_1$19.__values(source), source_1_1 = source_1.next();
                    _c.label = 2;
                case 2:
                    if (!!source_1_1.done) return [3 /*break*/, 6];
                    value = source_1_1.value;
                    if (!(builder.append(value)[sizeProperty] >= highWaterMark)) return [3 /*break*/, 5];
                    _a = ++numChunks;
                    if (!_a) return [3 /*break*/, 4];
                    return [4 /*yield*/, builder.toVector()];
                case 3:
                    _a = (_c.sent());
                    _c.label = 4;
                case 4:
                    _c.label = 5;
                case 5:
                    source_1_1 = source_1.next();
                    return [3 /*break*/, 2];
                case 6: return [3 /*break*/, 9];
                case 7:
                    e_1_1 = _c.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 9];
                case 8:
                    try {
                        if (source_1_1 && !source_1_1.done && (_b = source_1.return)) _b.call(source_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 9:
                    if (!(builder.finish().length > 0 || numChunks === 0)) return [3 /*break*/, 11];
                    return [4 /*yield*/, builder.toVector()];
                case 10:
                    _c.sent();
                    _c.label = 11;
                case 11: return [2 /*return*/];
            }
        });
    };
}
/** @ignore */
function throughAsyncIterable(options) {
    var _a = options["queueingStrategy"], queueingStrategy = _a === void 0 ? 'count' : _a;
    var _b = options["highWaterMark"], highWaterMark = _b === void 0 ? queueingStrategy !== 'bytes' ? 1000 : Math.pow(2, 14) : _b;
    var sizeProperty = queueingStrategy !== 'bytes' ? 'length' : 'byteLength';
    return function (source) {
        return tslib_1$19.__asyncGenerator(this, arguments, function () {
            var numChunks, builder, source_2, source_2_1, value, _a, e_2_1;
            var e_2, _b;
            return tslib_1$19.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        numChunks = 0;
                        builder = Builder$2.new(options);
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 9, 10, 15]);
                        source_2 = tslib_1$19.__asyncValues(source);
                        _c.label = 2;
                    case 2: return [4 /*yield*/, tslib_1$19.__await(source_2.next())];
                    case 3:
                        if (!(source_2_1 = _c.sent(), !source_2_1.done)) return [3 /*break*/, 8];
                        value = source_2_1.value;
                        if (!(builder.append(value)[sizeProperty] >= highWaterMark)) return [3 /*break*/, 7];
                        _a = ++numChunks;
                        if (!_a) return [3 /*break*/, 6];
                        return [4 /*yield*/, tslib_1$19.__await(builder.toVector())];
                    case 4: return [4 /*yield*/, _c.sent()];
                    case 5:
                        _a = (_c.sent());
                        _c.label = 6;
                    case 6:
                        _c.label = 7;
                    case 7: return [3 /*break*/, 2];
                    case 8: return [3 /*break*/, 15];
                    case 9:
                        e_2_1 = _c.sent();
                        e_2 = { error: e_2_1 };
                        return [3 /*break*/, 15];
                    case 10:
                        _c.trys.push([10, , 13, 14]);
                        if (!(source_2_1 && !source_2_1.done && (_b = source_2.return))) return [3 /*break*/, 12];
                        return [4 /*yield*/, tslib_1$19.__await(_b.call(source_2))];
                    case 11:
                        _c.sent();
                        _c.label = 12;
                    case 12: return [3 /*break*/, 14];
                    case 13:
                        if (e_2) throw e_2.error;
                        return [7 /*endfinally*/];
                    case 14: return [7 /*endfinally*/];
                    case 15:
                        if (!(builder.finish().length > 0 || numChunks === 0)) return [3 /*break*/, 18];
                        return [4 /*yield*/, tslib_1$19.__await(builder.toVector())];
                    case 16: return [4 /*yield*/, _c.sent()];
                    case 17:
                        _c.sent();
                        _c.label = 18;
                    case 18: return [2 /*return*/];
                }
            });
        });
    };
}

var bool$1 = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(bool$1, "__esModule", { value: true });
bool$1.BoolBuilder = void 0;
var tslib_1$18 = tslib.exports;
var buffer_1$g = buffer;
var builder_1$h = builder$1;
/** @ignore */
var BoolBuilder = /** @class */ (function (_super) {
    tslib_1$18.__extends(BoolBuilder, _super);
    function BoolBuilder(options) {
        var _this = _super.call(this, options) || this;
        _this._values = new buffer_1$g.BitmapBufferBuilder();
        return _this;
    }
    BoolBuilder.prototype.setValue = function (index, value) {
        this._values.set(index, +value);
    };
    return BoolBuilder;
}(builder_1$h.Builder));
bool$1.BoolBuilder = BoolBuilder;

var _null$1 = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(_null$1, "__esModule", { value: true });
_null$1.NullBuilder = void 0;
var tslib_1$17 = tslib.exports;
var builder_1$g = builder$1;
/** @ignore */
var NullBuilder = /** @class */ (function (_super) {
    tslib_1$17.__extends(NullBuilder, _super);
    function NullBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    // @ts-ignore
    NullBuilder.prototype.setValue = function (index, value) { };
    NullBuilder.prototype.setValid = function (index, valid) {
        this.length = Math.max(index + 1, this.length);
        return valid;
    };
    return NullBuilder;
}(builder_1$g.Builder));
_null$1.NullBuilder = NullBuilder;

var date$1 = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(date$1, "__esModule", { value: true });
date$1.DateMillisecondBuilder = date$1.DateDayBuilder = date$1.DateBuilder = void 0;
var tslib_1$16 = tslib.exports;
var builder_1$f = builder$1;
/** @ignore */
var DateBuilder = /** @class */ (function (_super) {
    tslib_1$16.__extends(DateBuilder, _super);
    function DateBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return DateBuilder;
}(builder_1$f.FixedWidthBuilder));
date$1.DateBuilder = DateBuilder;
/** @ignore */
var DateDayBuilder = /** @class */ (function (_super) {
    tslib_1$16.__extends(DateDayBuilder, _super);
    function DateDayBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return DateDayBuilder;
}(DateBuilder));
date$1.DateDayBuilder = DateDayBuilder;
/** @ignore */
var DateMillisecondBuilder = /** @class */ (function (_super) {
    tslib_1$16.__extends(DateMillisecondBuilder, _super);
    function DateMillisecondBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return DateMillisecondBuilder;
}(DateBuilder));
date$1.DateMillisecondBuilder = DateMillisecondBuilder;

var decimal$1 = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(decimal$1, "__esModule", { value: true });
decimal$1.DecimalBuilder = void 0;
var tslib_1$15 = tslib.exports;
var builder_1$e = builder$1;
/** @ignore */
var DecimalBuilder = /** @class */ (function (_super) {
    tslib_1$15.__extends(DecimalBuilder, _super);
    function DecimalBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return DecimalBuilder;
}(builder_1$e.FixedWidthBuilder));
decimal$1.DecimalBuilder = DecimalBuilder;

var dictionary$1 = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(dictionary$1, "__esModule", { value: true });
dictionary$1.DictionaryBuilder = void 0;
var tslib_1$14 = tslib.exports;
var type_1$q = type;
var builder_1$d = builder$1;
/** @ignore */
var DictionaryBuilder = /** @class */ (function (_super) {
    tslib_1$14.__extends(DictionaryBuilder, _super);
    function DictionaryBuilder(_a) {
        var type = _a["type"], nulls = _a["nullValues"], hashFn = _a["dictionaryHashFunction"];
        var _this = _super.call(this, { type: new type_1$q.Dictionary(type.dictionary, type.indices, type.id, type.isOrdered) }) || this;
        _this._nulls = null;
        _this._dictionaryOffset = 0;
        _this._keysToIndices = Object.create(null);
        _this.indices = builder_1$d.Builder.new({ 'type': _this.type.indices, 'nullValues': nulls });
        _this.dictionary = builder_1$d.Builder.new({ 'type': _this.type.dictionary, 'nullValues': null });
        if (typeof hashFn === 'function') {
            _this.valueToKey = hashFn;
        }
        return _this;
    }
    Object.defineProperty(DictionaryBuilder.prototype, "values", {
        get: function () { return this.indices.values; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DictionaryBuilder.prototype, "nullCount", {
        get: function () { return this.indices.nullCount; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DictionaryBuilder.prototype, "nullBitmap", {
        get: function () { return this.indices.nullBitmap; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DictionaryBuilder.prototype, "byteLength", {
        get: function () { return this.indices.byteLength + this.dictionary.byteLength; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DictionaryBuilder.prototype, "reservedLength", {
        get: function () { return this.indices.reservedLength + this.dictionary.reservedLength; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DictionaryBuilder.prototype, "reservedByteLength", {
        get: function () { return this.indices.reservedByteLength + this.dictionary.reservedByteLength; },
        enumerable: false,
        configurable: true
    });
    DictionaryBuilder.prototype.isValid = function (value) { return this.indices.isValid(value); };
    DictionaryBuilder.prototype.setValid = function (index, valid) {
        var indices = this.indices;
        valid = indices.setValid(index, valid);
        this.length = indices.length;
        return valid;
    };
    DictionaryBuilder.prototype.setValue = function (index, value) {
        var keysToIndices = this._keysToIndices;
        var key = this.valueToKey(value);
        var idx = keysToIndices[key];
        if (idx === undefined) {
            keysToIndices[key] = idx = this._dictionaryOffset + this.dictionary.append(value).length - 1;
        }
        return this.indices.setValue(index, idx);
    };
    DictionaryBuilder.prototype.flush = function () {
        var type = this.type;
        var prev = this._dictionary;
        var curr = this.dictionary.toVector();
        var data = this.indices.flush().clone(type);
        data.dictionary = prev ? prev.concat(curr) : curr;
        this.finished || (this._dictionaryOffset += curr.length);
        this._dictionary = data.dictionary;
        this.clear();
        return data;
    };
    DictionaryBuilder.prototype.finish = function () {
        this.indices.finish();
        this.dictionary.finish();
        this._dictionaryOffset = 0;
        this._keysToIndices = Object.create(null);
        return _super.prototype.finish.call(this);
    };
    DictionaryBuilder.prototype.clear = function () {
        this.indices.clear();
        this.dictionary.clear();
        return _super.prototype.clear.call(this);
    };
    DictionaryBuilder.prototype.valueToKey = function (val) {
        return typeof val === 'string' ? val : "" + val;
    };
    return DictionaryBuilder;
}(builder_1$d.Builder));
dictionary$1.DictionaryBuilder = DictionaryBuilder;

var fixedsizebinary$1 = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(fixedsizebinary$1, "__esModule", { value: true });
fixedsizebinary$1.FixedSizeBinaryBuilder = void 0;
var tslib_1$13 = tslib.exports;
var builder_1$c = builder$1;
/** @ignore */
var FixedSizeBinaryBuilder = /** @class */ (function (_super) {
    tslib_1$13.__extends(FixedSizeBinaryBuilder, _super);
    function FixedSizeBinaryBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return FixedSizeBinaryBuilder;
}(builder_1$c.FixedWidthBuilder));
fixedsizebinary$1.FixedSizeBinaryBuilder = FixedSizeBinaryBuilder;

var float$1 = {};

var math = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(math, "__esModule", { value: true });
math.float64ToUint16 = math.uint16ToFloat64 = void 0;
var f64 = new Float64Array(1);
var u32 = new Uint32Array(f64.buffer);
/**
 * Convert uint16 (logically a float16) to a JS float64. Inspired by numpy's `npy_half_to_double`:
 * https://github.com/numpy/numpy/blob/5a5987291dc95376bb098be8d8e5391e89e77a2c/numpy/core/src/npymath/halffloat.c#L29
 * @param h {number} the uint16 to convert
 * @private
 * @ignore
 */
function uint16ToFloat64(h) {
    var expo = (h & 0x7C00) >> 10;
    var sigf = (h & 0x03FF) / 1024;
    var sign = Math.pow((-1), ((h & 0x8000) >> 15));
    switch (expo) {
        case 0x1F: return sign * (sigf ? NaN : 1 / 0);
        case 0x00: return sign * (sigf ? 6.103515625e-5 * sigf : 0);
    }
    return sign * (Math.pow(2, (expo - 15))) * (1 + sigf);
}
math.uint16ToFloat64 = uint16ToFloat64;
/**
 * Convert a float64 to uint16 (assuming the float64 is logically a float16). Inspired by numpy's `npy_double_to_half`:
 * https://github.com/numpy/numpy/blob/5a5987291dc95376bb098be8d8e5391e89e77a2c/numpy/core/src/npymath/halffloat.c#L43
 * @param d {number} The float64 to convert
 * @private
 * @ignore
 */
function float64ToUint16(d) {
    if (d !== d) {
        return 0x7E00;
    } // NaN
    f64[0] = d;
    // Magic numbers:
    // 0x80000000 = 10000000 00000000 00000000 00000000 -- masks the 32nd bit
    // 0x7ff00000 = 01111111 11110000 00000000 00000000 -- masks the 21st-31st bits
    // 0x000fffff = 00000000 00001111 11111111 11111111 -- masks the 1st-20th bit
    var sign = (u32[1] & 0x80000000) >> 16 & 0xFFFF;
    var expo = (u32[1] & 0x7ff00000), sigf = 0x0000;
    if (expo >= 0x40f00000) {
        //
        // If exponent overflowed, the float16 is either NaN or Infinity.
        // Rules to propagate the sign bit: mantissa > 0 ? NaN : +/-Infinity
        //
        // Magic numbers:
        // 0x40F00000 = 01000000 11110000 00000000 00000000 -- 6-bit exponent overflow
        // 0x7C000000 = 01111100 00000000 00000000 00000000 -- masks the 27th-31st bits
        //
        // returns:
        // qNaN, aka 32256 decimal, 0x7E00 hex, or 01111110 00000000 binary
        // sNaN, aka 32000 decimal, 0x7D00 hex, or 01111101 00000000 binary
        // +inf, aka 31744 decimal, 0x7C00 hex, or 01111100 00000000 binary
        // -inf, aka 64512 decimal, 0xFC00 hex, or 11111100 00000000 binary
        //
        // If mantissa is greater than 23 bits, set to +Infinity like numpy
        if (u32[0] > 0) {
            expo = 0x7C00;
        }
        else {
            expo = (expo & 0x7C000000) >> 16;
            sigf = (u32[1] & 0x000fffff) >> 10;
        }
    }
    else if (expo <= 0x3f000000) {
        //
        // If exponent underflowed, the float is either signed zero or subnormal.
        //
        // Magic numbers:
        // 0x3F000000 = 00111111 00000000 00000000 00000000 -- 6-bit exponent underflow
        //
        sigf = 0x100000 + (u32[1] & 0x000fffff);
        sigf = 0x100000 + (sigf << ((expo >> 20) - 998)) >> 21;
        expo = 0;
    }
    else {
        //
        // No overflow or underflow, rebase the exponent and round the mantissa
        // Magic numbers:
        // 0x200 = 00000010 00000000 -- masks off the 10th bit
        //
        // Ensure the first mantissa bit (the 10th one) is 1 and round
        expo = (expo - 0x3f000000) >> 10;
        sigf = ((u32[1] & 0x000fffff) + 0x200) >> 10;
    }
    return sign | expo | sigf & 0xFFFF;
}
math.float64ToUint16 = float64ToUint16;

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(float$1, "__esModule", { value: true });
float$1.Float64Builder = float$1.Float32Builder = float$1.Float16Builder = float$1.FloatBuilder = void 0;
var tslib_1$12 = tslib.exports;
var math_1$2 = math;
var builder_1$b = builder$1;
/** @ignore */
var FloatBuilder = /** @class */ (function (_super) {
    tslib_1$12.__extends(FloatBuilder, _super);
    function FloatBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return FloatBuilder;
}(builder_1$b.FixedWidthBuilder));
float$1.FloatBuilder = FloatBuilder;
/** @ignore */
var Float16Builder = /** @class */ (function (_super) {
    tslib_1$12.__extends(Float16Builder, _super);
    function Float16Builder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Float16Builder.prototype.setValue = function (index, value) {
        // convert JS float64 to a uint16
        this._values.set(index, math_1$2.float64ToUint16(value));
    };
    return Float16Builder;
}(FloatBuilder));
float$1.Float16Builder = Float16Builder;
/** @ignore */
var Float32Builder = /** @class */ (function (_super) {
    tslib_1$12.__extends(Float32Builder, _super);
    function Float32Builder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Float32Builder.prototype.setValue = function (index, value) {
        this._values.set(index, value);
    };
    return Float32Builder;
}(FloatBuilder));
float$1.Float32Builder = Float32Builder;
/** @ignore */
var Float64Builder = /** @class */ (function (_super) {
    tslib_1$12.__extends(Float64Builder, _super);
    function Float64Builder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Float64Builder.prototype.setValue = function (index, value) {
        this._values.set(index, value);
    };
    return Float64Builder;
}(FloatBuilder));
float$1.Float64Builder = Float64Builder;

var int$2 = {};

var bn = {};

(function (exports) {
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.BN = exports.bignumToBigInt = exports.bignumToString = exports.isArrowBigNumSymbol = void 0;
var tslib_1 = tslib.exports;
var buffer_1 = buffer$1;
var compat_1 = compat;
/** @ignore */
exports.isArrowBigNumSymbol = Symbol.for('isArrowBigNum');
/** @ignore */
function BigNum(x) {
    var _a;
    var xs = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        xs[_i - 1] = arguments[_i];
    }
    if (xs.length === 0) {
        return Object.setPrototypeOf(buffer_1.toArrayBufferView(this['TypedArray'], x), this.constructor.prototype);
    }
    return Object.setPrototypeOf(new ((_a = this['TypedArray']).bind.apply(_a, tslib_1.__spread([void 0, x], xs)))(), this.constructor.prototype);
}
BigNum.prototype[exports.isArrowBigNumSymbol] = true;
BigNum.prototype.toJSON = function () { return "\"" + exports.bignumToString(this) + "\""; };
BigNum.prototype.valueOf = function () { return bignumToNumber(this); };
BigNum.prototype.toString = function () { return exports.bignumToString(this); };
BigNum.prototype[Symbol.toPrimitive] = function (hint) {
    if (hint === void 0) { hint = 'default'; }
    switch (hint) {
        case 'number': return bignumToNumber(this);
        case 'string': return exports.bignumToString(this);
        case 'default': return exports.bignumToBigInt(this);
    }
    // @ts-ignore
    return exports.bignumToString(this);
};
/** @ignore */
function SignedBigNum() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return BigNum.apply(this, args);
}
/** @ignore */
function UnsignedBigNum() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return BigNum.apply(this, args);
}
/** @ignore */
function DecimalBigNum() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return BigNum.apply(this, args);
}
Object.setPrototypeOf(SignedBigNum.prototype, Object.create(Int32Array.prototype));
Object.setPrototypeOf(UnsignedBigNum.prototype, Object.create(Uint32Array.prototype));
Object.setPrototypeOf(DecimalBigNum.prototype, Object.create(Uint32Array.prototype));
Object.assign(SignedBigNum.prototype, BigNum.prototype, { 'constructor': SignedBigNum, 'signed': true, 'TypedArray': Int32Array, 'BigIntArray': compat_1.BigInt64Array });
Object.assign(UnsignedBigNum.prototype, BigNum.prototype, { 'constructor': UnsignedBigNum, 'signed': false, 'TypedArray': Uint32Array, 'BigIntArray': compat_1.BigUint64Array });
Object.assign(DecimalBigNum.prototype, BigNum.prototype, { 'constructor': DecimalBigNum, 'signed': true, 'TypedArray': Uint32Array, 'BigIntArray': compat_1.BigUint64Array });
/** @ignore */
function bignumToNumber(bn) {
    var buffer = bn.buffer, byteOffset = bn.byteOffset, length = bn.length, signed = bn["signed"];
    var words = new Int32Array(buffer, byteOffset, length);
    var number = 0, i = 0;
    var n = words.length;
    var hi, lo;
    while (i < n) {
        lo = words[i++];
        hi = words[i++];
        signed || (hi = hi >>> 0);
        number += (lo >>> 0) + (hi * (Math.pow(i, 32)));
    }
    return number;
}
if (!compat_1.BigIntAvailable) {
    exports.bignumToString = decimalToString;
    exports.bignumToBigInt = exports.bignumToString;
}
else {
    exports.bignumToBigInt = (function (a) { return a.byteLength === 8 ? new a['BigIntArray'](a.buffer, a.byteOffset, 1)[0] : decimalToString(a); });
    exports.bignumToString = (function (a) { return a.byteLength === 8 ? "" + new a['BigIntArray'](a.buffer, a.byteOffset, 1)[0] : decimalToString(a); });
}
/** @ignore */
function decimalToString(a) {
    var digits = '';
    var base64 = new Uint32Array(2);
    var base32 = new Uint16Array(a.buffer, a.byteOffset, a.byteLength / 2);
    var checks = new Uint32Array((base32 = new Uint16Array(base32).reverse()).buffer);
    var i = -1;
    var n = base32.length - 1;
    do {
        for (base64[0] = base32[i = 0]; i < n;) {
            base32[i++] = base64[1] = base64[0] / 10;
            base64[0] = ((base64[0] - base64[1] * 10) << 16) + base32[i];
        }
        base32[i] = base64[1] = base64[0] / 10;
        base64[0] = base64[0] - base64[1] * 10;
        digits = "" + base64[0] + digits;
    } while (checks[0] || checks[1] || checks[2] || checks[3]);
    return digits ? digits : "0";
}
/** @ignore */
var BN = /** @class */ (function () {
    function BN(num, isSigned) {
        return BN.new(num, isSigned);
    }
    /** @nocollapse */
    BN.new = function (num, isSigned) {
        switch (isSigned) {
            case true: return new SignedBigNum(num);
            case false: return new UnsignedBigNum(num);
        }
        switch (num.constructor) {
            case Int8Array:
            case Int16Array:
            case Int32Array:
            case compat_1.BigInt64Array:
                return new SignedBigNum(num);
        }
        if (num.byteLength === 16) {
            return new DecimalBigNum(num);
        }
        return new UnsignedBigNum(num);
    };
    /** @nocollapse */
    BN.signed = function (num) {
        return new SignedBigNum(num);
    };
    /** @nocollapse */
    BN.unsigned = function (num) {
        return new UnsignedBigNum(num);
    };
    /** @nocollapse */
    BN.decimal = function (num) {
        return new DecimalBigNum(num);
    };
    return BN;
}());
exports.BN = BN;


}(bn));

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(int$2, "__esModule", { value: true });
int$2.Uint64Builder = int$2.Uint32Builder = int$2.Uint16Builder = int$2.Uint8Builder = int$2.Int64Builder = int$2.Int32Builder = int$2.Int16Builder = int$2.Int8Builder = int$2.IntBuilder = void 0;
var tslib_1$11 = tslib.exports;
var bn_1$2 = bn;
var buffer_1$f = buffer;
var compat_1$8 = compat;
var builder_1$a = builder$1;
/** @ignore */
var IntBuilder = /** @class */ (function (_super) {
    tslib_1$11.__extends(IntBuilder, _super);
    function IntBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IntBuilder.prototype.setValue = function (index, value) {
        this._values.set(index, value);
    };
    return IntBuilder;
}(builder_1$a.FixedWidthBuilder));
int$2.IntBuilder = IntBuilder;
/** @ignore */
var Int8Builder = /** @class */ (function (_super) {
    tslib_1$11.__extends(Int8Builder, _super);
    function Int8Builder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Int8Builder;
}(IntBuilder));
int$2.Int8Builder = Int8Builder;
/** @ignore */
var Int16Builder = /** @class */ (function (_super) {
    tslib_1$11.__extends(Int16Builder, _super);
    function Int16Builder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Int16Builder;
}(IntBuilder));
int$2.Int16Builder = Int16Builder;
/** @ignore */
var Int32Builder = /** @class */ (function (_super) {
    tslib_1$11.__extends(Int32Builder, _super);
    function Int32Builder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Int32Builder;
}(IntBuilder));
int$2.Int32Builder = Int32Builder;
/** @ignore */
var Int64Builder = /** @class */ (function (_super) {
    tslib_1$11.__extends(Int64Builder, _super);
    function Int64Builder(options) {
        var _this = this;
        if (options['nullValues']) {
            options['nullValues'] = options['nullValues'].map(toBigInt);
        }
        _this = _super.call(this, options) || this;
        _this._values = new buffer_1$f.WideBufferBuilder(new Int32Array(0), 2);
        return _this;
    }
    Object.defineProperty(Int64Builder.prototype, "values64", {
        get: function () { return this._values.buffer64; },
        enumerable: false,
        configurable: true
    });
    Int64Builder.prototype.isValid = function (value) { return _super.prototype.isValid.call(this, toBigInt(value)); };
    return Int64Builder;
}(IntBuilder));
int$2.Int64Builder = Int64Builder;
/** @ignore */
var Uint8Builder = /** @class */ (function (_super) {
    tslib_1$11.__extends(Uint8Builder, _super);
    function Uint8Builder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Uint8Builder;
}(IntBuilder));
int$2.Uint8Builder = Uint8Builder;
/** @ignore */
var Uint16Builder = /** @class */ (function (_super) {
    tslib_1$11.__extends(Uint16Builder, _super);
    function Uint16Builder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Uint16Builder;
}(IntBuilder));
int$2.Uint16Builder = Uint16Builder;
/** @ignore */
var Uint32Builder = /** @class */ (function (_super) {
    tslib_1$11.__extends(Uint32Builder, _super);
    function Uint32Builder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Uint32Builder;
}(IntBuilder));
int$2.Uint32Builder = Uint32Builder;
/** @ignore */
var Uint64Builder = /** @class */ (function (_super) {
    tslib_1$11.__extends(Uint64Builder, _super);
    function Uint64Builder(options) {
        var _this = this;
        if (options['nullValues']) {
            options['nullValues'] = options['nullValues'].map(toBigInt);
        }
        _this = _super.call(this, options) || this;
        _this._values = new buffer_1$f.WideBufferBuilder(new Uint32Array(0), 2);
        return _this;
    }
    Object.defineProperty(Uint64Builder.prototype, "values64", {
        get: function () { return this._values.buffer64; },
        enumerable: false,
        configurable: true
    });
    Uint64Builder.prototype.isValid = function (value) { return _super.prototype.isValid.call(this, toBigInt(value)); };
    return Uint64Builder;
}(IntBuilder));
int$2.Uint64Builder = Uint64Builder;
var toBigInt = (function (memo) { return function (value) {
    if (ArrayBuffer.isView(value)) {
        memo.buffer = value.buffer;
        memo.byteOffset = value.byteOffset;
        memo.byteLength = value.byteLength;
        value = bn_1$2.bignumToBigInt(memo);
        memo.buffer = null;
    }
    return value;
}; })({ 'BigIntArray': compat_1$8.BigInt64Array });

var time$1 = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(time$1, "__esModule", { value: true });
time$1.TimeNanosecondBuilder = time$1.TimeMicrosecondBuilder = time$1.TimeMillisecondBuilder = time$1.TimeSecondBuilder = time$1.TimeBuilder = void 0;
var tslib_1$10 = tslib.exports;
var builder_1$9 = builder$1;
/** @ignore */
var TimeBuilder = /** @class */ (function (_super) {
    tslib_1$10.__extends(TimeBuilder, _super);
    function TimeBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return TimeBuilder;
}(builder_1$9.FixedWidthBuilder));
time$1.TimeBuilder = TimeBuilder;
/** @ignore */
var TimeSecondBuilder = /** @class */ (function (_super) {
    tslib_1$10.__extends(TimeSecondBuilder, _super);
    function TimeSecondBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return TimeSecondBuilder;
}(TimeBuilder));
time$1.TimeSecondBuilder = TimeSecondBuilder;
/** @ignore */
var TimeMillisecondBuilder = /** @class */ (function (_super) {
    tslib_1$10.__extends(TimeMillisecondBuilder, _super);
    function TimeMillisecondBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return TimeMillisecondBuilder;
}(TimeBuilder));
time$1.TimeMillisecondBuilder = TimeMillisecondBuilder;
/** @ignore */
var TimeMicrosecondBuilder = /** @class */ (function (_super) {
    tslib_1$10.__extends(TimeMicrosecondBuilder, _super);
    function TimeMicrosecondBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return TimeMicrosecondBuilder;
}(TimeBuilder));
time$1.TimeMicrosecondBuilder = TimeMicrosecondBuilder;
/** @ignore */
var TimeNanosecondBuilder = /** @class */ (function (_super) {
    tslib_1$10.__extends(TimeNanosecondBuilder, _super);
    function TimeNanosecondBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return TimeNanosecondBuilder;
}(TimeBuilder));
time$1.TimeNanosecondBuilder = TimeNanosecondBuilder;

var timestamp$1 = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(timestamp$1, "__esModule", { value: true });
timestamp$1.TimestampNanosecondBuilder = timestamp$1.TimestampMicrosecondBuilder = timestamp$1.TimestampMillisecondBuilder = timestamp$1.TimestampSecondBuilder = timestamp$1.TimestampBuilder = void 0;
var tslib_1$$ = tslib.exports;
var builder_1$8 = builder$1;
/** @ignore */
var TimestampBuilder = /** @class */ (function (_super) {
    tslib_1$$.__extends(TimestampBuilder, _super);
    function TimestampBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return TimestampBuilder;
}(builder_1$8.FixedWidthBuilder));
timestamp$1.TimestampBuilder = TimestampBuilder;
/** @ignore */
var TimestampSecondBuilder = /** @class */ (function (_super) {
    tslib_1$$.__extends(TimestampSecondBuilder, _super);
    function TimestampSecondBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return TimestampSecondBuilder;
}(TimestampBuilder));
timestamp$1.TimestampSecondBuilder = TimestampSecondBuilder;
/** @ignore */
var TimestampMillisecondBuilder = /** @class */ (function (_super) {
    tslib_1$$.__extends(TimestampMillisecondBuilder, _super);
    function TimestampMillisecondBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return TimestampMillisecondBuilder;
}(TimestampBuilder));
timestamp$1.TimestampMillisecondBuilder = TimestampMillisecondBuilder;
/** @ignore */
var TimestampMicrosecondBuilder = /** @class */ (function (_super) {
    tslib_1$$.__extends(TimestampMicrosecondBuilder, _super);
    function TimestampMicrosecondBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return TimestampMicrosecondBuilder;
}(TimestampBuilder));
timestamp$1.TimestampMicrosecondBuilder = TimestampMicrosecondBuilder;
/** @ignore */
var TimestampNanosecondBuilder = /** @class */ (function (_super) {
    tslib_1$$.__extends(TimestampNanosecondBuilder, _super);
    function TimestampNanosecondBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return TimestampNanosecondBuilder;
}(TimestampBuilder));
timestamp$1.TimestampNanosecondBuilder = TimestampNanosecondBuilder;

var interval$1 = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(interval$1, "__esModule", { value: true });
interval$1.IntervalYearMonthBuilder = interval$1.IntervalDayTimeBuilder = interval$1.IntervalBuilder = void 0;
var tslib_1$_ = tslib.exports;
var builder_1$7 = builder$1;
/** @ignore */
var IntervalBuilder = /** @class */ (function (_super) {
    tslib_1$_.__extends(IntervalBuilder, _super);
    function IntervalBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return IntervalBuilder;
}(builder_1$7.FixedWidthBuilder));
interval$1.IntervalBuilder = IntervalBuilder;
/** @ignore */
var IntervalDayTimeBuilder = /** @class */ (function (_super) {
    tslib_1$_.__extends(IntervalDayTimeBuilder, _super);
    function IntervalDayTimeBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return IntervalDayTimeBuilder;
}(IntervalBuilder));
interval$1.IntervalDayTimeBuilder = IntervalDayTimeBuilder;
/** @ignore */
var IntervalYearMonthBuilder = /** @class */ (function (_super) {
    tslib_1$_.__extends(IntervalYearMonthBuilder, _super);
    function IntervalYearMonthBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return IntervalYearMonthBuilder;
}(IntervalBuilder));
interval$1.IntervalYearMonthBuilder = IntervalYearMonthBuilder;

var utf8$1 = {};

var binary$1 = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(binary$1, "__esModule", { value: true });
binary$1.BinaryBuilder = void 0;
var tslib_1$Z = tslib.exports;
var buffer_1$e = buffer$1;
var buffer_2 = buffer;
var builder_1$6 = builder$1;
/** @ignore */
var BinaryBuilder = /** @class */ (function (_super) {
    tslib_1$Z.__extends(BinaryBuilder, _super);
    function BinaryBuilder(opts) {
        var _this = _super.call(this, opts) || this;
        _this._values = new buffer_2.BufferBuilder(new Uint8Array(0));
        return _this;
    }
    Object.defineProperty(BinaryBuilder.prototype, "byteLength", {
        get: function () {
            var size = this._pendingLength + (this.length * 4);
            this._offsets && (size += this._offsets.byteLength);
            this._values && (size += this._values.byteLength);
            this._nulls && (size += this._nulls.byteLength);
            return size;
        },
        enumerable: false,
        configurable: true
    });
    BinaryBuilder.prototype.setValue = function (index, value) {
        return _super.prototype.setValue.call(this, index, buffer_1$e.toUint8Array(value));
    };
    BinaryBuilder.prototype._flushPending = function (pending, pendingLength) {
        var e_1, _a, _b;
        var offsets = this._offsets;
        var data = this._values.reserve(pendingLength).buffer;
        var index = 0, length = 0, offset = 0, value;
        try {
            for (var pending_1 = tslib_1$Z.__values(pending), pending_1_1 = pending_1.next(); !pending_1_1.done; pending_1_1 = pending_1.next()) {
                _b = tslib_1$Z.__read(pending_1_1.value, 2), index = _b[0], value = _b[1];
                if (value === undefined) {
                    offsets.set(index, 0);
                }
                else {
                    length = value.length;
                    data.set(value, offset);
                    offsets.set(index, length);
                    offset += length;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (pending_1_1 && !pending_1_1.done && (_a = pending_1.return)) _a.call(pending_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    return BinaryBuilder;
}(builder_1$6.VariableWidthBuilder));
binary$1.BinaryBuilder = BinaryBuilder;

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(utf8$1, "__esModule", { value: true });
utf8$1.Utf8Builder = void 0;
var tslib_1$Y = tslib.exports;
var utf8_1$6 = utf8$2;
var binary_1$2 = binary$1;
var buffer_1$d = buffer;
var builder_1$5 = builder$1;
/** @ignore */
var Utf8Builder = /** @class */ (function (_super) {
    tslib_1$Y.__extends(Utf8Builder, _super);
    function Utf8Builder(opts) {
        var _this = _super.call(this, opts) || this;
        _this._values = new buffer_1$d.BufferBuilder(new Uint8Array(0));
        return _this;
    }
    Object.defineProperty(Utf8Builder.prototype, "byteLength", {
        get: function () {
            var size = this._pendingLength + (this.length * 4);
            this._offsets && (size += this._offsets.byteLength);
            this._values && (size += this._values.byteLength);
            this._nulls && (size += this._nulls.byteLength);
            return size;
        },
        enumerable: false,
        configurable: true
    });
    Utf8Builder.prototype.setValue = function (index, value) {
        return _super.prototype.setValue.call(this, index, utf8_1$6.encodeUtf8(value));
    };
    // @ts-ignore
    Utf8Builder.prototype._flushPending = function (pending, pendingLength) { };
    return Utf8Builder;
}(builder_1$5.VariableWidthBuilder));
utf8$1.Utf8Builder = Utf8Builder;
Utf8Builder.prototype._flushPending = binary_1$2.BinaryBuilder.prototype._flushPending;

var list$1 = {};

var run = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(run, "__esModule", { value: true });
run.Run = void 0;
var vector_1$h = vector$2;
/** @ignore */
var Run = /** @class */ (function () {
    function Run() {
    }
    Object.defineProperty(Run.prototype, "length", {
        get: function () { return this._values.length; },
        enumerable: false,
        configurable: true
    });
    Run.prototype.get = function (index) { return this._values[index]; };
    Run.prototype.clear = function () { this._values = null; return this; };
    Run.prototype.bind = function (values) {
        if (values instanceof vector_1$h.Vector) {
            return values;
        }
        this._values = values;
        return this;
    };
    return Run;
}());
run.Run = Run;

var schema = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(schema, "__esModule", { value: true });
schema.Field = schema.Schema = void 0;
var tslib_1$X = tslib.exports;
var type_1$p = type;
var Schema = /** @class */ (function () {
    function Schema(fields, metadata, dictionaries) {
        if (fields === void 0) { fields = []; }
        this.fields = (fields || []);
        this.metadata = metadata || new Map();
        if (!dictionaries) {
            dictionaries = generateDictionaryMap(fields);
        }
        this.dictionaries = dictionaries;
    }
    Object.defineProperty(Schema.prototype, Symbol.toStringTag, {
        get: function () { return 'Schema'; },
        enumerable: false,
        configurable: true
    });
    Schema.prototype.toString = function () {
        return "Schema<{ " + this.fields.map(function (f, i) { return i + ": " + f; }).join(', ') + " }>";
    };
    Schema.prototype.select = function () {
        var columnNames = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            columnNames[_i] = arguments[_i];
        }
        var names = columnNames.reduce(function (xs, x) { return (xs[x] = true) && xs; }, Object.create(null));
        return new Schema(this.fields.filter(function (f) { return names[f.name]; }), this.metadata);
    };
    Schema.prototype.selectAt = function () {
        var _this = this;
        var columnIndices = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            columnIndices[_i] = arguments[_i];
        }
        return new Schema(columnIndices.map(function (i) { return _this.fields[i]; }).filter(Boolean), this.metadata);
    };
    Schema.prototype.assign = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var other = (args[0] instanceof Schema
            ? args[0]
            : Array.isArray(args[0])
                ? new Schema(args[0])
                : new Schema(args));
        var curFields = tslib_1$X.__spread(this.fields);
        var metadata = mergeMaps(mergeMaps(new Map(), this.metadata), other.metadata);
        var newFields = other.fields.filter(function (f2) {
            var i = curFields.findIndex(function (f) { return f.name === f2.name; });
            return ~i ? (curFields[i] = f2.clone({
                metadata: mergeMaps(mergeMaps(new Map(), curFields[i].metadata), f2.metadata)
            })) && false : true;
        });
        var newDictionaries = generateDictionaryMap(newFields, new Map());
        return new Schema(tslib_1$X.__spread(curFields, newFields), metadata, new Map(tslib_1$X.__spread(this.dictionaries, newDictionaries)));
    };
    return Schema;
}());
schema.Schema = Schema;
var Field = /** @class */ (function () {
    function Field(name, type, nullable, metadata) {
        if (nullable === void 0) { nullable = false; }
        this.name = name;
        this.type = type;
        this.nullable = nullable;
        this.metadata = metadata || new Map();
    }
    /** @nocollapse */
    Field.new = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _a = tslib_1$X.__read(args, 4), name = _a[0], type = _a[1], nullable = _a[2], metadata = _a[3];
        if (args[0] && typeof args[0] === 'object') {
            (name = args[0].name);
            (type === undefined) && (type = args[0].type);
            (nullable === undefined) && (nullable = args[0].nullable);
            (metadata === undefined) && (metadata = args[0].metadata);
        }
        return new Field("" + name, type, nullable, metadata);
    };
    Object.defineProperty(Field.prototype, "typeId", {
        get: function () { return this.type.typeId; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Field.prototype, Symbol.toStringTag, {
        get: function () { return 'Field'; },
        enumerable: false,
        configurable: true
    });
    Field.prototype.toString = function () { return this.name + ": " + this.type; };
    Field.prototype.clone = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _l = tslib_1$X.__read(args, 4), name = _l[0], type = _l[1], nullable = _l[2], metadata = _l[3];
        (!args[0] || typeof args[0] !== 'object')
            ? (_a = tslib_1$X.__read(args, 4), _b = _a[0], name = _b === void 0 ? this.name : _b, _c = _a[1], type = _c === void 0 ? this.type : _c, _d = _a[2], nullable = _d === void 0 ? this.nullable : _d, _e = _a[3], metadata = _e === void 0 ? this.metadata : _e, args)
            : (_f = args[0], _g = _f.name, name = _g === void 0 ? this.name : _g, _h = _f.type, type = _h === void 0 ? this.type : _h, _j = _f.nullable, nullable = _j === void 0 ? this.nullable : _j, _k = _f.metadata, metadata = _k === void 0 ? this.metadata : _k, _f);
        return Field.new(name, type, nullable, metadata);
    };
    return Field;
}());
schema.Field = Field;
/** @ignore */
function mergeMaps(m1, m2) {
    return new Map(tslib_1$X.__spread((m1 || new Map()), (m2 || new Map())));
}
/** @ignore */
function generateDictionaryMap(fields, dictionaries) {
    if (dictionaries === void 0) { dictionaries = new Map(); }
    for (var i = -1, n = fields.length; ++i < n;) {
        var field = fields[i];
        var type = field.type;
        if (type_1$p.DataType.isDictionary(type)) {
            if (!dictionaries.has(type.id)) {
                dictionaries.set(type.id, type.dictionary);
            }
            else if (dictionaries.get(type.id) !== type.dictionary) {
                throw new Error("Cannot create Schema containing two different dictionaries with the same Id");
            }
        }
        if (type.children && type.children.length > 0) {
            generateDictionaryMap(type.children, dictionaries);
        }
    }
    return dictionaries;
}
// Add these here so they're picked up by the externs creator
// in the build, and closure-compiler doesn't minify them away
Schema.prototype.fields = null;
Schema.prototype.metadata = null;
Schema.prototype.dictionaries = null;
Field.prototype.type = null;
Field.prototype.name = null;
Field.prototype.nullable = null;
Field.prototype.metadata = null;

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(list$1, "__esModule", { value: true });
list$1.ListBuilder = void 0;
var tslib_1$W = tslib.exports;
var run_1$1 = run;
var schema_1$f = schema;
var type_1$o = type;
var buffer_1$c = buffer;
var builder_1$4 = builder$1;
/** @ignore */
var ListBuilder = /** @class */ (function (_super) {
    tslib_1$W.__extends(ListBuilder, _super);
    function ListBuilder(opts) {
        var _this = _super.call(this, opts) || this;
        _this._run = new run_1$1.Run();
        _this._offsets = new buffer_1$c.OffsetsBufferBuilder();
        return _this;
    }
    ListBuilder.prototype.addChild = function (child, name) {
        if (name === void 0) { name = '0'; }
        if (this.numChildren > 0) {
            throw new Error('ListBuilder can only have one child.');
        }
        this.children[this.numChildren] = child;
        this.type = new type_1$o.List(new schema_1$f.Field(name, child.type, true));
        return this.numChildren - 1;
    };
    ListBuilder.prototype.clear = function () {
        this._run.clear();
        return _super.prototype.clear.call(this);
    };
    ListBuilder.prototype._flushPending = function (pending) {
        var e_1, _a, _b;
        var run = this._run;
        var offsets = this._offsets;
        var setValue = this._setValue;
        var index = 0, value;
        try {
            for (var pending_1 = tslib_1$W.__values(pending), pending_1_1 = pending_1.next(); !pending_1_1.done; pending_1_1 = pending_1.next()) {
                _b = tslib_1$W.__read(pending_1_1.value, 2), index = _b[0], value = _b[1];
                if (value === undefined) {
                    offsets.set(index, 0);
                }
                else {
                    offsets.set(index, value.length);
                    setValue(this, index, run.bind(value));
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (pending_1_1 && !pending_1_1.done && (_a = pending_1.return)) _a.call(pending_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    return ListBuilder;
}(builder_1$4.VariableWidthBuilder));
list$1.ListBuilder = ListBuilder;

var fixedsizelist$1 = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(fixedsizelist$1, "__esModule", { value: true });
fixedsizelist$1.FixedSizeListBuilder = void 0;
var tslib_1$V = tslib.exports;
var run_1 = run;
var schema_1$e = schema;
var builder_1$3 = builder$1;
var type_1$n = type;
/** @ignore */
var FixedSizeListBuilder = /** @class */ (function (_super) {
    tslib_1$V.__extends(FixedSizeListBuilder, _super);
    function FixedSizeListBuilder() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._run = new run_1.Run();
        return _this;
    }
    FixedSizeListBuilder.prototype.setValue = function (index, value) {
        _super.prototype.setValue.call(this, index, this._run.bind(value));
    };
    FixedSizeListBuilder.prototype.addChild = function (child, name) {
        if (name === void 0) { name = '0'; }
        if (this.numChildren > 0) {
            throw new Error('FixedSizeListBuilder can only have one child.');
        }
        var childIndex = this.children.push(child);
        this.type = new type_1$n.FixedSizeList(this.type.listSize, new schema_1$e.Field(name, child.type, true));
        return childIndex;
    };
    FixedSizeListBuilder.prototype.clear = function () {
        this._run.clear();
        return _super.prototype.clear.call(this);
    };
    return FixedSizeListBuilder;
}(builder_1$3.Builder));
fixedsizelist$1.FixedSizeListBuilder = FixedSizeListBuilder;

var map$2 = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(map$2, "__esModule", { value: true });
map$2.MapBuilder = void 0;
var tslib_1$U = tslib.exports;
var schema_1$d = schema;
var type_1$m = type;
var builder_1$2 = builder$1;
/** @ignore */
var MapBuilder = /** @class */ (function (_super) {
    tslib_1$U.__extends(MapBuilder, _super);
    function MapBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MapBuilder.prototype.set = function (index, value) {
        return _super.prototype.set.call(this, index, value);
    };
    MapBuilder.prototype.setValue = function (index, value) {
        value = value instanceof Map ? value : new Map(Object.entries(value));
        var pending = this._pending || (this._pending = new Map());
        var current = pending.get(index);
        current && (this._pendingLength -= current.size);
        this._pendingLength += value.size;
        pending.set(index, value);
    };
    MapBuilder.prototype.addChild = function (child, name) {
        if (name === void 0) { name = "" + this.numChildren; }
        if (this.numChildren > 0) {
            throw new Error('ListBuilder can only have one child.');
        }
        this.children[this.numChildren] = child;
        this.type = new type_1$m.Map_(new schema_1$d.Field(name, child.type, true), this.type.keysSorted);
        return this.numChildren - 1;
    };
    MapBuilder.prototype._flushPending = function (pending) {
        var _this = this;
        var offsets = this._offsets;
        var setValue = this._setValue;
        pending.forEach(function (value, index) {
            if (value === undefined) {
                offsets.set(index, 0);
            }
            else {
                offsets.set(index, value.size);
                setValue(_this, index, value);
            }
        });
    };
    return MapBuilder;
}(builder_1$2.VariableWidthBuilder));
map$2.MapBuilder = MapBuilder;

var struct$1 = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(struct$1, "__esModule", { value: true });
struct$1.StructBuilder = void 0;
var tslib_1$T = tslib.exports;
var schema_1$c = schema;
var builder_1$1 = builder$1;
var type_1$l = type;
/** @ignore */
var StructBuilder = /** @class */ (function (_super) {
    tslib_1$T.__extends(StructBuilder, _super);
    function StructBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StructBuilder.prototype.addChild = function (child, name) {
        if (name === void 0) { name = "" + this.numChildren; }
        var childIndex = this.children.push(child);
        this.type = new type_1$l.Struct(tslib_1$T.__spread(this.type.children, [new schema_1$c.Field(name, child.type, true)]));
        return childIndex;
    };
    return StructBuilder;
}(builder_1$1.Builder));
struct$1.StructBuilder = StructBuilder;

var union$1 = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(union$1, "__esModule", { value: true });
union$1.DenseUnionBuilder = union$1.SparseUnionBuilder = union$1.UnionBuilder = void 0;
var tslib_1$S = tslib.exports;
var schema_1$b = schema;
var buffer_1$b = buffer;
var builder_1 = builder$1;
var type_1$k = type;
/** @ignore */
var UnionBuilder = /** @class */ (function (_super) {
    tslib_1$S.__extends(UnionBuilder, _super);
    function UnionBuilder(options) {
        var _this = _super.call(this, options) || this;
        _this._typeIds = new buffer_1$b.DataBufferBuilder(new Int8Array(0), 1);
        if (typeof options['valueToChildTypeId'] === 'function') {
            _this._valueToChildTypeId = options['valueToChildTypeId'];
        }
        return _this;
    }
    Object.defineProperty(UnionBuilder.prototype, "typeIdToChildIndex", {
        get: function () { return this.type.typeIdToChildIndex; },
        enumerable: false,
        configurable: true
    });
    UnionBuilder.prototype.append = function (value, childTypeId) {
        return this.set(this.length, value, childTypeId);
    };
    UnionBuilder.prototype.set = function (index, value, childTypeId) {
        if (childTypeId === undefined) {
            childTypeId = this._valueToChildTypeId(this, value, index);
        }
        if (this.setValid(index, this.isValid(value))) {
            this.setValue(index, value, childTypeId);
        }
        return this;
    };
    UnionBuilder.prototype.setValue = function (index, value, childTypeId) {
        this._typeIds.set(index, childTypeId);
        _super.prototype.setValue.call(this, index, value);
    };
    UnionBuilder.prototype.addChild = function (child, name) {
        if (name === void 0) { name = "" + this.children.length; }
        var childTypeId = this.children.push(child);
        var _a = this.type, children = _a.children, mode = _a.mode, typeIds = _a.typeIds;
        var fields = tslib_1$S.__spread(children, [new schema_1$b.Field(name, child.type)]);
        this.type = new type_1$k.Union(mode, tslib_1$S.__spread(typeIds, [childTypeId]), fields);
        return childTypeId;
    };
    /** @ignore */
    // @ts-ignore
    UnionBuilder.prototype._valueToChildTypeId = function (builder, value, offset) {
        throw new Error("Cannot map UnionBuilder value to child typeId. Pass the `childTypeId` as the second argument to unionBuilder.append(), or supply a `valueToChildTypeId` function as part of the UnionBuilder constructor options.");
    };
    return UnionBuilder;
}(builder_1.Builder));
union$1.UnionBuilder = UnionBuilder;
/** @ignore */
var SparseUnionBuilder = /** @class */ (function (_super) {
    tslib_1$S.__extends(SparseUnionBuilder, _super);
    function SparseUnionBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return SparseUnionBuilder;
}(UnionBuilder));
union$1.SparseUnionBuilder = SparseUnionBuilder;
/** @ignore */
var DenseUnionBuilder = /** @class */ (function (_super) {
    tslib_1$S.__extends(DenseUnionBuilder, _super);
    function DenseUnionBuilder(options) {
        var _this = _super.call(this, options) || this;
        _this._offsets = new buffer_1$b.DataBufferBuilder(new Int32Array(0));
        return _this;
    }
    /** @ignore */
    DenseUnionBuilder.prototype.setValue = function (index, value, childTypeId) {
        var childIndex = this.type.typeIdToChildIndex[childTypeId];
        this._offsets.set(index, this.getChildAt(childIndex).length);
        return _super.prototype.setValue.call(this, index, value, childTypeId);
    };
    return DenseUnionBuilder;
}(UnionBuilder));
union$1.DenseUnionBuilder = DenseUnionBuilder;

var set = {};

var visitor = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(visitor, "__esModule", { value: true });
visitor.Visitor = void 0;
var tslib_1$R = tslib.exports;
var data_1$7 = data$1;
var vector_1$g = vector$2;
var enum_1$g = _enum;
var type_1$j = type;
var Visitor = /** @class */ (function () {
    function Visitor() {
    }
    Visitor.prototype.visitMany = function (nodes) {
        var _this = this;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return nodes.map(function (node, i) { return _this.visit.apply(_this, tslib_1$R.__spread([node], args.map(function (x) { return x[i]; }))); });
    };
    Visitor.prototype.visit = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return this.getVisitFn(args[0], false).apply(this, args);
    };
    Visitor.prototype.getVisitFn = function (node, throwIfNotFound) {
        if (throwIfNotFound === void 0) { throwIfNotFound = true; }
        return getVisitFn(this, node, throwIfNotFound);
    };
    Visitor.prototype.visitNull = function (_node) {
        var _args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _args[_i - 1] = arguments[_i];
        }
        return null;
    };
    Visitor.prototype.visitBool = function (_node) {
        var _args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _args[_i - 1] = arguments[_i];
        }
        return null;
    };
    Visitor.prototype.visitInt = function (_node) {
        var _args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _args[_i - 1] = arguments[_i];
        }
        return null;
    };
    Visitor.prototype.visitFloat = function (_node) {
        var _args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _args[_i - 1] = arguments[_i];
        }
        return null;
    };
    Visitor.prototype.visitUtf8 = function (_node) {
        var _args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _args[_i - 1] = arguments[_i];
        }
        return null;
    };
    Visitor.prototype.visitBinary = function (_node) {
        var _args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _args[_i - 1] = arguments[_i];
        }
        return null;
    };
    Visitor.prototype.visitFixedSizeBinary = function (_node) {
        var _args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _args[_i - 1] = arguments[_i];
        }
        return null;
    };
    Visitor.prototype.visitDate = function (_node) {
        var _args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _args[_i - 1] = arguments[_i];
        }
        return null;
    };
    Visitor.prototype.visitTimestamp = function (_node) {
        var _args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _args[_i - 1] = arguments[_i];
        }
        return null;
    };
    Visitor.prototype.visitTime = function (_node) {
        var _args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _args[_i - 1] = arguments[_i];
        }
        return null;
    };
    Visitor.prototype.visitDecimal = function (_node) {
        var _args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _args[_i - 1] = arguments[_i];
        }
        return null;
    };
    Visitor.prototype.visitList = function (_node) {
        var _args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _args[_i - 1] = arguments[_i];
        }
        return null;
    };
    Visitor.prototype.visitStruct = function (_node) {
        var _args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _args[_i - 1] = arguments[_i];
        }
        return null;
    };
    Visitor.prototype.visitUnion = function (_node) {
        var _args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _args[_i - 1] = arguments[_i];
        }
        return null;
    };
    Visitor.prototype.visitDictionary = function (_node) {
        var _args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _args[_i - 1] = arguments[_i];
        }
        return null;
    };
    Visitor.prototype.visitInterval = function (_node) {
        var _args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _args[_i - 1] = arguments[_i];
        }
        return null;
    };
    Visitor.prototype.visitFixedSizeList = function (_node) {
        var _args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _args[_i - 1] = arguments[_i];
        }
        return null;
    };
    Visitor.prototype.visitMap = function (_node) {
        var _args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _args[_i - 1] = arguments[_i];
        }
        return null;
    };
    return Visitor;
}());
visitor.Visitor = Visitor;
/** @ignore */
function getVisitFn(visitor, node, throwIfNotFound) {
    if (throwIfNotFound === void 0) { throwIfNotFound = true; }
    var fn = null;
    var dtype = enum_1$g.Type.NONE;
    if (node instanceof data_1$7.Data)
        dtype = inferDType(node.type);
    else if (node instanceof vector_1$g.Vector)
        dtype = inferDType(node.type);
    else if (node instanceof type_1$j.DataType)
        dtype = inferDType(node);
    else if (typeof (dtype = node) !== 'number')
        dtype = enum_1$g.Type[node];
    switch (dtype) {
        case enum_1$g.Type.Null:
            fn = visitor.visitNull;
            break;
        case enum_1$g.Type.Bool:
            fn = visitor.visitBool;
            break;
        case enum_1$g.Type.Int:
            fn = visitor.visitInt;
            break;
        case enum_1$g.Type.Int8:
            fn = visitor.visitInt8 || visitor.visitInt;
            break;
        case enum_1$g.Type.Int16:
            fn = visitor.visitInt16 || visitor.visitInt;
            break;
        case enum_1$g.Type.Int32:
            fn = visitor.visitInt32 || visitor.visitInt;
            break;
        case enum_1$g.Type.Int64:
            fn = visitor.visitInt64 || visitor.visitInt;
            break;
        case enum_1$g.Type.Uint8:
            fn = visitor.visitUint8 || visitor.visitInt;
            break;
        case enum_1$g.Type.Uint16:
            fn = visitor.visitUint16 || visitor.visitInt;
            break;
        case enum_1$g.Type.Uint32:
            fn = visitor.visitUint32 || visitor.visitInt;
            break;
        case enum_1$g.Type.Uint64:
            fn = visitor.visitUint64 || visitor.visitInt;
            break;
        case enum_1$g.Type.Float:
            fn = visitor.visitFloat;
            break;
        case enum_1$g.Type.Float16:
            fn = visitor.visitFloat16 || visitor.visitFloat;
            break;
        case enum_1$g.Type.Float32:
            fn = visitor.visitFloat32 || visitor.visitFloat;
            break;
        case enum_1$g.Type.Float64:
            fn = visitor.visitFloat64 || visitor.visitFloat;
            break;
        case enum_1$g.Type.Utf8:
            fn = visitor.visitUtf8;
            break;
        case enum_1$g.Type.Binary:
            fn = visitor.visitBinary;
            break;
        case enum_1$g.Type.FixedSizeBinary:
            fn = visitor.visitFixedSizeBinary;
            break;
        case enum_1$g.Type.Date:
            fn = visitor.visitDate;
            break;
        case enum_1$g.Type.DateDay:
            fn = visitor.visitDateDay || visitor.visitDate;
            break;
        case enum_1$g.Type.DateMillisecond:
            fn = visitor.visitDateMillisecond || visitor.visitDate;
            break;
        case enum_1$g.Type.Timestamp:
            fn = visitor.visitTimestamp;
            break;
        case enum_1$g.Type.TimestampSecond:
            fn = visitor.visitTimestampSecond || visitor.visitTimestamp;
            break;
        case enum_1$g.Type.TimestampMillisecond:
            fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp;
            break;
        case enum_1$g.Type.TimestampMicrosecond:
            fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp;
            break;
        case enum_1$g.Type.TimestampNanosecond:
            fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp;
            break;
        case enum_1$g.Type.Time:
            fn = visitor.visitTime;
            break;
        case enum_1$g.Type.TimeSecond:
            fn = visitor.visitTimeSecond || visitor.visitTime;
            break;
        case enum_1$g.Type.TimeMillisecond:
            fn = visitor.visitTimeMillisecond || visitor.visitTime;
            break;
        case enum_1$g.Type.TimeMicrosecond:
            fn = visitor.visitTimeMicrosecond || visitor.visitTime;
            break;
        case enum_1$g.Type.TimeNanosecond:
            fn = visitor.visitTimeNanosecond || visitor.visitTime;
            break;
        case enum_1$g.Type.Decimal:
            fn = visitor.visitDecimal;
            break;
        case enum_1$g.Type.List:
            fn = visitor.visitList;
            break;
        case enum_1$g.Type.Struct:
            fn = visitor.visitStruct;
            break;
        case enum_1$g.Type.Union:
            fn = visitor.visitUnion;
            break;
        case enum_1$g.Type.DenseUnion:
            fn = visitor.visitDenseUnion || visitor.visitUnion;
            break;
        case enum_1$g.Type.SparseUnion:
            fn = visitor.visitSparseUnion || visitor.visitUnion;
            break;
        case enum_1$g.Type.Dictionary:
            fn = visitor.visitDictionary;
            break;
        case enum_1$g.Type.Interval:
            fn = visitor.visitInterval;
            break;
        case enum_1$g.Type.IntervalDayTime:
            fn = visitor.visitIntervalDayTime || visitor.visitInterval;
            break;
        case enum_1$g.Type.IntervalYearMonth:
            fn = visitor.visitIntervalYearMonth || visitor.visitInterval;
            break;
        case enum_1$g.Type.FixedSizeList:
            fn = visitor.visitFixedSizeList;
            break;
        case enum_1$g.Type.Map:
            fn = visitor.visitMap;
            break;
    }
    if (typeof fn === 'function')
        return fn;
    if (!throwIfNotFound)
        return function () { return null; };
    throw new Error("Unrecognized type '" + enum_1$g.Type[dtype] + "'");
}
/** @ignore */
function inferDType(type) {
    switch (type.typeId) {
        case enum_1$g.Type.Null: return enum_1$g.Type.Null;
        case enum_1$g.Type.Int: {
            var _a = type, bitWidth = _a.bitWidth, isSigned = _a.isSigned;
            switch (bitWidth) {
                case 8: return isSigned ? enum_1$g.Type.Int8 : enum_1$g.Type.Uint8;
                case 16: return isSigned ? enum_1$g.Type.Int16 : enum_1$g.Type.Uint16;
                case 32: return isSigned ? enum_1$g.Type.Int32 : enum_1$g.Type.Uint32;
                case 64: return isSigned ? enum_1$g.Type.Int64 : enum_1$g.Type.Uint64;
            }
            // @ts-ignore
            return enum_1$g.Type.Int;
        }
        case enum_1$g.Type.Float:
            switch (type.precision) {
                case enum_1$g.Precision.HALF: return enum_1$g.Type.Float16;
                case enum_1$g.Precision.SINGLE: return enum_1$g.Type.Float32;
                case enum_1$g.Precision.DOUBLE: return enum_1$g.Type.Float64;
            }
            // @ts-ignore
            return enum_1$g.Type.Float;
        case enum_1$g.Type.Binary: return enum_1$g.Type.Binary;
        case enum_1$g.Type.Utf8: return enum_1$g.Type.Utf8;
        case enum_1$g.Type.Bool: return enum_1$g.Type.Bool;
        case enum_1$g.Type.Decimal: return enum_1$g.Type.Decimal;
        case enum_1$g.Type.Time:
            switch (type.unit) {
                case enum_1$g.TimeUnit.SECOND: return enum_1$g.Type.TimeSecond;
                case enum_1$g.TimeUnit.MILLISECOND: return enum_1$g.Type.TimeMillisecond;
                case enum_1$g.TimeUnit.MICROSECOND: return enum_1$g.Type.TimeMicrosecond;
                case enum_1$g.TimeUnit.NANOSECOND: return enum_1$g.Type.TimeNanosecond;
            }
            // @ts-ignore
            return enum_1$g.Type.Time;
        case enum_1$g.Type.Timestamp:
            switch (type.unit) {
                case enum_1$g.TimeUnit.SECOND: return enum_1$g.Type.TimestampSecond;
                case enum_1$g.TimeUnit.MILLISECOND: return enum_1$g.Type.TimestampMillisecond;
                case enum_1$g.TimeUnit.MICROSECOND: return enum_1$g.Type.TimestampMicrosecond;
                case enum_1$g.TimeUnit.NANOSECOND: return enum_1$g.Type.TimestampNanosecond;
            }
            // @ts-ignore
            return enum_1$g.Type.Timestamp;
        case enum_1$g.Type.Date:
            switch (type.unit) {
                case enum_1$g.DateUnit.DAY: return enum_1$g.Type.DateDay;
                case enum_1$g.DateUnit.MILLISECOND: return enum_1$g.Type.DateMillisecond;
            }
            // @ts-ignore
            return enum_1$g.Type.Date;
        case enum_1$g.Type.Interval:
            switch (type.unit) {
                case enum_1$g.IntervalUnit.DAY_TIME: return enum_1$g.Type.IntervalDayTime;
                case enum_1$g.IntervalUnit.YEAR_MONTH: return enum_1$g.Type.IntervalYearMonth;
            }
            // @ts-ignore
            return enum_1$g.Type.Interval;
        case enum_1$g.Type.Map: return enum_1$g.Type.Map;
        case enum_1$g.Type.List: return enum_1$g.Type.List;
        case enum_1$g.Type.Struct: return enum_1$g.Type.Struct;
        case enum_1$g.Type.Union:
            switch (type.mode) {
                case enum_1$g.UnionMode.Dense: return enum_1$g.Type.DenseUnion;
                case enum_1$g.UnionMode.Sparse: return enum_1$g.Type.SparseUnion;
            }
            // @ts-ignore
            return enum_1$g.Type.Union;
        case enum_1$g.Type.FixedSizeBinary: return enum_1$g.Type.FixedSizeBinary;
        case enum_1$g.Type.FixedSizeList: return enum_1$g.Type.FixedSizeList;
        case enum_1$g.Type.Dictionary: return enum_1$g.Type.Dictionary;
    }
    throw new Error("Unrecognized type '" + enum_1$g.Type[type.typeId] + "'");
}
// Add these here so they're picked up by the externs creator
// in the build, and closure-compiler doesn't minify them away
Visitor.prototype.visitInt8 = null;
Visitor.prototype.visitInt16 = null;
Visitor.prototype.visitInt32 = null;
Visitor.prototype.visitInt64 = null;
Visitor.prototype.visitUint8 = null;
Visitor.prototype.visitUint16 = null;
Visitor.prototype.visitUint32 = null;
Visitor.prototype.visitUint64 = null;
Visitor.prototype.visitFloat16 = null;
Visitor.prototype.visitFloat32 = null;
Visitor.prototype.visitFloat64 = null;
Visitor.prototype.visitDateDay = null;
Visitor.prototype.visitDateMillisecond = null;
Visitor.prototype.visitTimestampSecond = null;
Visitor.prototype.visitTimestampMillisecond = null;
Visitor.prototype.visitTimestampMicrosecond = null;
Visitor.prototype.visitTimestampNanosecond = null;
Visitor.prototype.visitTimeSecond = null;
Visitor.prototype.visitTimeMillisecond = null;
Visitor.prototype.visitTimeMicrosecond = null;
Visitor.prototype.visitTimeNanosecond = null;
Visitor.prototype.visitDenseUnion = null;
Visitor.prototype.visitSparseUnion = null;
Visitor.prototype.visitIntervalDayTime = null;
Visitor.prototype.visitIntervalYearMonth = null;

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(set, "__esModule", { value: true });
set.instance = set.SetVisitor = void 0;
var tslib_1$Q = tslib.exports;
var vector_1$f = vector$2;
var visitor_1$d = visitor;
var utf8_1$5 = utf8$2;
var math_1$1 = math;
var buffer_1$a = buffer$1;
var enum_1$f = _enum;
/** @ignore */
var SetVisitor = /** @class */ (function (_super) {
    tslib_1$Q.__extends(SetVisitor, _super);
    function SetVisitor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return SetVisitor;
}(visitor_1$d.Visitor));
set.SetVisitor = SetVisitor;
/** @ignore */
var setEpochMsToDays = function (data, index, epochMs) { data[index] = (epochMs / 86400000) | 0; };
/** @ignore */
var setEpochMsToMillisecondsLong = function (data, index, epochMs) {
    data[index] = (epochMs % 4294967296) | 0;
    data[index + 1] = (epochMs / 4294967296) | 0;
};
/** @ignore */
var setEpochMsToMicrosecondsLong = function (data, index, epochMs) {
    data[index] = ((epochMs * 1000) % 4294967296) | 0;
    data[index + 1] = ((epochMs * 1000) / 4294967296) | 0;
};
/** @ignore */
var setEpochMsToNanosecondsLong = function (data, index, epochMs) {
    data[index] = ((epochMs * 1000000) % 4294967296) | 0;
    data[index + 1] = ((epochMs * 1000000) / 4294967296) | 0;
};
/** @ignore */
var setVariableWidthBytes = function (values, valueOffsets, index, value) {
    var _a = valueOffsets, _b = index, x = _a[_b], _c = index + 1, y = _a[_c];
    if (x != null && y != null) {
        values.set(value.subarray(0, y - x), x);
    }
};
/** @ignore */
var setBool = function (_a, index, val) {
    var offset = _a.offset, values = _a.values;
    var idx = offset + index;
    val ? (values[idx >> 3] |= (1 << (idx % 8))) // true
        : (values[idx >> 3] &= ~(1 << (idx % 8))); // false
};
/** @ignore */
var setDateDay = function (_a, index, value) {
    var values = _a.values;
    setEpochMsToDays(values, index, value.valueOf());
};
/** @ignore */
var setDateMillisecond = function (_a, index, value) {
    var values = _a.values;
    setEpochMsToMillisecondsLong(values, index * 2, value.valueOf());
};
/** @ignore */
var setNumeric = function (_a, index, value) {
    var stride = _a.stride, values = _a.values;
    values[stride * index] = value;
};
/** @ignore */
var setFloat16 = function (_a, index, value) {
    var stride = _a.stride, values = _a.values;
    values[stride * index] = math_1$1.float64ToUint16(value);
};
/** @ignore */
var setNumericX2 = function (vector, index, value) {
    switch (typeof value) {
        case 'bigint':
            vector.values64[index] = value;
            break;
        case 'number':
            vector.values[index * vector.stride] = value;
            break;
        default: {
            var val = value;
            var stride = vector.stride, ArrayType = vector.ArrayType;
            var long = buffer_1$a.toArrayBufferView(ArrayType, val);
            vector.values.set(long.subarray(0, stride), stride * index);
        }
    }
};
/** @ignore */
var setFixedSizeBinary = function (_a, index, value) {
    var stride = _a.stride, values = _a.values;
    values.set(value.subarray(0, stride), stride * index);
};
/** @ignore */
var setBinary = function (_a, index, value) {
    var values = _a.values, valueOffsets = _a.valueOffsets;
    return setVariableWidthBytes(values, valueOffsets, index, value);
};
/** @ignore */
var setUtf8 = function (_a, index, value) {
    var values = _a.values, valueOffsets = _a.valueOffsets;
    setVariableWidthBytes(values, valueOffsets, index, utf8_1$5.encodeUtf8(value));
};
/* istanbul ignore next */
/** @ignore */
var setInt = function (vector, index, value) {
    vector.type.bitWidth < 64
        ? setNumeric(vector, index, value)
        : setNumericX2(vector, index, value);
};
/* istanbul ignore next */
/** @ignore */
var setFloat = function (vector, index, value) {
    vector.type.precision !== enum_1$f.Precision.HALF
        ? setNumeric(vector, index, value)
        : setFloat16(vector, index, value);
};
/* istanbul ignore next */
var setDate = function (vector, index, value) {
    vector.type.unit === enum_1$f.DateUnit.DAY
        ? setDateDay(vector, index, value)
        : setDateMillisecond(vector, index, value);
};
/** @ignore */
var setTimestampSecond = function (_a, index, value) {
    var values = _a.values;
    return setEpochMsToMillisecondsLong(values, index * 2, value / 1000);
};
/** @ignore */
var setTimestampMillisecond = function (_a, index, value) {
    var values = _a.values;
    return setEpochMsToMillisecondsLong(values, index * 2, value);
};
/** @ignore */
var setTimestampMicrosecond = function (_a, index, value) {
    var values = _a.values;
    return setEpochMsToMicrosecondsLong(values, index * 2, value);
};
/** @ignore */
var setTimestampNanosecond = function (_a, index, value) {
    var values = _a.values;
    return setEpochMsToNanosecondsLong(values, index * 2, value);
};
/* istanbul ignore next */
/** @ignore */
var setTimestamp = function (vector, index, value) {
    switch (vector.type.unit) {
        case enum_1$f.TimeUnit.SECOND: return setTimestampSecond(vector, index, value);
        case enum_1$f.TimeUnit.MILLISECOND: return setTimestampMillisecond(vector, index, value);
        case enum_1$f.TimeUnit.MICROSECOND: return setTimestampMicrosecond(vector, index, value);
        case enum_1$f.TimeUnit.NANOSECOND: return setTimestampNanosecond(vector, index, value);
    }
};
/** @ignore */
var setTimeSecond = function (_a, index, value) {
    var values = _a.values, stride = _a.stride;
    values[stride * index] = value;
};
/** @ignore */
var setTimeMillisecond = function (_a, index, value) {
    var values = _a.values, stride = _a.stride;
    values[stride * index] = value;
};
/** @ignore */
var setTimeMicrosecond = function (_a, index, value) {
    var values = _a.values;
    values.set(value.subarray(0, 2), 2 * index);
};
/** @ignore */
var setTimeNanosecond = function (_a, index, value) {
    var values = _a.values;
    values.set(value.subarray(0, 2), 2 * index);
};
/* istanbul ignore next */
/** @ignore */
var setTime = function (vector, index, value) {
    switch (vector.type.unit) {
        case enum_1$f.TimeUnit.SECOND: return setTimeSecond(vector, index, value);
        case enum_1$f.TimeUnit.MILLISECOND: return setTimeMillisecond(vector, index, value);
        case enum_1$f.TimeUnit.MICROSECOND: return setTimeMicrosecond(vector, index, value);
        case enum_1$f.TimeUnit.NANOSECOND: return setTimeNanosecond(vector, index, value);
    }
};
/** @ignore */
var setDecimal = function (_a, index, value) {
    var values = _a.values;
    values.set(value.subarray(0, 4), 4 * index);
};
/** @ignore */
var setList = function (vector, index, value) {
    var values = vector.getChildAt(0), valueOffsets = vector.valueOffsets;
    for (var idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {
        values.set(itr++, value.get(++idx));
    }
};
/** @ignore */
var setMap = function (vector, index, value) {
    var values = vector.getChildAt(0), valueOffsets = vector.valueOffsets;
    var entries = value instanceof Map ? tslib_1$Q.__spread(value) : Object.entries(value);
    for (var idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {
        values.set(itr++, entries[++idx]);
    }
};
/** @ignore */ var _setStructArrayValue = function (o, v) { return function (c, _, i) { return c === null || c === void 0 ? void 0 : c.set(o, v[i]); }; };
/** @ignore */ var _setStructVectorValue = function (o, v) { return function (c, _, i) { return c === null || c === void 0 ? void 0 : c.set(o, v.get(i)); }; };
/** @ignore */ var _setStructMapValue = function (o, v) { return function (c, f, _) { return c === null || c === void 0 ? void 0 : c.set(o, v.get(f.name)); }; };
/** @ignore */ var _setStructObjectValue = function (o, v) { return function (c, f, _) { return c === null || c === void 0 ? void 0 : c.set(o, v[f.name]); }; };
/** @ignore */
var setStruct = function (vector, index, value) {
    var setValue = value instanceof Map ? _setStructMapValue(index, value) :
        value instanceof vector_1$f.Vector ? _setStructVectorValue(index, value) :
            Array.isArray(value) ? _setStructArrayValue(index, value) :
                _setStructObjectValue(index, value);
    vector.type.children.forEach(function (f, i) { return setValue(vector.getChildAt(i), f, i); });
};
/* istanbul ignore next */
/** @ignore */
var setUnion = function (vector, index, value) {
    vector.type.mode === enum_1$f.UnionMode.Dense ?
        setDenseUnion(vector, index, value) :
        setSparseUnion(vector, index, value);
};
/** @ignore */
var setDenseUnion = function (vector, index, value) {
    var childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];
    var child = vector.getChildAt(childIndex);
    child && child.set(vector.valueOffsets[index], value);
};
/** @ignore */
var setSparseUnion = function (vector, index, value) {
    var childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];
    var child = vector.getChildAt(childIndex);
    child && child.set(index, value);
};
/** @ignore */
var setDictionary = function (vector, index, value) {
    var key = vector.getKey(index);
    if (key !== null) {
        vector.setValue(key, value);
    }
};
/* istanbul ignore next */
/** @ignore */
var setIntervalValue = function (vector, index, value) {
    (vector.type.unit === enum_1$f.IntervalUnit.DAY_TIME)
        ? setIntervalDayTime(vector, index, value)
        : setIntervalYearMonth(vector, index, value);
};
/** @ignore */
var setIntervalDayTime = function (_a, index, value) {
    var values = _a.values;
    values.set(value.subarray(0, 2), 2 * index);
};
/** @ignore */
var setIntervalYearMonth = function (_a, index, value) {
    var values = _a.values;
    values[index] = (value[0] * 12) + (value[1] % 12);
};
/** @ignore */
var setFixedSizeList = function (vector, index, value) {
    var child = vector.getChildAt(0), stride = vector.stride;
    for (var idx = -1, offset = index * stride; ++idx < stride;) {
        child.set(offset + idx, value.get(idx));
    }
};
SetVisitor.prototype.visitBool = setBool;
SetVisitor.prototype.visitInt = setInt;
SetVisitor.prototype.visitInt8 = setNumeric;
SetVisitor.prototype.visitInt16 = setNumeric;
SetVisitor.prototype.visitInt32 = setNumeric;
SetVisitor.prototype.visitInt64 = setNumericX2;
SetVisitor.prototype.visitUint8 = setNumeric;
SetVisitor.prototype.visitUint16 = setNumeric;
SetVisitor.prototype.visitUint32 = setNumeric;
SetVisitor.prototype.visitUint64 = setNumericX2;
SetVisitor.prototype.visitFloat = setFloat;
SetVisitor.prototype.visitFloat16 = setFloat16;
SetVisitor.prototype.visitFloat32 = setNumeric;
SetVisitor.prototype.visitFloat64 = setNumeric;
SetVisitor.prototype.visitUtf8 = setUtf8;
SetVisitor.prototype.visitBinary = setBinary;
SetVisitor.prototype.visitFixedSizeBinary = setFixedSizeBinary;
SetVisitor.prototype.visitDate = setDate;
SetVisitor.prototype.visitDateDay = setDateDay;
SetVisitor.prototype.visitDateMillisecond = setDateMillisecond;
SetVisitor.prototype.visitTimestamp = setTimestamp;
SetVisitor.prototype.visitTimestampSecond = setTimestampSecond;
SetVisitor.prototype.visitTimestampMillisecond = setTimestampMillisecond;
SetVisitor.prototype.visitTimestampMicrosecond = setTimestampMicrosecond;
SetVisitor.prototype.visitTimestampNanosecond = setTimestampNanosecond;
SetVisitor.prototype.visitTime = setTime;
SetVisitor.prototype.visitTimeSecond = setTimeSecond;
SetVisitor.prototype.visitTimeMillisecond = setTimeMillisecond;
SetVisitor.prototype.visitTimeMicrosecond = setTimeMicrosecond;
SetVisitor.prototype.visitTimeNanosecond = setTimeNanosecond;
SetVisitor.prototype.visitDecimal = setDecimal;
SetVisitor.prototype.visitList = setList;
SetVisitor.prototype.visitStruct = setStruct;
SetVisitor.prototype.visitUnion = setUnion;
SetVisitor.prototype.visitDenseUnion = setDenseUnion;
SetVisitor.prototype.visitSparseUnion = setSparseUnion;
SetVisitor.prototype.visitDictionary = setDictionary;
SetVisitor.prototype.visitInterval = setIntervalValue;
SetVisitor.prototype.visitIntervalDayTime = setIntervalDayTime;
SetVisitor.prototype.visitIntervalYearMonth = setIntervalYearMonth;
SetVisitor.prototype.visitFixedSizeList = setFixedSizeList;
SetVisitor.prototype.visitMap = setMap;
/** @ignore */
set.instance = new SetVisitor();

var builderctor = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(builderctor, "__esModule", { value: true });
builderctor.instance = builderctor.GetBuilderCtor = void 0;
var tslib_1$P = tslib.exports;
var visitor_1$c = visitor;
var binary_1$1 = binary$1;
var bool_1$1 = bool$1;
var date_1$1 = date$1;
var decimal_1$1 = decimal$1;
var dictionary_1$2 = dictionary$1;
var fixedsizebinary_1$1 = fixedsizebinary$1;
var fixedsizelist_1$1 = fixedsizelist$1;
var float_1$1 = float$1;
var interval_1$1 = interval$1;
var int_1$3 = int$2;
var list_1$1 = list$1;
var map_1$1 = map$2;
var null_1$1 = _null$1;
var struct_1$1 = struct$1;
var timestamp_1$1 = timestamp$1;
var time_1$1 = time$1;
var union_1$1 = union$1;
var utf8_1$4 = utf8$1;
/** @ignore */
var GetBuilderCtor = /** @class */ (function (_super) {
    tslib_1$P.__extends(GetBuilderCtor, _super);
    function GetBuilderCtor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GetBuilderCtor.prototype.visitNull = function () { return null_1$1.NullBuilder; };
    GetBuilderCtor.prototype.visitBool = function () { return bool_1$1.BoolBuilder; };
    GetBuilderCtor.prototype.visitInt = function () { return int_1$3.IntBuilder; };
    GetBuilderCtor.prototype.visitInt8 = function () { return int_1$3.Int8Builder; };
    GetBuilderCtor.prototype.visitInt16 = function () { return int_1$3.Int16Builder; };
    GetBuilderCtor.prototype.visitInt32 = function () { return int_1$3.Int32Builder; };
    GetBuilderCtor.prototype.visitInt64 = function () { return int_1$3.Int64Builder; };
    GetBuilderCtor.prototype.visitUint8 = function () { return int_1$3.Uint8Builder; };
    GetBuilderCtor.prototype.visitUint16 = function () { return int_1$3.Uint16Builder; };
    GetBuilderCtor.prototype.visitUint32 = function () { return int_1$3.Uint32Builder; };
    GetBuilderCtor.prototype.visitUint64 = function () { return int_1$3.Uint64Builder; };
    GetBuilderCtor.prototype.visitFloat = function () { return float_1$1.FloatBuilder; };
    GetBuilderCtor.prototype.visitFloat16 = function () { return float_1$1.Float16Builder; };
    GetBuilderCtor.prototype.visitFloat32 = function () { return float_1$1.Float32Builder; };
    GetBuilderCtor.prototype.visitFloat64 = function () { return float_1$1.Float64Builder; };
    GetBuilderCtor.prototype.visitUtf8 = function () { return utf8_1$4.Utf8Builder; };
    GetBuilderCtor.prototype.visitBinary = function () { return binary_1$1.BinaryBuilder; };
    GetBuilderCtor.prototype.visitFixedSizeBinary = function () { return fixedsizebinary_1$1.FixedSizeBinaryBuilder; };
    GetBuilderCtor.prototype.visitDate = function () { return date_1$1.DateBuilder; };
    GetBuilderCtor.prototype.visitDateDay = function () { return date_1$1.DateDayBuilder; };
    GetBuilderCtor.prototype.visitDateMillisecond = function () { return date_1$1.DateMillisecondBuilder; };
    GetBuilderCtor.prototype.visitTimestamp = function () { return timestamp_1$1.TimestampBuilder; };
    GetBuilderCtor.prototype.visitTimestampSecond = function () { return timestamp_1$1.TimestampSecondBuilder; };
    GetBuilderCtor.prototype.visitTimestampMillisecond = function () { return timestamp_1$1.TimestampMillisecondBuilder; };
    GetBuilderCtor.prototype.visitTimestampMicrosecond = function () { return timestamp_1$1.TimestampMicrosecondBuilder; };
    GetBuilderCtor.prototype.visitTimestampNanosecond = function () { return timestamp_1$1.TimestampNanosecondBuilder; };
    GetBuilderCtor.prototype.visitTime = function () { return time_1$1.TimeBuilder; };
    GetBuilderCtor.prototype.visitTimeSecond = function () { return time_1$1.TimeSecondBuilder; };
    GetBuilderCtor.prototype.visitTimeMillisecond = function () { return time_1$1.TimeMillisecondBuilder; };
    GetBuilderCtor.prototype.visitTimeMicrosecond = function () { return time_1$1.TimeMicrosecondBuilder; };
    GetBuilderCtor.prototype.visitTimeNanosecond = function () { return time_1$1.TimeNanosecondBuilder; };
    GetBuilderCtor.prototype.visitDecimal = function () { return decimal_1$1.DecimalBuilder; };
    GetBuilderCtor.prototype.visitList = function () { return list_1$1.ListBuilder; };
    GetBuilderCtor.prototype.visitStruct = function () { return struct_1$1.StructBuilder; };
    GetBuilderCtor.prototype.visitUnion = function () { return union_1$1.UnionBuilder; };
    GetBuilderCtor.prototype.visitDenseUnion = function () { return union_1$1.DenseUnionBuilder; };
    GetBuilderCtor.prototype.visitSparseUnion = function () { return union_1$1.SparseUnionBuilder; };
    GetBuilderCtor.prototype.visitDictionary = function () { return dictionary_1$2.DictionaryBuilder; };
    GetBuilderCtor.prototype.visitInterval = function () { return interval_1$1.IntervalBuilder; };
    GetBuilderCtor.prototype.visitIntervalDayTime = function () { return interval_1$1.IntervalDayTimeBuilder; };
    GetBuilderCtor.prototype.visitIntervalYearMonth = function () { return interval_1$1.IntervalYearMonthBuilder; };
    GetBuilderCtor.prototype.visitFixedSizeList = function () { return fixedsizelist_1$1.FixedSizeListBuilder; };
    GetBuilderCtor.prototype.visitMap = function () { return map_1$1.MapBuilder; };
    return GetBuilderCtor;
}(visitor_1$c.Visitor));
builderctor.GetBuilderCtor = GetBuilderCtor;
/** @ignore */
builderctor.instance = new GetBuilderCtor();

(function (exports) {
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.DenseUnionBuilder = exports.SparseUnionBuilder = exports.UnionBuilder = exports.StructBuilder = exports.MapBuilder = exports.FixedSizeListBuilder = exports.ListBuilder = exports.BinaryBuilder = exports.Utf8Builder = exports.IntervalYearMonthBuilder = exports.IntervalDayTimeBuilder = exports.IntervalBuilder = exports.TimestampNanosecondBuilder = exports.TimestampMicrosecondBuilder = exports.TimestampMillisecondBuilder = exports.TimestampSecondBuilder = exports.TimestampBuilder = exports.TimeNanosecondBuilder = exports.TimeMicrosecondBuilder = exports.TimeMillisecondBuilder = exports.TimeSecondBuilder = exports.TimeBuilder = exports.Uint64Builder = exports.Uint32Builder = exports.Uint16Builder = exports.Uint8Builder = exports.Int64Builder = exports.Int32Builder = exports.Int16Builder = exports.Int8Builder = exports.IntBuilder = exports.Float64Builder = exports.Float32Builder = exports.Float16Builder = exports.FloatBuilder = exports.FixedSizeBinaryBuilder = exports.DictionaryBuilder = exports.DecimalBuilder = exports.DateMillisecondBuilder = exports.DateDayBuilder = exports.DateBuilder = exports.NullBuilder = exports.BoolBuilder = exports.Builder = void 0;
var tslib_1 = tslib.exports;
/** @ignore */
var builder_1 = builder$1;
Object.defineProperty(exports, "Builder", { enumerable: true, get: function () { return builder_1.Builder; } });
var bool_1 = bool$1;
Object.defineProperty(exports, "BoolBuilder", { enumerable: true, get: function () { return bool_1.BoolBuilder; } });
var null_1 = _null$1;
Object.defineProperty(exports, "NullBuilder", { enumerable: true, get: function () { return null_1.NullBuilder; } });
var date_1 = date$1;
Object.defineProperty(exports, "DateBuilder", { enumerable: true, get: function () { return date_1.DateBuilder; } });
Object.defineProperty(exports, "DateDayBuilder", { enumerable: true, get: function () { return date_1.DateDayBuilder; } });
Object.defineProperty(exports, "DateMillisecondBuilder", { enumerable: true, get: function () { return date_1.DateMillisecondBuilder; } });
var decimal_1 = decimal$1;
Object.defineProperty(exports, "DecimalBuilder", { enumerable: true, get: function () { return decimal_1.DecimalBuilder; } });
var dictionary_1 = dictionary$1;
Object.defineProperty(exports, "DictionaryBuilder", { enumerable: true, get: function () { return dictionary_1.DictionaryBuilder; } });
var fixedsizebinary_1 = fixedsizebinary$1;
Object.defineProperty(exports, "FixedSizeBinaryBuilder", { enumerable: true, get: function () { return fixedsizebinary_1.FixedSizeBinaryBuilder; } });
var float_1 = float$1;
Object.defineProperty(exports, "FloatBuilder", { enumerable: true, get: function () { return float_1.FloatBuilder; } });
Object.defineProperty(exports, "Float16Builder", { enumerable: true, get: function () { return float_1.Float16Builder; } });
Object.defineProperty(exports, "Float32Builder", { enumerable: true, get: function () { return float_1.Float32Builder; } });
Object.defineProperty(exports, "Float64Builder", { enumerable: true, get: function () { return float_1.Float64Builder; } });
var int_1 = int$2;
Object.defineProperty(exports, "IntBuilder", { enumerable: true, get: function () { return int_1.IntBuilder; } });
Object.defineProperty(exports, "Int8Builder", { enumerable: true, get: function () { return int_1.Int8Builder; } });
Object.defineProperty(exports, "Int16Builder", { enumerable: true, get: function () { return int_1.Int16Builder; } });
Object.defineProperty(exports, "Int32Builder", { enumerable: true, get: function () { return int_1.Int32Builder; } });
Object.defineProperty(exports, "Int64Builder", { enumerable: true, get: function () { return int_1.Int64Builder; } });
Object.defineProperty(exports, "Uint8Builder", { enumerable: true, get: function () { return int_1.Uint8Builder; } });
Object.defineProperty(exports, "Uint16Builder", { enumerable: true, get: function () { return int_1.Uint16Builder; } });
Object.defineProperty(exports, "Uint32Builder", { enumerable: true, get: function () { return int_1.Uint32Builder; } });
Object.defineProperty(exports, "Uint64Builder", { enumerable: true, get: function () { return int_1.Uint64Builder; } });
var time_1 = time$1;
Object.defineProperty(exports, "TimeBuilder", { enumerable: true, get: function () { return time_1.TimeBuilder; } });
Object.defineProperty(exports, "TimeSecondBuilder", { enumerable: true, get: function () { return time_1.TimeSecondBuilder; } });
Object.defineProperty(exports, "TimeMillisecondBuilder", { enumerable: true, get: function () { return time_1.TimeMillisecondBuilder; } });
Object.defineProperty(exports, "TimeMicrosecondBuilder", { enumerable: true, get: function () { return time_1.TimeMicrosecondBuilder; } });
Object.defineProperty(exports, "TimeNanosecondBuilder", { enumerable: true, get: function () { return time_1.TimeNanosecondBuilder; } });
var timestamp_1 = timestamp$1;
Object.defineProperty(exports, "TimestampBuilder", { enumerable: true, get: function () { return timestamp_1.TimestampBuilder; } });
Object.defineProperty(exports, "TimestampSecondBuilder", { enumerable: true, get: function () { return timestamp_1.TimestampSecondBuilder; } });
Object.defineProperty(exports, "TimestampMillisecondBuilder", { enumerable: true, get: function () { return timestamp_1.TimestampMillisecondBuilder; } });
Object.defineProperty(exports, "TimestampMicrosecondBuilder", { enumerable: true, get: function () { return timestamp_1.TimestampMicrosecondBuilder; } });
Object.defineProperty(exports, "TimestampNanosecondBuilder", { enumerable: true, get: function () { return timestamp_1.TimestampNanosecondBuilder; } });
var interval_1 = interval$1;
Object.defineProperty(exports, "IntervalBuilder", { enumerable: true, get: function () { return interval_1.IntervalBuilder; } });
Object.defineProperty(exports, "IntervalDayTimeBuilder", { enumerable: true, get: function () { return interval_1.IntervalDayTimeBuilder; } });
Object.defineProperty(exports, "IntervalYearMonthBuilder", { enumerable: true, get: function () { return interval_1.IntervalYearMonthBuilder; } });
var utf8_1 = utf8$1;
Object.defineProperty(exports, "Utf8Builder", { enumerable: true, get: function () { return utf8_1.Utf8Builder; } });
var binary_1 = binary$1;
Object.defineProperty(exports, "BinaryBuilder", { enumerable: true, get: function () { return binary_1.BinaryBuilder; } });
var list_1 = list$1;
Object.defineProperty(exports, "ListBuilder", { enumerable: true, get: function () { return list_1.ListBuilder; } });
var fixedsizelist_1 = fixedsizelist$1;
Object.defineProperty(exports, "FixedSizeListBuilder", { enumerable: true, get: function () { return fixedsizelist_1.FixedSizeListBuilder; } });
var map_1 = map$2;
Object.defineProperty(exports, "MapBuilder", { enumerable: true, get: function () { return map_1.MapBuilder; } });
var struct_1 = struct$1;
Object.defineProperty(exports, "StructBuilder", { enumerable: true, get: function () { return struct_1.StructBuilder; } });
var union_1 = union$1;
Object.defineProperty(exports, "UnionBuilder", { enumerable: true, get: function () { return union_1.UnionBuilder; } });
Object.defineProperty(exports, "SparseUnionBuilder", { enumerable: true, get: function () { return union_1.SparseUnionBuilder; } });
Object.defineProperty(exports, "DenseUnionBuilder", { enumerable: true, get: function () { return union_1.DenseUnionBuilder; } });
var enum_1 = _enum;
var utf8_2 = utf8$1;
var builder_2 = builder$1;
var set_1 = set;
var builderctor_1 = builderctor;
/** @nocollapse */
builder_2.Builder.new = newBuilder;
function newBuilder(options) {
    var type = options.type;
    var builder = new (builderctor_1.instance.getVisitFn(type)())(options);
    if (type.children && type.children.length > 0) {
        var children_1 = options['children'] || [];
        var defaultOptions_1 = { 'nullValues': options['nullValues'] };
        var getChildOptions_1 = Array.isArray(children_1)
            ? (function (_, i) { return children_1[i] || defaultOptions_1; })
            : (function (_a) {
                var name = _a.name;
                return children_1[name] || defaultOptions_1;
            });
        type.children.forEach(function (field, index) {
            var type = field.type;
            var opts = getChildOptions_1(field, index);
            builder.children.push(newBuilder(tslib_1.__assign(tslib_1.__assign({}, opts), { type: type })));
        });
    }
    return builder;
}
Object.keys(enum_1.Type)
    .map(function (T) { return enum_1.Type[T]; })
    .filter(function (T) { return typeof T === 'number' && T !== enum_1.Type.NONE; })
    .forEach(function (typeId) {
    var BuilderCtor = builderctor_1.instance.visit(typeId);
    BuilderCtor.prototype._setValue = set_1.instance.getVisitFn(typeId);
});
utf8_2.Utf8Builder.prototype._setValue = set_1.instance.visitBinary;


}(builder$2));

var reader$1 = {};

var file$1 = {};

var File = {};

// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(File, "__esModule", { value: true });
File.Block = File.Footer = void 0;
var flatbuffers_1$3 = require$$2;
var NS13596923344997147894 = Schema$1;
/**
 * ----------------------------------------------------------------------
 * Arrow File metadata
 *
 *
 * @constructor
 */
var Footer = /** @class */ (function () {
    function Footer() {
        this.bb = null;
        this.bb_pos = 0;
    }
    /**
     * @param number i
     * @param flatbuffers.ByteBuffer bb
     * @returns Footer
     */
    Footer.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param Footer= obj
     * @returns Footer
     */
    Footer.getRootAsFooter = function (bb, obj) {
        return (obj || new Footer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @param flatbuffers.ByteBuffer bb
     * @param Footer= obj
     * @returns Footer
     */
    Footer.getSizePrefixedRootAsFooter = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers_1$3.flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Footer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * @returns MetadataVersion
     */
    Footer.prototype.version = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? /**  */ (this.bb.readInt16(this.bb_pos + offset)) : NS13596923344997147894.MetadataVersion.V1;
    };
    /**
     * @param Schema= obj
     * @returns Schema|null
     */
    Footer.prototype.schema = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new NS13596923344997147894.Schema()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    };
    /**
     * @param number index
     * @param Block= obj
     * @returns Block
     */
    Footer.prototype.dictionaries = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? (obj || new Block()).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;
    };
    /**
     * @returns number
     */
    Footer.prototype.dictionariesLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    /**
     * @param number index
     * @param Block= obj
     * @returns Block
     */
    Footer.prototype.recordBatches = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? (obj || new Block()).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;
    };
    /**
     * @returns number
     */
    Footer.prototype.recordBatchesLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    /**
     * User-defined metadata
     *
     * @param number index
     * @param KeyValue= obj
     * @returns KeyValue
     */
    Footer.prototype.customMetadata = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? (obj || new NS13596923344997147894.KeyValue()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    /**
     * @returns number
     */
    Footer.prototype.customMetadataLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    /**
     * @param flatbuffers.Builder builder
     */
    Footer.startFooter = function (builder) {
        builder.startObject(5);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param MetadataVersion version
     */
    Footer.addVersion = function (builder, version) {
        builder.addFieldInt16(0, version, NS13596923344997147894.MetadataVersion.V1);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Offset schemaOffset
     */
    Footer.addSchema = function (builder, schemaOffset) {
        builder.addFieldOffset(1, schemaOffset, 0);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Offset dictionariesOffset
     */
    Footer.addDictionaries = function (builder, dictionariesOffset) {
        builder.addFieldOffset(2, dictionariesOffset, 0);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param number numElems
     */
    Footer.startDictionariesVector = function (builder, numElems) {
        builder.startVector(24, numElems, 8);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Offset recordBatchesOffset
     */
    Footer.addRecordBatches = function (builder, recordBatchesOffset) {
        builder.addFieldOffset(3, recordBatchesOffset, 0);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param number numElems
     */
    Footer.startRecordBatchesVector = function (builder, numElems) {
        builder.startVector(24, numElems, 8);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Offset customMetadataOffset
     */
    Footer.addCustomMetadata = function (builder, customMetadataOffset) {
        builder.addFieldOffset(4, customMetadataOffset, 0);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param Array.<flatbuffers.Offset> data
     * @returns flatbuffers.Offset
     */
    Footer.createCustomMetadataVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    /**
     * @param flatbuffers.Builder builder
     * @param number numElems
     */
    Footer.startCustomMetadataVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    /**
     * @param flatbuffers.Builder builder
     * @returns flatbuffers.Offset
     */
    Footer.endFooter = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Offset offset
     */
    Footer.finishFooterBuffer = function (builder, offset) {
        builder.finish(offset);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Offset offset
     */
    Footer.finishSizePrefixedFooterBuffer = function (builder, offset) {
        builder.finish(offset, undefined, true);
    };
    Footer.createFooter = function (builder, version, schemaOffset, dictionariesOffset, recordBatchesOffset, customMetadataOffset) {
        Footer.startFooter(builder);
        Footer.addVersion(builder, version);
        Footer.addSchema(builder, schemaOffset);
        Footer.addDictionaries(builder, dictionariesOffset);
        Footer.addRecordBatches(builder, recordBatchesOffset);
        Footer.addCustomMetadata(builder, customMetadataOffset);
        return Footer.endFooter(builder);
    };
    return Footer;
}());
File.Footer = Footer;
/**
 * @constructor
 */
var Block = /** @class */ (function () {
    function Block() {
        this.bb = null;
        this.bb_pos = 0;
    }
    /**
     * @param number i
     * @param flatbuffers.ByteBuffer bb
     * @returns Block
     */
    Block.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    /**
     * Index to the start of the RecordBlock (note this is past the Message header)
     *
     * @returns flatbuffers.Long
     */
    Block.prototype.offset = function () {
        return this.bb.readInt64(this.bb_pos);
    };
    /**
     * Length of the metadata
     *
     * @returns number
     */
    Block.prototype.metaDataLength = function () {
        return this.bb.readInt32(this.bb_pos + 8);
    };
    /**
     * Length of the data (this is aligned so there can be a gap between this and
     * the metadata).
     *
     * @returns flatbuffers.Long
     */
    Block.prototype.bodyLength = function () {
        return this.bb.readInt64(this.bb_pos + 16);
    };
    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Long offset
     * @param number metaDataLength
     * @param flatbuffers.Long bodyLength
     * @returns flatbuffers.Offset
     */
    Block.createBlock = function (builder, offset, metaDataLength, bodyLength) {
        builder.prep(8, 24);
        builder.writeInt64(bodyLength);
        builder.pad(4);
        builder.writeInt32(metaDataLength);
        builder.writeInt64(offset);
        return builder.offset();
    };
    return Block;
}());
File.Block = Block;

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(file$1, "__esModule", { value: true });
file$1.FileBlock = file$1.Footer = void 0;
var tslib_1$O = tslib.exports;
/* eslint-disable @typescript-eslint/naming-convention */
var File_1 = File;
var flatbuffers_1$2 = require$$2;
var Long$2 = flatbuffers_1$2.flatbuffers.Long;
var Builder$1 = flatbuffers_1$2.flatbuffers.Builder;
var ByteBuffer$1 = flatbuffers_1$2.flatbuffers.ByteBuffer;
var schema_1$a = schema;
var enum_1$e = _enum;
var buffer_1$9 = buffer$1;
/** @ignore */
var Footer_ = /** @class */ (function () {
    function Footer_(schema, version, recordBatches, dictionaryBatches) {
        if (version === void 0) { version = enum_1$e.MetadataVersion.V4; }
        this.schema = schema;
        this.version = version;
        recordBatches && (this._recordBatches = recordBatches);
        dictionaryBatches && (this._dictionaryBatches = dictionaryBatches);
    }
    /** @nocollapse */
    Footer_.decode = function (buf) {
        buf = new ByteBuffer$1(buffer_1$9.toUint8Array(buf));
        var footer = File_1.Footer.getRootAsFooter(buf);
        var schema = schema_1$a.Schema.decode(footer.schema());
        return new OffHeapFooter(schema, footer);
    };
    /** @nocollapse */
    Footer_.encode = function (footer) {
        var b = new Builder$1();
        var schemaOffset = schema_1$a.Schema.encode(b, footer.schema);
        File_1.Footer.startRecordBatchesVector(b, footer.numRecordBatches);
        tslib_1$O.__spread(footer.recordBatches()).slice().reverse().forEach(function (rb) { return FileBlock.encode(b, rb); });
        var recordBatchesOffset = b.endVector();
        File_1.Footer.startDictionariesVector(b, footer.numDictionaries);
        tslib_1$O.__spread(footer.dictionaryBatches()).slice().reverse().forEach(function (db) { return FileBlock.encode(b, db); });
        var dictionaryBatchesOffset = b.endVector();
        File_1.Footer.startFooter(b);
        File_1.Footer.addSchema(b, schemaOffset);
        File_1.Footer.addVersion(b, enum_1$e.MetadataVersion.V4);
        File_1.Footer.addRecordBatches(b, recordBatchesOffset);
        File_1.Footer.addDictionaries(b, dictionaryBatchesOffset);
        File_1.Footer.finishFooterBuffer(b, File_1.Footer.endFooter(b));
        return b.asUint8Array();
    };
    Object.defineProperty(Footer_.prototype, "numRecordBatches", {
        get: function () { return this._recordBatches.length; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Footer_.prototype, "numDictionaries", {
        get: function () { return this._dictionaryBatches.length; },
        enumerable: false,
        configurable: true
    });
    Footer_.prototype.recordBatches = function () {
        var block, i, n;
        return tslib_1$O.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    block = void 0, i = -1, n = this.numRecordBatches;
                    _a.label = 1;
                case 1:
                    if (!(++i < n)) return [3 /*break*/, 4];
                    if (!(block = this.getRecordBatch(i))) return [3 /*break*/, 3];
                    return [4 /*yield*/, block];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3: return [3 /*break*/, 1];
                case 4: return [2 /*return*/];
            }
        });
    };
    Footer_.prototype.dictionaryBatches = function () {
        var block, i, n;
        return tslib_1$O.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    block = void 0, i = -1, n = this.numDictionaries;
                    _a.label = 1;
                case 1:
                    if (!(++i < n)) return [3 /*break*/, 4];
                    if (!(block = this.getDictionaryBatch(i))) return [3 /*break*/, 3];
                    return [4 /*yield*/, block];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3: return [3 /*break*/, 1];
                case 4: return [2 /*return*/];
            }
        });
    };
    Footer_.prototype.getRecordBatch = function (index) {
        return index >= 0
            && index < this.numRecordBatches
            && this._recordBatches[index] || null;
    };
    Footer_.prototype.getDictionaryBatch = function (index) {
        return index >= 0
            && index < this.numDictionaries
            && this._dictionaryBatches[index] || null;
    };
    return Footer_;
}());
file$1.Footer = Footer_;
/** @ignore */
var OffHeapFooter = /** @class */ (function (_super) {
    tslib_1$O.__extends(OffHeapFooter, _super);
    function OffHeapFooter(schema, _footer) {
        var _this = _super.call(this, schema, _footer.version()) || this;
        _this._footer = _footer;
        return _this;
    }
    Object.defineProperty(OffHeapFooter.prototype, "numRecordBatches", {
        get: function () { return this._footer.recordBatchesLength(); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OffHeapFooter.prototype, "numDictionaries", {
        get: function () { return this._footer.dictionariesLength(); },
        enumerable: false,
        configurable: true
    });
    OffHeapFooter.prototype.getRecordBatch = function (index) {
        if (index >= 0 && index < this.numRecordBatches) {
            var fileBlock = this._footer.recordBatches(index);
            if (fileBlock) {
                return FileBlock.decode(fileBlock);
            }
        }
        return null;
    };
    OffHeapFooter.prototype.getDictionaryBatch = function (index) {
        if (index >= 0 && index < this.numDictionaries) {
            var fileBlock = this._footer.dictionaries(index);
            if (fileBlock) {
                return FileBlock.decode(fileBlock);
            }
        }
        return null;
    };
    return OffHeapFooter;
}(Footer_));
/** @ignore */
var FileBlock = /** @class */ (function () {
    function FileBlock(metaDataLength, bodyLength, offset) {
        this.metaDataLength = metaDataLength;
        this.offset = typeof offset === 'number' ? offset : offset.low;
        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;
    }
    /** @nocollapse */
    FileBlock.decode = function (block) {
        return new FileBlock(block.metaDataLength(), block.bodyLength(), block.offset());
    };
    /** @nocollapse */
    FileBlock.encode = function (b, fileBlock) {
        var metaDataLength = fileBlock.metaDataLength;
        var offset = new Long$2(fileBlock.offset, 0);
        var bodyLength = new Long$2(fileBlock.bodyLength, 0);
        return File_1.Block.createBlock(b, offset, metaDataLength, bodyLength);
    };
    return FileBlock;
}());
file$1.FileBlock = FileBlock;

var stream = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(stream, "__esModule", { value: true });
stream.AsyncByteStream = stream.ByteStream = stream.AsyncByteQueue = void 0;
var tslib_1$N = tslib.exports;
var adapters_1$1 = adapters;
var utf8_1$3 = utf8$2;
var interfaces_1$2 = interfaces;
var buffer_1$8 = buffer$1;
var compat_1$7 = compat;
/** @ignore */
var AsyncByteQueue = /** @class */ (function (_super) {
    tslib_1$N.__extends(AsyncByteQueue, _super);
    function AsyncByteQueue() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AsyncByteQueue.prototype.write = function (value) {
        if ((value = buffer_1$8.toUint8Array(value)).byteLength > 0) {
            return _super.prototype.write.call(this, value);
        }
    };
    AsyncByteQueue.prototype.toString = function (sync) {
        if (sync === void 0) { sync = false; }
        return sync
            ? utf8_1$3.decodeUtf8(this.toUint8Array(true))
            : this.toUint8Array(false).then(utf8_1$3.decodeUtf8);
    };
    AsyncByteQueue.prototype.toUint8Array = function (sync) {
        var _this = this;
        if (sync === void 0) { sync = false; }
        return sync ? buffer_1$8.joinUint8Arrays(this._values)[0] : (function () { return tslib_1$N.__awaiter(_this, void 0, void 0, function () {
            var buffers, byteLength, _a, _b, chunk, e_1_1;
            var e_1, _c;
            return tslib_1$N.__generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        buffers = [];
                        byteLength = 0;
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 6, 7, 12]);
                        _a = tslib_1$N.__asyncValues(this);
                        _d.label = 2;
                    case 2: return [4 /*yield*/, _a.next()];
                    case 3:
                        if (!(_b = _d.sent(), !_b.done)) return [3 /*break*/, 5];
                        chunk = _b.value;
                        buffers.push(chunk);
                        byteLength += chunk.byteLength;
                        _d.label = 4;
                    case 4: return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 12];
                    case 6:
                        e_1_1 = _d.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 12];
                    case 7:
                        _d.trys.push([7, , 10, 11]);
                        if (!(_b && !_b.done && (_c = _a.return))) return [3 /*break*/, 9];
                        return [4 /*yield*/, _c.call(_a)];
                    case 8:
                        _d.sent();
                        _d.label = 9;
                    case 9: return [3 /*break*/, 11];
                    case 10:
                        if (e_1) throw e_1.error;
                        return [7 /*endfinally*/];
                    case 11: return [7 /*endfinally*/];
                    case 12: return [2 /*return*/, buffer_1$8.joinUint8Arrays(buffers, byteLength)[0]];
                }
            });
        }); })();
    };
    return AsyncByteQueue;
}(interfaces_1$2.AsyncQueue));
stream.AsyncByteQueue = AsyncByteQueue;
/** @ignore */
var ByteStream = /** @class */ (function () {
    function ByteStream(source) {
        if (source) {
            this.source = new ByteStreamSource(adapters_1$1.default.fromIterable(source));
        }
    }
    ByteStream.prototype[Symbol.iterator] = function () { return this; };
    ByteStream.prototype.next = function (value) { return this.source.next(value); };
    ByteStream.prototype.throw = function (value) { return this.source.throw(value); };
    ByteStream.prototype.return = function (value) { return this.source.return(value); };
    ByteStream.prototype.peek = function (size) { return this.source.peek(size); };
    ByteStream.prototype.read = function (size) { return this.source.read(size); };
    return ByteStream;
}());
stream.ByteStream = ByteStream;
/** @ignore */
var AsyncByteStream = /** @class */ (function () {
    function AsyncByteStream(source) {
        if (source instanceof AsyncByteStream) {
            this.source = source.source;
        }
        else if (source instanceof AsyncByteQueue) {
            this.source = new AsyncByteStreamSource(adapters_1$1.default.fromAsyncIterable(source));
        }
        else if (compat_1$7.isReadableNodeStream(source)) {
            this.source = new AsyncByteStreamSource(adapters_1$1.default.fromNodeStream(source));
        }
        else if (compat_1$7.isReadableDOMStream(source)) {
            this.source = new AsyncByteStreamSource(adapters_1$1.default.fromDOMStream(source));
        }
        else if (compat_1$7.isFetchResponse(source)) {
            this.source = new AsyncByteStreamSource(adapters_1$1.default.fromDOMStream(source.body));
        }
        else if (compat_1$7.isIterable(source)) {
            this.source = new AsyncByteStreamSource(adapters_1$1.default.fromIterable(source));
        }
        else if (compat_1$7.isPromise(source)) {
            this.source = new AsyncByteStreamSource(adapters_1$1.default.fromAsyncIterable(source));
        }
        else if (compat_1$7.isAsyncIterable(source)) {
            this.source = new AsyncByteStreamSource(adapters_1$1.default.fromAsyncIterable(source));
        }
    }
    AsyncByteStream.prototype[Symbol.asyncIterator] = function () { return this; };
    AsyncByteStream.prototype.next = function (value) { return this.source.next(value); };
    AsyncByteStream.prototype.throw = function (value) { return this.source.throw(value); };
    AsyncByteStream.prototype.return = function (value) { return this.source.return(value); };
    Object.defineProperty(AsyncByteStream.prototype, "closed", {
        get: function () { return this.source.closed; },
        enumerable: false,
        configurable: true
    });
    AsyncByteStream.prototype.cancel = function (reason) { return this.source.cancel(reason); };
    AsyncByteStream.prototype.peek = function (size) { return this.source.peek(size); };
    AsyncByteStream.prototype.read = function (size) { return this.source.read(size); };
    return AsyncByteStream;
}());
stream.AsyncByteStream = AsyncByteStream;
/** @ignore */
var ByteStreamSource = /** @class */ (function () {
    function ByteStreamSource(source) {
        this.source = source;
    }
    ByteStreamSource.prototype.cancel = function (reason) { this.return(reason); };
    ByteStreamSource.prototype.peek = function (size) { return this.next(size, 'peek').value; };
    ByteStreamSource.prototype.read = function (size) { return this.next(size, 'read').value; };
    ByteStreamSource.prototype.next = function (size, cmd) {
        if (cmd === void 0) { cmd = 'read'; }
        return this.source.next({ cmd: cmd, size: size });
    };
    ByteStreamSource.prototype.throw = function (value) { return Object.create((this.source.throw && this.source.throw(value)) || interfaces_1$2.ITERATOR_DONE); };
    ByteStreamSource.prototype.return = function (value) { return Object.create((this.source.return && this.source.return(value)) || interfaces_1$2.ITERATOR_DONE); };
    return ByteStreamSource;
}());
/** @ignore */
var AsyncByteStreamSource = /** @class */ (function () {
    function AsyncByteStreamSource(source) {
        var _this = this;
        this.source = source;
        this._closedPromise = new Promise(function (r) { return _this._closedPromiseResolve = r; });
    }
    AsyncByteStreamSource.prototype.cancel = function (reason) {
        return tslib_1$N.__awaiter(this, void 0, void 0, function () { return tslib_1$N.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, this.return(reason)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        }); });
    };
    Object.defineProperty(AsyncByteStreamSource.prototype, "closed", {
        get: function () { return this._closedPromise; },
        enumerable: false,
        configurable: true
    });
    AsyncByteStreamSource.prototype.read = function (size) {
        return tslib_1$N.__awaiter(this, void 0, void 0, function () { return tslib_1$N.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, this.next(size, 'read')];
                case 1: return [2 /*return*/, (_a.sent()).value];
            }
        }); });
    };
    AsyncByteStreamSource.prototype.peek = function (size) {
        return tslib_1$N.__awaiter(this, void 0, void 0, function () { return tslib_1$N.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, this.next(size, 'peek')];
                case 1: return [2 /*return*/, (_a.sent()).value];
            }
        }); });
    };
    AsyncByteStreamSource.prototype.next = function (size, cmd) {
        if (cmd === void 0) { cmd = 'read'; }
        return tslib_1$N.__awaiter(this, void 0, void 0, function () { return tslib_1$N.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, this.source.next({ cmd: cmd, size: size })];
                case 1: return [2 /*return*/, (_a.sent())];
            }
        }); });
    };
    AsyncByteStreamSource.prototype.throw = function (value) {
        return tslib_1$N.__awaiter(this, void 0, void 0, function () {
            var result, _a;
            return tslib_1$N.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.source.throw;
                        if (!_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.source.throw(value)];
                    case 1:
                        _a = (_b.sent());
                        _b.label = 2;
                    case 2:
                        result = (_a) || interfaces_1$2.ITERATOR_DONE;
                        this._closedPromiseResolve && this._closedPromiseResolve();
                        this._closedPromiseResolve = undefined;
                        return [2 /*return*/, Object.create(result)];
                }
            });
        });
    };
    AsyncByteStreamSource.prototype.return = function (value) {
        return tslib_1$N.__awaiter(this, void 0, void 0, function () {
            var result, _a;
            return tslib_1$N.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.source.return;
                        if (!_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.source.return(value)];
                    case 1:
                        _a = (_b.sent());
                        _b.label = 2;
                    case 2:
                        result = (_a) || interfaces_1$2.ITERATOR_DONE;
                        this._closedPromiseResolve && this._closedPromiseResolve();
                        this._closedPromiseResolve = undefined;
                        return [2 /*return*/, Object.create(result)];
                }
            });
        });
    };
    return AsyncByteStreamSource;
}());

var file = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(file, "__esModule", { value: true });
file.AsyncRandomAccessFile = file.RandomAccessFile = void 0;
var tslib_1$M = tslib.exports;
var stream_1$4 = stream;
var buffer_1$7 = buffer$1;
/** @ignore */
var RandomAccessFile = /** @class */ (function (_super) {
    tslib_1$M.__extends(RandomAccessFile, _super);
    function RandomAccessFile(buffer, byteLength) {
        var _this = _super.call(this) || this;
        _this.position = 0;
        _this.buffer = buffer_1$7.toUint8Array(buffer);
        _this.size = typeof byteLength === 'undefined' ? _this.buffer.byteLength : byteLength;
        return _this;
    }
    RandomAccessFile.prototype.readInt32 = function (position) {
        var _a = this.readAt(position, 4), buffer = _a.buffer, byteOffset = _a.byteOffset;
        return new DataView(buffer, byteOffset).getInt32(0, true);
    };
    RandomAccessFile.prototype.seek = function (position) {
        this.position = Math.min(position, this.size);
        return position < this.size;
    };
    RandomAccessFile.prototype.read = function (nBytes) {
        var _a = this, buffer = _a.buffer, size = _a.size, position = _a.position;
        if (buffer && position < size) {
            if (typeof nBytes !== 'number') {
                nBytes = Infinity;
            }
            this.position = Math.min(size, position + Math.min(size - position, nBytes));
            return buffer.subarray(position, this.position);
        }
        return null;
    };
    RandomAccessFile.prototype.readAt = function (position, nBytes) {
        var buf = this.buffer;
        var end = Math.min(this.size, position + nBytes);
        return buf ? buf.subarray(position, end) : new Uint8Array(nBytes);
    };
    RandomAccessFile.prototype.close = function () { this.buffer && (this.buffer = null); };
    RandomAccessFile.prototype.throw = function (value) { this.close(); return { done: true, value: value }; };
    RandomAccessFile.prototype.return = function (value) { this.close(); return { done: true, value: value }; };
    return RandomAccessFile;
}(stream_1$4.ByteStream));
file.RandomAccessFile = RandomAccessFile;
/** @ignore */
var AsyncRandomAccessFile = /** @class */ (function (_super) {
    tslib_1$M.__extends(AsyncRandomAccessFile, _super);
    function AsyncRandomAccessFile(file, byteLength) {
        var _this = _super.call(this) || this;
        _this.position = 0;
        _this._handle = file;
        if (typeof byteLength === 'number') {
            _this.size = byteLength;
        }
        else {
            _this._pending = (function () { return tslib_1$M.__awaiter(_this, void 0, void 0, function () {
                var _a;
                return tslib_1$M.__generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, file.stat()];
                        case 1:
                            _a.size = (_b.sent()).size;
                            delete this._pending;
                            return [2 /*return*/];
                    }
                });
            }); })();
        }
        return _this;
    }
    AsyncRandomAccessFile.prototype.readInt32 = function (position) {
        return tslib_1$M.__awaiter(this, void 0, void 0, function () {
            var _a, buffer, byteOffset;
            return tslib_1$M.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.readAt(position, 4)];
                    case 1:
                        _a = _b.sent(), buffer = _a.buffer, byteOffset = _a.byteOffset;
                        return [2 /*return*/, new DataView(buffer, byteOffset).getInt32(0, true)];
                }
            });
        });
    };
    AsyncRandomAccessFile.prototype.seek = function (position) {
        return tslib_1$M.__awaiter(this, void 0, void 0, function () {
            var _a;
            return tslib_1$M.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this._pending;
                        if (!_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, this._pending];
                    case 1:
                        _a = (_b.sent());
                        _b.label = 2;
                    case 2:
                        this.position = Math.min(position, this.size);
                        return [2 /*return*/, position < this.size];
                }
            });
        });
    };
    AsyncRandomAccessFile.prototype.read = function (nBytes) {
        return tslib_1$M.__awaiter(this, void 0, void 0, function () {
            var _a, _b, file, size, position, pos, offset, bytesRead, end, buffer;
            return tslib_1$M.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = this._pending;
                        if (!_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, this._pending];
                    case 1:
                        _a = (_c.sent());
                        _c.label = 2;
                    case 2:
                        _b = this, file = _b._handle, size = _b.size, position = _b.position;
                        if (!(file && position < size)) return [3 /*break*/, 6];
                        if (typeof nBytes !== 'number') {
                            nBytes = Infinity;
                        }
                        pos = position, offset = 0, bytesRead = 0;
                        end = Math.min(size, pos + Math.min(size - pos, nBytes));
                        buffer = new Uint8Array(Math.max(0, (this.position = end) - pos));
                        _c.label = 3;
                    case 3:
                        if (!((pos += bytesRead) < end && (offset += bytesRead) < buffer.byteLength)) return [3 /*break*/, 5];
                        return [4 /*yield*/, file.read(buffer, offset, buffer.byteLength - offset, pos)];
                    case 4:
                        (bytesRead = (_c.sent()).bytesRead);
                        return [3 /*break*/, 3];
                    case 5: return [2 /*return*/, buffer];
                    case 6: return [2 /*return*/, null];
                }
            });
        });
    };
    AsyncRandomAccessFile.prototype.readAt = function (position, nBytes) {
        return tslib_1$M.__awaiter(this, void 0, void 0, function () {
            var _a, _b, file, size, end, buffer;
            return tslib_1$M.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = this._pending;
                        if (!_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, this._pending];
                    case 1:
                        _a = (_c.sent());
                        _c.label = 2;
                    case 2:
                        _b = this, file = _b._handle, size = _b.size;
                        if (!(file && (position + nBytes) < size)) return [3 /*break*/, 4];
                        end = Math.min(size, position + nBytes);
                        buffer = new Uint8Array(end - position);
                        return [4 /*yield*/, file.read(buffer, 0, nBytes, position)];
                    case 3: return [2 /*return*/, (_c.sent()).buffer];
                    case 4: return [2 /*return*/, new Uint8Array(nBytes)];
                }
            });
        });
    };
    AsyncRandomAccessFile.prototype.close = function () {
        return tslib_1$M.__awaiter(this, void 0, void 0, function () { var f, _a; return tslib_1$M.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    f = this._handle;
                    this._handle = null;
                    _a = f;
                    if (!_a) return [3 /*break*/, 2];
                    return [4 /*yield*/, f.close()];
                case 1:
                    _a = (_b.sent());
                    _b.label = 2;
                case 2:
                    return [2 /*return*/];
            }
        }); });
    };
    AsyncRandomAccessFile.prototype.throw = function (value) {
        return tslib_1$M.__awaiter(this, void 0, void 0, function () { return tslib_1$M.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, this.close()];
                case 1:
                    _a.sent();
                    return [2 /*return*/, { done: true, value: value }];
            }
        }); });
    };
    AsyncRandomAccessFile.prototype.return = function (value) {
        return tslib_1$M.__awaiter(this, void 0, void 0, function () { return tslib_1$M.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, this.close()];
                case 1:
                    _a.sent();
                    return [2 /*return*/, { done: true, value: value }];
            }
        }); });
    };
    return AsyncRandomAccessFile;
}(stream_1$4.AsyncByteStream));
file.AsyncRandomAccessFile = AsyncRandomAccessFile;

var vectorloader = {};

var int$1 = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(int$1, "__esModule", { value: true });
int$1.Int128 = int$1.Int64 = int$1.Uint64 = int$1.BaseInt64 = void 0;
var tslib_1$L = tslib.exports;
/** @ignore */
var carryBit16 = 1 << 16;
/** @ignore */
function intAsHex(value) {
    if (value < 0) {
        value = 0xFFFFFFFF + value + 1;
    }
    return "0x" + value.toString(16);
}
/** @ignore */
var kInt32DecimalDigits = 8;
/** @ignore */
var kPowersOfTen = [1,
    10,
    100,
    1000,
    10000,
    100000,
    1000000,
    10000000,
    100000000];
/** @ignore */
var BaseInt64 = /** @class */ (function () {
    function BaseInt64(buffer) {
        this.buffer = buffer;
    }
    BaseInt64.prototype.high = function () { return this.buffer[1]; };
    BaseInt64.prototype.low = function () { return this.buffer[0]; };
    BaseInt64.prototype._times = function (other) {
        // Break the left and right numbers into 16 bit chunks
        // so that we can multiply them without overflow.
        var L = new Uint32Array([
            this.buffer[1] >>> 16,
            this.buffer[1] & 0xFFFF,
            this.buffer[0] >>> 16,
            this.buffer[0] & 0xFFFF
        ]);
        var R = new Uint32Array([
            other.buffer[1] >>> 16,
            other.buffer[1] & 0xFFFF,
            other.buffer[0] >>> 16,
            other.buffer[0] & 0xFFFF
        ]);
        var product = L[3] * R[3];
        this.buffer[0] = product & 0xFFFF;
        var sum = product >>> 16;
        product = L[2] * R[3];
        sum += product;
        product = (L[3] * R[2]) >>> 0;
        sum += product;
        this.buffer[0] += sum << 16;
        this.buffer[1] = (sum >>> 0 < product ? carryBit16 : 0);
        this.buffer[1] += sum >>> 16;
        this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];
        this.buffer[1] += (L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0]) << 16;
        return this;
    };
    BaseInt64.prototype._plus = function (other) {
        var sum = (this.buffer[0] + other.buffer[0]) >>> 0;
        this.buffer[1] += other.buffer[1];
        if (sum < (this.buffer[0] >>> 0)) {
            ++this.buffer[1];
        }
        this.buffer[0] = sum;
    };
    BaseInt64.prototype.lessThan = function (other) {
        return this.buffer[1] < other.buffer[1] ||
            (this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0]);
    };
    BaseInt64.prototype.equals = function (other) {
        return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];
    };
    BaseInt64.prototype.greaterThan = function (other) {
        return other.lessThan(this);
    };
    BaseInt64.prototype.hex = function () {
        return intAsHex(this.buffer[1]) + " " + intAsHex(this.buffer[0]);
    };
    return BaseInt64;
}());
int$1.BaseInt64 = BaseInt64;
/** @ignore */
var Uint64 = /** @class */ (function (_super) {
    tslib_1$L.__extends(Uint64, _super);
    function Uint64() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Uint64.prototype.times = function (other) {
        this._times(other);
        return this;
    };
    Uint64.prototype.plus = function (other) {
        this._plus(other);
        return this;
    };
    /** @nocollapse */
    Uint64.from = function (val, out_buffer) {
        if (out_buffer === void 0) { out_buffer = new Uint32Array(2); }
        return Uint64.fromString(typeof (val) === 'string' ? val : val.toString(), out_buffer);
    };
    /** @nocollapse */
    Uint64.fromNumber = function (num, out_buffer) {
        if (out_buffer === void 0) { out_buffer = new Uint32Array(2); }
        // Always parse numbers as strings - pulling out high and low bits
        // directly seems to lose precision sometimes
        // For example:
        //     > -4613034156400212000 >>> 0
        //     721782784
        // The correct lower 32-bits are 721782752
        return Uint64.fromString(num.toString(), out_buffer);
    };
    /** @nocollapse */
    Uint64.fromString = function (str, out_buffer) {
        if (out_buffer === void 0) { out_buffer = new Uint32Array(2); }
        var length = str.length;
        var out = new Uint64(out_buffer);
        for (var posn = 0; posn < length;) {
            var group = kInt32DecimalDigits < length - posn ?
                kInt32DecimalDigits : length - posn;
            var chunk = new Uint64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));
            var multiple = new Uint64(new Uint32Array([kPowersOfTen[group], 0]));
            out.times(multiple);
            out.plus(chunk);
            posn += group;
        }
        return out;
    };
    /** @nocollapse */
    Uint64.convertArray = function (values) {
        var data = new Uint32Array(values.length * 2);
        for (var i = -1, n = values.length; ++i < n;) {
            Uint64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));
        }
        return data;
    };
    /** @nocollapse */
    Uint64.multiply = function (left, right) {
        var rtrn = new Uint64(new Uint32Array(left.buffer));
        return rtrn.times(right);
    };
    /** @nocollapse */
    Uint64.add = function (left, right) {
        var rtrn = new Uint64(new Uint32Array(left.buffer));
        return rtrn.plus(right);
    };
    return Uint64;
}(BaseInt64));
int$1.Uint64 = Uint64;
/** @ignore */
var Int64 = /** @class */ (function (_super) {
    tslib_1$L.__extends(Int64, _super);
    function Int64() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Int64.prototype.negate = function () {
        this.buffer[0] = ~this.buffer[0] + 1;
        this.buffer[1] = ~this.buffer[1];
        if (this.buffer[0] == 0) {
            ++this.buffer[1];
        }
        return this;
    };
    Int64.prototype.times = function (other) {
        this._times(other);
        return this;
    };
    Int64.prototype.plus = function (other) {
        this._plus(other);
        return this;
    };
    Int64.prototype.lessThan = function (other) {
        // force high bytes to be signed
        var this_high = this.buffer[1] << 0;
        var other_high = other.buffer[1] << 0;
        return this_high < other_high ||
            (this_high === other_high && this.buffer[0] < other.buffer[0]);
    };
    /** @nocollapse */
    Int64.from = function (val, out_buffer) {
        if (out_buffer === void 0) { out_buffer = new Uint32Array(2); }
        return Int64.fromString(typeof (val) === 'string' ? val : val.toString(), out_buffer);
    };
    /** @nocollapse */
    Int64.fromNumber = function (num, out_buffer) {
        if (out_buffer === void 0) { out_buffer = new Uint32Array(2); }
        // Always parse numbers as strings - pulling out high and low bits
        // directly seems to lose precision sometimes
        // For example:
        //     > -4613034156400212000 >>> 0
        //     721782784
        // The correct lower 32-bits are 721782752
        return Int64.fromString(num.toString(), out_buffer);
    };
    /** @nocollapse */
    Int64.fromString = function (str, out_buffer) {
        if (out_buffer === void 0) { out_buffer = new Uint32Array(2); }
        // TODO: Assert that out_buffer is 0 and length = 2
        var negate = str.startsWith('-');
        var length = str.length;
        var out = new Int64(out_buffer);
        for (var posn = negate ? 1 : 0; posn < length;) {
            var group = kInt32DecimalDigits < length - posn ?
                kInt32DecimalDigits : length - posn;
            var chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));
            var multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));
            out.times(multiple);
            out.plus(chunk);
            posn += group;
        }
        return negate ? out.negate() : out;
    };
    /** @nocollapse */
    Int64.convertArray = function (values) {
        var data = new Uint32Array(values.length * 2);
        for (var i = -1, n = values.length; ++i < n;) {
            Int64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));
        }
        return data;
    };
    /** @nocollapse */
    Int64.multiply = function (left, right) {
        var rtrn = new Int64(new Uint32Array(left.buffer));
        return rtrn.times(right);
    };
    /** @nocollapse */
    Int64.add = function (left, right) {
        var rtrn = new Int64(new Uint32Array(left.buffer));
        return rtrn.plus(right);
    };
    return Int64;
}(BaseInt64));
int$1.Int64 = Int64;
/** @ignore */
var Int128 = /** @class */ (function () {
    function Int128(buffer) {
        this.buffer = buffer;
        // buffer[3] MSB (high)
        // buffer[2]
        // buffer[1]
        // buffer[0] LSB (low)
    }
    Int128.prototype.high = function () {
        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));
    };
    Int128.prototype.low = function () {
        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));
    };
    Int128.prototype.negate = function () {
        this.buffer[0] = ~this.buffer[0] + 1;
        this.buffer[1] = ~this.buffer[1];
        this.buffer[2] = ~this.buffer[2];
        this.buffer[3] = ~this.buffer[3];
        if (this.buffer[0] == 0) {
            ++this.buffer[1];
        }
        if (this.buffer[1] == 0) {
            ++this.buffer[2];
        }
        if (this.buffer[2] == 0) {
            ++this.buffer[3];
        }
        return this;
    };
    Int128.prototype.times = function (other) {
        // Break the left and right numbers into 32 bit chunks
        // so that we can multiply them without overflow.
        var L0 = new Uint64(new Uint32Array([this.buffer[3], 0]));
        var L1 = new Uint64(new Uint32Array([this.buffer[2], 0]));
        var L2 = new Uint64(new Uint32Array([this.buffer[1], 0]));
        var L3 = new Uint64(new Uint32Array([this.buffer[0], 0]));
        var R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));
        var R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));
        var R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));
        var R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));
        var product = Uint64.multiply(L3, R3);
        this.buffer[0] = product.low();
        var sum = new Uint64(new Uint32Array([product.high(), 0]));
        product = Uint64.multiply(L2, R3);
        sum.plus(product);
        product = Uint64.multiply(L3, R2);
        sum.plus(product);
        this.buffer[1] = sum.low();
        this.buffer[3] = (sum.lessThan(product) ? 1 : 0);
        this.buffer[2] = sum.high();
        var high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));
        high.plus(Uint64.multiply(L1, R3))
            .plus(Uint64.multiply(L2, R2))
            .plus(Uint64.multiply(L3, R1));
        this.buffer[3] += Uint64.multiply(L0, R3)
            .plus(Uint64.multiply(L1, R2))
            .plus(Uint64.multiply(L2, R1))
            .plus(Uint64.multiply(L3, R0)).low();
        return this;
    };
    Int128.prototype.plus = function (other) {
        var sums = new Uint32Array(4);
        sums[3] = (this.buffer[3] + other.buffer[3]) >>> 0;
        sums[2] = (this.buffer[2] + other.buffer[2]) >>> 0;
        sums[1] = (this.buffer[1] + other.buffer[1]) >>> 0;
        sums[0] = (this.buffer[0] + other.buffer[0]) >>> 0;
        if (sums[0] < (this.buffer[0] >>> 0)) {
            ++sums[1];
        }
        if (sums[1] < (this.buffer[1] >>> 0)) {
            ++sums[2];
        }
        if (sums[2] < (this.buffer[2] >>> 0)) {
            ++sums[3];
        }
        this.buffer[3] = sums[3];
        this.buffer[2] = sums[2];
        this.buffer[1] = sums[1];
        this.buffer[0] = sums[0];
        return this;
    };
    Int128.prototype.hex = function () {
        return intAsHex(this.buffer[3]) + " " + intAsHex(this.buffer[2]) + " " + intAsHex(this.buffer[1]) + " " + intAsHex(this.buffer[0]);
    };
    /** @nocollapse */
    Int128.multiply = function (left, right) {
        var rtrn = new Int128(new Uint32Array(left.buffer));
        return rtrn.times(right);
    };
    /** @nocollapse */
    Int128.add = function (left, right) {
        var rtrn = new Int128(new Uint32Array(left.buffer));
        return rtrn.plus(right);
    };
    /** @nocollapse */
    Int128.from = function (val, out_buffer) {
        if (out_buffer === void 0) { out_buffer = new Uint32Array(4); }
        return Int128.fromString(typeof (val) === 'string' ? val : val.toString(), out_buffer);
    };
    /** @nocollapse */
    Int128.fromNumber = function (num, out_buffer) {
        if (out_buffer === void 0) { out_buffer = new Uint32Array(4); }
        // Always parse numbers as strings - pulling out high and low bits
        // directly seems to lose precision sometimes
        // For example:
        //     > -4613034156400212000 >>> 0
        //     721782784
        // The correct lower 32-bits are 721782752
        return Int128.fromString(num.toString(), out_buffer);
    };
    /** @nocollapse */
    Int128.fromString = function (str, out_buffer) {
        if (out_buffer === void 0) { out_buffer = new Uint32Array(4); }
        // TODO: Assert that out_buffer is 0 and length = 4
        var negate = str.startsWith('-');
        var length = str.length;
        var out = new Int128(out_buffer);
        for (var posn = negate ? 1 : 0; posn < length;) {
            var group = kInt32DecimalDigits < length - posn ?
                kInt32DecimalDigits : length - posn;
            var chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));
            var multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));
            out.times(multiple);
            out.plus(chunk);
            posn += group;
        }
        return negate ? out.negate() : out;
    };
    /** @nocollapse */
    Int128.convertArray = function (values) {
        // TODO: Distinguish between string and number at compile-time
        var data = new Uint32Array(values.length * 4);
        for (var i = -1, n = values.length; ++i < n;) {
            Int128.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));
        }
        return data;
    };
    return Int128;
}());
int$1.Int128 = Int128;

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(vectorloader, "__esModule", { value: true });
vectorloader.JSONVectorLoader = vectorloader.VectorLoader = void 0;
var tslib_1$K = tslib.exports;
var data_1$6 = data$1;
var schema_1$9 = schema;
var type_1$i = type;
var visitor_1$b = visitor;
var bit_1$4 = bit;
var utf8_1$2 = utf8$2;
var int_1$2 = int$1;
var enum_1$d = _enum;
var buffer_1$6 = buffer$1;
/** @ignore */
var VectorLoader = /** @class */ (function (_super) {
    tslib_1$K.__extends(VectorLoader, _super);
    function VectorLoader(bytes, nodes, buffers, dictionaries) {
        var _this = _super.call(this) || this;
        _this.nodesIndex = -1;
        _this.buffersIndex = -1;
        _this.bytes = bytes;
        _this.nodes = nodes;
        _this.buffers = buffers;
        _this.dictionaries = dictionaries;
        return _this;
    }
    VectorLoader.prototype.visit = function (node) {
        return _super.prototype.visit.call(this, node instanceof schema_1$9.Field ? node.type : node);
    };
    VectorLoader.prototype.visitNull = function (type, _a) {
        var length = (_a === void 0 ? this.nextFieldNode() : _a).length;
        return data_1$6.Data.Null(type, 0, length);
    };
    VectorLoader.prototype.visitBool = function (type, _a) {
        var _b = _a === void 0 ? this.nextFieldNode() : _a, length = _b.length, nullCount = _b.nullCount;
        return data_1$6.Data.Bool(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));
    };
    VectorLoader.prototype.visitInt = function (type, _a) {
        var _b = _a === void 0 ? this.nextFieldNode() : _a, length = _b.length, nullCount = _b.nullCount;
        return data_1$6.Data.Int(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));
    };
    VectorLoader.prototype.visitFloat = function (type, _a) {
        var _b = _a === void 0 ? this.nextFieldNode() : _a, length = _b.length, nullCount = _b.nullCount;
        return data_1$6.Data.Float(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));
    };
    VectorLoader.prototype.visitUtf8 = function (type, _a) {
        var _b = _a === void 0 ? this.nextFieldNode() : _a, length = _b.length, nullCount = _b.nullCount;
        return data_1$6.Data.Utf8(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));
    };
    VectorLoader.prototype.visitBinary = function (type, _a) {
        var _b = _a === void 0 ? this.nextFieldNode() : _a, length = _b.length, nullCount = _b.nullCount;
        return data_1$6.Data.Binary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));
    };
    VectorLoader.prototype.visitFixedSizeBinary = function (type, _a) {
        var _b = _a === void 0 ? this.nextFieldNode() : _a, length = _b.length, nullCount = _b.nullCount;
        return data_1$6.Data.FixedSizeBinary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));
    };
    VectorLoader.prototype.visitDate = function (type, _a) {
        var _b = _a === void 0 ? this.nextFieldNode() : _a, length = _b.length, nullCount = _b.nullCount;
        return data_1$6.Data.Date(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));
    };
    VectorLoader.prototype.visitTimestamp = function (type, _a) {
        var _b = _a === void 0 ? this.nextFieldNode() : _a, length = _b.length, nullCount = _b.nullCount;
        return data_1$6.Data.Timestamp(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));
    };
    VectorLoader.prototype.visitTime = function (type, _a) {
        var _b = _a === void 0 ? this.nextFieldNode() : _a, length = _b.length, nullCount = _b.nullCount;
        return data_1$6.Data.Time(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));
    };
    VectorLoader.prototype.visitDecimal = function (type, _a) {
        var _b = _a === void 0 ? this.nextFieldNode() : _a, length = _b.length, nullCount = _b.nullCount;
        return data_1$6.Data.Decimal(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));
    };
    VectorLoader.prototype.visitList = function (type, _a) {
        var _b = _a === void 0 ? this.nextFieldNode() : _a, length = _b.length, nullCount = _b.nullCount;
        return data_1$6.Data.List(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));
    };
    VectorLoader.prototype.visitStruct = function (type, _a) {
        var _b = _a === void 0 ? this.nextFieldNode() : _a, length = _b.length, nullCount = _b.nullCount;
        return data_1$6.Data.Struct(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));
    };
    VectorLoader.prototype.visitUnion = function (type) { return type.mode === enum_1$d.UnionMode.Sparse ? this.visitSparseUnion(type) : this.visitDenseUnion(type); };
    VectorLoader.prototype.visitDenseUnion = function (type, _a) {
        var _b = _a === void 0 ? this.nextFieldNode() : _a, length = _b.length, nullCount = _b.nullCount;
        return data_1$6.Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitMany(type.children));
    };
    VectorLoader.prototype.visitSparseUnion = function (type, _a) {
        var _b = _a === void 0 ? this.nextFieldNode() : _a, length = _b.length, nullCount = _b.nullCount;
        return data_1$6.Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitMany(type.children));
    };
    VectorLoader.prototype.visitDictionary = function (type, _a) {
        var _b = _a === void 0 ? this.nextFieldNode() : _a, length = _b.length, nullCount = _b.nullCount;
        return data_1$6.Data.Dictionary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type.indices), this.readDictionary(type));
    };
    VectorLoader.prototype.visitInterval = function (type, _a) {
        var _b = _a === void 0 ? this.nextFieldNode() : _a, length = _b.length, nullCount = _b.nullCount;
        return data_1$6.Data.Interval(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));
    };
    VectorLoader.prototype.visitFixedSizeList = function (type, _a) {
        var _b = _a === void 0 ? this.nextFieldNode() : _a, length = _b.length, nullCount = _b.nullCount;
        return data_1$6.Data.FixedSizeList(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visit(type.children[0]));
    };
    VectorLoader.prototype.visitMap = function (type, _a) {
        var _b = _a === void 0 ? this.nextFieldNode() : _a, length = _b.length, nullCount = _b.nullCount;
        return data_1$6.Data.Map(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));
    };
    VectorLoader.prototype.nextFieldNode = function () { return this.nodes[++this.nodesIndex]; };
    VectorLoader.prototype.nextBufferRange = function () { return this.buffers[++this.buffersIndex]; };
    VectorLoader.prototype.readNullBitmap = function (type, nullCount, buffer) {
        if (buffer === void 0) { buffer = this.nextBufferRange(); }
        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);
    };
    VectorLoader.prototype.readOffsets = function (type, buffer) { return this.readData(type, buffer); };
    VectorLoader.prototype.readTypeIds = function (type, buffer) { return this.readData(type, buffer); };
    VectorLoader.prototype.readData = function (_type, _a) {
        var _b = _a === void 0 ? this.nextBufferRange() : _a, length = _b.length, offset = _b.offset;
        return this.bytes.subarray(offset, offset + length);
    };
    VectorLoader.prototype.readDictionary = function (type) {
        return this.dictionaries.get(type.id);
    };
    return VectorLoader;
}(visitor_1$b.Visitor));
vectorloader.VectorLoader = VectorLoader;
/** @ignore */
var JSONVectorLoader = /** @class */ (function (_super) {
    tslib_1$K.__extends(JSONVectorLoader, _super);
    function JSONVectorLoader(sources, nodes, buffers, dictionaries) {
        var _this = _super.call(this, new Uint8Array(0), nodes, buffers, dictionaries) || this;
        _this.sources = sources;
        return _this;
    }
    JSONVectorLoader.prototype.readNullBitmap = function (_type, nullCount, _a) {
        var offset = (_a === void 0 ? this.nextBufferRange() : _a).offset;
        return nullCount <= 0 ? new Uint8Array(0) : bit_1$4.packBools(this.sources[offset]);
    };
    JSONVectorLoader.prototype.readOffsets = function (_type, _a) {
        var offset = (_a === void 0 ? this.nextBufferRange() : _a).offset;
        return buffer_1$6.toArrayBufferView(Uint8Array, buffer_1$6.toArrayBufferView(Int32Array, this.sources[offset]));
    };
    JSONVectorLoader.prototype.readTypeIds = function (type, _a) {
        var offset = (_a === void 0 ? this.nextBufferRange() : _a).offset;
        return buffer_1$6.toArrayBufferView(Uint8Array, buffer_1$6.toArrayBufferView(type.ArrayType, this.sources[offset]));
    };
    JSONVectorLoader.prototype.readData = function (type, _a) {
        var offset = (_a === void 0 ? this.nextBufferRange() : _a).offset;
        var sources = this.sources;
        if (type_1$i.DataType.isTimestamp(type)) {
            return buffer_1$6.toArrayBufferView(Uint8Array, int_1$2.Int64.convertArray(sources[offset]));
        }
        else if ((type_1$i.DataType.isInt(type) || type_1$i.DataType.isTime(type)) && type.bitWidth === 64) {
            return buffer_1$6.toArrayBufferView(Uint8Array, int_1$2.Int64.convertArray(sources[offset]));
        }
        else if (type_1$i.DataType.isDate(type) && type.unit === enum_1$d.DateUnit.MILLISECOND) {
            return buffer_1$6.toArrayBufferView(Uint8Array, int_1$2.Int64.convertArray(sources[offset]));
        }
        else if (type_1$i.DataType.isDecimal(type)) {
            return buffer_1$6.toArrayBufferView(Uint8Array, int_1$2.Int128.convertArray(sources[offset]));
        }
        else if (type_1$i.DataType.isBinary(type) || type_1$i.DataType.isFixedSizeBinary(type)) {
            return binaryDataFromJSON(sources[offset]);
        }
        else if (type_1$i.DataType.isBool(type)) {
            return bit_1$4.packBools(sources[offset]);
        }
        else if (type_1$i.DataType.isUtf8(type)) {
            return utf8_1$2.encodeUtf8(sources[offset].join(''));
        }
        return buffer_1$6.toArrayBufferView(Uint8Array, buffer_1$6.toArrayBufferView(type.ArrayType, sources[offset].map(function (x) { return +x; })));
    };
    return JSONVectorLoader;
}(VectorLoader));
vectorloader.JSONVectorLoader = JSONVectorLoader;
/** @ignore */
function binaryDataFromJSON(values) {
    // "DATA": ["49BC7D5B6C47D2","3F5FB6D9322026"]
    // There are definitely more efficient ways to do this... but it gets the
    // job done.
    var joined = values.join('');
    var data = new Uint8Array(joined.length / 2);
    for (var i = 0; i < joined.length; i += 2) {
        data[i >> 1] = parseInt(joined.substr(i, 2), 16);
    }
    return data;
}

var recordbatch$1 = {};

var table = {};

var column = {};

var chunked = {};

var vector$1 = {};

var row = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(row, "__esModule", { value: true });
row.StructRow = row.MapRow = void 0;
var tslib_1$J = tslib.exports;
var pretty_1 = pretty;
/** @ignore */ var kParent = Symbol.for('parent');
/** @ignore */ var kRowIndex$1 = Symbol.for('rowIndex');
/** @ignore */ var kKeyToIdx = Symbol.for('keyToIdx');
/** @ignore */ var kIdxToVal = Symbol.for('idxToVal');
/** @ignore */ var kCustomInspect = Symbol.for('nodejs.util.inspect.custom');
var Row = /** @class */ (function () {
    function Row(parent, numKeys) {
        this[kParent] = parent;
        this.size = numKeys;
    }
    Row.prototype.entries = function () { return this[Symbol.iterator](); };
    Row.prototype.has = function (key) { return this.get(key) !== undefined; };
    Row.prototype.get = function (key) {
        var val = undefined;
        if (key != null) {
            var ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());
            var idx = ktoi.get(key);
            if (idx !== undefined) {
                var itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));
                ((val = itov[idx]) !== undefined) || (itov[idx] = val = this.getValue(idx));
            }
            else if ((idx = this.getIndex(key)) > -1) {
                ktoi.set(key, idx);
                var itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));
                ((val = itov[idx]) !== undefined) || (itov[idx] = val = this.getValue(idx));
            }
        }
        return val;
    };
    Row.prototype.set = function (key, val) {
        if (key != null) {
            var ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());
            var idx = ktoi.get(key);
            if (idx === undefined) {
                ktoi.set(key, idx = this.getIndex(key));
            }
            if (idx > -1) {
                var itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));
                itov[idx] = this.setValue(idx, val);
            }
        }
        return this;
    };
    Row.prototype.clear = function () { throw new Error("Clearing " + this[Symbol.toStringTag] + " not supported."); };
    Row.prototype.delete = function (_) { throw new Error("Deleting " + this[Symbol.toStringTag] + " values not supported."); };
    Row.prototype[Symbol.iterator] = function () {
        var ki, vi, ktoi, itov, k, v, i, kr, vr;
        return tslib_1$J.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    ki = this.keys();
                    vi = this.values();
                    ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());
                    itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));
                    k = void 0, v = void 0, i = 0, kr = void 0, vr = void 0;
                    _a.label = 1;
                case 1:
                    if (!!((kr = ki.next()).done || (vr = vi.next()).done)) return [3 /*break*/, 4];
                    k = kr.value;
                    v = vr.value;
                    itov[i] = v;
                    ktoi.has(k) || ktoi.set(k, i);
                    return [4 /*yield*/, [k, v]];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3:
                    ++i;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/];
            }
        });
    };
    Row.prototype.forEach = function (callbackfn, thisArg) {
        var ki = this.keys();
        var vi = this.values();
        var callback = thisArg === undefined ? callbackfn :
            function (v, k, m) { return callbackfn.call(thisArg, v, k, m); };
        var ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());
        var itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));
        for (var k = void 0, v = void 0, i = 0, kr = void 0, vr = void 0; !((kr = ki.next()).done || (vr = vi.next()).done); ++i) {
            k = kr.value;
            v = vr.value;
            itov[i] = v;
            ktoi.has(k) || ktoi.set(k, i);
            callback(v, k, this);
        }
    };
    Row.prototype.toArray = function () { return tslib_1$J.__spread(this.values()); };
    Row.prototype.toJSON = function () {
        var obj = {};
        this.forEach(function (val, key) { return obj[key] = val; });
        return obj;
    };
    Row.prototype.inspect = function () { return this.toString(); };
    Row.prototype[kCustomInspect] = function () { return this.toString(); };
    Row.prototype.toString = function () {
        var str = [];
        this.forEach(function (val, key) {
            key = pretty_1.valueToString(key);
            val = pretty_1.valueToString(val);
            str.push(key + ": " + val);
        });
        return "{ " + str.join(', ') + " }";
    };
    Row[Symbol.toStringTag] = (function (proto) {
        var _a;
        Object.defineProperties(proto, (_a = {
                'size': { writable: true, enumerable: false, configurable: false, value: 0 }
            },
            _a[kParent] = { writable: true, enumerable: false, configurable: false, value: null },
            _a[kRowIndex$1] = { writable: true, enumerable: false, configurable: false, value: -1 },
            _a));
        return proto[Symbol.toStringTag] = 'Row';
    })(Row.prototype);
    return Row;
}());
var MapRow = /** @class */ (function (_super) {
    tslib_1$J.__extends(MapRow, _super);
    function MapRow(slice) {
        var _this = _super.call(this, slice, slice.length) || this;
        return createRowProxy(_this);
    }
    MapRow.prototype.keys = function () {
        return this[kParent].getChildAt(0)[Symbol.iterator]();
    };
    MapRow.prototype.values = function () {
        return this[kParent].getChildAt(1)[Symbol.iterator]();
    };
    MapRow.prototype.getKey = function (idx) {
        return this[kParent].getChildAt(0).get(idx);
    };
    MapRow.prototype.getIndex = function (key) {
        return this[kParent].getChildAt(0).indexOf(key);
    };
    MapRow.prototype.getValue = function (index) {
        return this[kParent].getChildAt(1).get(index);
    };
    MapRow.prototype.setValue = function (index, value) {
        this[kParent].getChildAt(1).set(index, value);
    };
    return MapRow;
}(Row));
row.MapRow = MapRow;
var StructRow = /** @class */ (function (_super) {
    tslib_1$J.__extends(StructRow, _super);
    function StructRow(parent) {
        var _this = _super.call(this, parent, parent.type.children.length) || this;
        return defineRowProxyProperties(_this);
    }
    StructRow.prototype.keys = function () {
        var _a, _b, field, e_1_1;
        var e_1, _c;
        return tslib_1$J.__generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    _d.trys.push([0, 5, 6, 7]);
                    _a = tslib_1$J.__values(this[kParent].type.children), _b = _a.next();
                    _d.label = 1;
                case 1:
                    if (!!_b.done) return [3 /*break*/, 4];
                    field = _b.value;
                    return [4 /*yield*/, field.name];
                case 2:
                    _d.sent();
                    _d.label = 3;
                case 3:
                    _b = _a.next();
                    return [3 /*break*/, 1];
                case 4: return [3 /*break*/, 7];
                case 5:
                    e_1_1 = _d.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 7];
                case 6:
                    try {
                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 7: return [2 /*return*/];
            }
        });
    };
    StructRow.prototype.values = function () {
        var _a, _b, field, e_2_1;
        var e_2, _c;
        return tslib_1$J.__generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    _d.trys.push([0, 5, 6, 7]);
                    _a = tslib_1$J.__values(this[kParent].type.children), _b = _a.next();
                    _d.label = 1;
                case 1:
                    if (!!_b.done) return [3 /*break*/, 4];
                    field = _b.value;
                    return [4 /*yield*/, this[field.name]];
                case 2:
                    _d.sent();
                    _d.label = 3;
                case 3:
                    _b = _a.next();
                    return [3 /*break*/, 1];
                case 4: return [3 /*break*/, 7];
                case 5:
                    e_2_1 = _d.sent();
                    e_2 = { error: e_2_1 };
                    return [3 /*break*/, 7];
                case 6:
                    try {
                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                    }
                    finally { if (e_2) throw e_2.error; }
                    return [7 /*endfinally*/];
                case 7: return [2 /*return*/];
            }
        });
    };
    StructRow.prototype.getKey = function (idx) {
        return this[kParent].type.children[idx].name;
    };
    StructRow.prototype.getIndex = function (key) {
        return this[kParent].type.children.findIndex(function (f) { return f.name === key; });
    };
    StructRow.prototype.getValue = function (index) {
        return this[kParent].getChildAt(index).get(this[kRowIndex$1]);
    };
    StructRow.prototype.setValue = function (index, value) {
        return this[kParent].getChildAt(index).set(this[kRowIndex$1], value);
    };
    return StructRow;
}(Row));
row.StructRow = StructRow;
Object.setPrototypeOf(Row.prototype, Map.prototype);
/** @ignore */
var defineRowProxyProperties = (function () {
    var desc = { enumerable: true, configurable: false, get: null, set: null };
    return function (row) {
        var e_3, _a;
        var idx = -1;
        var ktoi = row[kKeyToIdx] || (row[kKeyToIdx] = new Map());
        var getter = function (key) { return function () { return this.get(key); }; };
        var setter = function (key) { return function (val) { return this.set(key, val); }; };
        try {
            for (var _b = tslib_1$J.__values(row.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var key = _c.value;
                ktoi.set(key, ++idx);
                desc.get = getter(key);
                desc.set = setter(key);
                Object.prototype.hasOwnProperty.call(row, key) || (desc.enumerable = true, Object.defineProperty(row, key, desc));
                Object.prototype.hasOwnProperty.call(row, idx) || (desc.enumerable = false, Object.defineProperty(row, idx, desc));
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        desc.get = desc.set = null;
        return row;
    };
})();
/** @ignore */
var createRowProxy = (function () {
    if (typeof Proxy === 'undefined') {
        return defineRowProxyProperties;
    }
    var has = Row.prototype.has;
    var get = Row.prototype.get;
    var set = Row.prototype.set;
    var getKey = Row.prototype.getKey;
    var RowProxyHandler = {
        isExtensible: function () { return false; },
        deleteProperty: function () { return false; },
        preventExtensions: function () { return true; },
        ownKeys: function (row) { return tslib_1$J.__spread(row.keys()).map(function (x) { return "" + x; }); },
        has: function (row, key) {
            switch (key) {
                case 'getKey':
                case 'getIndex':
                case 'getValue':
                case 'setValue':
                case 'toArray':
                case 'toJSON':
                case 'inspect':
                case 'constructor':
                case 'isPrototypeOf':
                case 'propertyIsEnumerable':
                case 'toString':
                case 'toLocaleString':
                case 'valueOf':
                case 'size':
                case 'has':
                case 'get':
                case 'set':
                case 'clear':
                case 'delete':
                case 'keys':
                case 'values':
                case 'entries':
                case 'forEach':
                case '__proto__':
                case '__defineGetter__':
                case '__defineSetter__':
                case 'hasOwnProperty':
                case '__lookupGetter__':
                case '__lookupSetter__':
                case Symbol.iterator:
                case Symbol.toStringTag:
                case kParent:
                case kRowIndex$1:
                case kIdxToVal:
                case kKeyToIdx:
                case kCustomInspect:
                    return true;
            }
            if (typeof key === 'number' && !row.has(key)) {
                key = row.getKey(key);
            }
            return row.has(key);
        },
        get: function (row, key, receiver) {
            switch (key) {
                case 'getKey':
                case 'getIndex':
                case 'getValue':
                case 'setValue':
                case 'toArray':
                case 'toJSON':
                case 'inspect':
                case 'constructor':
                case 'isPrototypeOf':
                case 'propertyIsEnumerable':
                case 'toString':
                case 'toLocaleString':
                case 'valueOf':
                case 'size':
                case 'has':
                case 'get':
                case 'set':
                case 'clear':
                case 'delete':
                case 'keys':
                case 'values':
                case 'entries':
                case 'forEach':
                case '__proto__':
                case '__defineGetter__':
                case '__defineSetter__':
                case 'hasOwnProperty':
                case '__lookupGetter__':
                case '__lookupSetter__':
                case Symbol.iterator:
                case Symbol.toStringTag:
                case kParent:
                case kRowIndex$1:
                case kIdxToVal:
                case kKeyToIdx:
                case kCustomInspect:
                    return Reflect.get(row, key, receiver);
            }
            if (typeof key === 'number' && !has.call(receiver, key)) {
                key = getKey.call(receiver, key);
            }
            return get.call(receiver, key);
        },
        set: function (row, key, val, receiver) {
            switch (key) {
                case kParent:
                case kRowIndex$1:
                case kIdxToVal:
                case kKeyToIdx:
                    return Reflect.set(row, key, val, receiver);
                case 'getKey':
                case 'getIndex':
                case 'getValue':
                case 'setValue':
                case 'toArray':
                case 'toJSON':
                case 'inspect':
                case 'constructor':
                case 'isPrototypeOf':
                case 'propertyIsEnumerable':
                case 'toString':
                case 'toLocaleString':
                case 'valueOf':
                case 'size':
                case 'has':
                case 'get':
                case 'set':
                case 'clear':
                case 'delete':
                case 'keys':
                case 'values':
                case 'entries':
                case 'forEach':
                case '__proto__':
                case '__defineGetter__':
                case '__defineSetter__':
                case 'hasOwnProperty':
                case '__lookupGetter__':
                case '__lookupSetter__':
                case Symbol.iterator:
                case Symbol.toStringTag:
                    return false;
            }
            if (typeof key === 'number' && !has.call(receiver, key)) {
                key = getKey.call(receiver, key);
            }
            return has.call(receiver, key) ? !!set.call(receiver, key, val) : false;
        },
    };
    return function (row) { return new Proxy(row, RowProxyHandler); };
})();

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(vector$1, "__esModule", { value: true });
vector$1.createElementComparator = vector$1.clampRange = vector$1.clampIndex = void 0;
var vector_1$e = vector$2;
var row_1$2 = row;
var buffer_1$5 = buffer$1;
var compat_1$6 = compat;
/** @ignore */
function clampIndex(source, index, then) {
    var length = source.length;
    var adjust = index > -1 ? index : (length + (index % length));
    return then ? then(source, adjust) : adjust;
}
vector$1.clampIndex = clampIndex;
/** @ignore */
var tmp;
/** @ignore */
function clampRange(source, begin, end, then) {
    // Adjust args similar to Array.prototype.slice. Normalize begin/end to
    // clamp between 0 and length, and wrap around on negative indices, e.g.
    // slice(-1, 5) or slice(5, -1)
    var _a = source.length, len = _a === void 0 ? 0 : _a;
    var lhs = typeof begin !== 'number' ? 0 : begin;
    var rhs = typeof end !== 'number' ? len : end;
    // wrap around on negative start/end positions
    (lhs < 0) && (lhs = ((lhs % len) + len) % len);
    (rhs < 0) && (rhs = ((rhs % len) + len) % len);
    // ensure lhs <= rhs
    (rhs < lhs) && (tmp = lhs, lhs = rhs, rhs = tmp);
    // ensure rhs <= length
    (rhs > len) && (rhs = len);
    return then ? then(source, lhs, rhs) : [lhs, rhs];
}
vector$1.clampRange = clampRange;
var big0 = compat_1$6.BigIntAvailable ? compat_1$6.BigInt(0) : 0;
var isNaNFast = function (value) { return value !== value; };
/** @ignore */
function createElementComparator(search) {
    var typeofSearch = typeof search;
    // Compare primitives
    if (typeofSearch !== 'object' || search === null) {
        // Compare NaN
        if (isNaNFast(search)) {
            return isNaNFast;
        }
        return typeofSearch !== 'bigint'
            ? function (value) { return value === search; }
            : function (value) { return (big0 + value) === search; };
    }
    // Compare Dates
    if (search instanceof Date) {
        var valueOfSearch_1 = search.valueOf();
        return function (value) { return value instanceof Date ? (value.valueOf() === valueOfSearch_1) : false; };
    }
    // Compare TypedArrays
    if (ArrayBuffer.isView(search)) {
        return function (value) { return value ? buffer_1$5.compareArrayLike(search, value) : false; };
    }
    // Compare Maps and Rows
    if (search instanceof Map) {
        return creatMapComparator(search);
    }
    // Compare Array-likes
    if (Array.isArray(search)) {
        return createArrayLikeComparator(search);
    }
    // Compare Vectors
    if (search instanceof vector_1$e.Vector) {
        return createVectorComparator(search);
    }
    // Compare non-empty Objects
    return createObjectComparator(search);
}
vector$1.createElementComparator = createElementComparator;
/** @ignore */
function createArrayLikeComparator(lhs) {
    var comparators = [];
    for (var i = -1, n = lhs.length; ++i < n;) {
        comparators[i] = createElementComparator(lhs[i]);
    }
    return createSubElementsComparator(comparators);
}
/** @ignore */
function creatMapComparator(lhs) {
    var i = -1;
    var comparators = [];
    lhs.forEach(function (v) { return comparators[++i] = createElementComparator(v); });
    return createSubElementsComparator(comparators);
}
/** @ignore */
function createVectorComparator(lhs) {
    var comparators = [];
    for (var i = -1, n = lhs.length; ++i < n;) {
        comparators[i] = createElementComparator(lhs.get(i));
    }
    return createSubElementsComparator(comparators);
}
/** @ignore */
function createObjectComparator(lhs) {
    var keys = Object.keys(lhs);
    // Only compare non-empty Objects
    if (keys.length === 0) {
        return function () { return false; };
    }
    var comparators = [];
    for (var i = -1, n = keys.length; ++i < n;) {
        comparators[i] = createElementComparator(lhs[keys[i]]);
    }
    return createSubElementsComparator(comparators, keys);
}
function createSubElementsComparator(comparators, keys) {
    return function (rhs) {
        if (!rhs || typeof rhs !== 'object') {
            return false;
        }
        switch (rhs.constructor) {
            case Array: return compareArray(comparators, rhs);
            case Map:
            case row_1$2.MapRow:
            case row_1$2.StructRow:
                return compareObject(comparators, rhs, rhs.keys());
            case Object:
            case undefined: // support `Object.create(null)` objects
                return compareObject(comparators, rhs, keys || Object.keys(rhs));
        }
        return rhs instanceof vector_1$e.Vector ? compareVector(comparators, rhs) : false;
    };
}
function compareArray(comparators, arr) {
    var n = comparators.length;
    if (arr.length !== n) {
        return false;
    }
    for (var i = -1; ++i < n;) {
        if (!(comparators[i](arr[i]))) {
            return false;
        }
    }
    return true;
}
function compareVector(comparators, vec) {
    var n = comparators.length;
    if (vec.length !== n) {
        return false;
    }
    for (var i = -1; ++i < n;) {
        if (!(comparators[i](vec.get(i)))) {
            return false;
        }
    }
    return true;
}
function compareObject(comparators, obj, keys) {
    var lKeyItr = keys[Symbol.iterator]();
    var rKeyItr = obj instanceof Map ? obj.keys() : Object.keys(obj)[Symbol.iterator]();
    var rValItr = obj instanceof Map ? obj.values() : Object.values(obj)[Symbol.iterator]();
    var i = 0;
    var n = comparators.length;
    var rVal = rValItr.next();
    var lKey = lKeyItr.next();
    var rKey = rKeyItr.next();
    for (; i < n && !lKey.done && !rKey.done && !rVal.done; ++i, lKey = lKeyItr.next(), rKey = rKeyItr.next(), rVal = rValItr.next()) {
        if (lKey.value !== rKey.value || !comparators[i](rVal.value)) {
            break;
        }
    }
    if (i === n && lKey.done && rKey.done && rVal.done) {
        return true;
    }
    lKeyItr.return && lKeyItr.return();
    rKeyItr.return && rKeyItr.return();
    rValItr.return && rValItr.return();
    return false;
}

var args = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(args, "__esModule", { value: true });
args.selectColumnChildrenArgs = args.selectVectorChildrenArgs = args.selectChunkArgs = args.selectFieldArgs = args.selectColumnArgs = args.selectArgs = args.arrayTypeToDataType = args.isTypedArray = void 0;
var tslib_1$I = tslib.exports;
var data_1$5 = data$1;
var schema_1$8 = schema;
var column_1$3 = column;
var vector_1$d = vector$2;
var type_1$h = type;
var chunked_1$4 = chunked;
var isArray = Array.isArray;
/** @ignore */
function isTypedArray(arr) {
    return ArrayBuffer.isView(arr) && 'BYTES_PER_ELEMENT' in arr;
}
args.isTypedArray = isTypedArray;
/** @ignore */
function arrayTypeToDataType$2(ctor) {
    switch (ctor) {
        case Int8Array: return type_1$h.Int8;
        case Int16Array: return type_1$h.Int16;
        case Int32Array: return type_1$h.Int32;
        case BigInt64Array: return type_1$h.Int64;
        case Uint8Array: return type_1$h.Uint8;
        case Uint16Array: return type_1$h.Uint16;
        case Uint32Array: return type_1$h.Uint32;
        case BigUint64Array: return type_1$h.Uint64;
        case Float32Array: return type_1$h.Float32;
        case Float64Array: return type_1$h.Float64;
        default: return null;
    }
}
args.arrayTypeToDataType = arrayTypeToDataType$2;
/** @ignore */
function vectorFromTypedArray(array) {
    var ArrowType = arrayTypeToDataType$2(array.constructor);
    if (!ArrowType) {
        throw new TypeError('Unrecognized Array input');
    }
    var type = new ArrowType();
    var data = data_1$5.Data.new(type, 0, array.length, 0, [undefined, array]);
    return vector_1$d.Vector.new(data);
}
/** @ignore */
args.selectArgs = function (Ctor, vals) { return _selectArgs(Ctor, vals, [], 0); };
/** @ignore */
args.selectColumnArgs = function (args) {
    var _a = tslib_1$I.__read(_selectFieldArgs(args, [[], []]), 2), fields = _a[0], values = _a[1];
    return values.map(function (x, i) {
        return x instanceof column_1$3.Column ? column_1$3.Column.new(x.field.clone(fields[i]), x) :
            x instanceof vector_1$d.Vector ? column_1$3.Column.new(fields[i], x) :
                isTypedArray(x) ? column_1$3.Column.new(fields[i], vectorFromTypedArray(x)) :
                    column_1$3.Column.new(fields[i], []);
    });
};
/** @ignore */
args.selectFieldArgs = function (args) { return _selectFieldArgs(args, [[], []]); };
/** @ignore */
args.selectChunkArgs = function (Ctor, vals) { return _selectChunkArgs(Ctor, vals, [], 0); };
/** @ignore */
args.selectVectorChildrenArgs = function (Ctor, vals) { return _selectVectorChildrenArgs(Ctor, vals, [], 0); };
/** @ignore */
args.selectColumnChildrenArgs = function (Ctor, vals) { return _selectColumnChildrenArgs(Ctor, vals, [], 0); };
/** @ignore */
function _selectArgs(Ctor, vals, res, idx) {
    var value, j = idx;
    var i = -1;
    var n = vals.length;
    while (++i < n) {
        if (isArray(value = vals[i])) {
            j = _selectArgs(Ctor, value, res, j).length;
        }
        else if (value instanceof Ctor) {
            res[j++] = value;
        }
    }
    return res;
}
/** @ignore */
function _selectChunkArgs(Ctor, vals, res, idx) {
    var value, j = idx;
    var i = -1;
    var n = vals.length;
    while (++i < n) {
        if (isArray(value = vals[i])) {
            j = _selectChunkArgs(Ctor, value, res, j).length;
        }
        else if (value instanceof chunked_1$4.Chunked) {
            j = _selectChunkArgs(Ctor, value.chunks, res, j).length;
        }
        else if (value instanceof Ctor) {
            res[j++] = value;
        }
    }
    return res;
}
/** @ignore */
function _selectVectorChildrenArgs(Ctor, vals, res, idx) {
    var value, j = idx;
    var i = -1;
    var n = vals.length;
    while (++i < n) {
        if (isArray(value = vals[i])) {
            j = _selectVectorChildrenArgs(Ctor, value, res, j).length;
        }
        else if (value instanceof Ctor) {
            j = _selectArgs(vector_1$d.Vector, value.schema.fields.map(function (_, i) { return value.getChildAt(i); }), res, j).length;
        }
        else if (value instanceof vector_1$d.Vector) {
            res[j++] = value;
        }
    }
    return res;
}
/** @ignore */
function _selectColumnChildrenArgs(Ctor, vals, res, idx) {
    var value, j = idx;
    var i = -1;
    var n = vals.length;
    while (++i < n) {
        if (isArray(value = vals[i])) {
            j = _selectColumnChildrenArgs(Ctor, value, res, j).length;
        }
        else if (value instanceof Ctor) {
            j = _selectArgs(column_1$3.Column, value.schema.fields.map(function (f, i) { return column_1$3.Column.new(f, value.getChildAt(i)); }), res, j).length;
        }
        else if (value instanceof column_1$3.Column) {
            res[j++] = value;
        }
    }
    return res;
}
/** @ignore */
var toKeysAndValues = function (xs, _a, i) {
    var _b = tslib_1$I.__read(_a, 2), k = _b[0], v = _b[1];
    return (xs[0][i] = k, xs[1][i] = v, xs);
};
/** @ignore */
function _selectFieldArgs(vals, ret) {
    var _a, _b, _c, _d;
    var keys;
    var n;
    switch (n = vals.length) {
        case 0: return ret;
        case 1:
            keys = ret[0];
            if (!(vals[0])) {
                return ret;
            }
            if (isArray(vals[0])) {
                return _selectFieldArgs(vals[0], ret);
            }
            if (!(vals[0] instanceof data_1$5.Data || vals[0] instanceof vector_1$d.Vector || isTypedArray(vals[0]) || vals[0] instanceof type_1$h.DataType)) {
                _a = tslib_1$I.__read(Object.entries(vals[0]).reduce(toKeysAndValues, ret), 2), keys = _a[0], vals = _a[1];
            }
            break;
        default:
            !isArray(keys = vals[n - 1])
                ? (vals = isArray(vals[0]) ? vals[0] : vals, keys = [])
                : (vals = isArray(vals[0]) ? vals[0] : vals.slice(0, n - 1));
    }
    var fieldIndex = -1;
    var valueIndex = -1;
    var idx = -1;
    var len = vals.length;
    var field;
    var val;
    var _e = tslib_1$I.__read(ret, 2), fields = _e[0], values = _e[1];
    while (++idx < len) {
        val = vals[idx];
        if (val instanceof column_1$3.Column && (values[++valueIndex] = val)) {
            fields[++fieldIndex] = val.field.clone(keys[idx], val.type, true);
        }
        else {
            (_b = keys, _c = idx, _d = _b[_c], field = _d === void 0 ? idx : _d);
            if (val instanceof type_1$h.DataType && (values[++valueIndex] = val)) {
                fields[++fieldIndex] = schema_1$8.Field.new(field, val, true);
            }
            else if ((val === null || val === void 0 ? void 0 : val.type) && (values[++valueIndex] = val)) {
                val instanceof data_1$5.Data && (values[valueIndex] = val = vector_1$d.Vector.new(val));
                fields[++fieldIndex] = schema_1$8.Field.new(field, val.type, true);
            }
        }
    }
    return ret;
}

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(chunked, "__esModule", { value: true });
chunked.Chunked = void 0;
var tslib_1$H = tslib.exports;
var vector_1$c = vector$1;
var type_1$g = type;
var args_1$4 = args;
var vector_2$1 = vector$2;
/** @ignore */
var ChunkedIterator = /** @class */ (function () {
    function ChunkedIterator(chunks) {
        this.chunks = chunks;
        this.chunkIndex = 0;
        this.chunkIterator = this.getChunkIterator();
    }
    ChunkedIterator.prototype.next = function () {
        while (this.chunkIndex < this.chunks.length) {
            var next = this.chunkIterator.next();
            if (!next.done) {
                return next;
            }
            if (++this.chunkIndex < this.chunks.length) {
                this.chunkIterator = this.getChunkIterator();
            }
        }
        return { done: true, value: null };
    };
    ChunkedIterator.prototype.getChunkIterator = function () {
        return this.chunks[this.chunkIndex][Symbol.iterator]();
    };
    ChunkedIterator.prototype[Symbol.iterator] = function () {
        return this;
    };
    return ChunkedIterator;
}());
/** @ignore */
var Chunked = /** @class */ (function (_super) {
    tslib_1$H.__extends(Chunked, _super);
    function Chunked(type, chunks, offsets) {
        if (chunks === void 0) { chunks = []; }
        if (offsets === void 0) { offsets = calculateOffsets(chunks); }
        var _this = _super.call(this) || this;
        _this._nullCount = -1;
        _this._type = type;
        _this._chunks = chunks;
        _this._chunkOffsets = offsets;
        _this._length = offsets[offsets.length - 1];
        _this._numChildren = (_this._type.children || []).length;
        return _this;
    }
    /** @nocollapse */
    Chunked.flatten = function () {
        var vectors = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            vectors[_i] = arguments[_i];
        }
        return args_1$4.selectChunkArgs(vector_2$1.Vector, vectors);
    };
    /** @nocollapse */
    Chunked.concat = function () {
        var vectors = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            vectors[_i] = arguments[_i];
        }
        var chunks = Chunked.flatten.apply(Chunked, tslib_1$H.__spread(vectors));
        return new Chunked(chunks[0].type, chunks);
    };
    Object.defineProperty(Chunked.prototype, "type", {
        get: function () { return this._type; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chunked.prototype, "length", {
        get: function () { return this._length; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chunked.prototype, "chunks", {
        get: function () { return this._chunks; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chunked.prototype, "typeId", {
        get: function () { return this._type.typeId; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chunked.prototype, "VectorName", {
        get: function () { return "Chunked<" + this._type + ">"; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chunked.prototype, "data", {
        get: function () {
            return this._chunks[0] ? this._chunks[0].data : null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chunked.prototype, "ArrayType", {
        get: function () { return this._type.ArrayType; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chunked.prototype, "numChildren", {
        get: function () { return this._numChildren; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chunked.prototype, "stride", {
        get: function () { return this._chunks[0] ? this._chunks[0].stride : 1; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chunked.prototype, "byteLength", {
        get: function () {
            return this._chunks.reduce(function (byteLength, chunk) { return byteLength + chunk.byteLength; }, 0);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chunked.prototype, "nullCount", {
        get: function () {
            var nullCount = this._nullCount;
            if (nullCount < 0) {
                this._nullCount = nullCount = this._chunks.reduce(function (x, _a) {
                    var nullCount = _a.nullCount;
                    return x + nullCount;
                }, 0);
            }
            return nullCount;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chunked.prototype, "indices", {
        get: function () {
            if (type_1$g.DataType.isDictionary(this._type)) {
                if (!this._indices) {
                    var chunks = this._chunks;
                    this._indices = (chunks.length === 1
                        ? chunks[0].indices
                        : Chunked.concat.apply(Chunked, tslib_1$H.__spread(chunks.map(function (x) { return x.indices; }))));
                }
                return this._indices;
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chunked.prototype, "dictionary", {
        get: function () {
            if (type_1$g.DataType.isDictionary(this._type)) {
                return this._chunks[this._chunks.length - 1].data.dictionary;
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Chunked.prototype[Symbol.iterator] = function () {
        return new ChunkedIterator(this._chunks);
    };
    Chunked.prototype.clone = function (chunks) {
        if (chunks === void 0) { chunks = this._chunks; }
        return new Chunked(this._type, chunks);
    };
    Chunked.prototype.concat = function () {
        var others = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            others[_i] = arguments[_i];
        }
        return this.clone(Chunked.flatten.apply(Chunked, tslib_1$H.__spread([this], others)));
    };
    Chunked.prototype.slice = function (begin, end) {
        return vector_1$c.clampRange(this, begin, end, this._sliceInternal);
    };
    Chunked.prototype.getChildAt = function (index) {
        if (index < 0 || index >= this._numChildren) {
            return null;
        }
        var columns = this._children || (this._children = []);
        var child, field, chunks;
        if (child = columns[index]) {
            return child;
        }
        if (field = (this._type.children || [])[index]) {
            chunks = this._chunks
                .map(function (vector) { return vector.getChildAt(index); })
                .filter(function (vec) { return vec != null; });
            if (chunks.length > 0) {
                return (columns[index] = new Chunked(field.type, chunks));
            }
        }
        return null;
    };
    Chunked.prototype.search = function (index, then) {
        var idx = index;
        // binary search to find the child vector and value indices
        var offsets = this._chunkOffsets;
        var rhs = offsets.length - 1;
        // return early if out of bounds, or if there's just one child
        if (idx < 0) {
            return null;
        }
        if (idx >= offsets[rhs]) {
            return null;
        }
        if (rhs <= 1) {
            return then ? then(this, 0, idx) : [0, idx];
        }
        var lhs = 0, pos = 0, mid = 0;
        do {
            if (lhs + 1 === rhs) {
                return then ? then(this, lhs, idx - pos) : [lhs, idx - pos];
            }
            mid = lhs + ((rhs - lhs) / 2) | 0;
            idx >= offsets[mid] ? (lhs = mid) : (rhs = mid);
        } while (idx < offsets[rhs] && idx >= (pos = offsets[lhs]));
        return null;
    };
    Chunked.prototype.isValid = function (index) {
        return !!this.search(index, this.isValidInternal);
    };
    Chunked.prototype.get = function (index) {
        return this.search(index, this.getInternal);
    };
    Chunked.prototype.set = function (index, value) {
        this.search(index, function (_a, i, j) {
            var chunks = _a.chunks;
            return chunks[i].set(j, value);
        });
    };
    Chunked.prototype.indexOf = function (element, offset) {
        var _this = this;
        if (offset && typeof offset === 'number') {
            return this.search(offset, function (self, i, j) { return _this.indexOfInternal(self, i, j, element); });
        }
        return this.indexOfInternal(this, 0, Math.max(0, offset || 0), element);
    };
    Chunked.prototype.toArray = function () {
        var chunks = this.chunks;
        var n = chunks.length;
        var ArrayType = this._type.ArrayType;
        if (n <= 0) {
            return new ArrayType(0);
        }
        if (n <= 1) {
            return chunks[0].toArray();
        }
        var len = 0;
        var src = new Array(n);
        for (var i = -1; ++i < n;) {
            len += (src[i] = chunks[i].toArray()).length;
        }
        if (ArrayType !== src[0].constructor) {
            ArrayType = src[0].constructor;
        }
        var dst = new ArrayType(len);
        var set = ArrayType === Array ? arraySet : typedSet;
        for (var i = -1, idx = 0; ++i < n;) {
            idx = set(src[i], dst, idx);
        }
        return dst;
    };
    Chunked.prototype.getInternal = function (_a, i, j) {
        var _chunks = _a._chunks;
        return _chunks[i].get(j);
    };
    Chunked.prototype.isValidInternal = function (_a, i, j) {
        var _chunks = _a._chunks;
        return _chunks[i].isValid(j);
    };
    Chunked.prototype.indexOfInternal = function (_a, chunkIndex, fromIndex, element) {
        var _chunks = _a._chunks;
        var i = chunkIndex - 1;
        var n = _chunks.length;
        var start = fromIndex, offset = 0, found = -1;
        while (++i < n) {
            if (~(found = _chunks[i].indexOf(element, start))) {
                return offset + found;
            }
            start = 0;
            offset += _chunks[i].length;
        }
        return -1;
    };
    Chunked.prototype._sliceInternal = function (self, begin, end) {
        var slices = [];
        var chunks = self.chunks, chunkOffsets = self._chunkOffsets;
        for (var i = -1, n = chunks.length; ++i < n;) {
            var chunk = chunks[i];
            var chunkLength = chunk.length;
            var chunkOffset = chunkOffsets[i];
            // If the child is to the right of the slice boundary, we can stop
            if (chunkOffset >= end) {
                break;
            }
            // If the child is to the left of of the slice boundary, exclude
            if (begin >= chunkOffset + chunkLength) {
                continue;
            }
            // If the child is between both left and right boundaries, include w/o slicing
            if (chunkOffset >= begin && (chunkOffset + chunkLength) <= end) {
                slices.push(chunk);
                continue;
            }
            // If the child overlaps one of the slice boundaries, include that slice
            var from = Math.max(0, begin - chunkOffset);
            var to = Math.min(end - chunkOffset, chunkLength);
            slices.push(chunk.slice(from, to));
        }
        return self.clone(slices);
    };
    return Chunked;
}(vector_2$1.AbstractVector));
chunked.Chunked = Chunked;
/** @ignore */
function calculateOffsets(vectors) {
    var offsets = new Uint32Array((vectors || []).length + 1);
    var offset = offsets[0] = 0;
    var length = offsets.length;
    for (var index = 0; ++index < length;) {
        offsets[index] = (offset += vectors[index - 1].length);
    }
    return offsets;
}
/** @ignore */
var typedSet = function (src, dst, offset) {
    dst.set(src, offset);
    return (offset + src.length);
};
/** @ignore */
var arraySet = function (src, dst, offset) {
    var idx = offset;
    for (var i = -1, n = src.length; ++i < n;) {
        dst[idx++] = src[i];
    }
    return idx;
};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(column, "__esModule", { value: true });
column.Column = void 0;
var tslib_1$G = tslib.exports;
var schema_1$7 = schema;
var vector_1$b = vector$2;
var chunked_1$3 = chunked;
var Column = /** @class */ (function (_super) {
    tslib_1$G.__extends(Column, _super);
    function Column(field, vectors, offsets) {
        if (vectors === void 0) { vectors = []; }
        var _this = this;
        vectors = chunked_1$3.Chunked.flatten.apply(chunked_1$3.Chunked, tslib_1$G.__spread(vectors));
        _this = _super.call(this, field.type, vectors, offsets) || this;
        _this._field = field;
        if (vectors.length === 1 && !(_this instanceof SingleChunkColumn)) {
            return new SingleChunkColumn(field, vectors[0], _this._chunkOffsets);
        }
        return _this;
    }
    /** @nocollapse */
    Column.new = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _a = tslib_1$G.__read(args), field = _a[0], data = _a[1], rest = _a.slice(2);
        if (typeof field !== 'string' && !(field instanceof schema_1$7.Field)) {
            data = field;
            field = '';
        }
        var chunks = chunked_1$3.Chunked.flatten(Array.isArray(data) ? tslib_1$G.__spread(data, rest) :
            data instanceof vector_1$b.Vector ? tslib_1$G.__spread([data], rest) :
                [vector_1$b.Vector.new.apply(vector_1$b.Vector, tslib_1$G.__spread([data], rest))]);
        if (typeof field === 'string') {
            var type = chunks[0].data.type;
            field = new schema_1$7.Field(field, type, true);
        }
        else if (!field.nullable && chunks.some(function (_a) {
            var nullCount = _a.nullCount;
            return nullCount > 0;
        })) {
            field = field.clone({ nullable: true });
        }
        return new Column(field, chunks);
    };
    Object.defineProperty(Column.prototype, "field", {
        get: function () { return this._field; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Column.prototype, "name", {
        get: function () { return this._field.name; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Column.prototype, "nullable", {
        get: function () { return this._field.nullable; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Column.prototype, "metadata", {
        get: function () { return this._field.metadata; },
        enumerable: false,
        configurable: true
    });
    Column.prototype.clone = function (chunks) {
        if (chunks === void 0) { chunks = this._chunks; }
        return new Column(this._field, chunks);
    };
    Column.prototype.getChildAt = function (index) {
        if (index < 0 || index >= this.numChildren) {
            return null;
        }
        var columns = this._children || (this._children = []);
        var column, field, chunks;
        if (column = columns[index]) {
            return column;
        }
        if (field = (this.type.children || [])[index]) {
            chunks = this._chunks
                .map(function (vector) { return vector.getChildAt(index); })
                .filter(function (vec) { return vec != null; });
            if (chunks.length > 0) {
                return (columns[index] = new Column(field, chunks));
            }
        }
        return null;
    };
    return Column;
}(chunked_1$3.Chunked));
column.Column = Column;
/** @ignore */
var SingleChunkColumn = /** @class */ (function (_super) {
    tslib_1$G.__extends(SingleChunkColumn, _super);
    function SingleChunkColumn(field, vector, offsets) {
        var _this = _super.call(this, field, [vector], offsets) || this;
        _this._chunk = vector;
        return _this;
    }
    SingleChunkColumn.prototype.search = function (index, then) {
        return then ? then(this, 0, index) : [0, index];
    };
    SingleChunkColumn.prototype.isValid = function (index) {
        return this._chunk.isValid(index);
    };
    SingleChunkColumn.prototype.get = function (index) {
        return this._chunk.get(index);
    };
    SingleChunkColumn.prototype.set = function (index, value) {
        this._chunk.set(index, value);
    };
    SingleChunkColumn.prototype.indexOf = function (element, offset) {
        return this._chunk.indexOf(element, offset);
    };
    return SingleChunkColumn;
}(Column));

var writer$1 = {};

var message$1 = {};

var message = {};

var typeassembler = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(typeassembler, "__esModule", { value: true });
typeassembler.instance = typeassembler.TypeAssembler = void 0;
var tslib_1$F = tslib.exports;
var flatbuffers_1$1 = require$$2;
var Long$1 = flatbuffers_1$1.flatbuffers.Long;
var visitor_1$a = visitor;
var Schema_1$2 = Schema$1;
/** @ignore */
var TypeAssembler = /** @class */ (function (_super) {
    tslib_1$F.__extends(TypeAssembler, _super);
    function TypeAssembler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TypeAssembler.prototype.visit = function (node, builder) {
        return (node == null || builder == null) ? undefined : _super.prototype.visit.call(this, node, builder);
    };
    TypeAssembler.prototype.visitNull = function (_node, b) {
        Schema_1$2.Null.startNull(b);
        return Schema_1$2.Null.endNull(b);
    };
    TypeAssembler.prototype.visitInt = function (node, b) {
        Schema_1$2.Int.startInt(b);
        Schema_1$2.Int.addBitWidth(b, node.bitWidth);
        Schema_1$2.Int.addIsSigned(b, node.isSigned);
        return Schema_1$2.Int.endInt(b);
    };
    TypeAssembler.prototype.visitFloat = function (node, b) {
        Schema_1$2.FloatingPoint.startFloatingPoint(b);
        Schema_1$2.FloatingPoint.addPrecision(b, node.precision);
        return Schema_1$2.FloatingPoint.endFloatingPoint(b);
    };
    TypeAssembler.prototype.visitBinary = function (_node, b) {
        Schema_1$2.Binary.startBinary(b);
        return Schema_1$2.Binary.endBinary(b);
    };
    TypeAssembler.prototype.visitBool = function (_node, b) {
        Schema_1$2.Bool.startBool(b);
        return Schema_1$2.Bool.endBool(b);
    };
    TypeAssembler.prototype.visitUtf8 = function (_node, b) {
        Schema_1$2.Utf8.startUtf8(b);
        return Schema_1$2.Utf8.endUtf8(b);
    };
    TypeAssembler.prototype.visitDecimal = function (node, b) {
        Schema_1$2.Decimal.startDecimal(b);
        Schema_1$2.Decimal.addScale(b, node.scale);
        Schema_1$2.Decimal.addPrecision(b, node.precision);
        return Schema_1$2.Decimal.endDecimal(b);
    };
    TypeAssembler.prototype.visitDate = function (node, b) {
        Schema_1$2.Date.startDate(b);
        Schema_1$2.Date.addUnit(b, node.unit);
        return Schema_1$2.Date.endDate(b);
    };
    TypeAssembler.prototype.visitTime = function (node, b) {
        Schema_1$2.Time.startTime(b);
        Schema_1$2.Time.addUnit(b, node.unit);
        Schema_1$2.Time.addBitWidth(b, node.bitWidth);
        return Schema_1$2.Time.endTime(b);
    };
    TypeAssembler.prototype.visitTimestamp = function (node, b) {
        var timezone = (node.timezone && b.createString(node.timezone)) || undefined;
        Schema_1$2.Timestamp.startTimestamp(b);
        Schema_1$2.Timestamp.addUnit(b, node.unit);
        if (timezone !== undefined) {
            Schema_1$2.Timestamp.addTimezone(b, timezone);
        }
        return Schema_1$2.Timestamp.endTimestamp(b);
    };
    TypeAssembler.prototype.visitInterval = function (node, b) {
        Schema_1$2.Interval.startInterval(b);
        Schema_1$2.Interval.addUnit(b, node.unit);
        return Schema_1$2.Interval.endInterval(b);
    };
    TypeAssembler.prototype.visitList = function (_node, b) {
        Schema_1$2.List.startList(b);
        return Schema_1$2.List.endList(b);
    };
    TypeAssembler.prototype.visitStruct = function (_node, b) {
        Schema_1$2.Struct_.startStruct_(b);
        return Schema_1$2.Struct_.endStruct_(b);
    };
    TypeAssembler.prototype.visitUnion = function (node, b) {
        Schema_1$2.Union.startTypeIdsVector(b, node.typeIds.length);
        var typeIds = Schema_1$2.Union.createTypeIdsVector(b, node.typeIds);
        Schema_1$2.Union.startUnion(b);
        Schema_1$2.Union.addMode(b, node.mode);
        Schema_1$2.Union.addTypeIds(b, typeIds);
        return Schema_1$2.Union.endUnion(b);
    };
    TypeAssembler.prototype.visitDictionary = function (node, b) {
        var indexType = this.visit(node.indices, b);
        Schema_1$2.DictionaryEncoding.startDictionaryEncoding(b);
        Schema_1$2.DictionaryEncoding.addId(b, new Long$1(node.id, 0));
        Schema_1$2.DictionaryEncoding.addIsOrdered(b, node.isOrdered);
        if (indexType !== undefined) {
            Schema_1$2.DictionaryEncoding.addIndexType(b, indexType);
        }
        return Schema_1$2.DictionaryEncoding.endDictionaryEncoding(b);
    };
    TypeAssembler.prototype.visitFixedSizeBinary = function (node, b) {
        Schema_1$2.FixedSizeBinary.startFixedSizeBinary(b);
        Schema_1$2.FixedSizeBinary.addByteWidth(b, node.byteWidth);
        return Schema_1$2.FixedSizeBinary.endFixedSizeBinary(b);
    };
    TypeAssembler.prototype.visitFixedSizeList = function (node, b) {
        Schema_1$2.FixedSizeList.startFixedSizeList(b);
        Schema_1$2.FixedSizeList.addListSize(b, node.listSize);
        return Schema_1$2.FixedSizeList.endFixedSizeList(b);
    };
    TypeAssembler.prototype.visitMap = function (node, b) {
        Schema_1$2.Map.startMap(b);
        Schema_1$2.Map.addKeysSorted(b, node.keysSorted);
        return Schema_1$2.Map.endMap(b);
    };
    return TypeAssembler;
}(visitor_1$a.Visitor));
typeassembler.TypeAssembler = TypeAssembler;
/** @ignore */
typeassembler.instance = new TypeAssembler();

var json = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(json, "__esModule", { value: true });
json.fieldFromJSON = json.dictionaryBatchFromJSON = json.recordBatchFromJSON = json.schemaFromJSON = void 0;
var tslib_1$E = tslib.exports;
/* eslint-disable brace-style */
var schema_1$6 = schema;
var type_1$f = type;
var message_1$3 = message;
var enum_1$c = _enum;
/** @ignore */
function schemaFromJSON(_schema, dictionaries) {
    if (dictionaries === void 0) { dictionaries = new Map(); }
    return new schema_1$6.Schema(schemaFieldsFromJSON(_schema, dictionaries), customMetadataFromJSON(_schema['customMetadata']), dictionaries);
}
json.schemaFromJSON = schemaFromJSON;
/** @ignore */
function recordBatchFromJSON(b) {
    return new message_1$3.RecordBatch(b['count'], fieldNodesFromJSON(b['columns']), buffersFromJSON(b['columns']));
}
json.recordBatchFromJSON = recordBatchFromJSON;
/** @ignore */
function dictionaryBatchFromJSON(b) {
    return new message_1$3.DictionaryBatch(recordBatchFromJSON(b['data']), b['id'], b['isDelta']);
}
json.dictionaryBatchFromJSON = dictionaryBatchFromJSON;
/** @ignore */
function schemaFieldsFromJSON(_schema, dictionaries) {
    return (_schema['fields'] || []).filter(Boolean).map(function (f) { return schema_1$6.Field.fromJSON(f, dictionaries); });
}
/** @ignore */
function fieldChildrenFromJSON(_field, dictionaries) {
    return (_field['children'] || []).filter(Boolean).map(function (f) { return schema_1$6.Field.fromJSON(f, dictionaries); });
}
/** @ignore */
function fieldNodesFromJSON(xs) {
    return (xs || []).reduce(function (fieldNodes, column) { return tslib_1$E.__spread(fieldNodes, [
        new message_1$3.FieldNode(column['count'], nullCountFromJSON(column['VALIDITY']))
    ], fieldNodesFromJSON(column['children'])); }, []);
}
/** @ignore */
function buffersFromJSON(xs, buffers) {
    if (buffers === void 0) { buffers = []; }
    for (var i = -1, n = (xs || []).length; ++i < n;) {
        var column = xs[i];
        column['VALIDITY'] && buffers.push(new message_1$3.BufferRegion(buffers.length, column['VALIDITY'].length));
        column['TYPE'] && buffers.push(new message_1$3.BufferRegion(buffers.length, column['TYPE'].length));
        column['OFFSET'] && buffers.push(new message_1$3.BufferRegion(buffers.length, column['OFFSET'].length));
        column['DATA'] && buffers.push(new message_1$3.BufferRegion(buffers.length, column['DATA'].length));
        buffers = buffersFromJSON(column['children'], buffers);
    }
    return buffers;
}
/** @ignore */
function nullCountFromJSON(validity) {
    return (validity || []).reduce(function (sum, val) { return sum + +(val === 0); }, 0);
}
/** @ignore */
function fieldFromJSON(_field, dictionaries) {
    var id;
    var keys;
    var field;
    var dictMeta;
    var type;
    var dictType;
    // If no dictionary encoding
    if (!dictionaries || !(dictMeta = _field['dictionary'])) {
        type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries));
        field = new schema_1$6.Field(_field['name'], type, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));
    }
    // If dictionary encoded and the first time we've seen this dictionary id, decode
    // the data type and child fields, then wrap in a Dictionary type and insert the
    // data type into the dictionary types map.
    else if (!dictionaries.has(id = dictMeta['id'])) {
        // a dictionary index defaults to signed 32 bit int if unspecified
        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) : new type_1$f.Int32();
        dictionaries.set(id, type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries)));
        dictType = new type_1$f.Dictionary(type, keys, id, dictMeta['isOrdered']);
        field = new schema_1$6.Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));
    }
    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the
    // data type and wrap in a new Dictionary type and field.
    else {
        // a dictionary index defaults to signed 32 bit int if unspecified
        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) : new type_1$f.Int32();
        dictType = new type_1$f.Dictionary(dictionaries.get(id), keys, id, dictMeta['isOrdered']);
        field = new schema_1$6.Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));
    }
    return field || null;
}
json.fieldFromJSON = fieldFromJSON;
/** @ignore */
function customMetadataFromJSON(_metadata) {
    return new Map(Object.entries(_metadata || {}));
}
/** @ignore */
function indexTypeFromJSON(_type) {
    return new type_1$f.Int(_type['isSigned'], _type['bitWidth']);
}
/** @ignore */
function typeFromJSON(f, children) {
    var typeId = f['type']['name'];
    switch (typeId) {
        case 'NONE': return new type_1$f.Null();
        case 'null': return new type_1$f.Null();
        case 'binary': return new type_1$f.Binary();
        case 'utf8': return new type_1$f.Utf8();
        case 'bool': return new type_1$f.Bool();
        case 'list': return new type_1$f.List((children || [])[0]);
        case 'struct': return new type_1$f.Struct(children || []);
        case 'struct_': return new type_1$f.Struct(children || []);
    }
    switch (typeId) {
        case 'int': {
            var t = f['type'];
            return new type_1$f.Int(t['isSigned'], t['bitWidth']);
        }
        case 'floatingpoint': {
            var t = f['type'];
            return new type_1$f.Float(enum_1$c.Precision[t['precision']]);
        }
        case 'decimal': {
            var t = f['type'];
            return new type_1$f.Decimal(t['scale'], t['precision']);
        }
        case 'date': {
            var t = f['type'];
            return new type_1$f.Date_(enum_1$c.DateUnit[t['unit']]);
        }
        case 'time': {
            var t = f['type'];
            return new type_1$f.Time(enum_1$c.TimeUnit[t['unit']], t['bitWidth']);
        }
        case 'timestamp': {
            var t = f['type'];
            return new type_1$f.Timestamp(enum_1$c.TimeUnit[t['unit']], t['timezone']);
        }
        case 'interval': {
            var t = f['type'];
            return new type_1$f.Interval(enum_1$c.IntervalUnit[t['unit']]);
        }
        case 'union': {
            var t = f['type'];
            return new type_1$f.Union(enum_1$c.UnionMode[t['mode']], (t['typeIds'] || []), children || []);
        }
        case 'fixedsizebinary': {
            var t = f['type'];
            return new type_1$f.FixedSizeBinary(t['byteWidth']);
        }
        case 'fixedsizelist': {
            var t = f['type'];
            return new type_1$f.FixedSizeList(t['listSize'], (children || [])[0]);
        }
        case 'map': {
            var t = f['type'];
            return new type_1$f.Map_((children || [])[0], t['keysSorted']);
        }
    }
    throw new Error("Unrecognized type: \"" + typeId + "\"");
}

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(message, "__esModule", { value: true });
message.FieldNode = message.BufferRegion = message.DictionaryBatch = message.RecordBatch = message.Message = void 0;
var tslib_1$D = tslib.exports;
/* eslint-disable brace-style */
var flatbuffers_1 = require$$2;
var Schema_1$1 = Schema$1;
var Message_1 = Message$1;
var schema_1$5 = schema;
var buffer_1$4 = buffer$1;
var enum_1$b = _enum;
var typeassembler_1 = typeassembler;
var json_1 = json;
var Long = flatbuffers_1.flatbuffers.Long;
var Builder = flatbuffers_1.flatbuffers.Builder;
var ByteBuffer = flatbuffers_1.flatbuffers.ByteBuffer;
var type_1$e = type;
/**
 * @ignore
 * @private
 **/
var Message = /** @class */ (function () {
    function Message(bodyLength, version, headerType, header) {
        this._version = version;
        this._headerType = headerType;
        this.body = new Uint8Array(0);
        header && (this._createHeader = function () { return header; });
        this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;
    }
    /** @nocollapse */
    Message.fromJSON = function (msg, headerType) {
        var message = new Message(0, enum_1$b.MetadataVersion.V4, headerType);
        message._createHeader = messageHeaderFromJSON(msg, headerType);
        return message;
    };
    /** @nocollapse */
    Message.decode = function (buf) {
        buf = new ByteBuffer(buffer_1$4.toUint8Array(buf));
        var _message = Message_1.Message.getRootAsMessage(buf);
        var bodyLength = _message.bodyLength();
        var version = _message.version();
        var headerType = _message.headerType();
        var message = new Message(bodyLength, version, headerType);
        message._createHeader = decodeMessageHeader(_message, headerType);
        return message;
    };
    /** @nocollapse */
    Message.encode = function (message) {
        var b = new Builder();
        var headerOffset = -1;
        if (message.isSchema()) {
            headerOffset = schema_1$5.Schema.encode(b, message.header());
        }
        else if (message.isRecordBatch()) {
            headerOffset = RecordBatch$1.encode(b, message.header());
        }
        else if (message.isDictionaryBatch()) {
            headerOffset = DictionaryBatch.encode(b, message.header());
        }
        Message_1.Message.startMessage(b);
        Message_1.Message.addVersion(b, enum_1$b.MetadataVersion.V4);
        Message_1.Message.addHeader(b, headerOffset);
        Message_1.Message.addHeaderType(b, message.headerType);
        Message_1.Message.addBodyLength(b, new Long(message.bodyLength, 0));
        Message_1.Message.finishMessageBuffer(b, Message_1.Message.endMessage(b));
        return b.asUint8Array();
    };
    /** @nocollapse */
    Message.from = function (header, bodyLength) {
        if (bodyLength === void 0) { bodyLength = 0; }
        if (header instanceof schema_1$5.Schema) {
            return new Message(0, enum_1$b.MetadataVersion.V4, enum_1$b.MessageHeader.Schema, header);
        }
        if (header instanceof RecordBatch$1) {
            return new Message(bodyLength, enum_1$b.MetadataVersion.V4, enum_1$b.MessageHeader.RecordBatch, header);
        }
        if (header instanceof DictionaryBatch) {
            return new Message(bodyLength, enum_1$b.MetadataVersion.V4, enum_1$b.MessageHeader.DictionaryBatch, header);
        }
        throw new Error("Unrecognized Message header: " + header);
    };
    Object.defineProperty(Message.prototype, "type", {
        get: function () { return this.headerType; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "version", {
        get: function () { return this._version; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "headerType", {
        get: function () { return this._headerType; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "bodyLength", {
        get: function () { return this._bodyLength; },
        enumerable: false,
        configurable: true
    });
    Message.prototype.header = function () { return this._createHeader(); };
    Message.prototype.isSchema = function () { return this.headerType === enum_1$b.MessageHeader.Schema; };
    Message.prototype.isRecordBatch = function () { return this.headerType === enum_1$b.MessageHeader.RecordBatch; };
    Message.prototype.isDictionaryBatch = function () { return this.headerType === enum_1$b.MessageHeader.DictionaryBatch; };
    return Message;
}());
message.Message = Message;
/**
 * @ignore
 * @private
 **/
var RecordBatch$1 = /** @class */ (function () {
    function RecordBatch(length, nodes, buffers) {
        this._nodes = nodes;
        this._buffers = buffers;
        this._length = typeof length === 'number' ? length : length.low;
    }
    Object.defineProperty(RecordBatch.prototype, "nodes", {
        get: function () { return this._nodes; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RecordBatch.prototype, "length", {
        get: function () { return this._length; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RecordBatch.prototype, "buffers", {
        get: function () { return this._buffers; },
        enumerable: false,
        configurable: true
    });
    return RecordBatch;
}());
message.RecordBatch = RecordBatch$1;
/**
 * @ignore
 * @private
 **/
var DictionaryBatch = /** @class */ (function () {
    function DictionaryBatch(data, id, isDelta) {
        if (isDelta === void 0) { isDelta = false; }
        this._data = data;
        this._isDelta = isDelta;
        this._id = typeof id === 'number' ? id : id.low;
    }
    Object.defineProperty(DictionaryBatch.prototype, "id", {
        get: function () { return this._id; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DictionaryBatch.prototype, "data", {
        get: function () { return this._data; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DictionaryBatch.prototype, "isDelta", {
        get: function () { return this._isDelta; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DictionaryBatch.prototype, "length", {
        get: function () { return this.data.length; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DictionaryBatch.prototype, "nodes", {
        get: function () { return this.data.nodes; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DictionaryBatch.prototype, "buffers", {
        get: function () { return this.data.buffers; },
        enumerable: false,
        configurable: true
    });
    return DictionaryBatch;
}());
message.DictionaryBatch = DictionaryBatch;
/**
 * @ignore
 * @private
 **/
var BufferRegion = /** @class */ (function () {
    function BufferRegion(offset, length) {
        this.offset = typeof offset === 'number' ? offset : offset.low;
        this.length = typeof length === 'number' ? length : length.low;
    }
    return BufferRegion;
}());
message.BufferRegion = BufferRegion;
/**
 * @ignore
 * @private
 **/
var FieldNode = /** @class */ (function () {
    function FieldNode(length, nullCount) {
        this.length = typeof length === 'number' ? length : length.low;
        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;
    }
    return FieldNode;
}());
message.FieldNode = FieldNode;
/** @ignore */
function messageHeaderFromJSON(message, type) {
    return (function () {
        switch (type) {
            case enum_1$b.MessageHeader.Schema: return schema_1$5.Schema.fromJSON(message);
            case enum_1$b.MessageHeader.RecordBatch: return RecordBatch$1.fromJSON(message);
            case enum_1$b.MessageHeader.DictionaryBatch: return DictionaryBatch.fromJSON(message);
        }
        throw new Error("Unrecognized Message type: { name: " + enum_1$b.MessageHeader[type] + ", type: " + type + " }");
    });
}
/** @ignore */
function decodeMessageHeader(message, type) {
    return (function () {
        switch (type) {
            case enum_1$b.MessageHeader.Schema: return schema_1$5.Schema.decode(message.header(new Schema_1$1.Schema()));
            case enum_1$b.MessageHeader.RecordBatch: return RecordBatch$1.decode(message.header(new Message_1.RecordBatch()), message.version());
            case enum_1$b.MessageHeader.DictionaryBatch: return DictionaryBatch.decode(message.header(new Message_1.DictionaryBatch()), message.version());
        }
        throw new Error("Unrecognized Message type: { name: " + enum_1$b.MessageHeader[type] + ", type: " + type + " }");
    });
}
schema_1$5.Field['encode'] = encodeField;
schema_1$5.Field['decode'] = decodeField;
schema_1$5.Field['fromJSON'] = json_1.fieldFromJSON;
schema_1$5.Schema['encode'] = encodeSchema;
schema_1$5.Schema['decode'] = decodeSchema;
schema_1$5.Schema['fromJSON'] = json_1.schemaFromJSON;
RecordBatch$1['encode'] = encodeRecordBatch;
RecordBatch$1['decode'] = decodeRecordBatch;
RecordBatch$1['fromJSON'] = json_1.recordBatchFromJSON;
DictionaryBatch['encode'] = encodeDictionaryBatch;
DictionaryBatch['decode'] = decodeDictionaryBatch;
DictionaryBatch['fromJSON'] = json_1.dictionaryBatchFromJSON;
FieldNode['encode'] = encodeFieldNode;
FieldNode['decode'] = decodeFieldNode;
BufferRegion['encode'] = encodeBufferRegion;
BufferRegion['decode'] = decodeBufferRegion;
/** @ignore */
function decodeSchema(_schema, dictionaries) {
    if (dictionaries === void 0) { dictionaries = new Map(); }
    var fields = decodeSchemaFields(_schema, dictionaries);
    return new schema_1$5.Schema(fields, decodeCustomMetadata(_schema), dictionaries);
}
/** @ignore */
function decodeRecordBatch(batch, version) {
    if (version === void 0) { version = enum_1$b.MetadataVersion.V4; }
    return new RecordBatch$1(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));
}
/** @ignore */
function decodeDictionaryBatch(batch, version) {
    if (version === void 0) { version = enum_1$b.MetadataVersion.V4; }
    return new DictionaryBatch(RecordBatch$1.decode(batch.data(), version), batch.id(), batch.isDelta());
}
/** @ignore */
function decodeBufferRegion(b) {
    return new BufferRegion(b.offset(), b.length());
}
/** @ignore */
function decodeFieldNode(f) {
    return new FieldNode(f.length(), f.nullCount());
}
/** @ignore */
function decodeFieldNodes(batch) {
    var nodes = [];
    for (var f = void 0, i = -1, j = -1, n = batch.nodesLength(); ++i < n;) {
        if (f = batch.nodes(i)) {
            nodes[++j] = FieldNode.decode(f);
        }
    }
    return nodes;
}
/** @ignore */
function decodeBuffers(batch, version) {
    var bufferRegions = [];
    for (var b = void 0, i = -1, j = -1, n = batch.buffersLength(); ++i < n;) {
        if (b = batch.buffers(i)) {
            // If this Arrow buffer was written before version 4,
            // advance the buffer's bb_pos 8 bytes to skip past
            // the now-removed page_id field
            if (version < enum_1$b.MetadataVersion.V4) {
                b.bb_pos += (8 * (i + 1));
            }
            bufferRegions[++j] = BufferRegion.decode(b);
        }
    }
    return bufferRegions;
}
/** @ignore */
function decodeSchemaFields(schema, dictionaries) {
    var fields = [];
    for (var f = void 0, i = -1, j = -1, n = schema.fieldsLength(); ++i < n;) {
        if (f = schema.fields(i)) {
            fields[++j] = schema_1$5.Field.decode(f, dictionaries);
        }
    }
    return fields;
}
/** @ignore */
function decodeFieldChildren(field, dictionaries) {
    var children = [];
    for (var f = void 0, i = -1, j = -1, n = field.childrenLength(); ++i < n;) {
        if (f = field.children(i)) {
            children[++j] = schema_1$5.Field.decode(f, dictionaries);
        }
    }
    return children;
}
/** @ignore */
function decodeField(f, dictionaries) {
    var id;
    var field;
    var type;
    var keys;
    var dictType;
    var dictMeta;
    // If no dictionary encoding
    if (!dictionaries || !(dictMeta = f.dictionary())) {
        type = decodeFieldType(f, decodeFieldChildren(f, dictionaries));
        field = new schema_1$5.Field(f.name(), type, f.nullable(), decodeCustomMetadata(f));
    }
    // If dictionary encoded and the first time we've seen this dictionary id, decode
    // the data type and child fields, then wrap in a Dictionary type and insert the
    // data type into the dictionary types map.
    else if (!dictionaries.has(id = dictMeta.id().low)) {
        // a dictionary index defaults to signed 32 bit int if unspecified
        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) : new type_1$e.Int32();
        dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f, dictionaries)));
        dictType = new type_1$e.Dictionary(type, keys, id, dictMeta.isOrdered());
        field = new schema_1$5.Field(f.name(), dictType, f.nullable(), decodeCustomMetadata(f));
    }
    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the
    // data type and wrap in a new Dictionary type and field.
    else {
        // a dictionary index defaults to signed 32 bit int if unspecified
        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) : new type_1$e.Int32();
        dictType = new type_1$e.Dictionary(dictionaries.get(id), keys, id, dictMeta.isOrdered());
        field = new schema_1$5.Field(f.name(), dictType, f.nullable(), decodeCustomMetadata(f));
    }
    return field || null;
}
/** @ignore */
function decodeCustomMetadata(parent) {
    var data = new Map();
    if (parent) {
        for (var entry = void 0, key = void 0, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {
            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {
                data.set(key, entry.value());
            }
        }
    }
    return data;
}
/** @ignore */
function decodeIndexType(_type) {
    return new type_1$e.Int(_type.isSigned(), _type.bitWidth());
}
/** @ignore */
function decodeFieldType(f, children) {
    var typeId = f.typeType();
    switch (typeId) {
        case Schema_1$1.Type['NONE']: return new type_1$e.Null();
        case Schema_1$1.Type['Null']: return new type_1$e.Null();
        case Schema_1$1.Type['Binary']: return new type_1$e.Binary();
        case Schema_1$1.Type['Utf8']: return new type_1$e.Utf8();
        case Schema_1$1.Type['Bool']: return new type_1$e.Bool();
        case Schema_1$1.Type['List']: return new type_1$e.List((children || [])[0]);
        case Schema_1$1.Type['Struct_']: return new type_1$e.Struct(children || []);
    }
    switch (typeId) {
        case Schema_1$1.Type['Int']: {
            var t = f.type(new Schema_1$1.Int());
            return new type_1$e.Int(t.isSigned(), t.bitWidth());
        }
        case Schema_1$1.Type['FloatingPoint']: {
            var t = f.type(new Schema_1$1.FloatingPoint());
            return new type_1$e.Float(t.precision());
        }
        case Schema_1$1.Type['Decimal']: {
            var t = f.type(new Schema_1$1.Decimal());
            return new type_1$e.Decimal(t.scale(), t.precision());
        }
        case Schema_1$1.Type['Date']: {
            var t = f.type(new Schema_1$1.Date());
            return new type_1$e.Date_(t.unit());
        }
        case Schema_1$1.Type['Time']: {
            var t = f.type(new Schema_1$1.Time());
            return new type_1$e.Time(t.unit(), t.bitWidth());
        }
        case Schema_1$1.Type['Timestamp']: {
            var t = f.type(new Schema_1$1.Timestamp());
            return new type_1$e.Timestamp(t.unit(), t.timezone());
        }
        case Schema_1$1.Type['Interval']: {
            var t = f.type(new Schema_1$1.Interval());
            return new type_1$e.Interval(t.unit());
        }
        case Schema_1$1.Type['Union']: {
            var t = f.type(new Schema_1$1.Union());
            return new type_1$e.Union(t.mode(), t.typeIdsArray() || [], children || []);
        }
        case Schema_1$1.Type['FixedSizeBinary']: {
            var t = f.type(new Schema_1$1.FixedSizeBinary());
            return new type_1$e.FixedSizeBinary(t.byteWidth());
        }
        case Schema_1$1.Type['FixedSizeList']: {
            var t = f.type(new Schema_1$1.FixedSizeList());
            return new type_1$e.FixedSizeList(t.listSize(), (children || [])[0]);
        }
        case Schema_1$1.Type['Map']: {
            var t = f.type(new Schema_1$1.Map());
            return new type_1$e.Map_((children || [])[0], t.keysSorted());
        }
    }
    throw new Error("Unrecognized type: \"" + Schema_1$1.Type[typeId] + "\" (" + typeId + ")");
}
/** @ignore */
function encodeSchema(b, schema) {
    var fieldOffsets = schema.fields.map(function (f) { return schema_1$5.Field.encode(b, f); });
    Schema_1$1.Schema.startFieldsVector(b, fieldOffsets.length);
    var fieldsVectorOffset = Schema_1$1.Schema.createFieldsVector(b, fieldOffsets);
    var metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 :
        Schema_1$1.Schema.createCustomMetadataVector(b, tslib_1$D.__spread(schema.metadata).map(function (_a) {
            var _b = tslib_1$D.__read(_a, 2), k = _b[0], v = _b[1];
            var key = b.createString("" + k);
            var val = b.createString("" + v);
            Schema_1$1.KeyValue.startKeyValue(b);
            Schema_1$1.KeyValue.addKey(b, key);
            Schema_1$1.KeyValue.addValue(b, val);
            return Schema_1$1.KeyValue.endKeyValue(b);
        }));
    Schema_1$1.Schema.startSchema(b);
    Schema_1$1.Schema.addFields(b, fieldsVectorOffset);
    Schema_1$1.Schema.addEndianness(b, platformIsLittleEndian ? Schema_1$1.Endianness.Little : Schema_1$1.Endianness.Big);
    if (metadataOffset !== -1) {
        Schema_1$1.Schema.addCustomMetadata(b, metadataOffset);
    }
    return Schema_1$1.Schema.endSchema(b);
}
/** @ignore */
function encodeField(b, field) {
    var nameOffset = -1;
    var typeOffset = -1;
    var dictionaryOffset = -1;
    var type = field.type;
    var typeId = field.typeId;
    if (!type_1$e.DataType.isDictionary(type)) {
        typeOffset = typeassembler_1.instance.visit(type, b);
    }
    else {
        typeId = type.dictionary.typeId;
        dictionaryOffset = typeassembler_1.instance.visit(type, b);
        typeOffset = typeassembler_1.instance.visit(type.dictionary, b);
    }
    var childOffsets = (type.children || []).map(function (f) { return schema_1$5.Field.encode(b, f); });
    var childrenVectorOffset = Schema_1$1.Field.createChildrenVector(b, childOffsets);
    var metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 :
        Schema_1$1.Field.createCustomMetadataVector(b, tslib_1$D.__spread(field.metadata).map(function (_a) {
            var _b = tslib_1$D.__read(_a, 2), k = _b[0], v = _b[1];
            var key = b.createString("" + k);
            var val = b.createString("" + v);
            Schema_1$1.KeyValue.startKeyValue(b);
            Schema_1$1.KeyValue.addKey(b, key);
            Schema_1$1.KeyValue.addValue(b, val);
            return Schema_1$1.KeyValue.endKeyValue(b);
        }));
    if (field.name) {
        nameOffset = b.createString(field.name);
    }
    Schema_1$1.Field.startField(b);
    Schema_1$1.Field.addType(b, typeOffset);
    Schema_1$1.Field.addTypeType(b, typeId);
    Schema_1$1.Field.addChildren(b, childrenVectorOffset);
    Schema_1$1.Field.addNullable(b, !!field.nullable);
    if (nameOffset !== -1) {
        Schema_1$1.Field.addName(b, nameOffset);
    }
    if (dictionaryOffset !== -1) {
        Schema_1$1.Field.addDictionary(b, dictionaryOffset);
    }
    if (metadataOffset !== -1) {
        Schema_1$1.Field.addCustomMetadata(b, metadataOffset);
    }
    return Schema_1$1.Field.endField(b);
}
/** @ignore */
function encodeRecordBatch(b, recordBatch) {
    var nodes = recordBatch.nodes || [];
    var buffers = recordBatch.buffers || [];
    Message_1.RecordBatch.startNodesVector(b, nodes.length);
    nodes.slice().reverse().forEach(function (n) { return FieldNode.encode(b, n); });
    var nodesVectorOffset = b.endVector();
    Message_1.RecordBatch.startBuffersVector(b, buffers.length);
    buffers.slice().reverse().forEach(function (b_) { return BufferRegion.encode(b, b_); });
    var buffersVectorOffset = b.endVector();
    Message_1.RecordBatch.startRecordBatch(b);
    Message_1.RecordBatch.addLength(b, new Long(recordBatch.length, 0));
    Message_1.RecordBatch.addNodes(b, nodesVectorOffset);
    Message_1.RecordBatch.addBuffers(b, buffersVectorOffset);
    return Message_1.RecordBatch.endRecordBatch(b);
}
/** @ignore */
function encodeDictionaryBatch(b, dictionaryBatch) {
    var dataOffset = RecordBatch$1.encode(b, dictionaryBatch.data);
    Message_1.DictionaryBatch.startDictionaryBatch(b);
    Message_1.DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));
    Message_1.DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);
    Message_1.DictionaryBatch.addData(b, dataOffset);
    return Message_1.DictionaryBatch.endDictionaryBatch(b);
}
/** @ignore */
function encodeFieldNode(b, node) {
    return Message_1.FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));
}
/** @ignore */
function encodeBufferRegion(b, node) {
    return Schema_1$1.Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));
}
/** @ignore */
var platformIsLittleEndian = (function () {
    var buffer = new ArrayBuffer(2);
    new DataView(buffer).setInt16(0, 256, true /* littleEndian */);
    // Int16Array uses the platform's endianness.
    return new Int16Array(buffer)[0] === 256;
})();

(function (exports) {
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.magicX2AndPadding = exports.magicAndPadding = exports.magicLength = exports.checkForMagicArrowString = exports.MAGIC = exports.MAGIC_STR = exports.PADDING = exports.JSONMessageReader = exports.AsyncMessageReader = exports.MessageReader = void 0;
var tslib_1 = tslib.exports;
var enum_1 = _enum;
var flatbuffers_1 = require$$2;
var ByteBuffer = flatbuffers_1.flatbuffers.ByteBuffer;
var message_1 = message;
var compat_1 = compat;
var file_1 = file;
var buffer_1 = buffer$1;
var stream_1 = stream;
var interfaces_1 = interfaces;
/** @ignore */ var invalidMessageType = function (type) { return "Expected " + enum_1.MessageHeader[type] + " Message in stream, but was null or length 0."; };
/** @ignore */ var nullMessage = function (type) { return "Header pointer of flatbuffer-encoded " + enum_1.MessageHeader[type] + " Message is null or length 0."; };
/** @ignore */ var invalidMessageMetadata = function (expected, actual) { return "Expected to read " + expected + " metadata bytes, but only read " + actual + "."; };
/** @ignore */ var invalidMessageBodyLength = function (expected, actual) { return "Expected to read " + expected + " bytes for message body, but only read " + actual + "."; };
/** @ignore */
var MessageReader = /** @class */ (function () {
    function MessageReader(source) {
        this.source = source instanceof stream_1.ByteStream ? source : new stream_1.ByteStream(source);
    }
    MessageReader.prototype[Symbol.iterator] = function () { return this; };
    MessageReader.prototype.next = function () {
        var r;
        if ((r = this.readMetadataLength()).done) {
            return interfaces_1.ITERATOR_DONE;
        }
        // ARROW-6313: If the first 4 bytes are continuation indicator (-1), read
        // the next 4 for the 32-bit metadata length. Otherwise, assume this is a
        // pre-v0.15 message, where the first 4 bytes are the metadata length.
        if ((r.value === -1) &&
            (r = this.readMetadataLength()).done) {
            return interfaces_1.ITERATOR_DONE;
        }
        if ((r = this.readMetadata(r.value)).done) {
            return interfaces_1.ITERATOR_DONE;
        }
        return r;
    };
    MessageReader.prototype.throw = function (value) { return this.source.throw(value); };
    MessageReader.prototype.return = function (value) { return this.source.return(value); };
    MessageReader.prototype.readMessage = function (type) {
        var r;
        if ((r = this.next()).done) {
            return null;
        }
        if ((type != null) && r.value.headerType !== type) {
            throw new Error(invalidMessageType(type));
        }
        return r.value;
    };
    MessageReader.prototype.readMessageBody = function (bodyLength) {
        if (bodyLength <= 0) {
            return new Uint8Array(0);
        }
        var buf = buffer_1.toUint8Array(this.source.read(bodyLength));
        if (buf.byteLength < bodyLength) {
            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));
        }
        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817
        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126
        return /* 1. */ (buf.byteOffset % 8 === 0) &&
            /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();
    };
    MessageReader.prototype.readSchema = function (throwIfNull) {
        if (throwIfNull === void 0) { throwIfNull = false; }
        var type = enum_1.MessageHeader.Schema;
        var message = this.readMessage(type);
        var schema = message === null || message === void 0 ? void 0 : message.header();
        if (throwIfNull && !schema) {
            throw new Error(nullMessage(type));
        }
        return schema;
    };
    MessageReader.prototype.readMetadataLength = function () {
        var buf = this.source.read(exports.PADDING);
        var bb = buf && new ByteBuffer(buf);
        var len = (bb === null || bb === void 0 ? void 0 : bb.readInt32(0)) || 0;
        return { done: len === 0, value: len };
    };
    MessageReader.prototype.readMetadata = function (metadataLength) {
        var buf = this.source.read(metadataLength);
        if (!buf) {
            return interfaces_1.ITERATOR_DONE;
        }
        if (buf.byteLength < metadataLength) {
            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));
        }
        return { done: false, value: message_1.Message.decode(buf) };
    };
    return MessageReader;
}());
exports.MessageReader = MessageReader;
/** @ignore */
var AsyncMessageReader = /** @class */ (function () {
    function AsyncMessageReader(source, byteLength) {
        this.source = source instanceof stream_1.AsyncByteStream ? source
            : compat_1.isFileHandle(source)
                ? new file_1.AsyncRandomAccessFile(source, byteLength)
                : new stream_1.AsyncByteStream(source);
    }
    AsyncMessageReader.prototype[Symbol.asyncIterator] = function () { return this; };
    AsyncMessageReader.prototype.next = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var r, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.readMetadataLength()];
                    case 1:
                        if ((r = _b.sent()).done) {
                            return [2 /*return*/, interfaces_1.ITERATOR_DONE];
                        }
                        _a = (r.value === -1);
                        if (!_a) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.readMetadataLength()];
                    case 2:
                        _a = (r = _b.sent()).done;
                        _b.label = 3;
                    case 3:
                        // ARROW-6313: If the first 4 bytes are continuation indicator (-1), read
                        // the next 4 for the 32-bit metadata length. Otherwise, assume this is a
                        // pre-v0.15 message, where the first 4 bytes are the metadata length.
                        if (_a) {
                            return [2 /*return*/, interfaces_1.ITERATOR_DONE];
                        }
                        return [4 /*yield*/, this.readMetadata(r.value)];
                    case 4:
                        if ((r = _b.sent()).done) {
                            return [2 /*return*/, interfaces_1.ITERATOR_DONE];
                        }
                        return [2 /*return*/, r];
                }
            });
        });
    };
    AsyncMessageReader.prototype.throw = function (value) {
        return tslib_1.__awaiter(this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, this.source.throw(value)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        }); });
    };
    AsyncMessageReader.prototype.return = function (value) {
        return tslib_1.__awaiter(this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, this.source.return(value)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        }); });
    };
    AsyncMessageReader.prototype.readMessage = function (type) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var r;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.next()];
                    case 1:
                        if ((r = _a.sent()).done) {
                            return [2 /*return*/, null];
                        }
                        if ((type != null) && r.value.headerType !== type) {
                            throw new Error(invalidMessageType(type));
                        }
                        return [2 /*return*/, r.value];
                }
            });
        });
    };
    AsyncMessageReader.prototype.readMessageBody = function (bodyLength) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var buf, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (bodyLength <= 0) {
                            return [2 /*return*/, new Uint8Array(0)];
                        }
                        _a = buffer_1.toUint8Array;
                        return [4 /*yield*/, this.source.read(bodyLength)];
                    case 1:
                        buf = _a.apply(void 0, [_b.sent()]);
                        if (buf.byteLength < bodyLength) {
                            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));
                        }
                        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817
                        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126
                        return [2 /*return*/, /* 1. */ (buf.byteOffset % 8 === 0) &&
                                /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice()];
                }
            });
        });
    };
    AsyncMessageReader.prototype.readSchema = function (throwIfNull) {
        if (throwIfNull === void 0) { throwIfNull = false; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var type, message, schema;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        type = enum_1.MessageHeader.Schema;
                        return [4 /*yield*/, this.readMessage(type)];
                    case 1:
                        message = _a.sent();
                        schema = message === null || message === void 0 ? void 0 : message.header();
                        if (throwIfNull && !schema) {
                            throw new Error(nullMessage(type));
                        }
                        return [2 /*return*/, schema];
                }
            });
        });
    };
    AsyncMessageReader.prototype.readMetadataLength = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var buf, bb, len;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.source.read(exports.PADDING)];
                    case 1:
                        buf = _a.sent();
                        bb = buf && new ByteBuffer(buf);
                        len = (bb === null || bb === void 0 ? void 0 : bb.readInt32(0)) || 0;
                        return [2 /*return*/, { done: len === 0, value: len }];
                }
            });
        });
    };
    AsyncMessageReader.prototype.readMetadata = function (metadataLength) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var buf;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.source.read(metadataLength)];
                    case 1:
                        buf = _a.sent();
                        if (!buf) {
                            return [2 /*return*/, interfaces_1.ITERATOR_DONE];
                        }
                        if (buf.byteLength < metadataLength) {
                            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));
                        }
                        return [2 /*return*/, { done: false, value: message_1.Message.decode(buf) }];
                }
            });
        });
    };
    return AsyncMessageReader;
}());
exports.AsyncMessageReader = AsyncMessageReader;
/** @ignore */
var JSONMessageReader = /** @class */ (function (_super) {
    tslib_1.__extends(JSONMessageReader, _super);
    function JSONMessageReader(source) {
        var _this = _super.call(this, new Uint8Array(0)) || this;
        _this._schema = false;
        _this._body = [];
        _this._batchIndex = 0;
        _this._dictionaryIndex = 0;
        _this._json = source instanceof interfaces_1.ArrowJSON ? source : new interfaces_1.ArrowJSON(source);
        return _this;
    }
    JSONMessageReader.prototype.next = function () {
        var _json = this._json;
        if (!this._schema) {
            this._schema = true;
            var message = message_1.Message.fromJSON(_json.schema, enum_1.MessageHeader.Schema);
            return { done: false, value: message };
        }
        if (this._dictionaryIndex < _json.dictionaries.length) {
            var batch = _json.dictionaries[this._dictionaryIndex++];
            this._body = batch['data']['columns'];
            var message = message_1.Message.fromJSON(batch, enum_1.MessageHeader.DictionaryBatch);
            return { done: false, value: message };
        }
        if (this._batchIndex < _json.batches.length) {
            var batch = _json.batches[this._batchIndex++];
            this._body = batch['columns'];
            var message = message_1.Message.fromJSON(batch, enum_1.MessageHeader.RecordBatch);
            return { done: false, value: message };
        }
        this._body = [];
        return interfaces_1.ITERATOR_DONE;
    };
    JSONMessageReader.prototype.readMessageBody = function (_bodyLength) {
        return flattenDataSources(this._body);
        function flattenDataSources(xs) {
            return (xs || []).reduce(function (buffers, column) { return tslib_1.__spread(buffers, (column['VALIDITY'] && [column['VALIDITY']] || []), (column['TYPE'] && [column['TYPE']] || []), (column['OFFSET'] && [column['OFFSET']] || []), (column['DATA'] && [column['DATA']] || []), flattenDataSources(column['children'])); }, []);
        }
    };
    JSONMessageReader.prototype.readMessage = function (type) {
        var r;
        if ((r = this.next()).done) {
            return null;
        }
        if ((type != null) && r.value.headerType !== type) {
            throw new Error(invalidMessageType(type));
        }
        return r.value;
    };
    JSONMessageReader.prototype.readSchema = function () {
        var type = enum_1.MessageHeader.Schema;
        var message = this.readMessage(type);
        var schema = message === null || message === void 0 ? void 0 : message.header();
        if (!message || !schema) {
            throw new Error(nullMessage(type));
        }
        return schema;
    };
    return JSONMessageReader;
}(MessageReader));
exports.JSONMessageReader = JSONMessageReader;
/** @ignore */
exports.PADDING = 4;
/** @ignore */
exports.MAGIC_STR = 'ARROW1';
/** @ignore */
exports.MAGIC = new Uint8Array(exports.MAGIC_STR.length);
for (var i = 0; i < exports.MAGIC_STR.length; i += 1 | 0) {
    exports.MAGIC[i] = exports.MAGIC_STR.charCodeAt(i);
}
/** @ignore */
function checkForMagicArrowString(buffer, index) {
    if (index === void 0) { index = 0; }
    for (var i = -1, n = exports.MAGIC.length; ++i < n;) {
        if (exports.MAGIC[i] !== buffer[index + i]) {
            return false;
        }
    }
    return true;
}
exports.checkForMagicArrowString = checkForMagicArrowString;
/** @ignore */
exports.magicLength = exports.MAGIC.length;
/** @ignore */
exports.magicAndPadding = exports.magicLength + exports.PADDING;
/** @ignore */
exports.magicX2AndPadding = exports.magicLength * 2 + exports.PADDING;


}(message$1));

var typecomparator = {};

(function (exports) {
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.compareTypes = exports.compareFields = exports.compareSchemas = exports.instance = exports.TypeComparator = void 0;
var tslib_1 = tslib.exports;
var visitor_1 = visitor;
/** @ignore */
var TypeComparator = /** @class */ (function (_super) {
    tslib_1.__extends(TypeComparator, _super);
    function TypeComparator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TypeComparator.prototype.compareSchemas = function (schema, other) {
        return (schema === other) || (other instanceof schema.constructor &&
            this.compareManyFields(schema.fields, other.fields));
    };
    TypeComparator.prototype.compareManyFields = function (fields, others) {
        var _this = this;
        return (fields === others) || (Array.isArray(fields) &&
            Array.isArray(others) &&
            fields.length === others.length &&
            fields.every(function (f, i) { return _this.compareFields(f, others[i]); }));
    };
    TypeComparator.prototype.compareFields = function (field, other) {
        return (field === other) || (other instanceof field.constructor &&
            field.name === other.name &&
            field.nullable === other.nullable &&
            this.visit(field.type, other.type));
    };
    return TypeComparator;
}(visitor_1.Visitor));
exports.TypeComparator = TypeComparator;
function compareConstructor(type, other) {
    return other instanceof type.constructor;
}
function compareAny(type, other) {
    return (type === other) || compareConstructor(type, other);
}
function compareInt(type, other) {
    return (type === other) || (compareConstructor(type, other) &&
        type.bitWidth === other.bitWidth &&
        type.isSigned === other.isSigned);
}
function compareFloat(type, other) {
    return (type === other) || (compareConstructor(type, other) &&
        type.precision === other.precision);
}
function compareFixedSizeBinary(type, other) {
    return (type === other) || (compareConstructor(type, other) &&
        type.byteWidth === other.byteWidth);
}
function compareDate(type, other) {
    return (type === other) || (compareConstructor(type, other) &&
        type.unit === other.unit);
}
function compareTimestamp(type, other) {
    return (type === other) || (compareConstructor(type, other) &&
        type.unit === other.unit &&
        type.timezone === other.timezone);
}
function compareTime(type, other) {
    return (type === other) || (compareConstructor(type, other) &&
        type.unit === other.unit &&
        type.bitWidth === other.bitWidth);
}
function compareList(type, other) {
    return (type === other) || (compareConstructor(type, other) &&
        type.children.length === other.children.length &&
        exports.instance.compareManyFields(type.children, other.children));
}
function compareStruct(type, other) {
    return (type === other) || (compareConstructor(type, other) &&
        type.children.length === other.children.length &&
        exports.instance.compareManyFields(type.children, other.children));
}
function compareUnion(type, other) {
    return (type === other) || (compareConstructor(type, other) &&
        type.mode === other.mode &&
        type.typeIds.every(function (x, i) { return x === other.typeIds[i]; }) &&
        exports.instance.compareManyFields(type.children, other.children));
}
function compareDictionary(type, other) {
    return (type === other) || (compareConstructor(type, other) &&
        type.id === other.id &&
        type.isOrdered === other.isOrdered &&
        exports.instance.visit(type.indices, other.indices) &&
        exports.instance.visit(type.dictionary, other.dictionary));
}
function compareInterval(type, other) {
    return (type === other) || (compareConstructor(type, other) &&
        type.unit === other.unit);
}
function compareFixedSizeList(type, other) {
    return (type === other) || (compareConstructor(type, other) &&
        type.listSize === other.listSize &&
        type.children.length === other.children.length &&
        exports.instance.compareManyFields(type.children, other.children));
}
function compareMap(type, other) {
    return (type === other) || (compareConstructor(type, other) &&
        type.keysSorted === other.keysSorted &&
        type.children.length === other.children.length &&
        exports.instance.compareManyFields(type.children, other.children));
}
TypeComparator.prototype.visitNull = compareAny;
TypeComparator.prototype.visitBool = compareAny;
TypeComparator.prototype.visitInt = compareInt;
TypeComparator.prototype.visitInt8 = compareInt;
TypeComparator.prototype.visitInt16 = compareInt;
TypeComparator.prototype.visitInt32 = compareInt;
TypeComparator.prototype.visitInt64 = compareInt;
TypeComparator.prototype.visitUint8 = compareInt;
TypeComparator.prototype.visitUint16 = compareInt;
TypeComparator.prototype.visitUint32 = compareInt;
TypeComparator.prototype.visitUint64 = compareInt;
TypeComparator.prototype.visitFloat = compareFloat;
TypeComparator.prototype.visitFloat16 = compareFloat;
TypeComparator.prototype.visitFloat32 = compareFloat;
TypeComparator.prototype.visitFloat64 = compareFloat;
TypeComparator.prototype.visitUtf8 = compareAny;
TypeComparator.prototype.visitBinary = compareAny;
TypeComparator.prototype.visitFixedSizeBinary = compareFixedSizeBinary;
TypeComparator.prototype.visitDate = compareDate;
TypeComparator.prototype.visitDateDay = compareDate;
TypeComparator.prototype.visitDateMillisecond = compareDate;
TypeComparator.prototype.visitTimestamp = compareTimestamp;
TypeComparator.prototype.visitTimestampSecond = compareTimestamp;
TypeComparator.prototype.visitTimestampMillisecond = compareTimestamp;
TypeComparator.prototype.visitTimestampMicrosecond = compareTimestamp;
TypeComparator.prototype.visitTimestampNanosecond = compareTimestamp;
TypeComparator.prototype.visitTime = compareTime;
TypeComparator.prototype.visitTimeSecond = compareTime;
TypeComparator.prototype.visitTimeMillisecond = compareTime;
TypeComparator.prototype.visitTimeMicrosecond = compareTime;
TypeComparator.prototype.visitTimeNanosecond = compareTime;
TypeComparator.prototype.visitDecimal = compareAny;
TypeComparator.prototype.visitList = compareList;
TypeComparator.prototype.visitStruct = compareStruct;
TypeComparator.prototype.visitUnion = compareUnion;
TypeComparator.prototype.visitDenseUnion = compareUnion;
TypeComparator.prototype.visitSparseUnion = compareUnion;
TypeComparator.prototype.visitDictionary = compareDictionary;
TypeComparator.prototype.visitInterval = compareInterval;
TypeComparator.prototype.visitIntervalDayTime = compareInterval;
TypeComparator.prototype.visitIntervalYearMonth = compareInterval;
TypeComparator.prototype.visitFixedSizeList = compareFixedSizeList;
TypeComparator.prototype.visitMap = compareMap;
/** @ignore */
exports.instance = new TypeComparator();
function compareSchemas(schema, other) {
    return exports.instance.compareSchemas(schema, other);
}
exports.compareSchemas = compareSchemas;
function compareFields(field, other) {
    return exports.instance.compareFields(field, other);
}
exports.compareFields = compareFields;
function compareTypes(type, other) {
    return exports.instance.visit(type, other);
}
exports.compareTypes = compareTypes;


}(typecomparator));

var vectorassembler = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(vectorassembler, "__esModule", { value: true });
vectorassembler.VectorAssembler = void 0;
var tslib_1$C = tslib.exports;
var visitor_1$9 = visitor;
var enum_1$a = _enum;
var recordbatch_1$7 = recordbatch$1;
var buffer_1$3 = buffer$1;
var bit_1$3 = bit;
var args_1$3 = args;
var message_1$2 = message;
var type_1$d = type;
/** @ignore */
var VectorAssembler = /** @class */ (function (_super) {
    tslib_1$C.__extends(VectorAssembler, _super);
    function VectorAssembler() {
        var _this = _super.call(this) || this;
        _this._byteLength = 0;
        _this._nodes = [];
        _this._buffers = [];
        _this._bufferRegions = [];
        return _this;
    }
    /** @nocollapse */
    VectorAssembler.assemble = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var assembler = new VectorAssembler();
        var vectorChildren = args_1$3.selectVectorChildrenArgs(recordbatch_1$7.RecordBatch, args);
        var _a = tslib_1$C.__read(assembler.visitMany(vectorChildren), 1), _b = _a[0], assembleResult = _b === void 0 ? assembler : _b;
        return assembleResult;
    };
    VectorAssembler.prototype.visit = function (vector) {
        if (!type_1$d.DataType.isDictionary(vector.type)) {
            var data = vector.data, length_1 = vector.length, nullCount = vector.nullCount;
            if (length_1 > 2147483647) {
                /* istanbul ignore next */
                throw new RangeError('Cannot write arrays larger than 2^31 - 1 in length');
            }
            if (!type_1$d.DataType.isNull(vector.type)) {
                addBuffer.call(this, nullCount <= 0
                    ? new Uint8Array(0) // placeholder validity buffer
                    : bit_1$3.truncateBitmap(data.offset, length_1, data.nullBitmap));
            }
            this.nodes.push(new message_1$2.FieldNode(length_1, nullCount));
        }
        return _super.prototype.visit.call(this, vector);
    };
    VectorAssembler.prototype.visitNull = function (_nullV) {
        return this;
    };
    VectorAssembler.prototype.visitDictionary = function (vector) {
        // Assemble the indices here, Dictionary assembled separately.
        return this.visit(vector.indices);
    };
    Object.defineProperty(VectorAssembler.prototype, "nodes", {
        get: function () { return this._nodes; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VectorAssembler.prototype, "buffers", {
        get: function () { return this._buffers; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VectorAssembler.prototype, "byteLength", {
        get: function () { return this._byteLength; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VectorAssembler.prototype, "bufferRegions", {
        get: function () { return this._bufferRegions; },
        enumerable: false,
        configurable: true
    });
    return VectorAssembler;
}(visitor_1$9.Visitor));
vectorassembler.VectorAssembler = VectorAssembler;
/** @ignore */
function addBuffer(values) {
    var byteLength = (values.byteLength + 7) & ~7; // Round up to a multiple of 8
    this.buffers.push(values);
    this.bufferRegions.push(new message_1$2.BufferRegion(this._byteLength, byteLength));
    this._byteLength += byteLength;
    return this;
}
/** @ignore */
function assembleUnion(vector) {
    var type = vector.type, length = vector.length, typeIds = vector.typeIds, valueOffsets = vector.valueOffsets;
    // All Union Vectors have a typeIds buffer
    addBuffer.call(this, typeIds);
    // If this is a Sparse Union, treat it like all other Nested types
    if (type.mode === enum_1$a.UnionMode.Sparse) {
        return assembleNestedVector.call(this, vector);
    }
    else if (type.mode === enum_1$a.UnionMode.Dense) {
        // If this is a Dense Union, add the valueOffsets buffer and potentially slice the children
        if (vector.offset <= 0) {
            // If the Vector hasn't been sliced, write the existing valueOffsets
            addBuffer.call(this, valueOffsets);
            // We can treat this like all other Nested types
            return assembleNestedVector.call(this, vector);
        }
        else {
            // A sliced Dense Union is an unpleasant case. Because the offsets are different for
            // each child vector, we need to "rebase" the valueOffsets for each child
            // Union typeIds are not necessary 0-indexed
            var maxChildTypeId = typeIds.reduce(function (x, y) { return Math.max(x, y); }, typeIds[0]);
            var childLengths = new Int32Array(maxChildTypeId + 1);
            // Set all to -1 to indicate that we haven't observed a first occurrence of a particular child yet
            var childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);
            var shiftedOffsets = new Int32Array(length);
            // If we have a non-zero offset, then the value offsets do not start at
            // zero. We must a) create a new offsets array with shifted offsets and
            // b) slice the values array accordingly
            var unshiftedOffsets = buffer_1$3.rebaseValueOffsets(-valueOffsets[0], length, valueOffsets);
            for (var typeId = void 0, shift = void 0, index = -1; ++index < length;) {
                if ((shift = childOffsets[typeId = typeIds[index]]) === -1) {
                    shift = childOffsets[typeId] = unshiftedOffsets[typeId];
                }
                shiftedOffsets[index] = unshiftedOffsets[index] - shift;
                ++childLengths[typeId];
            }
            addBuffer.call(this, shiftedOffsets);
            // Slice and visit children accordingly
            for (var child = void 0, childIndex = -1, numChildren = type.children.length; ++childIndex < numChildren;) {
                if (child = vector.getChildAt(childIndex)) {
                    var typeId = type.typeIds[childIndex];
                    var childLength = Math.min(length, childLengths[typeId]);
                    this.visit(child.slice(childOffsets[typeId], childLength));
                }
            }
        }
    }
    return this;
}
/** @ignore */
function assembleBoolVector(vector) {
    // Bool vector is a special case of FlatVector, as its data buffer needs to stay packed
    var values;
    if (vector.nullCount >= vector.length) {
        // If all values are null, just insert a placeholder empty data buffer (fastest path)
        return addBuffer.call(this, new Uint8Array(0));
    }
    else if ((values = vector.values) instanceof Uint8Array) {
        // If values is already a Uint8Array, slice the bitmap (fast path)
        return addBuffer.call(this, bit_1$3.truncateBitmap(vector.offset, vector.length, values));
    }
    // Otherwise if the underlying data *isn't* a Uint8Array, enumerate the
    // values as bools and re-pack them into a Uint8Array. This code isn't
    // reachable unless you're trying to manipulate the Data internals,
    // we we're only doing this for safety.
    /* istanbul ignore next */
    return addBuffer.call(this, bit_1$3.packBools(vector));
}
/** @ignore */
function assembleFlatVector(vector) {
    return addBuffer.call(this, vector.values.subarray(0, vector.length * vector.stride));
}
/** @ignore */
function assembleFlatListVector(vector) {
    var length = vector.length, values = vector.values, valueOffsets = vector.valueOffsets;
    var firstOffset = valueOffsets[0];
    var lastOffset = valueOffsets[length];
    var byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset);
    // Push in the order FlatList types read their buffers
    addBuffer.call(this, buffer_1$3.rebaseValueOffsets(-valueOffsets[0], length, valueOffsets)); // valueOffsets buffer first
    addBuffer.call(this, values.subarray(firstOffset, firstOffset + byteLength)); // sliced values buffer second
    return this;
}
/** @ignore */
function assembleListVector(vector) {
    var length = vector.length, valueOffsets = vector.valueOffsets;
    // If we have valueOffsets (MapVector, ListVector), push that buffer first
    if (valueOffsets) {
        addBuffer.call(this, buffer_1$3.rebaseValueOffsets(valueOffsets[0], length, valueOffsets));
    }
    // Then insert the List's values child
    return this.visit(vector.getChildAt(0));
}
/** @ignore */
function assembleNestedVector(vector) {
    return this.visitMany(vector.type.children.map(function (_, i) { return vector.getChildAt(i); }).filter(Boolean))[0];
}
VectorAssembler.prototype.visitBool = assembleBoolVector;
VectorAssembler.prototype.visitInt = assembleFlatVector;
VectorAssembler.prototype.visitFloat = assembleFlatVector;
VectorAssembler.prototype.visitUtf8 = assembleFlatListVector;
VectorAssembler.prototype.visitBinary = assembleFlatListVector;
VectorAssembler.prototype.visitFixedSizeBinary = assembleFlatVector;
VectorAssembler.prototype.visitDate = assembleFlatVector;
VectorAssembler.prototype.visitTimestamp = assembleFlatVector;
VectorAssembler.prototype.visitTime = assembleFlatVector;
VectorAssembler.prototype.visitDecimal = assembleFlatVector;
VectorAssembler.prototype.visitList = assembleListVector;
VectorAssembler.prototype.visitStruct = assembleNestedVector;
VectorAssembler.prototype.visitUnion = assembleUnion;
VectorAssembler.prototype.visitInterval = assembleFlatVector;
VectorAssembler.prototype.visitFixedSizeList = assembleListVector;
VectorAssembler.prototype.visitMap = assembleListVector;

var jsontypeassembler = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(jsontypeassembler, "__esModule", { value: true });
jsontypeassembler.JSONTypeAssembler = void 0;
var tslib_1$B = tslib.exports;
var visitor_1$8 = visitor;
var Schema_1 = Schema$1;
var enum_1$9 = _enum;
/** @ignore */
var JSONTypeAssembler = /** @class */ (function (_super) {
    tslib_1$B.__extends(JSONTypeAssembler, _super);
    function JSONTypeAssembler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    JSONTypeAssembler.prototype.visit = function (node) {
        return node == null ? undefined : _super.prototype.visit.call(this, node);
    };
    JSONTypeAssembler.prototype.visitNull = function (_a) {
        var typeId = _a.typeId;
        return { 'name': Schema_1.Type[typeId].toLowerCase() };
    };
    JSONTypeAssembler.prototype.visitInt = function (_a) {
        var typeId = _a.typeId, bitWidth = _a.bitWidth, isSigned = _a.isSigned;
        return { 'name': Schema_1.Type[typeId].toLowerCase(), 'bitWidth': bitWidth, 'isSigned': isSigned };
    };
    JSONTypeAssembler.prototype.visitFloat = function (_a) {
        var typeId = _a.typeId, precision = _a.precision;
        return { 'name': Schema_1.Type[typeId].toLowerCase(), 'precision': enum_1$9.Precision[precision] };
    };
    JSONTypeAssembler.prototype.visitBinary = function (_a) {
        var typeId = _a.typeId;
        return { 'name': Schema_1.Type[typeId].toLowerCase() };
    };
    JSONTypeAssembler.prototype.visitBool = function (_a) {
        var typeId = _a.typeId;
        return { 'name': Schema_1.Type[typeId].toLowerCase() };
    };
    JSONTypeAssembler.prototype.visitUtf8 = function (_a) {
        var typeId = _a.typeId;
        return { 'name': Schema_1.Type[typeId].toLowerCase() };
    };
    JSONTypeAssembler.prototype.visitDecimal = function (_a) {
        var typeId = _a.typeId, scale = _a.scale, precision = _a.precision;
        return { 'name': Schema_1.Type[typeId].toLowerCase(), 'scale': scale, 'precision': precision };
    };
    JSONTypeAssembler.prototype.visitDate = function (_a) {
        var typeId = _a.typeId, unit = _a.unit;
        return { 'name': Schema_1.Type[typeId].toLowerCase(), 'unit': enum_1$9.DateUnit[unit] };
    };
    JSONTypeAssembler.prototype.visitTime = function (_a) {
        var typeId = _a.typeId, unit = _a.unit, bitWidth = _a.bitWidth;
        return { 'name': Schema_1.Type[typeId].toLowerCase(), 'unit': enum_1$9.TimeUnit[unit], bitWidth: bitWidth };
    };
    JSONTypeAssembler.prototype.visitTimestamp = function (_a) {
        var typeId = _a.typeId, timezone = _a.timezone, unit = _a.unit;
        return { 'name': Schema_1.Type[typeId].toLowerCase(), 'unit': enum_1$9.TimeUnit[unit], timezone: timezone };
    };
    JSONTypeAssembler.prototype.visitInterval = function (_a) {
        var typeId = _a.typeId, unit = _a.unit;
        return { 'name': Schema_1.Type[typeId].toLowerCase(), 'unit': enum_1$9.IntervalUnit[unit] };
    };
    JSONTypeAssembler.prototype.visitList = function (_a) {
        var typeId = _a.typeId;
        return { 'name': Schema_1.Type[typeId].toLowerCase() };
    };
    JSONTypeAssembler.prototype.visitStruct = function (_a) {
        var typeId = _a.typeId;
        return { 'name': Schema_1.Type[typeId].toLowerCase() };
    };
    JSONTypeAssembler.prototype.visitUnion = function (_a) {
        var typeId = _a.typeId, mode = _a.mode, typeIds = _a.typeIds;
        return {
            'name': Schema_1.Type[typeId].toLowerCase(),
            'mode': enum_1$9.UnionMode[mode],
            'typeIds': tslib_1$B.__spread(typeIds)
        };
    };
    JSONTypeAssembler.prototype.visitDictionary = function (node) {
        return this.visit(node.dictionary);
    };
    JSONTypeAssembler.prototype.visitFixedSizeBinary = function (_a) {
        var typeId = _a.typeId, byteWidth = _a.byteWidth;
        return { 'name': Schema_1.Type[typeId].toLowerCase(), 'byteWidth': byteWidth };
    };
    JSONTypeAssembler.prototype.visitFixedSizeList = function (_a) {
        var typeId = _a.typeId, listSize = _a.listSize;
        return { 'name': Schema_1.Type[typeId].toLowerCase(), 'listSize': listSize };
    };
    JSONTypeAssembler.prototype.visitMap = function (_a) {
        var typeId = _a.typeId, keysSorted = _a.keysSorted;
        return { 'name': Schema_1.Type[typeId].toLowerCase(), 'keysSorted': keysSorted };
    };
    return JSONTypeAssembler;
}(visitor_1$8.Visitor));
jsontypeassembler.JSONTypeAssembler = JSONTypeAssembler;

var jsonvectorassembler = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(jsonvectorassembler, "__esModule", { value: true });
jsonvectorassembler.JSONVectorAssembler = void 0;
var tslib_1$A = tslib.exports;
var bn_1$1 = bn;
var column_1$2 = column;
var vector_1$a = vector$2;
var visitor_1$7 = visitor;
var enum_1$8 = _enum;
var recordbatch_1$6 = recordbatch$1;
var enum_2 = _enum;
var bit_1$2 = bit;
var args_1$2 = args;
var type_1$c = type;
/** @ignore */
var JSONVectorAssembler = /** @class */ (function (_super) {
    tslib_1$A.__extends(JSONVectorAssembler, _super);
    function JSONVectorAssembler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /** @nocollapse */
    JSONVectorAssembler.assemble = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return new JSONVectorAssembler().visitMany(args_1$2.selectColumnChildrenArgs(recordbatch_1$6.RecordBatch, args));
    };
    JSONVectorAssembler.prototype.visit = function (column) {
        var _a;
        var data = column.data, name = column.name, length = column.length;
        var offset = data.offset, nullCount = data.nullCount, nullBitmap = data.nullBitmap;
        var type = type_1$c.DataType.isDictionary(column.type) ? column.type.indices : column.type;
        var buffers = Object.assign([], data.buffers, (_a = {}, _a[enum_1$8.BufferType.VALIDITY] = undefined, _a));
        return tslib_1$A.__assign({ 'name': name, 'count': length, 'VALIDITY': type_1$c.DataType.isNull(type) ? undefined
                : nullCount <= 0 ? Array.from({ length: length }, function () { return 1; })
                    : tslib_1$A.__spread(new bit_1$2.BitIterator(nullBitmap, offset, length, null, bit_1$2.getBit)) }, _super.prototype.visit.call(this, vector_1$a.Vector.new(data.clone(type, offset, length, 0, buffers))));
    };
    JSONVectorAssembler.prototype.visitNull = function () { return {}; };
    JSONVectorAssembler.prototype.visitBool = function (_a) {
        var values = _a.values, offset = _a.offset, length = _a.length;
        return { 'DATA': tslib_1$A.__spread(new bit_1$2.BitIterator(values, offset, length, null, bit_1$2.getBool)) };
    };
    JSONVectorAssembler.prototype.visitInt = function (vector) {
        return {
            'DATA': vector.type.bitWidth < 64
                ? tslib_1$A.__spread(vector.values) : tslib_1$A.__spread(bigNumsToStrings(vector.values, 2))
        };
    };
    JSONVectorAssembler.prototype.visitFloat = function (vector) {
        return { 'DATA': tslib_1$A.__spread(vector.values) };
    };
    JSONVectorAssembler.prototype.visitUtf8 = function (vector) {
        return { 'DATA': tslib_1$A.__spread(vector), 'OFFSET': tslib_1$A.__spread(vector.valueOffsets) };
    };
    JSONVectorAssembler.prototype.visitBinary = function (vector) {
        return { 'DATA': tslib_1$A.__spread(binaryToString(vector)), OFFSET: tslib_1$A.__spread(vector.valueOffsets) };
    };
    JSONVectorAssembler.prototype.visitFixedSizeBinary = function (vector) {
        return { 'DATA': tslib_1$A.__spread(binaryToString(vector)) };
    };
    JSONVectorAssembler.prototype.visitDate = function (vector) {
        return {
            'DATA': vector.type.unit === enum_2.DateUnit.DAY
                ? tslib_1$A.__spread(vector.values) : tslib_1$A.__spread(bigNumsToStrings(vector.values, 2))
        };
    };
    JSONVectorAssembler.prototype.visitTimestamp = function (vector) {
        return { 'DATA': tslib_1$A.__spread(bigNumsToStrings(vector.values, 2)) };
    };
    JSONVectorAssembler.prototype.visitTime = function (vector) {
        return {
            'DATA': vector.type.unit < enum_2.TimeUnit.MICROSECOND
                ? tslib_1$A.__spread(vector.values) : tslib_1$A.__spread(bigNumsToStrings(vector.values, 2))
        };
    };
    JSONVectorAssembler.prototype.visitDecimal = function (vector) {
        return { 'DATA': tslib_1$A.__spread(bigNumsToStrings(vector.values, 4)) };
    };
    JSONVectorAssembler.prototype.visitList = function (vector) {
        var _this = this;
        return {
            'OFFSET': tslib_1$A.__spread(vector.valueOffsets),
            'children': vector.type.children.map(function (f, i) {
                return _this.visit(new column_1$2.Column(f, [vector.getChildAt(i)]));
            })
        };
    };
    JSONVectorAssembler.prototype.visitStruct = function (vector) {
        var _this = this;
        return {
            'children': vector.type.children.map(function (f, i) {
                return _this.visit(new column_1$2.Column(f, [vector.getChildAt(i)]));
            })
        };
    };
    JSONVectorAssembler.prototype.visitUnion = function (vector) {
        var _this = this;
        return {
            'TYPE': tslib_1$A.__spread(vector.typeIds),
            'OFFSET': vector.type.mode === enum_2.UnionMode.Dense ? tslib_1$A.__spread(vector.valueOffsets) : undefined,
            'children': vector.type.children.map(function (f, i) { return _this.visit(new column_1$2.Column(f, [vector.getChildAt(i)])); })
        };
    };
    JSONVectorAssembler.prototype.visitInterval = function (vector) {
        return { 'DATA': tslib_1$A.__spread(vector.values) };
    };
    JSONVectorAssembler.prototype.visitFixedSizeList = function (vector) {
        var _this = this;
        return {
            'children': vector.type.children.map(function (f, i) {
                return _this.visit(new column_1$2.Column(f, [vector.getChildAt(i)]));
            })
        };
    };
    JSONVectorAssembler.prototype.visitMap = function (vector) {
        var _this = this;
        return {
            'OFFSET': tslib_1$A.__spread(vector.valueOffsets),
            'children': vector.type.children.map(function (f, i) {
                return _this.visit(new column_1$2.Column(f, [vector.getChildAt(i)]));
            })
        };
    };
    return JSONVectorAssembler;
}(visitor_1$7.Visitor));
jsonvectorassembler.JSONVectorAssembler = JSONVectorAssembler;
/** @ignore */
function binaryToString(vector) {
    var _a, _b, octets, e_1_1;
    var e_1, _c;
    return tslib_1$A.__generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _d.trys.push([0, 5, 6, 7]);
                _a = tslib_1$A.__values(vector), _b = _a.next();
                _d.label = 1;
            case 1:
                if (!!_b.done) return [3 /*break*/, 4];
                octets = _b.value;
                return [4 /*yield*/, octets.reduce(function (str, byte) {
                        return "" + str + ('0' + (byte & 0xFF).toString(16)).slice(-2);
                    }, '').toUpperCase()];
            case 2:
                _d.sent();
                _d.label = 3;
            case 3:
                _b = _a.next();
                return [3 /*break*/, 1];
            case 4: return [3 /*break*/, 7];
            case 5:
                e_1_1 = _d.sent();
                e_1 = { error: e_1_1 };
                return [3 /*break*/, 7];
            case 6:
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                }
                finally { if (e_1) throw e_1.error; }
                return [7 /*endfinally*/];
            case 7: return [2 /*return*/];
        }
    });
}
/** @ignore */
function bigNumsToStrings(values, stride) {
    var i, n;
    return tslib_1$A.__generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                i = -1, n = values.length / stride;
                _a.label = 1;
            case 1:
                if (!(++i < n)) return [3 /*break*/, 4];
                return [4 /*yield*/, "" + bn_1$1.BN.new(values.subarray((i + 0) * stride, (i + 1) * stride), false)];
            case 2:
                _a.sent();
                _a.label = 3;
            case 3: return [3 /*break*/, 1];
            case 4: return [2 /*return*/];
        }
    });
}

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(writer$1, "__esModule", { value: true });
writer$1.RecordBatchJSONWriter = writer$1.RecordBatchFileWriter = writer$1.RecordBatchStreamWriter = writer$1.RecordBatchWriter = void 0;
var tslib_1$z = tslib.exports;
var table_1$2 = table;
var message_1$1 = message$1;
var column_1$1 = column;
var type_1$b = type;
var schema_1$4 = schema;
var message_2 = message;
var metadata = message;
var file_1$1 = file$1;
var enum_1$7 = _enum;
var typecomparator_1 = typecomparator;
var stream_1$3 = stream;
var vectorassembler_1 = vectorassembler;
var jsontypeassembler_1 = jsontypeassembler;
var jsonvectorassembler_1 = jsonvectorassembler;
var buffer_1$2 = buffer$1;
var recordbatch_1$5 = recordbatch$1;
var interfaces_1$1 = interfaces;
var compat_1$5 = compat;
var RecordBatchWriter = /** @class */ (function (_super) {
    tslib_1$z.__extends(RecordBatchWriter, _super);
    function RecordBatchWriter(options) {
        var _this = _super.call(this) || this;
        _this._position = 0;
        _this._started = false;
        // @ts-ignore
        _this._sink = new stream_1$3.AsyncByteQueue();
        _this._schema = null;
        _this._dictionaryBlocks = [];
        _this._recordBatchBlocks = [];
        _this._dictionaryDeltaOffsets = new Map();
        compat_1$5.isObject(options) || (options = { autoDestroy: true, writeLegacyIpcFormat: false });
        _this._autoDestroy = (typeof options.autoDestroy === 'boolean') ? options.autoDestroy : true;
        _this._writeLegacyIpcFormat = (typeof options.writeLegacyIpcFormat === 'boolean') ? options.writeLegacyIpcFormat : false;
        return _this;
    }
    /** @nocollapse */
    // @ts-ignore
    RecordBatchWriter.throughNode = function (options) {
        throw new Error("\"throughNode\" not available in this environment");
    };
    /** @nocollapse */
    RecordBatchWriter.throughDOM = function (
    // @ts-ignore
    writableStrategy, 
    // @ts-ignore
    readableStrategy) {
        throw new Error("\"throughDOM\" not available in this environment");
    };
    RecordBatchWriter.prototype.toString = function (sync) {
        if (sync === void 0) { sync = false; }
        return this._sink.toString(sync);
    };
    RecordBatchWriter.prototype.toUint8Array = function (sync) {
        if (sync === void 0) { sync = false; }
        return this._sink.toUint8Array(sync);
    };
    RecordBatchWriter.prototype.writeAll = function (input) {
        var _this = this;
        if (compat_1$5.isPromise(input)) {
            return input.then(function (x) { return _this.writeAll(x); });
        }
        else if (compat_1$5.isAsyncIterable(input)) {
            return writeAllAsync(this, input);
        }
        return writeAll(this, input);
    };
    Object.defineProperty(RecordBatchWriter.prototype, "closed", {
        get: function () { return this._sink.closed; },
        enumerable: false,
        configurable: true
    });
    RecordBatchWriter.prototype[Symbol.asyncIterator] = function () { return this._sink[Symbol.asyncIterator](); };
    RecordBatchWriter.prototype.toDOMStream = function (options) { return this._sink.toDOMStream(options); };
    RecordBatchWriter.prototype.toNodeStream = function (options) { return this._sink.toNodeStream(options); };
    RecordBatchWriter.prototype.close = function () {
        return this.reset()._sink.close();
    };
    RecordBatchWriter.prototype.abort = function (reason) {
        return this.reset()._sink.abort(reason);
    };
    RecordBatchWriter.prototype.finish = function () {
        this._autoDestroy ? this.close() : this.reset(this._sink, this._schema);
        return this;
    };
    RecordBatchWriter.prototype.reset = function (sink, schema) {
        if (sink === void 0) { sink = this._sink; }
        if (schema === void 0) { schema = null; }
        if ((sink === this._sink) || (sink instanceof stream_1$3.AsyncByteQueue)) {
            this._sink = sink;
        }
        else {
            this._sink = new stream_1$3.AsyncByteQueue();
            if (sink && compat_1$5.isWritableDOMStream(sink)) {
                this.toDOMStream({ type: 'bytes' }).pipeTo(sink);
            }
            else if (sink && compat_1$5.isWritableNodeStream(sink)) {
                this.toNodeStream({ objectMode: false }).pipe(sink);
            }
        }
        if (this._started && this._schema) {
            this._writeFooter(this._schema);
        }
        this._started = false;
        this._dictionaryBlocks = [];
        this._recordBatchBlocks = [];
        this._dictionaryDeltaOffsets = new Map();
        if (!schema || !(typecomparator_1.compareSchemas(schema, this._schema))) {
            if (schema === null) {
                this._position = 0;
                this._schema = null;
            }
            else {
                this._started = true;
                this._schema = schema;
                this._writeSchema(schema);
            }
        }
        return this;
    };
    RecordBatchWriter.prototype.write = function (payload) {
        var schema = null;
        if (!this._sink) {
            throw new Error("RecordBatchWriter is closed");
        }
        else if (payload == null) {
            return this.finish() && undefined;
        }
        else if (payload instanceof table_1$2.Table && !(schema = payload.schema)) {
            return this.finish() && undefined;
        }
        else if (payload instanceof recordbatch_1$5.RecordBatch && !(schema = payload.schema)) {
            return this.finish() && undefined;
        }
        if (schema && !typecomparator_1.compareSchemas(schema, this._schema)) {
            if (this._started && this._autoDestroy) {
                return this.close();
            }
            this.reset(this._sink, schema);
        }
        if (payload instanceof recordbatch_1$5.RecordBatch) {
            if (!(payload instanceof recordbatch_1$5._InternalEmptyPlaceholderRecordBatch)) {
                this._writeRecordBatch(payload);
            }
        }
        else if (payload instanceof table_1$2.Table) {
            this.writeAll(payload.chunks);
        }
        else if (compat_1$5.isIterable(payload)) {
            this.writeAll(payload);
        }
    };
    RecordBatchWriter.prototype._writeMessage = function (message, alignment) {
        if (alignment === void 0) { alignment = 8; }
        var a = alignment - 1;
        var buffer = message_2.Message.encode(message);
        var flatbufferSize = buffer.byteLength;
        var prefixSize = !this._writeLegacyIpcFormat ? 8 : 4;
        var alignedSize = (flatbufferSize + prefixSize + a) & ~a;
        var nPaddingBytes = alignedSize - flatbufferSize - prefixSize;
        if (message.headerType === enum_1$7.MessageHeader.RecordBatch) {
            this._recordBatchBlocks.push(new file_1$1.FileBlock(alignedSize, message.bodyLength, this._position));
        }
        else if (message.headerType === enum_1$7.MessageHeader.DictionaryBatch) {
            this._dictionaryBlocks.push(new file_1$1.FileBlock(alignedSize, message.bodyLength, this._position));
        }
        // If not in legacy pre-0.15.0 mode, write the stream continuation indicator
        if (!this._writeLegacyIpcFormat) {
            this._write(Int32Array.of(-1));
        }
        // Write the flatbuffer size prefix including padding
        this._write(Int32Array.of(alignedSize - prefixSize));
        // Write the flatbuffer
        if (flatbufferSize > 0) {
            this._write(buffer);
        }
        // Write any padding
        return this._writePadding(nPaddingBytes);
    };
    RecordBatchWriter.prototype._write = function (chunk) {
        if (this._started) {
            var buffer = buffer_1$2.toUint8Array(chunk);
            if (buffer && buffer.byteLength > 0) {
                this._sink.write(buffer);
                this._position += buffer.byteLength;
            }
        }
        return this;
    };
    RecordBatchWriter.prototype._writeSchema = function (schema) {
        return this._writeMessage(message_2.Message.from(schema));
    };
    // @ts-ignore
    RecordBatchWriter.prototype._writeFooter = function (schema) {
        // eos bytes
        return this._writeLegacyIpcFormat
            ? this._write(Int32Array.of(0))
            : this._write(Int32Array.of(-1, 0));
    };
    RecordBatchWriter.prototype._writeMagic = function () {
        return this._write(message_1$1.MAGIC);
    };
    RecordBatchWriter.prototype._writePadding = function (nBytes) {
        return nBytes > 0 ? this._write(new Uint8Array(nBytes)) : this;
    };
    RecordBatchWriter.prototype._writeRecordBatch = function (batch) {
        var _a = vectorassembler_1.VectorAssembler.assemble(batch), byteLength = _a.byteLength, nodes = _a.nodes, bufferRegions = _a.bufferRegions, buffers = _a.buffers;
        var recordBatch = new metadata.RecordBatch(batch.length, nodes, bufferRegions);
        var message = message_2.Message.from(recordBatch, byteLength);
        return this
            ._writeDictionaries(batch)
            ._writeMessage(message)
            ._writeBodyBuffers(buffers);
    };
    RecordBatchWriter.prototype._writeDictionaryBatch = function (dictionary, id, isDelta) {
        if (isDelta === void 0) { isDelta = false; }
        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));
        var _a = vectorassembler_1.VectorAssembler.assemble(dictionary), byteLength = _a.byteLength, nodes = _a.nodes, bufferRegions = _a.bufferRegions, buffers = _a.buffers;
        var recordBatch = new metadata.RecordBatch(dictionary.length, nodes, bufferRegions);
        var dictionaryBatch = new metadata.DictionaryBatch(recordBatch, id, isDelta);
        var message = message_2.Message.from(dictionaryBatch, byteLength);
        return this
            ._writeMessage(message)
            ._writeBodyBuffers(buffers);
    };
    RecordBatchWriter.prototype._writeBodyBuffers = function (buffers) {
        var buffer;
        var size, padding;
        for (var i = -1, n = buffers.length; ++i < n;) {
            if ((buffer = buffers[i]) && (size = buffer.byteLength) > 0) {
                this._write(buffer);
                if ((padding = ((size + 7) & ~7) - size) > 0) {
                    this._writePadding(padding);
                }
            }
        }
        return this;
    };
    RecordBatchWriter.prototype._writeDictionaries = function (batch) {
        var e_1, _a, e_2, _b;
        try {
            for (var _c = tslib_1$z.__values(batch.dictionaries), _d = _c.next(); !_d.done; _d = _c.next()) {
                var _e = tslib_1$z.__read(_d.value, 2), id = _e[0], dictionary = _e[1];
                var offset = this._dictionaryDeltaOffsets.get(id) || 0;
                if (offset === 0 || (dictionary = dictionary.slice(offset)).length > 0) {
                    var chunks = 'chunks' in dictionary ? dictionary.chunks : [dictionary];
                    try {
                        for (var chunks_1 = (e_2 = void 0, tslib_1$z.__values(chunks)), chunks_1_1 = chunks_1.next(); !chunks_1_1.done; chunks_1_1 = chunks_1.next()) {
                            var chunk = chunks_1_1.value;
                            this._writeDictionaryBatch(chunk, id, offset > 0);
                            offset += chunk.length;
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (chunks_1_1 && !chunks_1_1.done && (_b = chunks_1.return)) _b.call(chunks_1);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return this;
    };
    return RecordBatchWriter;
}(interfaces_1$1.ReadableInterop));
writer$1.RecordBatchWriter = RecordBatchWriter;
/** @ignore */
var RecordBatchStreamWriter = /** @class */ (function (_super) {
    tslib_1$z.__extends(RecordBatchStreamWriter, _super);
    function RecordBatchStreamWriter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /** @nocollapse */
    RecordBatchStreamWriter.writeAll = function (input, options) {
        var writer = new RecordBatchStreamWriter(options);
        if (compat_1$5.isPromise(input)) {
            return input.then(function (x) { return writer.writeAll(x); });
        }
        else if (compat_1$5.isAsyncIterable(input)) {
            return writeAllAsync(writer, input);
        }
        return writeAll(writer, input);
    };
    return RecordBatchStreamWriter;
}(RecordBatchWriter));
writer$1.RecordBatchStreamWriter = RecordBatchStreamWriter;
/** @ignore */
var RecordBatchFileWriter = /** @class */ (function (_super) {
    tslib_1$z.__extends(RecordBatchFileWriter, _super);
    function RecordBatchFileWriter() {
        var _this = _super.call(this) || this;
        _this._autoDestroy = true;
        return _this;
    }
    /** @nocollapse */
    RecordBatchFileWriter.writeAll = function (input) {
        var writer = new RecordBatchFileWriter();
        if (compat_1$5.isPromise(input)) {
            return input.then(function (x) { return writer.writeAll(x); });
        }
        else if (compat_1$5.isAsyncIterable(input)) {
            return writeAllAsync(writer, input);
        }
        return writeAll(writer, input);
    };
    // @ts-ignore
    RecordBatchFileWriter.prototype._writeSchema = function (schema) {
        return this._writeMagic()._writePadding(2);
    };
    RecordBatchFileWriter.prototype._writeFooter = function (schema) {
        var buffer = file_1$1.Footer.encode(new file_1$1.Footer(schema, enum_1$7.MetadataVersion.V4, this._recordBatchBlocks, this._dictionaryBlocks));
        return _super.prototype._writeFooter.call(this, schema) // EOS bytes for sequential readers
            ._write(buffer) // Write the flatbuffer
            ._write(Int32Array.of(buffer.byteLength)) // then the footer size suffix
            ._writeMagic(); // then the magic suffix
    };
    return RecordBatchFileWriter;
}(RecordBatchWriter));
writer$1.RecordBatchFileWriter = RecordBatchFileWriter;
/** @ignore */
var RecordBatchJSONWriter = /** @class */ (function (_super) {
    tslib_1$z.__extends(RecordBatchJSONWriter, _super);
    function RecordBatchJSONWriter() {
        var _this = _super.call(this) || this;
        _this._autoDestroy = true;
        _this._recordBatches = [];
        _this._dictionaries = [];
        return _this;
    }
    /** @nocollapse */
    RecordBatchJSONWriter.writeAll = function (input) {
        return new RecordBatchJSONWriter().writeAll(input);
    };
    RecordBatchJSONWriter.prototype._writeMessage = function () { return this; };
    // @ts-ignore
    RecordBatchJSONWriter.prototype._writeFooter = function (schema) { return this; };
    RecordBatchJSONWriter.prototype._writeSchema = function (schema) {
        return this._write("{\n  \"schema\": " + JSON.stringify({ fields: schema.fields.map(fieldToJSON) }, null, 2));
    };
    RecordBatchJSONWriter.prototype._writeDictionaries = function (batch) {
        if (batch.dictionaries.size > 0) {
            this._dictionaries.push(batch);
        }
        return this;
    };
    RecordBatchJSONWriter.prototype._writeDictionaryBatch = function (dictionary, id, isDelta) {
        if (isDelta === void 0) { isDelta = false; }
        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));
        this._write(this._dictionaryBlocks.length === 0 ? "    " : ",\n    ");
        this._write("" + dictionaryBatchToJSON(dictionary, id, isDelta));
        this._dictionaryBlocks.push(new file_1$1.FileBlock(0, 0, 0));
        return this;
    };
    RecordBatchJSONWriter.prototype._writeRecordBatch = function (batch) {
        this._writeDictionaries(batch);
        this._recordBatches.push(batch);
        return this;
    };
    RecordBatchJSONWriter.prototype.close = function () {
        var e_3, _a;
        if (this._dictionaries.length > 0) {
            this._write(",\n  \"dictionaries\": [\n");
            try {
                for (var _b = tslib_1$z.__values(this._dictionaries), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var batch = _c.value;
                    _super.prototype._writeDictionaries.call(this, batch);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
            this._write("\n  ]");
        }
        if (this._recordBatches.length > 0) {
            for (var i = -1, n = this._recordBatches.length; ++i < n;) {
                this._write(i === 0 ? ",\n  \"batches\": [\n    " : ",\n    ");
                this._write("" + recordBatchToJSON(this._recordBatches[i]));
                this._recordBatchBlocks.push(new file_1$1.FileBlock(0, 0, 0));
            }
            this._write("\n  ]");
        }
        if (this._schema) {
            this._write("\n}");
        }
        this._dictionaries = [];
        this._recordBatches = [];
        return _super.prototype.close.call(this);
    };
    return RecordBatchJSONWriter;
}(RecordBatchWriter));
writer$1.RecordBatchJSONWriter = RecordBatchJSONWriter;
/** @ignore */
function writeAll(writer, input) {
    var e_4, _a;
    var chunks = input;
    if (input instanceof table_1$2.Table) {
        chunks = input.chunks;
        writer.reset(undefined, input.schema);
    }
    try {
        for (var chunks_2 = tslib_1$z.__values(chunks), chunks_2_1 = chunks_2.next(); !chunks_2_1.done; chunks_2_1 = chunks_2.next()) {
            var batch = chunks_2_1.value;
            writer.write(batch);
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (chunks_2_1 && !chunks_2_1.done && (_a = chunks_2.return)) _a.call(chunks_2);
        }
        finally { if (e_4) throw e_4.error; }
    }
    return writer.finish();
}
/** @ignore */
function writeAllAsync(writer, batches) {
    var batches_1, batches_1_1;
    var e_5, _a;
    return tslib_1$z.__awaiter(this, void 0, void 0, function () {
        var batch, e_5_1;
        return tslib_1$z.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 5, 6, 11]);
                    batches_1 = tslib_1$z.__asyncValues(batches);
                    _b.label = 1;
                case 1: return [4 /*yield*/, batches_1.next()];
                case 2:
                    if (!(batches_1_1 = _b.sent(), !batches_1_1.done)) return [3 /*break*/, 4];
                    batch = batches_1_1.value;
                    writer.write(batch);
                    _b.label = 3;
                case 3: return [3 /*break*/, 1];
                case 4: return [3 /*break*/, 11];
                case 5:
                    e_5_1 = _b.sent();
                    e_5 = { error: e_5_1 };
                    return [3 /*break*/, 11];
                case 6:
                    _b.trys.push([6, , 9, 10]);
                    if (!(batches_1_1 && !batches_1_1.done && (_a = batches_1.return))) return [3 /*break*/, 8];
                    return [4 /*yield*/, _a.call(batches_1)];
                case 7:
                    _b.sent();
                    _b.label = 8;
                case 8: return [3 /*break*/, 10];
                case 9:
                    if (e_5) throw e_5.error;
                    return [7 /*endfinally*/];
                case 10: return [7 /*endfinally*/];
                case 11: return [2 /*return*/, writer.finish()];
            }
        });
    });
}
/** @ignore */
function fieldToJSON(_a) {
    var name = _a.name, type = _a.type, nullable = _a.nullable;
    var assembler = new jsontypeassembler_1.JSONTypeAssembler();
    return {
        'name': name, 'nullable': nullable,
        'type': assembler.visit(type),
        'children': (type.children || []).map(fieldToJSON),
        'dictionary': !type_1$b.DataType.isDictionary(type) ? undefined : {
            'id': type.id,
            'isOrdered': type.isOrdered,
            'indexType': assembler.visit(type.indices)
        }
    };
}
/** @ignore */
function dictionaryBatchToJSON(dictionary, id, isDelta) {
    if (isDelta === void 0) { isDelta = false; }
    var field = new schema_1$4.Field("" + id, dictionary.type, dictionary.nullCount > 0);
    var columns = jsonvectorassembler_1.JSONVectorAssembler.assemble(new column_1$1.Column(field, [dictionary]));
    return JSON.stringify({
        'id': id,
        'isDelta': isDelta,
        'data': {
            'count': dictionary.length,
            'columns': columns
        }
    }, null, 2);
}
/** @ignore */
function recordBatchToJSON(records) {
    return JSON.stringify({
        'count': records.length,
        'columns': jsonvectorassembler_1.JSONVectorAssembler.assemble(records)
    }, null, 2);
}

var recordbatch = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(recordbatch, "__esModule", { value: true });
recordbatch.distributeVectorsIntoRecordBatches = recordbatch.distributeColumnsIntoRecordBatches = recordbatch.ensureSameLengthData = void 0;
var tslib_1$y = tslib.exports;
var data_1$4 = data$1;
var schema_1$3 = schema;
var chunked_1$2 = chunked;
var recordbatch_1$4 = recordbatch$1;
var noopBuf = new Uint8Array(0);
var nullBufs = function (bitmapLength) { return [
    noopBuf, noopBuf, new Uint8Array(bitmapLength), noopBuf
]; };
/** @ignore */
function ensureSameLengthData(schema, chunks, batchLength) {
    if (batchLength === void 0) { batchLength = chunks.reduce(function (l, c) { return Math.max(l, c.length); }, 0); }
    var data;
    var field;
    var i = -1;
    var n = chunks.length;
    var fields = tslib_1$y.__spread(schema.fields);
    var batchData = [];
    var bitmapLength = ((batchLength + 63) & ~63) >> 3;
    while (++i < n) {
        if ((data = chunks[i]) && data.length === batchLength) {
            batchData[i] = data;
        }
        else {
            (field = fields[i]).nullable || (fields[i] = fields[i].clone({ nullable: true }));
            batchData[i] = data ? data._changeLengthAndBackfillNullBitmap(batchLength)
                : data_1$4.Data.new(field.type, 0, batchLength, batchLength, nullBufs(bitmapLength));
        }
    }
    return [new schema_1$3.Schema(fields), batchLength, batchData];
}
recordbatch.ensureSameLengthData = ensureSameLengthData;
/** @ignore */
function distributeColumnsIntoRecordBatches(columns) {
    return distributeVectorsIntoRecordBatches(new schema_1$3.Schema(columns.map(function (_a) {
        var field = _a.field;
        return field;
    })), columns);
}
recordbatch.distributeColumnsIntoRecordBatches = distributeColumnsIntoRecordBatches;
/** @ignore */
function distributeVectorsIntoRecordBatches(schema, vecs) {
    return uniformlyDistributeChunksAcrossRecordBatches(schema, vecs.map(function (v) { return v instanceof chunked_1$2.Chunked ? v.chunks.map(function (c) { return c.data; }) : [v.data]; }));
}
recordbatch.distributeVectorsIntoRecordBatches = distributeVectorsIntoRecordBatches;
/** @ignore */
function uniformlyDistributeChunksAcrossRecordBatches(schema, columns) {
    var fields = tslib_1$y.__spread(schema.fields);
    var batchArgs = [];
    var memo = { numBatches: columns.reduce(function (n, c) { return Math.max(n, c.length); }, 0) };
    var numBatches = 0, batchLength = 0;
    var i = -1;
    var numColumns = columns.length;
    var child, childData = [];
    while (memo.numBatches-- > 0) {
        for (batchLength = Number.POSITIVE_INFINITY, i = -1; ++i < numColumns;) {
            childData[i] = child = columns[i].shift();
            batchLength = Math.min(batchLength, child ? child.length : batchLength);
        }
        if (isFinite(batchLength)) {
            childData = distributeChildData(fields, batchLength, childData, columns, memo);
            if (batchLength > 0) {
                batchArgs[numBatches++] = [batchLength, childData.slice()];
            }
        }
    }
    return [
        schema = new schema_1$3.Schema(fields, schema.metadata),
        batchArgs.map(function (xs) { return new (recordbatch_1$4.RecordBatch.bind.apply(recordbatch_1$4.RecordBatch, tslib_1$y.__spread([void 0, schema], xs)))(); })
    ];
}
/** @ignore */
function distributeChildData(fields, batchLength, childData, columns, memo) {
    var data;
    var field;
    var length = 0, i = -1;
    var n = columns.length;
    var bitmapLength = ((batchLength + 63) & ~63) >> 3;
    while (++i < n) {
        if ((data = childData[i]) && ((length = data.length) >= batchLength)) {
            if (length === batchLength) {
                childData[i] = data;
            }
            else {
                childData[i] = data.slice(0, batchLength);
                data = data.slice(batchLength, length - batchLength);
                memo.numBatches = Math.max(memo.numBatches, columns[i].unshift(data));
            }
        }
        else {
            (field = fields[i]).nullable || (fields[i] = field.clone({ nullable: true }));
            childData[i] = data ? data._changeLengthAndBackfillNullBitmap(batchLength)
                : data_1$4.Data.new(field.type, 0, batchLength, batchLength, nullBufs(bitmapLength));
        }
    }
    return childData;
}

var vector = {};

var base = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(base, "__esModule", { value: true });
base.BaseVector = void 0;
var tslib_1$x = tslib.exports;
var enum_1$6 = _enum;
var chunked_1$1 = chunked;
var vector_1$9 = vector$1;
var vector_2 = vector$2;
/** @ignore */
var BaseVector = /** @class */ (function (_super) {
    tslib_1$x.__extends(BaseVector, _super);
    function BaseVector(data, children) {
        var _this = _super.call(this) || this;
        _this._children = children;
        _this.numChildren = data.childData.length;
        _this._bindDataAccessors(_this.data = data);
        return _this;
    }
    Object.defineProperty(BaseVector.prototype, "type", {
        get: function () { return this.data.type; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseVector.prototype, "typeId", {
        get: function () { return this.data.typeId; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseVector.prototype, "length", {
        get: function () { return this.data.length; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseVector.prototype, "offset", {
        get: function () { return this.data.offset; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseVector.prototype, "stride", {
        get: function () { return this.data.stride; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseVector.prototype, "nullCount", {
        get: function () { return this.data.nullCount; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseVector.prototype, "byteLength", {
        get: function () { return this.data.byteLength; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseVector.prototype, "VectorName", {
        get: function () { return enum_1$6.Type[this.typeId] + "Vector"; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseVector.prototype, "ArrayType", {
        get: function () { return this.type.ArrayType; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseVector.prototype, "values", {
        get: function () { return this.data.values; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseVector.prototype, "typeIds", {
        get: function () { return this.data.typeIds; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseVector.prototype, "nullBitmap", {
        get: function () { return this.data.nullBitmap; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseVector.prototype, "valueOffsets", {
        get: function () { return this.data.valueOffsets; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseVector.prototype, Symbol.toStringTag, {
        get: function () { return this.VectorName + "<" + this.type[Symbol.toStringTag] + ">"; },
        enumerable: false,
        configurable: true
    });
    BaseVector.prototype.clone = function (data, children) {
        if (children === void 0) { children = this._children; }
        return vector_2.Vector.new(data, children);
    };
    BaseVector.prototype.concat = function () {
        var others = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            others[_i] = arguments[_i];
        }
        return chunked_1$1.Chunked.concat.apply(chunked_1$1.Chunked, tslib_1$x.__spread([this], others));
    };
    BaseVector.prototype.slice = function (begin, end) {
        // Adjust args similar to Array.prototype.slice. Normalize begin/end to
        // clamp between 0 and length, and wrap around on negative indices, e.g.
        // slice(-1, 5) or slice(5, -1)
        return vector_1$9.clampRange(this, begin, end, this._sliceInternal);
    };
    BaseVector.prototype.isValid = function (index) {
        if (this.nullCount > 0) {
            var idx = this.offset + index;
            var val = this.nullBitmap[idx >> 3];
            var mask = (val & (1 << (idx % 8)));
            return mask !== 0;
        }
        return true;
    };
    BaseVector.prototype.getChildAt = function (index) {
        return index < 0 || index >= this.numChildren ? null : ((this._children || (this._children = []))[index] ||
            (this._children[index] = vector_2.Vector.new(this.data.childData[index])));
    };
    BaseVector.prototype.toJSON = function () { return tslib_1$x.__spread(this); };
    BaseVector.prototype._sliceInternal = function (self, begin, end) {
        return self.clone(self.data.slice(begin, end - begin), null);
    };
    // @ts-ignore
    BaseVector.prototype._bindDataAccessors = function (data) {
        // Implementation in src/vectors/index.ts due to circular dependency/packaging shenanigans
    };
    return BaseVector;
}(vector_2.AbstractVector));
base.BaseVector = BaseVector;
BaseVector.prototype[Symbol.isConcatSpreadable] = true;

var binary = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(binary, "__esModule", { value: true });
binary.BinaryVector = void 0;
var tslib_1$w = tslib.exports;
var vector_1$8 = vector$2;
var base_1$h = base;
var type_1$a = type;
/** @ignore */
var BinaryVector = /** @class */ (function (_super) {
    tslib_1$w.__extends(BinaryVector, _super);
    function BinaryVector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BinaryVector.prototype.asUtf8 = function () {
        return vector_1$8.Vector.new(this.data.clone(new type_1$a.Utf8()));
    };
    return BinaryVector;
}(base_1$h.BaseVector));
binary.BinaryVector = BinaryVector;

var bool = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(bool, "__esModule", { value: true });
bool.BoolVector = void 0;
var tslib_1$v = tslib.exports;
var type_1$9 = type;
var base_1$g = base;
var index_1$8 = vector;
/** @ignore */
var BoolVector = /** @class */ (function (_super) {
    tslib_1$v.__extends(BoolVector, _super);
    function BoolVector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /** @nocollapse */
    BoolVector.from = function (input) {
        return index_1$8.vectorFromValuesWithType(function () { return new type_1$9.Bool(); }, input);
    };
    return BoolVector;
}(base_1$g.BaseVector));
bool.BoolVector = BoolVector;

var date = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(date, "__esModule", { value: true });
date.DateMillisecondVector = date.DateDayVector = date.DateVector = void 0;
var tslib_1$u = tslib.exports;
var enum_1$5 = _enum;
var base_1$f = base;
var index_1$7 = vector;
var type_1$8 = type;
/** @ignore */
var DateVector = /** @class */ (function (_super) {
    tslib_1$u.__extends(DateVector, _super);
    function DateVector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /** @nocollapse */
    DateVector.from = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (args.length === 2) {
            return index_1$7.vectorFromValuesWithType(function () { return args[1] === enum_1$5.DateUnit.DAY ? new type_1$8.DateDay() : new type_1$8.DateMillisecond(); }, args[0]);
        }
        return index_1$7.vectorFromValuesWithType(function () { return new type_1$8.DateMillisecond(); }, args[0]);
    };
    return DateVector;
}(base_1$f.BaseVector));
date.DateVector = DateVector;
/** @ignore */
var DateDayVector = /** @class */ (function (_super) {
    tslib_1$u.__extends(DateDayVector, _super);
    function DateDayVector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return DateDayVector;
}(DateVector));
date.DateDayVector = DateDayVector;
/** @ignore */
var DateMillisecondVector = /** @class */ (function (_super) {
    tslib_1$u.__extends(DateMillisecondVector, _super);
    function DateMillisecondVector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return DateMillisecondVector;
}(DateVector));
date.DateMillisecondVector = DateMillisecondVector;

var decimal = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(decimal, "__esModule", { value: true });
decimal.DecimalVector = void 0;
var tslib_1$t = tslib.exports;
var base_1$e = base;
/** @ignore */
var DecimalVector = /** @class */ (function (_super) {
    tslib_1$t.__extends(DecimalVector, _super);
    function DecimalVector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return DecimalVector;
}(base_1$e.BaseVector));
decimal.DecimalVector = DecimalVector;

var dictionary = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(dictionary, "__esModule", { value: true });
dictionary.DictionaryVector = void 0;
var tslib_1$s = tslib.exports;
var data_1$3 = data$1;
var vector_1$7 = vector$2;
var base_1$d = base;
var index_1$6 = vector;
var type_1$7 = type;
/** @ignore */
var DictionaryVector = /** @class */ (function (_super) {
    tslib_1$s.__extends(DictionaryVector, _super);
    function DictionaryVector(data) {
        var _this = _super.call(this, data) || this;
        _this.indices = vector_1$7.Vector.new(data.clone(_this.type.indices));
        return _this;
    }
    /** @nocollapse */
    DictionaryVector.from = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (args.length === 3) {
            var _a = tslib_1$s.__read(args, 3), values = _a[0], indices = _a[1], keys = _a[2];
            var type = new type_1$7.Dictionary(values.type, indices, null, null);
            return vector_1$7.Vector.new(data_1$3.Data.Dictionary(type, 0, keys.length, 0, null, keys, values));
        }
        return index_1$6.vectorFromValuesWithType(function () { return args[0].type; }, args[0]);
    };
    Object.defineProperty(DictionaryVector.prototype, "dictionary", {
        get: function () { return this.data.dictionary; },
        enumerable: false,
        configurable: true
    });
    DictionaryVector.prototype.reverseLookup = function (value) { return this.dictionary.indexOf(value); };
    DictionaryVector.prototype.getKey = function (idx) { return this.indices.get(idx); };
    DictionaryVector.prototype.getValue = function (key) { return this.dictionary.get(key); };
    DictionaryVector.prototype.setKey = function (idx, key) { return this.indices.set(idx, key); };
    DictionaryVector.prototype.setValue = function (key, value) { return this.dictionary.set(key, value); };
    return DictionaryVector;
}(base_1$d.BaseVector));
dictionary.DictionaryVector = DictionaryVector;
DictionaryVector.prototype.indices = null;

var fixedsizebinary = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(fixedsizebinary, "__esModule", { value: true });
fixedsizebinary.FixedSizeBinaryVector = void 0;
var tslib_1$r = tslib.exports;
var base_1$c = base;
/** @ignore */
var FixedSizeBinaryVector = /** @class */ (function (_super) {
    tslib_1$r.__extends(FixedSizeBinaryVector, _super);
    function FixedSizeBinaryVector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return FixedSizeBinaryVector;
}(base_1$c.BaseVector));
fixedsizebinary.FixedSizeBinaryVector = FixedSizeBinaryVector;

var fixedsizelist = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(fixedsizelist, "__esModule", { value: true });
fixedsizelist.FixedSizeListVector = void 0;
var tslib_1$q = tslib.exports;
var base_1$b = base;
/** @ignore */
var FixedSizeListVector = /** @class */ (function (_super) {
    tslib_1$q.__extends(FixedSizeListVector, _super);
    function FixedSizeListVector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return FixedSizeListVector;
}(base_1$b.BaseVector));
fixedsizelist.FixedSizeListVector = FixedSizeListVector;

var float = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(float, "__esModule", { value: true });
float.Float64Vector = float.Float32Vector = float.Float16Vector = float.FloatVector = void 0;
var tslib_1$p = tslib.exports;
var data_1$2 = data$1;
var vector_1$6 = vector$2;
var base_1$a = base;
var index_1$5 = vector;
var type_1$6 = type;
/** @ignore */
var FloatVector = /** @class */ (function (_super) {
    tslib_1$p.__extends(FloatVector, _super);
    function FloatVector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /** @nocollapse */
    FloatVector.from = function (input) {
        var ArrowType = vectorTypeToDataType$1(this);
        if ((input instanceof ArrayBuffer) || ArrayBuffer.isView(input)) {
            var InputType = arrayTypeToDataType$1(input.constructor) || ArrowType;
            // Special case, infer the Arrow DataType from the input if calling the base
            // FloatVector.from with a TypedArray, e.g. `FloatVector.from(new Float32Array())`
            if (ArrowType === null) {
                ArrowType = InputType;
            }
            // If the DataType inferred from the Vector constructor matches the
            // DataType inferred from the input arguments, return zero-copy view
            if (ArrowType && ArrowType === InputType) {
                var type = new ArrowType();
                var length_1 = input.byteLength / type.ArrayType.BYTES_PER_ELEMENT;
                // If the ArrowType is Float16 but the input type isn't a Uint16Array,
                // let the Float16Builder handle casting the input values to Uint16s.
                if (!convertTo16Bit(ArrowType, input.constructor)) {
                    return vector_1$6.Vector.new(data_1$2.Data.Float(type, 0, length_1, 0, null, input));
                }
            }
        }
        if (ArrowType) {
            // If the DataType inferred from the Vector constructor is different than
            // the DataType inferred from the input TypedArray, or if input isn't a
            // TypedArray, use the Builders to construct the result Vector
            return index_1$5.vectorFromValuesWithType(function () { return new ArrowType(); }, input);
        }
        if ((input instanceof DataView) || (input instanceof ArrayBuffer)) {
            throw new TypeError("Cannot infer float type from instance of " + input.constructor.name);
        }
        throw new TypeError('Unrecognized FloatVector input');
    };
    return FloatVector;
}(base_1$a.BaseVector));
float.FloatVector = FloatVector;
/** @ignore */
var Float16Vector = /** @class */ (function (_super) {
    tslib_1$p.__extends(Float16Vector, _super);
    function Float16Vector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    // Since JS doesn't have half floats, `toArray()` returns a zero-copy slice
    // of the underlying Uint16Array data. This behavior ensures we don't incur
    // extra compute or copies if you're calling `toArray()` in order to create
    // a buffer for something like WebGL. Buf if you're using JS and want typed
    // arrays of 4-to-8-byte precision, these methods will enumerate the values
    // and clamp to the desired byte lengths.
    Float16Vector.prototype.toFloat32Array = function () { return new Float32Array(this); };
    Float16Vector.prototype.toFloat64Array = function () { return new Float64Array(this); };
    return Float16Vector;
}(FloatVector));
float.Float16Vector = Float16Vector;
/** @ignore */
var Float32Vector = /** @class */ (function (_super) {
    tslib_1$p.__extends(Float32Vector, _super);
    function Float32Vector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Float32Vector;
}(FloatVector));
float.Float32Vector = Float32Vector;
/** @ignore */
var Float64Vector = /** @class */ (function (_super) {
    tslib_1$p.__extends(Float64Vector, _super);
    function Float64Vector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Float64Vector;
}(FloatVector));
float.Float64Vector = Float64Vector;
var convertTo16Bit = function (typeCtor, dataCtor) {
    return (typeCtor === type_1$6.Float16) && (dataCtor !== Uint16Array);
};
/** @ignore */
var arrayTypeToDataType$1 = function (ctor) {
    switch (ctor) {
        case Uint16Array: return type_1$6.Float16;
        case Float32Array: return type_1$6.Float32;
        case Float64Array: return type_1$6.Float64;
        default: return null;
    }
};
/** @ignore */
var vectorTypeToDataType$1 = function (ctor) {
    switch (ctor) {
        case Float16Vector: return type_1$6.Float16;
        case Float32Vector: return type_1$6.Float32;
        case Float64Vector: return type_1$6.Float64;
        default: return null;
    }
};

var interval = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(interval, "__esModule", { value: true });
interval.IntervalYearMonthVector = interval.IntervalDayTimeVector = interval.IntervalVector = void 0;
var tslib_1$o = tslib.exports;
var base_1$9 = base;
/** @ignore */
var IntervalVector = /** @class */ (function (_super) {
    tslib_1$o.__extends(IntervalVector, _super);
    function IntervalVector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return IntervalVector;
}(base_1$9.BaseVector));
interval.IntervalVector = IntervalVector;
/** @ignore */
var IntervalDayTimeVector = /** @class */ (function (_super) {
    tslib_1$o.__extends(IntervalDayTimeVector, _super);
    function IntervalDayTimeVector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return IntervalDayTimeVector;
}(IntervalVector));
interval.IntervalDayTimeVector = IntervalDayTimeVector;
/** @ignore */
var IntervalYearMonthVector = /** @class */ (function (_super) {
    tslib_1$o.__extends(IntervalYearMonthVector, _super);
    function IntervalYearMonthVector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return IntervalYearMonthVector;
}(IntervalVector));
interval.IntervalYearMonthVector = IntervalYearMonthVector;

var int = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(int, "__esModule", { value: true });
int.Uint64Vector = int.Uint32Vector = int.Uint16Vector = int.Uint8Vector = int.Int64Vector = int.Int32Vector = int.Int16Vector = int.Int8Vector = int.IntVector = void 0;
var tslib_1$n = tslib.exports;
var data_1$1 = data$1;
var vector_1$5 = vector$2;
var base_1$8 = base;
var index_1$4 = vector;
var compat_1$4 = compat;
var buffer_1$1 = buffer$1;
var type_1$5 = type;
/** @ignore */
var IntVector = /** @class */ (function (_super) {
    tslib_1$n.__extends(IntVector, _super);
    function IntVector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /** @nocollapse */
    IntVector.from = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _a = tslib_1$n.__read(args, 2), input = _a[0], _b = _a[1], is64bit = _b === void 0 ? false : _b;
        var ArrowType = vectorTypeToDataType(this, is64bit);
        if ((input instanceof ArrayBuffer) || ArrayBuffer.isView(input)) {
            var InputType = arrayTypeToDataType(input.constructor, is64bit) || ArrowType;
            // Special case, infer the Arrow DataType from the input if calling the base
            // IntVector.from with a TypedArray, e.g. `IntVector.from(new Int32Array())`
            if (ArrowType === null) {
                ArrowType = InputType;
            }
            // If the DataType inferred from the Vector constructor matches the
            // DataType inferred from the input arguments, return zero-copy view
            if (ArrowType && ArrowType === InputType) {
                var type = new ArrowType();
                var length_1 = input.byteLength / type.ArrayType.BYTES_PER_ELEMENT;
                // If the ArrowType is 64bit but the input type is 32bit pairs, update the logical length
                if (convert32To64Bit(ArrowType, input.constructor)) {
                    length_1 *= 0.5;
                }
                return vector_1$5.Vector.new(data_1$1.Data.Int(type, 0, length_1, 0, null, input));
            }
        }
        if (ArrowType) {
            // If the DataType inferred from the Vector constructor is different than
            // the DataType inferred from the input TypedArray, or if input isn't a
            // TypedArray, use the Builders to construct the result Vector
            return index_1$4.vectorFromValuesWithType(function () { return new ArrowType(); }, input);
        }
        if ((input instanceof DataView) || (input instanceof ArrayBuffer)) {
            throw new TypeError("Cannot infer integer type from instance of " + input.constructor.name);
        }
        throw new TypeError('Unrecognized IntVector input');
    };
    return IntVector;
}(base_1$8.BaseVector));
int.IntVector = IntVector;
/** @ignore */
var Int8Vector = /** @class */ (function (_super) {
    tslib_1$n.__extends(Int8Vector, _super);
    function Int8Vector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Int8Vector;
}(IntVector));
int.Int8Vector = Int8Vector;
/** @ignore */
var Int16Vector = /** @class */ (function (_super) {
    tslib_1$n.__extends(Int16Vector, _super);
    function Int16Vector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Int16Vector;
}(IntVector));
int.Int16Vector = Int16Vector;
/** @ignore */
var Int32Vector = /** @class */ (function (_super) {
    tslib_1$n.__extends(Int32Vector, _super);
    function Int32Vector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Int32Vector;
}(IntVector));
int.Int32Vector = Int32Vector;
/** @ignore */
var Int64Vector = /** @class */ (function (_super) {
    tslib_1$n.__extends(Int64Vector, _super);
    function Int64Vector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Int64Vector.prototype.toBigInt64Array = function () {
        return buffer_1$1.toBigInt64Array(this.values);
    };
    Object.defineProperty(Int64Vector.prototype, "values64", {
        get: function () {
            return this._values64 || (this._values64 = this.toBigInt64Array());
        },
        enumerable: false,
        configurable: true
    });
    return Int64Vector;
}(IntVector));
int.Int64Vector = Int64Vector;
/** @ignore */
var Uint8Vector = /** @class */ (function (_super) {
    tslib_1$n.__extends(Uint8Vector, _super);
    function Uint8Vector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Uint8Vector;
}(IntVector));
int.Uint8Vector = Uint8Vector;
/** @ignore */
var Uint16Vector = /** @class */ (function (_super) {
    tslib_1$n.__extends(Uint16Vector, _super);
    function Uint16Vector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Uint16Vector;
}(IntVector));
int.Uint16Vector = Uint16Vector;
/** @ignore */
var Uint32Vector = /** @class */ (function (_super) {
    tslib_1$n.__extends(Uint32Vector, _super);
    function Uint32Vector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Uint32Vector;
}(IntVector));
int.Uint32Vector = Uint32Vector;
/** @ignore */
var Uint64Vector = /** @class */ (function (_super) {
    tslib_1$n.__extends(Uint64Vector, _super);
    function Uint64Vector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Uint64Vector.prototype.toBigUint64Array = function () {
        return buffer_1$1.toBigUint64Array(this.values);
    };
    Object.defineProperty(Uint64Vector.prototype, "values64", {
        get: function () {
            return this._values64 || (this._values64 = this.toBigUint64Array());
        },
        enumerable: false,
        configurable: true
    });
    return Uint64Vector;
}(IntVector));
int.Uint64Vector = Uint64Vector;
var convert32To64Bit = function (typeCtor, dataCtor) {
    return (typeCtor === type_1$5.Int64 || typeCtor === type_1$5.Uint64) &&
        (dataCtor === Int32Array || dataCtor === Uint32Array);
};
/** @ignore */
var arrayTypeToDataType = function (ctor, is64bit) {
    switch (ctor) {
        case Int8Array: return type_1$5.Int8;
        case Int16Array: return type_1$5.Int16;
        case Int32Array: return is64bit ? type_1$5.Int64 : type_1$5.Int32;
        case compat_1$4.BigInt64Array: return type_1$5.Int64;
        case Uint8Array: return type_1$5.Uint8;
        case Uint16Array: return type_1$5.Uint16;
        case Uint32Array: return is64bit ? type_1$5.Uint64 : type_1$5.Uint32;
        case compat_1$4.BigUint64Array: return type_1$5.Uint64;
        default: return null;
    }
};
/** @ignore */
var vectorTypeToDataType = function (ctor, is64bit) {
    switch (ctor) {
        case Int8Vector: return type_1$5.Int8;
        case Int16Vector: return type_1$5.Int16;
        case Int32Vector: return is64bit ? type_1$5.Int64 : type_1$5.Int32;
        case Int64Vector: return type_1$5.Int64;
        case Uint8Vector: return type_1$5.Uint8;
        case Uint16Vector: return type_1$5.Uint16;
        case Uint32Vector: return is64bit ? type_1$5.Uint64 : type_1$5.Uint32;
        case Uint64Vector: return type_1$5.Uint64;
        default: return null;
    }
};

var list = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(list, "__esModule", { value: true });
list.ListVector = void 0;
var tslib_1$m = tslib.exports;
var base_1$7 = base;
/** @ignore */
var ListVector = /** @class */ (function (_super) {
    tslib_1$m.__extends(ListVector, _super);
    function ListVector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ListVector;
}(base_1$7.BaseVector));
list.ListVector = ListVector;

var map$1 = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(map$1, "__esModule", { value: true });
map$1.MapVector = void 0;
var tslib_1$l = tslib.exports;
var row_1$1 = row;
var vector_1$4 = vector$2;
var base_1$6 = base;
var type_1$4 = type;
/** @ignore */
var MapVector = /** @class */ (function (_super) {
    tslib_1$l.__extends(MapVector, _super);
    function MapVector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MapVector.prototype.asList = function () {
        var child = this.type.children[0];
        return vector_1$4.Vector.new(this.data.clone(new type_1$4.List(child)));
    };
    MapVector.prototype.bind = function (index) {
        var child = this.getChildAt(0);
        var _a = this.valueOffsets, _b = index, begin = _a[_b], _c = index + 1, end = _a[_c];
        return new row_1$1.MapRow(child.slice(begin, end));
    };
    return MapVector;
}(base_1$6.BaseVector));
map$1.MapVector = MapVector;

var _null = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(_null, "__esModule", { value: true });
_null.NullVector = void 0;
var tslib_1$k = tslib.exports;
var base_1$5 = base;
/** @ignore */
var NullVector = /** @class */ (function (_super) {
    tslib_1$k.__extends(NullVector, _super);
    function NullVector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return NullVector;
}(base_1$5.BaseVector));
_null.NullVector = NullVector;

var struct = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(struct, "__esModule", { value: true });
struct.StructVector = void 0;
var tslib_1$j = tslib.exports;
var row_1 = row;
var base_1$4 = base;
/** @ignore */ var kRowIndex = Symbol.for('rowIndex');
/** @ignore */
var StructVector = /** @class */ (function (_super) {
    tslib_1$j.__extends(StructVector, _super);
    function StructVector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StructVector.prototype.bind = function (index) {
        var proto = this._row || (this._row = new row_1.StructRow(this));
        var bound = Object.create(proto);
        bound[kRowIndex] = index;
        return bound;
    };
    return StructVector;
}(base_1$4.BaseVector));
struct.StructVector = StructVector;

var timestamp = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(timestamp, "__esModule", { value: true });
timestamp.TimestampNanosecondVector = timestamp.TimestampMicrosecondVector = timestamp.TimestampMillisecondVector = timestamp.TimestampSecondVector = timestamp.TimestampVector = void 0;
var tslib_1$i = tslib.exports;
var base_1$3 = base;
/** @ignore */
var TimestampVector = /** @class */ (function (_super) {
    tslib_1$i.__extends(TimestampVector, _super);
    function TimestampVector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return TimestampVector;
}(base_1$3.BaseVector));
timestamp.TimestampVector = TimestampVector;
/** @ignore */
var TimestampSecondVector = /** @class */ (function (_super) {
    tslib_1$i.__extends(TimestampSecondVector, _super);
    function TimestampSecondVector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return TimestampSecondVector;
}(TimestampVector));
timestamp.TimestampSecondVector = TimestampSecondVector;
/** @ignore */
var TimestampMillisecondVector = /** @class */ (function (_super) {
    tslib_1$i.__extends(TimestampMillisecondVector, _super);
    function TimestampMillisecondVector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return TimestampMillisecondVector;
}(TimestampVector));
timestamp.TimestampMillisecondVector = TimestampMillisecondVector;
/** @ignore */
var TimestampMicrosecondVector = /** @class */ (function (_super) {
    tslib_1$i.__extends(TimestampMicrosecondVector, _super);
    function TimestampMicrosecondVector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return TimestampMicrosecondVector;
}(TimestampVector));
timestamp.TimestampMicrosecondVector = TimestampMicrosecondVector;
/** @ignore */
var TimestampNanosecondVector = /** @class */ (function (_super) {
    tslib_1$i.__extends(TimestampNanosecondVector, _super);
    function TimestampNanosecondVector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return TimestampNanosecondVector;
}(TimestampVector));
timestamp.TimestampNanosecondVector = TimestampNanosecondVector;

var time = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(time, "__esModule", { value: true });
time.TimeNanosecondVector = time.TimeMicrosecondVector = time.TimeMillisecondVector = time.TimeSecondVector = time.TimeVector = void 0;
var tslib_1$h = tslib.exports;
var base_1$2 = base;
/** @ignore */
var TimeVector = /** @class */ (function (_super) {
    tslib_1$h.__extends(TimeVector, _super);
    function TimeVector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return TimeVector;
}(base_1$2.BaseVector));
time.TimeVector = TimeVector;
/** @ignore */
var TimeSecondVector = /** @class */ (function (_super) {
    tslib_1$h.__extends(TimeSecondVector, _super);
    function TimeSecondVector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return TimeSecondVector;
}(TimeVector));
time.TimeSecondVector = TimeSecondVector;
/** @ignore */
var TimeMillisecondVector = /** @class */ (function (_super) {
    tslib_1$h.__extends(TimeMillisecondVector, _super);
    function TimeMillisecondVector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return TimeMillisecondVector;
}(TimeVector));
time.TimeMillisecondVector = TimeMillisecondVector;
/** @ignore */
var TimeMicrosecondVector = /** @class */ (function (_super) {
    tslib_1$h.__extends(TimeMicrosecondVector, _super);
    function TimeMicrosecondVector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return TimeMicrosecondVector;
}(TimeVector));
time.TimeMicrosecondVector = TimeMicrosecondVector;
/** @ignore */
var TimeNanosecondVector = /** @class */ (function (_super) {
    tslib_1$h.__extends(TimeNanosecondVector, _super);
    function TimeNanosecondVector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return TimeNanosecondVector;
}(TimeVector));
time.TimeNanosecondVector = TimeNanosecondVector;

var union = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(union, "__esModule", { value: true });
union.SparseUnionVector = union.DenseUnionVector = union.UnionVector = void 0;
var tslib_1$g = tslib.exports;
var base_1$1 = base;
/** @ignore */
var UnionVector = /** @class */ (function (_super) {
    tslib_1$g.__extends(UnionVector, _super);
    function UnionVector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(UnionVector.prototype, "typeIdToChildIndex", {
        get: function () { return this.data.type.typeIdToChildIndex; },
        enumerable: false,
        configurable: true
    });
    return UnionVector;
}(base_1$1.BaseVector));
union.UnionVector = UnionVector;
/** @ignore */
var DenseUnionVector = /** @class */ (function (_super) {
    tslib_1$g.__extends(DenseUnionVector, _super);
    function DenseUnionVector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(DenseUnionVector.prototype, "valueOffsets", {
        get: function () { return this.data.valueOffsets; },
        enumerable: false,
        configurable: true
    });
    return DenseUnionVector;
}(UnionVector));
union.DenseUnionVector = DenseUnionVector;
/** @ignore */
var SparseUnionVector = /** @class */ (function (_super) {
    tslib_1$g.__extends(SparseUnionVector, _super);
    function SparseUnionVector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return SparseUnionVector;
}(UnionVector));
union.SparseUnionVector = SparseUnionVector;

var utf8 = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(utf8, "__esModule", { value: true });
utf8.Utf8Vector = void 0;
var tslib_1$f = tslib.exports;
var vector_1$3 = vector$2;
var base_1 = base;
var type_1$3 = type;
var index_1$3 = vector;
/** @ignore */
var Utf8Vector = /** @class */ (function (_super) {
    tslib_1$f.__extends(Utf8Vector, _super);
    function Utf8Vector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /** @nocollapse */
    Utf8Vector.from = function (input) {
        return index_1$3.vectorFromValuesWithType(function () { return new type_1$3.Utf8(); }, input);
    };
    Utf8Vector.prototype.asBinary = function () {
        return vector_1$3.Vector.new(this.data.clone(new type_1$3.Binary()));
    };
    return Utf8Vector;
}(base_1.BaseVector));
utf8.Utf8Vector = Utf8Vector;

var fn = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(fn, "__esModule", { value: true });
fn.partial2 = fn.partial1 = fn.partial0 = void 0;
/** @ignore */
function partial0(visit) {
    return function () { return visit(this); };
}
fn.partial0 = partial0;
/** @ignore */
function partial1(visit) {
    return function (a) { return visit(this, a); };
}
fn.partial1 = partial1;
/** @ignore */
function partial2(visit) {
    return function (a, b) { return visit(this, a, b); };
}
fn.partial2 = partial2;

var get = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(get, "__esModule", { value: true });
get.instance = get.GetVisitor = void 0;
var tslib_1$e = tslib.exports;
var bn_1 = bn;
var visitor_1$6 = visitor;
var utf8_1$1 = utf8$2;
var math_1 = math;
var enum_1$4 = _enum;
/** @ignore */
var GetVisitor = /** @class */ (function (_super) {
    tslib_1$e.__extends(GetVisitor, _super);
    function GetVisitor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return GetVisitor;
}(visitor_1$6.Visitor));
get.GetVisitor = GetVisitor;
/** @ignore */ var epochDaysToMs = function (data, index) { return 86400000 * data[index]; };
/** @ignore */ var epochMillisecondsLongToMs = function (data, index) { return 4294967296 * (data[index + 1]) + (data[index] >>> 0); };
/** @ignore */ var epochMicrosecondsLongToMs = function (data, index) { return 4294967296 * (data[index + 1] / 1000) + ((data[index] >>> 0) / 1000); };
/** @ignore */ var epochNanosecondsLongToMs = function (data, index) { return 4294967296 * (data[index + 1] / 1000000) + ((data[index] >>> 0) / 1000000); };
/** @ignore */ var epochMillisecondsToDate = function (epochMs) { return new Date(epochMs); };
/** @ignore */ var epochDaysToDate = function (data, index) { return epochMillisecondsToDate(epochDaysToMs(data, index)); };
/** @ignore */ var epochMillisecondsLongToDate = function (data, index) { return epochMillisecondsToDate(epochMillisecondsLongToMs(data, index)); };
/** @ignore */
var getNull = function (_vector, _index) { return null; };
/** @ignore */
var getVariableWidthBytes = function (values, valueOffsets, index) {
    var _a = valueOffsets, _b = index, x = _a[_b], _c = index + 1, y = _a[_c];
    return x != null && y != null ? values.subarray(x, y) : null;
};
/** @ignore */
var getBool = function (_a, index) {
    var offset = _a.offset, values = _a.values;
    var idx = offset + index;
    var byte = values[idx >> 3];
    return (byte & 1 << (idx % 8)) !== 0;
};
/** @ignore */
var getDateDay = function (_a, index) {
    var values = _a.values;
    return epochDaysToDate(values, index);
};
/** @ignore */
var getDateMillisecond = function (_a, index) {
    var values = _a.values;
    return epochMillisecondsLongToDate(values, index * 2);
};
/** @ignore */
var getNumeric = function (_a, index) {
    var stride = _a.stride, values = _a.values;
    return values[stride * index];
};
/** @ignore */
var getFloat16 = function (_a, index) {
    var stride = _a.stride, values = _a.values;
    return math_1.uint16ToFloat64(values[stride * index]);
};
/** @ignore */
var getBigInts = function (_a, index) {
    var stride = _a.stride, values = _a.values, type = _a.type;
    return bn_1.BN.new(values.subarray(stride * index, stride * (index + 1)), type.isSigned);
};
/** @ignore */
var getFixedSizeBinary = function (_a, index) {
    var stride = _a.stride, values = _a.values;
    return values.subarray(stride * index, stride * (index + 1));
};
/** @ignore */
var getBinary = function (_a, index) {
    var values = _a.values, valueOffsets = _a.valueOffsets;
    return getVariableWidthBytes(values, valueOffsets, index);
};
/** @ignore */
var getUtf8 = function (_a, index) {
    var values = _a.values, valueOffsets = _a.valueOffsets;
    var bytes = getVariableWidthBytes(values, valueOffsets, index);
    return bytes !== null ? utf8_1$1.decodeUtf8(bytes) : null;
};
/* istanbul ignore next */
/** @ignore */
var getInt = function (vector, index) { return (vector.type.bitWidth < 64
    ? getNumeric(vector, index)
    : getBigInts(vector, index)); };
/* istanbul ignore next */
/** @ignore */
var getFloat = function (vector, index) { return (vector.type.precision !== enum_1$4.Precision.HALF
    ? getNumeric(vector, index)
    : getFloat16(vector, index)); };
/* istanbul ignore next */
/** @ignore */
var getDate = function (vector, index) { return (vector.type.unit === enum_1$4.DateUnit.DAY
    ? getDateDay(vector, index)
    : getDateMillisecond(vector, index)); };
/** @ignore */
var getTimestampSecond = function (_a, index) {
    var values = _a.values;
    return 1000 * epochMillisecondsLongToMs(values, index * 2);
};
/** @ignore */
var getTimestampMillisecond = function (_a, index) {
    var values = _a.values;
    return epochMillisecondsLongToMs(values, index * 2);
};
/** @ignore */
var getTimestampMicrosecond = function (_a, index) {
    var values = _a.values;
    return epochMicrosecondsLongToMs(values, index * 2);
};
/** @ignore */
var getTimestampNanosecond = function (_a, index) {
    var values = _a.values;
    return epochNanosecondsLongToMs(values, index * 2);
};
/* istanbul ignore next */
/** @ignore */
var getTimestamp = function (vector, index) {
    switch (vector.type.unit) {
        case enum_1$4.TimeUnit.SECOND: return getTimestampSecond(vector, index);
        case enum_1$4.TimeUnit.MILLISECOND: return getTimestampMillisecond(vector, index);
        case enum_1$4.TimeUnit.MICROSECOND: return getTimestampMicrosecond(vector, index);
        case enum_1$4.TimeUnit.NANOSECOND: return getTimestampNanosecond(vector, index);
    }
};
/** @ignore */
var getTimeSecond = function (_a, index) {
    var values = _a.values, stride = _a.stride;
    return values[stride * index];
};
/** @ignore */
var getTimeMillisecond = function (_a, index) {
    var values = _a.values, stride = _a.stride;
    return values[stride * index];
};
/** @ignore */
var getTimeMicrosecond = function (_a, index) {
    var values = _a.values;
    return bn_1.BN.signed(values.subarray(2 * index, 2 * (index + 1)));
};
/** @ignore */
var getTimeNanosecond = function (_a, index) {
    var values = _a.values;
    return bn_1.BN.signed(values.subarray(2 * index, 2 * (index + 1)));
};
/* istanbul ignore next */
/** @ignore */
var getTime = function (vector, index) {
    switch (vector.type.unit) {
        case enum_1$4.TimeUnit.SECOND: return getTimeSecond(vector, index);
        case enum_1$4.TimeUnit.MILLISECOND: return getTimeMillisecond(vector, index);
        case enum_1$4.TimeUnit.MICROSECOND: return getTimeMicrosecond(vector, index);
        case enum_1$4.TimeUnit.NANOSECOND: return getTimeNanosecond(vector, index);
    }
};
/** @ignore */
var getDecimal = function (_a, index) {
    var values = _a.values;
    return bn_1.BN.decimal(values.subarray(4 * index, 4 * (index + 1)));
};
/** @ignore */
var getList = function (vector, index) {
    var child = vector.getChildAt(0), valueOffsets = vector.valueOffsets, stride = vector.stride;
    return child.slice(valueOffsets[index * stride], valueOffsets[(index * stride) + 1]);
};
/** @ignore */
var getMap = function (vector, index) {
    return vector.bind(index);
};
/** @ignore */
var getStruct = function (vector, index) {
    return vector.bind(index);
};
/* istanbul ignore next */
/** @ignore */
var getUnion = function (vector, index) {
    return vector.type.mode === enum_1$4.UnionMode.Dense ?
        getDenseUnion(vector, index) :
        getSparseUnion(vector, index);
};
/** @ignore */
var getDenseUnion = function (vector, index) {
    var childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];
    var child = vector.getChildAt(childIndex);
    return child ? child.get(vector.valueOffsets[index]) : null;
};
/** @ignore */
var getSparseUnion = function (vector, index) {
    var childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];
    var child = vector.getChildAt(childIndex);
    return child ? child.get(index) : null;
};
/** @ignore */
var getDictionary = function (vector, index) {
    return vector.getValue(vector.getKey(index));
};
/* istanbul ignore next */
/** @ignore */
var getInterval = function (vector, index) {
    return (vector.type.unit === enum_1$4.IntervalUnit.DAY_TIME)
        ? getIntervalDayTime(vector, index)
        : getIntervalYearMonth(vector, index);
};
/** @ignore */
var getIntervalDayTime = function (_a, index) {
    var values = _a.values;
    return values.subarray(2 * index, 2 * (index + 1));
};
/** @ignore */
var getIntervalYearMonth = function (_a, index) {
    var values = _a.values;
    var interval = values[index];
    var int32s = new Int32Array(2);
    int32s[0] = interval / 12 | 0; /* years */
    int32s[1] = interval % 12 | 0; /* months */
    return int32s;
};
/** @ignore */
var getFixedSizeList = function (vector, index) {
    var child = vector.getChildAt(0), stride = vector.stride;
    return child.slice(index * stride, (index + 1) * stride);
};
GetVisitor.prototype.visitNull = getNull;
GetVisitor.prototype.visitBool = getBool;
GetVisitor.prototype.visitInt = getInt;
GetVisitor.prototype.visitInt8 = getNumeric;
GetVisitor.prototype.visitInt16 = getNumeric;
GetVisitor.prototype.visitInt32 = getNumeric;
GetVisitor.prototype.visitInt64 = getBigInts;
GetVisitor.prototype.visitUint8 = getNumeric;
GetVisitor.prototype.visitUint16 = getNumeric;
GetVisitor.prototype.visitUint32 = getNumeric;
GetVisitor.prototype.visitUint64 = getBigInts;
GetVisitor.prototype.visitFloat = getFloat;
GetVisitor.prototype.visitFloat16 = getFloat16;
GetVisitor.prototype.visitFloat32 = getNumeric;
GetVisitor.prototype.visitFloat64 = getNumeric;
GetVisitor.prototype.visitUtf8 = getUtf8;
GetVisitor.prototype.visitBinary = getBinary;
GetVisitor.prototype.visitFixedSizeBinary = getFixedSizeBinary;
GetVisitor.prototype.visitDate = getDate;
GetVisitor.prototype.visitDateDay = getDateDay;
GetVisitor.prototype.visitDateMillisecond = getDateMillisecond;
GetVisitor.prototype.visitTimestamp = getTimestamp;
GetVisitor.prototype.visitTimestampSecond = getTimestampSecond;
GetVisitor.prototype.visitTimestampMillisecond = getTimestampMillisecond;
GetVisitor.prototype.visitTimestampMicrosecond = getTimestampMicrosecond;
GetVisitor.prototype.visitTimestampNanosecond = getTimestampNanosecond;
GetVisitor.prototype.visitTime = getTime;
GetVisitor.prototype.visitTimeSecond = getTimeSecond;
GetVisitor.prototype.visitTimeMillisecond = getTimeMillisecond;
GetVisitor.prototype.visitTimeMicrosecond = getTimeMicrosecond;
GetVisitor.prototype.visitTimeNanosecond = getTimeNanosecond;
GetVisitor.prototype.visitDecimal = getDecimal;
GetVisitor.prototype.visitList = getList;
GetVisitor.prototype.visitStruct = getStruct;
GetVisitor.prototype.visitUnion = getUnion;
GetVisitor.prototype.visitDenseUnion = getDenseUnion;
GetVisitor.prototype.visitSparseUnion = getSparseUnion;
GetVisitor.prototype.visitDictionary = getDictionary;
GetVisitor.prototype.visitInterval = getInterval;
GetVisitor.prototype.visitIntervalDayTime = getIntervalDayTime;
GetVisitor.prototype.visitIntervalYearMonth = getIntervalYearMonth;
GetVisitor.prototype.visitFixedSizeList = getFixedSizeList;
GetVisitor.prototype.visitMap = getMap;
/** @ignore */
get.instance = new GetVisitor();

var indexof = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(indexof, "__esModule", { value: true });
indexof.instance = indexof.IndexOfVisitor = void 0;
var tslib_1$d = tslib.exports;
var visitor_1$5 = visitor;
var bit_1$1 = bit;
var vector_1$2 = vector$1;
/** @ignore */
var IndexOfVisitor = /** @class */ (function (_super) {
    tslib_1$d.__extends(IndexOfVisitor, _super);
    function IndexOfVisitor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return IndexOfVisitor;
}(visitor_1$5.Visitor));
indexof.IndexOfVisitor = IndexOfVisitor;
/** @ignore */
function nullIndexOf(vector, searchElement) {
    // if you're looking for nulls and the vector isn't empty, we've got 'em!
    return searchElement === null && vector.length > 0 ? 0 : -1;
}
/** @ignore */
function indexOfNull(vector, fromIndex) {
    var e_1, _a;
    var nullBitmap = vector.data.nullBitmap;
    if (!nullBitmap || vector.nullCount <= 0) {
        return -1;
    }
    var i = 0;
    try {
        for (var _b = tslib_1$d.__values(new bit_1$1.BitIterator(nullBitmap, vector.data.offset + (fromIndex || 0), vector.length, nullBitmap, bit_1$1.getBool)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var isValid = _c.value;
            if (!isValid) {
                return i;
            }
            ++i;
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return -1;
}
/** @ignore */
function indexOfValue(vector, searchElement, fromIndex) {
    if (searchElement === undefined) {
        return -1;
    }
    if (searchElement === null) {
        return indexOfNull(vector, fromIndex);
    }
    var compare = vector_1$2.createElementComparator(searchElement);
    for (var i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {
        if (compare(vector.get(i))) {
            return i;
        }
    }
    return -1;
}
/** @ignore */
function indexOfUnion(vector, searchElement, fromIndex) {
    // Unions are special -- they do have a nullBitmap, but so can their children.
    // If the searchElement is null, we don't know whether it came from the Union's
    // bitmap or one of its childrens'. So we don't interrogate the Union's bitmap,
    // since that will report the wrong index if a child has a null before the Union.
    var compare = vector_1$2.createElementComparator(searchElement);
    for (var i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {
        if (compare(vector.get(i))) {
            return i;
        }
    }
    return -1;
}
IndexOfVisitor.prototype.visitNull = nullIndexOf;
IndexOfVisitor.prototype.visitBool = indexOfValue;
IndexOfVisitor.prototype.visitInt = indexOfValue;
IndexOfVisitor.prototype.visitInt8 = indexOfValue;
IndexOfVisitor.prototype.visitInt16 = indexOfValue;
IndexOfVisitor.prototype.visitInt32 = indexOfValue;
IndexOfVisitor.prototype.visitInt64 = indexOfValue;
IndexOfVisitor.prototype.visitUint8 = indexOfValue;
IndexOfVisitor.prototype.visitUint16 = indexOfValue;
IndexOfVisitor.prototype.visitUint32 = indexOfValue;
IndexOfVisitor.prototype.visitUint64 = indexOfValue;
IndexOfVisitor.prototype.visitFloat = indexOfValue;
IndexOfVisitor.prototype.visitFloat16 = indexOfValue;
IndexOfVisitor.prototype.visitFloat32 = indexOfValue;
IndexOfVisitor.prototype.visitFloat64 = indexOfValue;
IndexOfVisitor.prototype.visitUtf8 = indexOfValue;
IndexOfVisitor.prototype.visitBinary = indexOfValue;
IndexOfVisitor.prototype.visitFixedSizeBinary = indexOfValue;
IndexOfVisitor.prototype.visitDate = indexOfValue;
IndexOfVisitor.prototype.visitDateDay = indexOfValue;
IndexOfVisitor.prototype.visitDateMillisecond = indexOfValue;
IndexOfVisitor.prototype.visitTimestamp = indexOfValue;
IndexOfVisitor.prototype.visitTimestampSecond = indexOfValue;
IndexOfVisitor.prototype.visitTimestampMillisecond = indexOfValue;
IndexOfVisitor.prototype.visitTimestampMicrosecond = indexOfValue;
IndexOfVisitor.prototype.visitTimestampNanosecond = indexOfValue;
IndexOfVisitor.prototype.visitTime = indexOfValue;
IndexOfVisitor.prototype.visitTimeSecond = indexOfValue;
IndexOfVisitor.prototype.visitTimeMillisecond = indexOfValue;
IndexOfVisitor.prototype.visitTimeMicrosecond = indexOfValue;
IndexOfVisitor.prototype.visitTimeNanosecond = indexOfValue;
IndexOfVisitor.prototype.visitDecimal = indexOfValue;
IndexOfVisitor.prototype.visitList = indexOfValue;
IndexOfVisitor.prototype.visitStruct = indexOfValue;
IndexOfVisitor.prototype.visitUnion = indexOfValue;
IndexOfVisitor.prototype.visitDenseUnion = indexOfUnion;
IndexOfVisitor.prototype.visitSparseUnion = indexOfUnion;
IndexOfVisitor.prototype.visitDictionary = indexOfValue;
IndexOfVisitor.prototype.visitInterval = indexOfValue;
IndexOfVisitor.prototype.visitIntervalDayTime = indexOfValue;
IndexOfVisitor.prototype.visitIntervalYearMonth = indexOfValue;
IndexOfVisitor.prototype.visitFixedSizeList = indexOfValue;
IndexOfVisitor.prototype.visitMap = indexOfValue;
/** @ignore */
indexof.instance = new IndexOfVisitor();

var toarray = {};

var iterator = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(iterator, "__esModule", { value: true });
iterator.instance = iterator.IteratorVisitor = void 0;
var tslib_1$c = tslib.exports;
var enum_1$3 = _enum;
var visitor_1$4 = visitor;
var bit_1 = bit;
var get_1 = get;
/** @ignore */
var IteratorVisitor = /** @class */ (function (_super) {
    tslib_1$c.__extends(IteratorVisitor, _super);
    function IteratorVisitor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return IteratorVisitor;
}(visitor_1$4.Visitor));
iterator.IteratorVisitor = IteratorVisitor;
/** @ignore */
function nullableIterator(vector) {
    var getFn = get_1.instance.getVisitFn(vector);
    return new bit_1.BitIterator(vector.data.nullBitmap, vector.data.offset, vector.length, vector, function (vec, idx, nullByte, nullBit) {
        return ((nullByte & 1 << nullBit) !== 0) ? getFn(vec, idx) : null;
    });
}
/** @ignore */
var VectorIterator = /** @class */ (function () {
    function VectorIterator(vector, getFn) {
        this.vector = vector;
        this.getFn = getFn;
        this.index = 0;
    }
    VectorIterator.prototype.next = function () {
        if (this.index < this.vector.length) {
            return {
                value: this.getFn(this.vector, this.index++)
            };
        }
        return { done: true, value: null };
    };
    VectorIterator.prototype[Symbol.iterator] = function () {
        return this;
    };
    return VectorIterator;
}());
/** @ignore */
function vectorIterator(vector) {
    // If nullable, iterate manually
    if (vector.nullCount > 0) {
        return nullableIterator(vector);
    }
    var type = vector.type, typeId = vector.typeId, length = vector.length;
    // Fast case, defer to native iterators if possible
    if (vector.stride === 1 && ((typeId === enum_1$3.Type.Timestamp) ||
        (typeId === enum_1$3.Type.Int && type.bitWidth !== 64) ||
        (typeId === enum_1$3.Type.Time && type.bitWidth !== 64) ||
        (typeId === enum_1$3.Type.Float && type.precision > 0 /* Precision.HALF */))) {
        return vector.data.values.subarray(0, length)[Symbol.iterator]();
    }
    // Otherwise, iterate manually
    return new VectorIterator(vector, get_1.instance.getVisitFn(vector));
}
IteratorVisitor.prototype.visitNull = vectorIterator;
IteratorVisitor.prototype.visitBool = vectorIterator;
IteratorVisitor.prototype.visitInt = vectorIterator;
IteratorVisitor.prototype.visitInt8 = vectorIterator;
IteratorVisitor.prototype.visitInt16 = vectorIterator;
IteratorVisitor.prototype.visitInt32 = vectorIterator;
IteratorVisitor.prototype.visitInt64 = vectorIterator;
IteratorVisitor.prototype.visitUint8 = vectorIterator;
IteratorVisitor.prototype.visitUint16 = vectorIterator;
IteratorVisitor.prototype.visitUint32 = vectorIterator;
IteratorVisitor.prototype.visitUint64 = vectorIterator;
IteratorVisitor.prototype.visitFloat = vectorIterator;
IteratorVisitor.prototype.visitFloat16 = vectorIterator;
IteratorVisitor.prototype.visitFloat32 = vectorIterator;
IteratorVisitor.prototype.visitFloat64 = vectorIterator;
IteratorVisitor.prototype.visitUtf8 = vectorIterator;
IteratorVisitor.prototype.visitBinary = vectorIterator;
IteratorVisitor.prototype.visitFixedSizeBinary = vectorIterator;
IteratorVisitor.prototype.visitDate = vectorIterator;
IteratorVisitor.prototype.visitDateDay = vectorIterator;
IteratorVisitor.prototype.visitDateMillisecond = vectorIterator;
IteratorVisitor.prototype.visitTimestamp = vectorIterator;
IteratorVisitor.prototype.visitTimestampSecond = vectorIterator;
IteratorVisitor.prototype.visitTimestampMillisecond = vectorIterator;
IteratorVisitor.prototype.visitTimestampMicrosecond = vectorIterator;
IteratorVisitor.prototype.visitTimestampNanosecond = vectorIterator;
IteratorVisitor.prototype.visitTime = vectorIterator;
IteratorVisitor.prototype.visitTimeSecond = vectorIterator;
IteratorVisitor.prototype.visitTimeMillisecond = vectorIterator;
IteratorVisitor.prototype.visitTimeMicrosecond = vectorIterator;
IteratorVisitor.prototype.visitTimeNanosecond = vectorIterator;
IteratorVisitor.prototype.visitDecimal = vectorIterator;
IteratorVisitor.prototype.visitList = vectorIterator;
IteratorVisitor.prototype.visitStruct = vectorIterator;
IteratorVisitor.prototype.visitUnion = vectorIterator;
IteratorVisitor.prototype.visitDenseUnion = vectorIterator;
IteratorVisitor.prototype.visitSparseUnion = vectorIterator;
IteratorVisitor.prototype.visitDictionary = vectorIterator;
IteratorVisitor.prototype.visitInterval = vectorIterator;
IteratorVisitor.prototype.visitIntervalDayTime = vectorIterator;
IteratorVisitor.prototype.visitIntervalYearMonth = vectorIterator;
IteratorVisitor.prototype.visitFixedSizeList = vectorIterator;
IteratorVisitor.prototype.visitMap = vectorIterator;
/** @ignore */
iterator.instance = new IteratorVisitor();

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(toarray, "__esModule", { value: true });
toarray.instance = toarray.ToArrayVisitor = void 0;
var tslib_1$b = tslib.exports;
var enum_1$2 = _enum;
var visitor_1$3 = visitor;
var iterator_1 = iterator;
/** @ignore */
var ToArrayVisitor = /** @class */ (function (_super) {
    tslib_1$b.__extends(ToArrayVisitor, _super);
    function ToArrayVisitor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ToArrayVisitor;
}(visitor_1$3.Visitor));
toarray.ToArrayVisitor = ToArrayVisitor;
/** @ignore */
function arrayOfVector(vector) {
    var type = vector.type, length = vector.length, stride = vector.stride;
    // Fast case, return subarray if possible
    switch (type.typeId) {
        case enum_1$2.Type.Int:
        case enum_1$2.Type.Float:
        case enum_1$2.Type.Decimal:
        case enum_1$2.Type.Time:
        case enum_1$2.Type.Timestamp:
            return vector.data.values.subarray(0, length * stride);
    }
    // Otherwise if not primitive, slow copy
    return tslib_1$b.__spread(iterator_1.instance.visit(vector));
}
ToArrayVisitor.prototype.visitNull = arrayOfVector;
ToArrayVisitor.prototype.visitBool = arrayOfVector;
ToArrayVisitor.prototype.visitInt = arrayOfVector;
ToArrayVisitor.prototype.visitInt8 = arrayOfVector;
ToArrayVisitor.prototype.visitInt16 = arrayOfVector;
ToArrayVisitor.prototype.visitInt32 = arrayOfVector;
ToArrayVisitor.prototype.visitInt64 = arrayOfVector;
ToArrayVisitor.prototype.visitUint8 = arrayOfVector;
ToArrayVisitor.prototype.visitUint16 = arrayOfVector;
ToArrayVisitor.prototype.visitUint32 = arrayOfVector;
ToArrayVisitor.prototype.visitUint64 = arrayOfVector;
ToArrayVisitor.prototype.visitFloat = arrayOfVector;
ToArrayVisitor.prototype.visitFloat16 = arrayOfVector;
ToArrayVisitor.prototype.visitFloat32 = arrayOfVector;
ToArrayVisitor.prototype.visitFloat64 = arrayOfVector;
ToArrayVisitor.prototype.visitUtf8 = arrayOfVector;
ToArrayVisitor.prototype.visitBinary = arrayOfVector;
ToArrayVisitor.prototype.visitFixedSizeBinary = arrayOfVector;
ToArrayVisitor.prototype.visitDate = arrayOfVector;
ToArrayVisitor.prototype.visitDateDay = arrayOfVector;
ToArrayVisitor.prototype.visitDateMillisecond = arrayOfVector;
ToArrayVisitor.prototype.visitTimestamp = arrayOfVector;
ToArrayVisitor.prototype.visitTimestampSecond = arrayOfVector;
ToArrayVisitor.prototype.visitTimestampMillisecond = arrayOfVector;
ToArrayVisitor.prototype.visitTimestampMicrosecond = arrayOfVector;
ToArrayVisitor.prototype.visitTimestampNanosecond = arrayOfVector;
ToArrayVisitor.prototype.visitTime = arrayOfVector;
ToArrayVisitor.prototype.visitTimeSecond = arrayOfVector;
ToArrayVisitor.prototype.visitTimeMillisecond = arrayOfVector;
ToArrayVisitor.prototype.visitTimeMicrosecond = arrayOfVector;
ToArrayVisitor.prototype.visitTimeNanosecond = arrayOfVector;
ToArrayVisitor.prototype.visitDecimal = arrayOfVector;
ToArrayVisitor.prototype.visitList = arrayOfVector;
ToArrayVisitor.prototype.visitStruct = arrayOfVector;
ToArrayVisitor.prototype.visitUnion = arrayOfVector;
ToArrayVisitor.prototype.visitDenseUnion = arrayOfVector;
ToArrayVisitor.prototype.visitSparseUnion = arrayOfVector;
ToArrayVisitor.prototype.visitDictionary = arrayOfVector;
ToArrayVisitor.prototype.visitInterval = arrayOfVector;
ToArrayVisitor.prototype.visitIntervalDayTime = arrayOfVector;
ToArrayVisitor.prototype.visitIntervalYearMonth = arrayOfVector;
ToArrayVisitor.prototype.visitFixedSizeList = arrayOfVector;
ToArrayVisitor.prototype.visitMap = arrayOfVector;
/** @ignore */
toarray.instance = new ToArrayVisitor();

var bytewidth = {};

/* istanbul ignore file */
Object.defineProperty(bytewidth, "__esModule", { value: true });
bytewidth.instance = bytewidth.ByteWidthVisitor = void 0;
var tslib_1$a = tslib.exports;
var visitor_1$2 = visitor;
var enum_1$1 = _enum;
/** @ignore */ var sum = function (x, y) { return x + y; };
/** @ignore */ var variableWidthColumnErrorMessage = function (type) { return "Cannot compute the byte width of variable-width column " + type; };
/** @ignore */
var ByteWidthVisitor = /** @class */ (function (_super) {
    tslib_1$a.__extends(ByteWidthVisitor, _super);
    function ByteWidthVisitor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ByteWidthVisitor.prototype.visitNull = function (____) { return 0; };
    ByteWidthVisitor.prototype.visitInt = function (type) { return type.bitWidth / 8; };
    ByteWidthVisitor.prototype.visitFloat = function (type) { return type.ArrayType.BYTES_PER_ELEMENT; };
    ByteWidthVisitor.prototype.visitBinary = function (type) { throw new Error(variableWidthColumnErrorMessage(type)); };
    ByteWidthVisitor.prototype.visitUtf8 = function (type) { throw new Error(variableWidthColumnErrorMessage(type)); };
    ByteWidthVisitor.prototype.visitBool = function (____) { return 1 / 8; };
    ByteWidthVisitor.prototype.visitDecimal = function (____) { return 16; };
    ByteWidthVisitor.prototype.visitDate = function (type) { return (type.unit + 1) * 4; };
    ByteWidthVisitor.prototype.visitTime = function (type) { return type.bitWidth / 8; };
    ByteWidthVisitor.prototype.visitTimestamp = function (type) { return type.unit === enum_1$1.TimeUnit.SECOND ? 4 : 8; };
    ByteWidthVisitor.prototype.visitInterval = function (type) { return (type.unit + 1) * 4; };
    ByteWidthVisitor.prototype.visitList = function (type) { throw new Error(variableWidthColumnErrorMessage(type)); };
    ByteWidthVisitor.prototype.visitStruct = function (type) { return this.visitFields(type.children).reduce(sum, 0); };
    ByteWidthVisitor.prototype.visitUnion = function (type) { return this.visitFields(type.children).reduce(sum, 0); };
    ByteWidthVisitor.prototype.visitFixedSizeBinary = function (type) { return type.byteWidth; };
    ByteWidthVisitor.prototype.visitFixedSizeList = function (type) { return type.listSize * this.visitFields(type.children).reduce(sum, 0); };
    ByteWidthVisitor.prototype.visitMap = function (type) { return this.visitFields(type.children).reduce(sum, 0); };
    ByteWidthVisitor.prototype.visitDictionary = function (type) { return this.visit(type.indices); };
    ByteWidthVisitor.prototype.visitFields = function (fields) {
        var _this = this;
        return (fields || []).map(function (field) { return _this.visit(field.type); });
    };
    ByteWidthVisitor.prototype.visitSchema = function (schema) { return this.visitFields(schema.fields).reduce(sum, 0); };
    return ByteWidthVisitor;
}(visitor_1$2.Visitor));
bytewidth.ByteWidthVisitor = ByteWidthVisitor;
/** @ignore */
bytewidth.instance = new ByteWidthVisitor();

var vectorctor = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(vectorctor, "__esModule", { value: true });
vectorctor.instance = vectorctor.GetVectorConstructor = void 0;
var tslib_1$9 = tslib.exports;
var visitor_1$1 = visitor;
var binary_1 = binary;
var bool_1 = bool;
var date_1 = date;
var decimal_1 = decimal;
var dictionary_1$1 = dictionary;
var fixedsizebinary_1 = fixedsizebinary;
var fixedsizelist_1 = fixedsizelist;
var float_1 = float;
var interval_1 = interval;
var int_1$1 = int;
var list_1 = list;
var map_1 = map$1;
var null_1 = _null;
var struct_1 = struct;
var timestamp_1 = timestamp;
var time_1 = time;
var union_1 = union;
var utf8_1 = utf8;
/** @ignore */
var GetVectorConstructor = /** @class */ (function (_super) {
    tslib_1$9.__extends(GetVectorConstructor, _super);
    function GetVectorConstructor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GetVectorConstructor.prototype.visitNull = function () { return null_1.NullVector; };
    GetVectorConstructor.prototype.visitBool = function () { return bool_1.BoolVector; };
    GetVectorConstructor.prototype.visitInt = function () { return int_1$1.IntVector; };
    GetVectorConstructor.prototype.visitInt8 = function () { return int_1$1.Int8Vector; };
    GetVectorConstructor.prototype.visitInt16 = function () { return int_1$1.Int16Vector; };
    GetVectorConstructor.prototype.visitInt32 = function () { return int_1$1.Int32Vector; };
    GetVectorConstructor.prototype.visitInt64 = function () { return int_1$1.Int64Vector; };
    GetVectorConstructor.prototype.visitUint8 = function () { return int_1$1.Uint8Vector; };
    GetVectorConstructor.prototype.visitUint16 = function () { return int_1$1.Uint16Vector; };
    GetVectorConstructor.prototype.visitUint32 = function () { return int_1$1.Uint32Vector; };
    GetVectorConstructor.prototype.visitUint64 = function () { return int_1$1.Uint64Vector; };
    GetVectorConstructor.prototype.visitFloat = function () { return float_1.FloatVector; };
    GetVectorConstructor.prototype.visitFloat16 = function () { return float_1.Float16Vector; };
    GetVectorConstructor.prototype.visitFloat32 = function () { return float_1.Float32Vector; };
    GetVectorConstructor.prototype.visitFloat64 = function () { return float_1.Float64Vector; };
    GetVectorConstructor.prototype.visitUtf8 = function () { return utf8_1.Utf8Vector; };
    GetVectorConstructor.prototype.visitBinary = function () { return binary_1.BinaryVector; };
    GetVectorConstructor.prototype.visitFixedSizeBinary = function () { return fixedsizebinary_1.FixedSizeBinaryVector; };
    GetVectorConstructor.prototype.visitDate = function () { return date_1.DateVector; };
    GetVectorConstructor.prototype.visitDateDay = function () { return date_1.DateDayVector; };
    GetVectorConstructor.prototype.visitDateMillisecond = function () { return date_1.DateMillisecondVector; };
    GetVectorConstructor.prototype.visitTimestamp = function () { return timestamp_1.TimestampVector; };
    GetVectorConstructor.prototype.visitTimestampSecond = function () { return timestamp_1.TimestampSecondVector; };
    GetVectorConstructor.prototype.visitTimestampMillisecond = function () { return timestamp_1.TimestampMillisecondVector; };
    GetVectorConstructor.prototype.visitTimestampMicrosecond = function () { return timestamp_1.TimestampMicrosecondVector; };
    GetVectorConstructor.prototype.visitTimestampNanosecond = function () { return timestamp_1.TimestampNanosecondVector; };
    GetVectorConstructor.prototype.visitTime = function () { return time_1.TimeVector; };
    GetVectorConstructor.prototype.visitTimeSecond = function () { return time_1.TimeSecondVector; };
    GetVectorConstructor.prototype.visitTimeMillisecond = function () { return time_1.TimeMillisecondVector; };
    GetVectorConstructor.prototype.visitTimeMicrosecond = function () { return time_1.TimeMicrosecondVector; };
    GetVectorConstructor.prototype.visitTimeNanosecond = function () { return time_1.TimeNanosecondVector; };
    GetVectorConstructor.prototype.visitDecimal = function () { return decimal_1.DecimalVector; };
    GetVectorConstructor.prototype.visitList = function () { return list_1.ListVector; };
    GetVectorConstructor.prototype.visitStruct = function () { return struct_1.StructVector; };
    GetVectorConstructor.prototype.visitUnion = function () { return union_1.UnionVector; };
    GetVectorConstructor.prototype.visitDenseUnion = function () { return union_1.DenseUnionVector; };
    GetVectorConstructor.prototype.visitSparseUnion = function () { return union_1.SparseUnionVector; };
    GetVectorConstructor.prototype.visitDictionary = function () { return dictionary_1$1.DictionaryVector; };
    GetVectorConstructor.prototype.visitInterval = function () { return interval_1.IntervalVector; };
    GetVectorConstructor.prototype.visitIntervalDayTime = function () { return interval_1.IntervalDayTimeVector; };
    GetVectorConstructor.prototype.visitIntervalYearMonth = function () { return interval_1.IntervalYearMonthVector; };
    GetVectorConstructor.prototype.visitFixedSizeList = function () { return fixedsizelist_1.FixedSizeListVector; };
    GetVectorConstructor.prototype.visitMap = function () { return map_1.MapVector; };
    return GetVectorConstructor;
}(visitor_1$1.Visitor));
vectorctor.GetVectorConstructor = GetVectorConstructor;
/** @ignore */
vectorctor.instance = new GetVectorConstructor();

(function (exports) {
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.vectorFromValuesWithType = exports.StructRow = exports.MapRow = exports.Utf8Vector = exports.SparseUnionVector = exports.DenseUnionVector = exports.UnionVector = exports.TimeNanosecondVector = exports.TimeMicrosecondVector = exports.TimeMillisecondVector = exports.TimeSecondVector = exports.TimeVector = exports.TimestampNanosecondVector = exports.TimestampMicrosecondVector = exports.TimestampMillisecondVector = exports.TimestampSecondVector = exports.TimestampVector = exports.StructVector = exports.NullVector = exports.MapVector = exports.ListVector = exports.Uint64Vector = exports.Uint32Vector = exports.Uint16Vector = exports.Uint8Vector = exports.Int64Vector = exports.Int32Vector = exports.Int16Vector = exports.Int8Vector = exports.IntVector = exports.IntervalYearMonthVector = exports.IntervalDayTimeVector = exports.IntervalVector = exports.Float64Vector = exports.Float32Vector = exports.Float16Vector = exports.FloatVector = exports.FixedSizeListVector = exports.FixedSizeBinaryVector = exports.DictionaryVector = exports.DecimalVector = exports.DateMillisecondVector = exports.DateDayVector = exports.DateVector = exports.Chunked = exports.BoolVector = exports.BinaryVector = exports.BaseVector = exports.Vector = void 0;
var tslib_1 = tslib.exports;
var vector_1 = vector$2;
Object.defineProperty(exports, "Vector", { enumerable: true, get: function () { return vector_1.Vector; } });
var base_1 = base;
Object.defineProperty(exports, "BaseVector", { enumerable: true, get: function () { return base_1.BaseVector; } });
var binary_1 = binary;
Object.defineProperty(exports, "BinaryVector", { enumerable: true, get: function () { return binary_1.BinaryVector; } });
var bool_1 = bool;
Object.defineProperty(exports, "BoolVector", { enumerable: true, get: function () { return bool_1.BoolVector; } });
var chunked_1 = chunked;
Object.defineProperty(exports, "Chunked", { enumerable: true, get: function () { return chunked_1.Chunked; } });
var date_1 = date;
Object.defineProperty(exports, "DateVector", { enumerable: true, get: function () { return date_1.DateVector; } });
Object.defineProperty(exports, "DateDayVector", { enumerable: true, get: function () { return date_1.DateDayVector; } });
Object.defineProperty(exports, "DateMillisecondVector", { enumerable: true, get: function () { return date_1.DateMillisecondVector; } });
var decimal_1 = decimal;
Object.defineProperty(exports, "DecimalVector", { enumerable: true, get: function () { return decimal_1.DecimalVector; } });
var dictionary_1 = dictionary;
Object.defineProperty(exports, "DictionaryVector", { enumerable: true, get: function () { return dictionary_1.DictionaryVector; } });
var fixedsizebinary_1 = fixedsizebinary;
Object.defineProperty(exports, "FixedSizeBinaryVector", { enumerable: true, get: function () { return fixedsizebinary_1.FixedSizeBinaryVector; } });
var fixedsizelist_1 = fixedsizelist;
Object.defineProperty(exports, "FixedSizeListVector", { enumerable: true, get: function () { return fixedsizelist_1.FixedSizeListVector; } });
var float_1 = float;
Object.defineProperty(exports, "FloatVector", { enumerable: true, get: function () { return float_1.FloatVector; } });
Object.defineProperty(exports, "Float16Vector", { enumerable: true, get: function () { return float_1.Float16Vector; } });
Object.defineProperty(exports, "Float32Vector", { enumerable: true, get: function () { return float_1.Float32Vector; } });
Object.defineProperty(exports, "Float64Vector", { enumerable: true, get: function () { return float_1.Float64Vector; } });
var interval_1 = interval;
Object.defineProperty(exports, "IntervalVector", { enumerable: true, get: function () { return interval_1.IntervalVector; } });
Object.defineProperty(exports, "IntervalDayTimeVector", { enumerable: true, get: function () { return interval_1.IntervalDayTimeVector; } });
Object.defineProperty(exports, "IntervalYearMonthVector", { enumerable: true, get: function () { return interval_1.IntervalYearMonthVector; } });
var int_1 = int;
Object.defineProperty(exports, "IntVector", { enumerable: true, get: function () { return int_1.IntVector; } });
Object.defineProperty(exports, "Int8Vector", { enumerable: true, get: function () { return int_1.Int8Vector; } });
Object.defineProperty(exports, "Int16Vector", { enumerable: true, get: function () { return int_1.Int16Vector; } });
Object.defineProperty(exports, "Int32Vector", { enumerable: true, get: function () { return int_1.Int32Vector; } });
Object.defineProperty(exports, "Int64Vector", { enumerable: true, get: function () { return int_1.Int64Vector; } });
Object.defineProperty(exports, "Uint8Vector", { enumerable: true, get: function () { return int_1.Uint8Vector; } });
Object.defineProperty(exports, "Uint16Vector", { enumerable: true, get: function () { return int_1.Uint16Vector; } });
Object.defineProperty(exports, "Uint32Vector", { enumerable: true, get: function () { return int_1.Uint32Vector; } });
Object.defineProperty(exports, "Uint64Vector", { enumerable: true, get: function () { return int_1.Uint64Vector; } });
var list_1 = list;
Object.defineProperty(exports, "ListVector", { enumerable: true, get: function () { return list_1.ListVector; } });
var map_1 = map$1;
Object.defineProperty(exports, "MapVector", { enumerable: true, get: function () { return map_1.MapVector; } });
var null_1 = _null;
Object.defineProperty(exports, "NullVector", { enumerable: true, get: function () { return null_1.NullVector; } });
var struct_1 = struct;
Object.defineProperty(exports, "StructVector", { enumerable: true, get: function () { return struct_1.StructVector; } });
var timestamp_1 = timestamp;
Object.defineProperty(exports, "TimestampVector", { enumerable: true, get: function () { return timestamp_1.TimestampVector; } });
Object.defineProperty(exports, "TimestampSecondVector", { enumerable: true, get: function () { return timestamp_1.TimestampSecondVector; } });
Object.defineProperty(exports, "TimestampMillisecondVector", { enumerable: true, get: function () { return timestamp_1.TimestampMillisecondVector; } });
Object.defineProperty(exports, "TimestampMicrosecondVector", { enumerable: true, get: function () { return timestamp_1.TimestampMicrosecondVector; } });
Object.defineProperty(exports, "TimestampNanosecondVector", { enumerable: true, get: function () { return timestamp_1.TimestampNanosecondVector; } });
var time_1 = time;
Object.defineProperty(exports, "TimeVector", { enumerable: true, get: function () { return time_1.TimeVector; } });
Object.defineProperty(exports, "TimeSecondVector", { enumerable: true, get: function () { return time_1.TimeSecondVector; } });
Object.defineProperty(exports, "TimeMillisecondVector", { enumerable: true, get: function () { return time_1.TimeMillisecondVector; } });
Object.defineProperty(exports, "TimeMicrosecondVector", { enumerable: true, get: function () { return time_1.TimeMicrosecondVector; } });
Object.defineProperty(exports, "TimeNanosecondVector", { enumerable: true, get: function () { return time_1.TimeNanosecondVector; } });
var union_1 = union;
Object.defineProperty(exports, "UnionVector", { enumerable: true, get: function () { return union_1.UnionVector; } });
Object.defineProperty(exports, "DenseUnionVector", { enumerable: true, get: function () { return union_1.DenseUnionVector; } });
Object.defineProperty(exports, "SparseUnionVector", { enumerable: true, get: function () { return union_1.SparseUnionVector; } });
var utf8_1 = utf8;
Object.defineProperty(exports, "Utf8Vector", { enumerable: true, get: function () { return utf8_1.Utf8Vector; } });
var row_1 = row;
Object.defineProperty(exports, "MapRow", { enumerable: true, get: function () { return row_1.MapRow; } });
Object.defineProperty(exports, "StructRow", { enumerable: true, get: function () { return row_1.StructRow; } });
var fn$1 = fn;
var enum_1 = _enum;
var vector_2 = vector$2;
var chunked_2 = chunked;
var base_2 = base;
var bit_1 = bit;
var compat_1 = compat;
var builder_1 = builder$1;
var get_1 = get;
var set_1 = set;
var indexof_1 = indexof;
var toarray_1 = toarray;
var iterator_1 = iterator;
var bytewidth_1 = bytewidth;
var vectorctor_1 = vectorctor;
/** @nocollapse */
vector_2.Vector.new = newVector;
/** @nocollapse */
vector_2.Vector.from = vectorFrom;
/** @ignore */
function newVector(data) {
    var _a;
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    return new ((_a = (vectorctor_1.instance.getVisitFn(data)())).bind.apply(_a, tslib_1.__spread([void 0, data], args)))();
}
/** @ignore */
function vectorFromValuesWithType(newDataType, input) {
    if (compat_1.isIterable(input)) {
        return vector_2.Vector.from({ 'nullValues': [null, undefined], type: newDataType(), 'values': input });
    }
    else if (compat_1.isAsyncIterable(input)) {
        return vector_2.Vector.from({ 'nullValues': [null, undefined], type: newDataType(), 'values': input });
    }
    var _a = tslib_1.__assign({}, input), _b = _a["values"], values = _b === void 0 ? [] : _b, _c = _a["type"], type = _c === void 0 ? newDataType() : _c, _d = _a["nullValues"], nullValues = _d === void 0 ? [null, undefined] : _d;
    return compat_1.isIterable(values)
        ? vector_2.Vector.from(tslib_1.__assign(tslib_1.__assign({ nullValues: nullValues }, input), { type: type }))
        : vector_2.Vector.from(tslib_1.__assign(tslib_1.__assign({ nullValues: nullValues }, input), { type: type }));
}
exports.vectorFromValuesWithType = vectorFromValuesWithType;
function vectorFrom(input) {
    var _this = this;
    var _a = tslib_1.__assign({ 'nullValues': [null, undefined] }, input), _b = _a["values"], values = _b === void 0 ? [] : _b, options = tslib_1.__rest(_a, ['values']);
    if (compat_1.isIterable(values)) {
        var chunks = tslib_1.__spread(builder_1.Builder.throughIterable(options)(values));
        return (chunks.length === 1 ? chunks[0] : chunked_2.Chunked.concat(chunks));
    }
    return (function (chunks) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var transform, _a, _b, chunk, e_1_1;
        var e_1, _c;
        return tslib_1.__generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    transform = builder_1.Builder.throughAsyncIterable(options);
                    _d.label = 1;
                case 1:
                    _d.trys.push([1, 6, 7, 12]);
                    _a = tslib_1.__asyncValues(transform(values));
                    _d.label = 2;
                case 2: return [4 /*yield*/, _a.next()];
                case 3:
                    if (!(_b = _d.sent(), !_b.done)) return [3 /*break*/, 5];
                    chunk = _b.value;
                    chunks.push(chunk);
                    _d.label = 4;
                case 4: return [3 /*break*/, 2];
                case 5: return [3 /*break*/, 12];
                case 6:
                    e_1_1 = _d.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 12];
                case 7:
                    _d.trys.push([7, , 10, 11]);
                    if (!(_b && !_b.done && (_c = _a.return))) return [3 /*break*/, 9];
                    return [4 /*yield*/, _c.call(_a)];
                case 8:
                    _d.sent();
                    _d.label = 9;
                case 9: return [3 /*break*/, 11];
                case 10:
                    if (e_1) throw e_1.error;
                    return [7 /*endfinally*/];
                case 11: return [7 /*endfinally*/];
                case 12: return [2 /*return*/, (chunks.length === 1 ? chunks[0] : chunked_2.Chunked.concat(chunks))];
            }
        });
    }); })([]);
}
//
// We provide the following method implementations for code navigability purposes only.
// They're overridden at runtime below with the specific Visitor implementation for each type,
// short-circuiting the usual Visitor traversal and reducing intermediate lookups and calls.
// This comment is here to remind you to not set breakpoints in these function bodies, or to inform
// you why the breakpoints you have already set are not being triggered. Have a great day!
//
base_2.BaseVector.prototype.get = function baseVectorGet(index) {
    return get_1.instance.visit(this, index);
};
base_2.BaseVector.prototype.set = function baseVectorSet(index, value) {
    return set_1.instance.visit(this, index, value);
};
base_2.BaseVector.prototype.indexOf = function baseVectorIndexOf(value, fromIndex) {
    return indexof_1.instance.visit(this, value, fromIndex);
};
base_2.BaseVector.prototype.toArray = function baseVectorToArray() {
    return toarray_1.instance.visit(this);
};
base_2.BaseVector.prototype.getByteWidth = function baseVectorGetByteWidth() {
    return bytewidth_1.instance.visit(this.type);
};
base_2.BaseVector.prototype[Symbol.iterator] = function baseVectorSymbolIterator() {
    return iterator_1.instance.visit(this);
};
base_2.BaseVector.prototype._bindDataAccessors = bindBaseVectorDataAccessors;
// Perf: bind and assign the operator Visitor methods to each of the Vector subclasses for each Type
Object.keys(enum_1.Type)
    .map(function (T) { return enum_1.Type[T]; })
    .filter(function (T) { return typeof T === 'number'; })
    .filter(function (typeId) { return typeId !== enum_1.Type.NONE; })
    .forEach(function (typeId) {
    var VectorCtor = vectorctor_1.instance.visit(typeId);
    VectorCtor.prototype['get'] = fn$1.partial1(get_1.instance.getVisitFn(typeId));
    VectorCtor.prototype['set'] = fn$1.partial2(set_1.instance.getVisitFn(typeId));
    VectorCtor.prototype['indexOf'] = fn$1.partial2(indexof_1.instance.getVisitFn(typeId));
    VectorCtor.prototype['toArray'] = fn$1.partial0(toarray_1.instance.getVisitFn(typeId));
    VectorCtor.prototype['getByteWidth'] = partialType0(bytewidth_1.instance.getVisitFn(typeId));
    VectorCtor.prototype[Symbol.iterator] = fn$1.partial0(iterator_1.instance.getVisitFn(typeId));
});
/** @ignore */
function partialType0(visit) {
    return function () { return visit(this.type); };
}
/** @ignore */
function wrapNullableGet(fn) {
    return function (i) { return this.isValid(i) ? fn.call(this, i) : null; };
}
/** @ignore */
function wrapNullableSet(fn) {
    return function (i, a) {
        if (bit_1.setBool(this.nullBitmap, this.offset + i, !((a == null)))) {
            fn.call(this, i, a);
        }
    };
}
/** @ignore */
function bindBaseVectorDataAccessors() {
    var nullBitmap = this.nullBitmap;
    if (nullBitmap && nullBitmap.byteLength > 0) {
        this.get = wrapNullableGet(this.get);
        this.set = wrapNullableSet(this.set);
    }
}


}(vector));

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(table, "__esModule", { value: true });
table.Table = void 0;
var tslib_1$8 = tslib.exports;
var column_1 = column;
var reader_1$1 = reader$1;
var writer_1 = writer$1;
var recordbatch_1$3 = recordbatch$1;
var schema_1$2 = schema;
var type_1$2 = type;
var args_1$1 = args;
var compat_1$3 = compat;
var recordbatch_2 = recordbatch;
var index_1$2 = vector;
var Table = /** @class */ (function (_super) {
    tslib_1$8.__extends(Table, _super);
    function Table() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _a;
        var _this = this;
        var schema = null;
        if (args[0] instanceof schema_1$2.Schema) {
            schema = args[0];
        }
        var chunks = args[0] instanceof Table ? args[0].chunks : args_1$1.selectArgs(recordbatch_1$3.RecordBatch, args);
        if (!schema && !(schema = (_a = chunks[0]) === null || _a === void 0 ? void 0 : _a.schema)) {
            throw new TypeError('Table must be initialized with a Schema or at least one RecordBatch');
        }
        chunks[0] || (chunks[0] = new recordbatch_1$3._InternalEmptyPlaceholderRecordBatch(schema));
        _this = _super.call(this, new type_1$2.Struct(schema.fields), chunks) || this;
        _this._schema = schema;
        _this._chunks = chunks;
        return _this;
    }
    /** @nocollapse */
    Table.empty = function (schema) {
        if (schema === void 0) { schema = new schema_1$2.Schema([]); }
        return new Table(schema, []);
    };
    /** @nocollapse */
    Table.from = function (input) {
        var _this = this;
        if (!input) {
            return Table.empty();
        }
        if (typeof input === 'object') {
            var table = compat_1$3.isIterable(input['values']) ? tableFromIterable(input)
                : compat_1$3.isAsyncIterable(input['values']) ? tableFromAsyncIterable(input)
                    : null;
            if (table !== null) {
                return table;
            }
        }
        var reader = reader_1$1.RecordBatchReader.from(input);
        if (compat_1$3.isPromise(reader)) {
            return (function () { return tslib_1$8.__awaiter(_this, void 0, void 0, function () { var _a, _b; return tslib_1$8.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _b = (_a = Table).from;
                        return [4 /*yield*/, reader];
                    case 1: return [4 /*yield*/, _b.apply(_a, [_c.sent()])];
                    case 2: return [2 /*return*/, _c.sent()];
                }
            }); }); })();
        }
        if (reader.isSync() && (reader = reader.open())) {
            return !reader.schema ? Table.empty() : new Table(reader.schema, tslib_1$8.__spread(reader));
        }
        return (function (opening) { return tslib_1$8.__awaiter(_this, void 0, void 0, function () {
            var reader, schema, batches, reader_2, reader_2_1, batch, e_1_1;
            var e_1, _a;
            return tslib_1$8.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, opening];
                    case 1:
                        reader = _b.sent();
                        schema = reader.schema;
                        batches = [];
                        if (!schema) return [3 /*break*/, 14];
                        _b.label = 2;
                    case 2:
                        _b.trys.push([2, 7, 8, 13]);
                        reader_2 = tslib_1$8.__asyncValues(reader);
                        _b.label = 3;
                    case 3: return [4 /*yield*/, reader_2.next()];
                    case 4:
                        if (!(reader_2_1 = _b.sent(), !reader_2_1.done)) return [3 /*break*/, 6];
                        batch = reader_2_1.value;
                        batches.push(batch);
                        _b.label = 5;
                    case 5: return [3 /*break*/, 3];
                    case 6: return [3 /*break*/, 13];
                    case 7:
                        e_1_1 = _b.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 13];
                    case 8:
                        _b.trys.push([8, , 11, 12]);
                        if (!(reader_2_1 && !reader_2_1.done && (_a = reader_2.return))) return [3 /*break*/, 10];
                        return [4 /*yield*/, _a.call(reader_2)];
                    case 9:
                        _b.sent();
                        _b.label = 10;
                    case 10: return [3 /*break*/, 12];
                    case 11:
                        if (e_1) throw e_1.error;
                        return [7 /*endfinally*/];
                    case 12: return [7 /*endfinally*/];
                    case 13: return [2 /*return*/, new Table(schema, batches)];
                    case 14: return [2 /*return*/, Table.empty()];
                }
            });
        }); })(reader.open());
    };
    /** @nocollapse */
    Table.fromAsync = function (source) {
        return tslib_1$8.__awaiter(this, void 0, void 0, function () {
            return tslib_1$8.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Table.from(source)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** @nocollapse */
    Table.fromStruct = function (vector) {
        return Table.new(vector.data.childData, vector.type.children);
    };
    /** @nocollapse */
    Table.new = function () {
        var cols = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            cols[_i] = arguments[_i];
        }
        return new (Table.bind.apply(Table, tslib_1$8.__spread([void 0], recordbatch_2.distributeColumnsIntoRecordBatches(args_1$1.selectColumnArgs(cols)))))();
    };
    Object.defineProperty(Table.prototype, "schema", {
        get: function () { return this._schema; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Table.prototype, "length", {
        get: function () { return this._length; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Table.prototype, "chunks", {
        get: function () { return this._chunks; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Table.prototype, "numCols", {
        get: function () { return this._numChildren; },
        enumerable: false,
        configurable: true
    });
    Table.prototype.clone = function (chunks) {
        if (chunks === void 0) { chunks = this._chunks; }
        return new Table(this._schema, chunks);
    };
    Table.prototype.getColumn = function (name) {
        return this.getColumnAt(this.getColumnIndex(name));
    };
    Table.prototype.getColumnAt = function (index) {
        return this.getChildAt(index);
    };
    Table.prototype.getColumnIndex = function (name) {
        return this._schema.fields.findIndex(function (f) { return f.name === name; });
    };
    Table.prototype.getChildAt = function (index) {
        if (index < 0 || index >= this.numChildren) {
            return null;
        }
        var field, child;
        var fields = this._schema.fields;
        var columns = this._children || (this._children = []);
        if (child = columns[index]) {
            return child;
        }
        if (field = fields[index]) {
            var chunks = this._chunks
                .map(function (chunk) { return chunk.getChildAt(index); })
                .filter(function (vec) { return vec != null; });
            if (chunks.length > 0) {
                return (columns[index] = new column_1.Column(field, chunks));
            }
        }
        return null;
    };
    // @ts-ignore
    Table.prototype.serialize = function (encoding, stream) {
        if (stream === void 0) { stream = true; }
        var Writer = !stream
            ? writer_1.RecordBatchFileWriter
            : writer_1.RecordBatchStreamWriter;
        return Writer.writeAll(this).toUint8Array(true);
    };
    Table.prototype.count = function () {
        return this._length;
    };
    Table.prototype.select = function () {
        var columnNames = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            columnNames[_i] = arguments[_i];
        }
        var nameToIndex = this._schema.fields.reduce(function (m, f, i) { return m.set(f.name, i); }, new Map());
        return this.selectAt.apply(this, tslib_1$8.__spread(columnNames.map(function (columnName) { return nameToIndex.get(columnName); }).filter(function (x) { return x > -1; })));
    };
    Table.prototype.selectAt = function () {
        var _a;
        var columnIndices = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            columnIndices[_i] = arguments[_i];
        }
        var schema = (_a = this._schema).selectAt.apply(_a, tslib_1$8.__spread(columnIndices));
        return new Table(schema, this._chunks.map(function (_a) {
            var length = _a.length, childData = _a.data.childData;
            return new recordbatch_1$3.RecordBatch(schema, length, columnIndices.map(function (i) { return childData[i]; }).filter(Boolean));
        }));
    };
    Table.prototype.assign = function (other) {
        var _this = this;
        var fields = this._schema.fields;
        var _a = tslib_1$8.__read(other.schema.fields.reduce(function (memo, f2, newIdx) {
            var _a = tslib_1$8.__read(memo, 2), indices = _a[0], oldToNew = _a[1];
            var i = fields.findIndex(function (f) { return f.name === f2.name; });
            ~i ? (oldToNew[i] = newIdx) : indices.push(newIdx);
            return memo;
        }, [[], []]), 2), indices = _a[0], oldToNew = _a[1];
        var schema = this._schema.assign(other.schema);
        var columns = tslib_1$8.__spread(fields.map(function (_f, i, _fs, j) {
            if (j === void 0) { j = oldToNew[i]; }
            return (j === undefined ? _this.getColumnAt(i) : other.getColumnAt(j));
        }), indices.map(function (i) { return other.getColumnAt(i); })).filter(Boolean);
        return new (Table.bind.apply(Table, tslib_1$8.__spread([void 0], recordbatch_2.distributeVectorsIntoRecordBatches(schema, columns))))();
    };
    return Table;
}(index_1$2.Chunked));
table.Table = Table;
function tableFromIterable(input) {
    var type = input.type;
    if (type instanceof type_1$2.Struct) {
        return Table.fromStruct(index_1$2.StructVector.from(input));
    }
    return null;
}
function tableFromAsyncIterable(input) {
    var type = input.type;
    if (type instanceof type_1$2.Struct) {
        return index_1$2.StructVector.from(input).then(function (vector) { return Table.fromStruct(vector); });
    }
    return null;
}

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(recordbatch$1, "__esModule", { value: true });
recordbatch$1._InternalEmptyPlaceholderRecordBatch = recordbatch$1.RecordBatch = void 0;
var tslib_1$7 = tslib.exports;
var data_1 = data$1;
var table_1$1 = table;
var vector_1$1 = vector$2;
var visitor_1 = visitor;
var schema_1$1 = schema;
var compat_1$2 = compat;
var chunked_1 = chunked;
var args_1 = args;
var type_1$1 = type;
var recordbatch_1$2 = recordbatch;
var index_1$1 = vector;
var RecordBatch = /** @class */ (function (_super) {
    tslib_1$7.__extends(RecordBatch, _super);
    function RecordBatch() {
        var _a;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _this = this;
        var data;
        var schema = args[0];
        var children;
        if (args[1] instanceof data_1.Data) {
            _a = tslib_1$7.__read(args, 3), data = _a[1], children = _a[2];
        }
        else {
            var fields = schema.fields;
            var _b = tslib_1$7.__read(args, 3), length_1 = _b[1], childData = _b[2];
            data = data_1.Data.Struct(new type_1$1.Struct(fields), 0, length_1, 0, null, childData);
        }
        _this = _super.call(this, data, children) || this;
        _this._schema = schema;
        return _this;
    }
    /** @nocollapse */
    RecordBatch.from = function (options) {
        if (compat_1$2.isIterable(options['values'])) {
            return table_1$1.Table.from(options);
        }
        return table_1$1.Table.from(options);
    };
    /** @nocollapse */
    RecordBatch.new = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _a = tslib_1$7.__read(args_1.selectFieldArgs(args), 2), fs = _a[0], xs = _a[1];
        var vs = xs.filter(function (x) { return x instanceof vector_1$1.Vector; });
        return new (RecordBatch.bind.apply(RecordBatch, tslib_1$7.__spread([void 0], recordbatch_1$2.ensureSameLengthData(new schema_1$1.Schema(fs), vs.map(function (x) { return x.data; })))))();
    };
    RecordBatch.prototype.clone = function (data, children) {
        if (children === void 0) { children = this._children; }
        return new RecordBatch(this._schema, data, children);
    };
    RecordBatch.prototype.concat = function () {
        var others = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            others[_i] = arguments[_i];
        }
        var schema = this._schema, chunks = chunked_1.Chunked.flatten.apply(chunked_1.Chunked, tslib_1$7.__spread([this], others));
        return new table_1$1.Table(schema, chunks.map(function (_a) {
            var data = _a.data;
            return new RecordBatch(schema, data);
        }));
    };
    Object.defineProperty(RecordBatch.prototype, "schema", {
        get: function () { return this._schema; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RecordBatch.prototype, "numCols", {
        get: function () { return this._schema.fields.length; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RecordBatch.prototype, "dictionaries", {
        get: function () {
            return this._dictionaries || (this._dictionaries = DictionaryCollector.collect(this));
        },
        enumerable: false,
        configurable: true
    });
    RecordBatch.prototype.select = function () {
        var columnNames = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            columnNames[_i] = arguments[_i];
        }
        var nameToIndex = this._schema.fields.reduce(function (m, f, i) { return m.set(f.name, i); }, new Map());
        return this.selectAt.apply(this, tslib_1$7.__spread(columnNames.map(function (columnName) { return nameToIndex.get(columnName); }).filter(function (x) { return x > -1; })));
    };
    RecordBatch.prototype.selectAt = function () {
        var _a;
        var _this = this;
        var columnIndices = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            columnIndices[_i] = arguments[_i];
        }
        var schema = (_a = this._schema).selectAt.apply(_a, tslib_1$7.__spread(columnIndices));
        var childData = columnIndices.map(function (i) { return _this.data.childData[i]; }).filter(Boolean);
        return new RecordBatch(schema, this.length, childData);
    };
    return RecordBatch;
}(index_1$1.StructVector));
recordbatch$1.RecordBatch = RecordBatch;
/**
 * An internal class used by the `RecordBatchReader` and `RecordBatchWriter`
 * implementations to differentiate between a stream with valid zero-length
 * RecordBatches, and a stream with a Schema message, but no RecordBatches.
 * @see https://github.com/apache/arrow/pull/4373
 * @ignore
 * @private
 */
/* eslint-disable @typescript-eslint/naming-convention */
var _InternalEmptyPlaceholderRecordBatch = /** @class */ (function (_super) {
    tslib_1$7.__extends(_InternalEmptyPlaceholderRecordBatch, _super);
    function _InternalEmptyPlaceholderRecordBatch(schema) {
        return _super.call(this, schema, 0, schema.fields.map(function (f) { return data_1.Data.new(f.type, 0, 0, 0); })) || this;
    }
    return _InternalEmptyPlaceholderRecordBatch;
}(RecordBatch));
recordbatch$1._InternalEmptyPlaceholderRecordBatch = _InternalEmptyPlaceholderRecordBatch;
/** @ignore */
var DictionaryCollector = /** @class */ (function (_super) {
    tslib_1$7.__extends(DictionaryCollector, _super);
    function DictionaryCollector() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.dictionaries = new Map();
        return _this;
    }
    DictionaryCollector.collect = function (batch) {
        return new DictionaryCollector().visit(batch.data, new type_1$1.Struct(batch.schema.fields)).dictionaries;
    };
    DictionaryCollector.prototype.visit = function (data, type) {
        var _this = this;
        if (type_1$1.DataType.isDictionary(type)) {
            return this.visitDictionary(data, type);
        }
        else {
            data.childData.forEach(function (child, i) {
                return _this.visit(child, type.children[i].type);
            });
        }
        return this;
    };
    DictionaryCollector.prototype.visitDictionary = function (data, type) {
        var dictionary = data.dictionary;
        if (dictionary && dictionary.length > 0) {
            this.dictionaries.set(type.id, dictionary);
        }
        return this;
    };
    return DictionaryCollector;
}(visitor_1.Visitor));

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(reader$1, "__esModule", { value: true });
reader$1.AsyncRecordBatchFileReader = reader$1.RecordBatchFileReader = reader$1.AsyncRecordBatchStreamReader = reader$1.RecordBatchStreamReader = reader$1.RecordBatchReader = void 0;
var tslib_1$6 = tslib.exports;
var vector_1 = vector$2;
var enum_1 = _enum;
var file_1 = file$1;
var adapters_1 = adapters;
var stream_1$2 = stream;
var file_2 = file;
var vectorloader_1 = vectorloader;
var recordbatch_1$1 = recordbatch$1;
var interfaces_1 = interfaces;
var message_1 = message$1;
var compat_1$1 = compat;
var RecordBatchReader = /** @class */ (function (_super) {
    tslib_1$6.__extends(RecordBatchReader, _super);
    function RecordBatchReader(impl) {
        var _this = _super.call(this) || this;
        _this._impl = impl;
        return _this;
    }
    Object.defineProperty(RecordBatchReader.prototype, "closed", {
        get: function () { return this._impl.closed; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RecordBatchReader.prototype, "schema", {
        get: function () { return this._impl.schema; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RecordBatchReader.prototype, "autoDestroy", {
        get: function () { return this._impl.autoDestroy; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RecordBatchReader.prototype, "dictionaries", {
        get: function () { return this._impl.dictionaries; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RecordBatchReader.prototype, "numDictionaries", {
        get: function () { return this._impl.numDictionaries; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RecordBatchReader.prototype, "numRecordBatches", {
        get: function () { return this._impl.numRecordBatches; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RecordBatchReader.prototype, "footer", {
        get: function () { return this._impl.isFile() ? this._impl.footer : null; },
        enumerable: false,
        configurable: true
    });
    RecordBatchReader.prototype.isSync = function () { return this._impl.isSync(); };
    RecordBatchReader.prototype.isAsync = function () { return this._impl.isAsync(); };
    RecordBatchReader.prototype.isFile = function () { return this._impl.isFile(); };
    RecordBatchReader.prototype.isStream = function () { return this._impl.isStream(); };
    RecordBatchReader.prototype.next = function () {
        return this._impl.next();
    };
    RecordBatchReader.prototype.throw = function (value) {
        return this._impl.throw(value);
    };
    RecordBatchReader.prototype.return = function (value) {
        return this._impl.return(value);
    };
    RecordBatchReader.prototype.cancel = function () {
        return this._impl.cancel();
    };
    RecordBatchReader.prototype.reset = function (schema) {
        this._impl.reset(schema);
        this._DOMStream = undefined;
        this._nodeStream = undefined;
        return this;
    };
    RecordBatchReader.prototype.open = function (options) {
        var _this = this;
        var opening = this._impl.open(options);
        return compat_1$1.isPromise(opening) ? opening.then(function () { return _this; }) : this;
    };
    RecordBatchReader.prototype.readRecordBatch = function (index) {
        return this._impl.isFile() ? this._impl.readRecordBatch(index) : null;
    };
    RecordBatchReader.prototype[Symbol.iterator] = function () {
        return this._impl[Symbol.iterator]();
    };
    RecordBatchReader.prototype[Symbol.asyncIterator] = function () {
        return this._impl[Symbol.asyncIterator]();
    };
    RecordBatchReader.prototype.toDOMStream = function () {
        var _a, _b;
        var _this = this;
        return adapters_1.default.toDOMStream((this.isSync()
            ? (_a = {}, _a[Symbol.iterator] = function () { return _this; }, _a)
            : (_b = {}, _b[Symbol.asyncIterator] = function () { return _this; }, _b)));
    };
    RecordBatchReader.prototype.toNodeStream = function () {
        var _a, _b;
        var _this = this;
        return adapters_1.default.toNodeStream((this.isSync()
            ? (_a = {}, _a[Symbol.iterator] = function () { return _this; }, _a)
            : (_b = {}, _b[Symbol.asyncIterator] = function () { return _this; }, _b)), { objectMode: true });
    };
    /** @nocollapse */
    // @ts-ignore
    RecordBatchReader.throughNode = function (options) {
        throw new Error("\"throughNode\" not available in this environment");
    };
    /** @nocollapse */
    RecordBatchReader.throughDOM = function (
    // @ts-ignore
    writableStrategy, 
    // @ts-ignore
    readableStrategy) {
        throw new Error("\"throughDOM\" not available in this environment");
    };
    /** @nocollapse */
    RecordBatchReader.from = function (source) {
        var _this = this;
        if (source instanceof RecordBatchReader) {
            return source;
        }
        else if (compat_1$1.isArrowJSON(source)) {
            return fromArrowJSON(source);
        }
        else if (compat_1$1.isFileHandle(source)) {
            return fromFileHandle(source);
        }
        else if (compat_1$1.isPromise(source)) {
            return (function () { return tslib_1$6.__awaiter(_this, void 0, void 0, function () { var _a, _b; return tslib_1$6.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _b = (_a = RecordBatchReader).from;
                        return [4 /*yield*/, source];
                    case 1: return [4 /*yield*/, _b.apply(_a, [_c.sent()])];
                    case 2: return [2 /*return*/, _c.sent()];
                }
            }); }); })();
        }
        else if (compat_1$1.isFetchResponse(source) || compat_1$1.isReadableDOMStream(source) || compat_1$1.isReadableNodeStream(source) || compat_1$1.isAsyncIterable(source)) {
            return fromAsyncByteStream(new stream_1$2.AsyncByteStream(source));
        }
        return fromByteStream(new stream_1$2.ByteStream(source));
    };
    /** @nocollapse */
    RecordBatchReader.readAll = function (source) {
        if (source instanceof RecordBatchReader) {
            return source.isSync() ? readAllSync(source) : readAllAsync(source);
        }
        else if (compat_1$1.isArrowJSON(source) || ArrayBuffer.isView(source) || compat_1$1.isIterable(source) || compat_1$1.isIteratorResult(source)) {
            return readAllSync(source);
        }
        return readAllAsync(source);
    };
    return RecordBatchReader;
}(interfaces_1.ReadableInterop));
reader$1.RecordBatchReader = RecordBatchReader;
//
// Since TS is a structural type system, we define the following subclass stubs
// so that concrete types exist to associate with with the interfaces below.
//
// The implementation for each RecordBatchReader is hidden away in the set of
// `RecordBatchReaderImpl` classes in the second half of this file. This allows
// us to export a single RecordBatchReader class, and swap out the impl based
// on the io primitives or underlying arrow (JSON, file, or stream) at runtime.
//
// Async/await makes our job a bit harder, since it forces everything to be
// either fully sync or fully async. This is why the logic for the reader impls
// has been duplicated into both sync and async variants. Since the RBR
// delegates to its impl, an RBR with an AsyncRecordBatchFileReaderImpl for
// example will return async/await-friendly Promises, but one with a (sync)
// RecordBatchStreamReaderImpl will always return values. Nothing should be
// different about their logic, aside from the async handling. This is also why
// this code looks highly structured, as it should be nearly identical and easy
// to follow.
//
/** @ignore */
var RecordBatchStreamReader = /** @class */ (function (_super) {
    tslib_1$6.__extends(RecordBatchStreamReader, _super);
    function RecordBatchStreamReader(_impl) {
        var _this = _super.call(this, _impl) || this;
        _this._impl = _impl;
        return _this;
    }
    RecordBatchStreamReader.prototype[Symbol.iterator] = function () { return this._impl[Symbol.iterator](); };
    RecordBatchStreamReader.prototype[Symbol.asyncIterator] = function () { return tslib_1$6.__asyncGenerator(this, arguments, function _a() { return tslib_1$6.__generator(this, function (_b) {
        switch (_b.label) {
            case 0: return [5 /*yield**/, tslib_1$6.__values(tslib_1$6.__asyncDelegator(tslib_1$6.__asyncValues(this[Symbol.iterator]())))];
            case 1: return [4 /*yield*/, tslib_1$6.__await.apply(void 0, [_b.sent()])];
            case 2:
                _b.sent();
                return [2 /*return*/];
        }
    }); }); };
    return RecordBatchStreamReader;
}(RecordBatchReader));
reader$1.RecordBatchStreamReader = RecordBatchStreamReader;
/** @ignore */
var AsyncRecordBatchStreamReader = /** @class */ (function (_super) {
    tslib_1$6.__extends(AsyncRecordBatchStreamReader, _super);
    function AsyncRecordBatchStreamReader(_impl) {
        var _this = _super.call(this, _impl) || this;
        _this._impl = _impl;
        return _this;
    }
    AsyncRecordBatchStreamReader.prototype[Symbol.iterator] = function () { throw new Error("AsyncRecordBatchStreamReader is not Iterable"); };
    AsyncRecordBatchStreamReader.prototype[Symbol.asyncIterator] = function () { return this._impl[Symbol.asyncIterator](); };
    return AsyncRecordBatchStreamReader;
}(RecordBatchReader));
reader$1.AsyncRecordBatchStreamReader = AsyncRecordBatchStreamReader;
/** @ignore */
var RecordBatchFileReader = /** @class */ (function (_super) {
    tslib_1$6.__extends(RecordBatchFileReader, _super);
    function RecordBatchFileReader(_impl) {
        var _this = _super.call(this, _impl) || this;
        _this._impl = _impl;
        return _this;
    }
    return RecordBatchFileReader;
}(RecordBatchStreamReader));
reader$1.RecordBatchFileReader = RecordBatchFileReader;
/** @ignore */
var AsyncRecordBatchFileReader = /** @class */ (function (_super) {
    tslib_1$6.__extends(AsyncRecordBatchFileReader, _super);
    function AsyncRecordBatchFileReader(_impl) {
        var _this = _super.call(this, _impl) || this;
        _this._impl = _impl;
        return _this;
    }
    return AsyncRecordBatchFileReader;
}(AsyncRecordBatchStreamReader));
reader$1.AsyncRecordBatchFileReader = AsyncRecordBatchFileReader;
/** @ignore */
var RecordBatchReaderImpl = /** @class */ (function () {
    function RecordBatchReaderImpl(dictionaries) {
        if (dictionaries === void 0) { dictionaries = new Map(); }
        this.closed = false;
        this.autoDestroy = true;
        this._dictionaryIndex = 0;
        this._recordBatchIndex = 0;
        this.dictionaries = dictionaries;
    }
    Object.defineProperty(RecordBatchReaderImpl.prototype, "numDictionaries", {
        get: function () { return this._dictionaryIndex; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RecordBatchReaderImpl.prototype, "numRecordBatches", {
        get: function () { return this._recordBatchIndex; },
        enumerable: false,
        configurable: true
    });
    RecordBatchReaderImpl.prototype.isSync = function () { return false; };
    RecordBatchReaderImpl.prototype.isAsync = function () { return false; };
    RecordBatchReaderImpl.prototype.isFile = function () { return false; };
    RecordBatchReaderImpl.prototype.isStream = function () { return false; };
    RecordBatchReaderImpl.prototype.reset = function (schema) {
        this._dictionaryIndex = 0;
        this._recordBatchIndex = 0;
        this.schema = schema;
        this.dictionaries = new Map();
        return this;
    };
    RecordBatchReaderImpl.prototype._loadRecordBatch = function (header, body) {
        return new recordbatch_1$1.RecordBatch(this.schema, header.length, this._loadVectors(header, body, this.schema.fields));
    };
    RecordBatchReaderImpl.prototype._loadDictionaryBatch = function (header, body) {
        var id = header.id, isDelta = header.isDelta, data = header.data;
        var _a = this, dictionaries = _a.dictionaries, schema = _a.schema;
        var dictionary = dictionaries.get(id);
        if (isDelta || !dictionary) {
            var type = schema.dictionaries.get(id);
            return (dictionary && isDelta ? dictionary.concat(vector_1.Vector.new(this._loadVectors(data, body, [type])[0])) :
                vector_1.Vector.new(this._loadVectors(data, body, [type])[0]));
        }
        return dictionary;
    };
    RecordBatchReaderImpl.prototype._loadVectors = function (header, body, types) {
        return new vectorloader_1.VectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);
    };
    return RecordBatchReaderImpl;
}());
/** @ignore */
var RecordBatchStreamReaderImpl = /** @class */ (function (_super) {
    tslib_1$6.__extends(RecordBatchStreamReaderImpl, _super);
    function RecordBatchStreamReaderImpl(source, dictionaries) {
        var _this = _super.call(this, dictionaries) || this;
        _this._reader = !compat_1$1.isArrowJSON(source)
            ? new message_1.MessageReader(_this._handle = source)
            : new message_1.JSONMessageReader(_this._handle = source);
        return _this;
    }
    RecordBatchStreamReaderImpl.prototype.isSync = function () { return true; };
    RecordBatchStreamReaderImpl.prototype.isStream = function () { return true; };
    RecordBatchStreamReaderImpl.prototype[Symbol.iterator] = function () {
        return this;
    };
    RecordBatchStreamReaderImpl.prototype.cancel = function () {
        if (!this.closed && (this.closed = true)) {
            this.reset()._reader.return();
            this._reader = null;
            this.dictionaries = null;
        }
    };
    RecordBatchStreamReaderImpl.prototype.open = function (options) {
        if (!this.closed) {
            this.autoDestroy = shouldAutoDestroy(this, options);
            if (!(this.schema || (this.schema = this._reader.readSchema()))) {
                this.cancel();
            }
        }
        return this;
    };
    RecordBatchStreamReaderImpl.prototype.throw = function (value) {
        if (!this.closed && this.autoDestroy && (this.closed = true)) {
            return this.reset()._reader.throw(value);
        }
        return interfaces_1.ITERATOR_DONE;
    };
    RecordBatchStreamReaderImpl.prototype.return = function (value) {
        if (!this.closed && this.autoDestroy && (this.closed = true)) {
            return this.reset()._reader.return(value);
        }
        return interfaces_1.ITERATOR_DONE;
    };
    RecordBatchStreamReaderImpl.prototype.next = function () {
        if (this.closed) {
            return interfaces_1.ITERATOR_DONE;
        }
        var message;
        var reader = this._reader;
        while (message = this._readNextMessageAndValidate()) {
            if (message.isSchema()) {
                this.reset(message.header());
            }
            else if (message.isRecordBatch()) {
                this._recordBatchIndex++;
                var header = message.header();
                var buffer = reader.readMessageBody(message.bodyLength);
                var recordBatch = this._loadRecordBatch(header, buffer);
                return { done: false, value: recordBatch };
            }
            else if (message.isDictionaryBatch()) {
                this._dictionaryIndex++;
                var header = message.header();
                var buffer = reader.readMessageBody(message.bodyLength);
                var vector = this._loadDictionaryBatch(header, buffer);
                this.dictionaries.set(header.id, vector);
            }
        }
        if (this.schema && this._recordBatchIndex === 0) {
            this._recordBatchIndex++;
            return { done: false, value: new recordbatch_1$1._InternalEmptyPlaceholderRecordBatch(this.schema) };
        }
        return this.return();
    };
    RecordBatchStreamReaderImpl.prototype._readNextMessageAndValidate = function (type) {
        return this._reader.readMessage(type);
    };
    return RecordBatchStreamReaderImpl;
}(RecordBatchReaderImpl));
/** @ignore */
var AsyncRecordBatchStreamReaderImpl = /** @class */ (function (_super) {
    tslib_1$6.__extends(AsyncRecordBatchStreamReaderImpl, _super);
    function AsyncRecordBatchStreamReaderImpl(source, dictionaries) {
        var _this = _super.call(this, dictionaries) || this;
        _this._reader = new message_1.AsyncMessageReader(_this._handle = source);
        return _this;
    }
    AsyncRecordBatchStreamReaderImpl.prototype.isAsync = function () { return true; };
    AsyncRecordBatchStreamReaderImpl.prototype.isStream = function () { return true; };
    AsyncRecordBatchStreamReaderImpl.prototype[Symbol.asyncIterator] = function () {
        return this;
    };
    AsyncRecordBatchStreamReaderImpl.prototype.cancel = function () {
        return tslib_1$6.__awaiter(this, void 0, void 0, function () {
            return tslib_1$6.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(!this.closed && (this.closed = true))) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.reset()._reader.return()];
                    case 1:
                        _a.sent();
                        this._reader = null;
                        this.dictionaries = null;
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    AsyncRecordBatchStreamReaderImpl.prototype.open = function (options) {
        return tslib_1$6.__awaiter(this, void 0, void 0, function () {
            var _a, _b;
            return tslib_1$6.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!!this.closed) return [3 /*break*/, 4];
                        this.autoDestroy = shouldAutoDestroy(this, options);
                        _a = this.schema;
                        if (_a) return [3 /*break*/, 2];
                        _b = this;
                        return [4 /*yield*/, this._reader.readSchema()];
                    case 1:
                        _a = (_b.schema = (_c.sent()));
                        _c.label = 2;
                    case 2:
                        if (!!(_a)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.cancel()];
                    case 3:
                        _c.sent();
                        _c.label = 4;
                    case 4: return [2 /*return*/, this];
                }
            });
        });
    };
    AsyncRecordBatchStreamReaderImpl.prototype.throw = function (value) {
        return tslib_1$6.__awaiter(this, void 0, void 0, function () {
            return tslib_1$6.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(!this.closed && this.autoDestroy && (this.closed = true))) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.reset()._reader.throw(value)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2: return [2 /*return*/, interfaces_1.ITERATOR_DONE];
                }
            });
        });
    };
    AsyncRecordBatchStreamReaderImpl.prototype.return = function (value) {
        return tslib_1$6.__awaiter(this, void 0, void 0, function () {
            return tslib_1$6.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(!this.closed && this.autoDestroy && (this.closed = true))) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.reset()._reader.return(value)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2: return [2 /*return*/, interfaces_1.ITERATOR_DONE];
                }
            });
        });
    };
    AsyncRecordBatchStreamReaderImpl.prototype.next = function () {
        return tslib_1$6.__awaiter(this, void 0, void 0, function () {
            var message, reader, header, buffer, recordBatch, header, buffer, vector;
            return tslib_1$6.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.closed) {
                            return [2 /*return*/, interfaces_1.ITERATOR_DONE];
                        }
                        reader = this._reader;
                        _a.label = 1;
                    case 1: return [4 /*yield*/, this._readNextMessageAndValidate()];
                    case 2:
                        if (!(message = _a.sent())) return [3 /*break*/, 9];
                        if (!message.isSchema()) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.reset(message.header())];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 8];
                    case 4:
                        if (!message.isRecordBatch()) return [3 /*break*/, 6];
                        this._recordBatchIndex++;
                        header = message.header();
                        return [4 /*yield*/, reader.readMessageBody(message.bodyLength)];
                    case 5:
                        buffer = _a.sent();
                        recordBatch = this._loadRecordBatch(header, buffer);
                        return [2 /*return*/, { done: false, value: recordBatch }];
                    case 6:
                        if (!message.isDictionaryBatch()) return [3 /*break*/, 8];
                        this._dictionaryIndex++;
                        header = message.header();
                        return [4 /*yield*/, reader.readMessageBody(message.bodyLength)];
                    case 7:
                        buffer = _a.sent();
                        vector = this._loadDictionaryBatch(header, buffer);
                        this.dictionaries.set(header.id, vector);
                        _a.label = 8;
                    case 8: return [3 /*break*/, 1];
                    case 9:
                        if (this.schema && this._recordBatchIndex === 0) {
                            this._recordBatchIndex++;
                            return [2 /*return*/, { done: false, value: new recordbatch_1$1._InternalEmptyPlaceholderRecordBatch(this.schema) }];
                        }
                        return [4 /*yield*/, this.return()];
                    case 10: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    AsyncRecordBatchStreamReaderImpl.prototype._readNextMessageAndValidate = function (type) {
        return tslib_1$6.__awaiter(this, void 0, void 0, function () {
            return tslib_1$6.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._reader.readMessage(type)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return AsyncRecordBatchStreamReaderImpl;
}(RecordBatchReaderImpl));
/** @ignore */
var RecordBatchFileReaderImpl = /** @class */ (function (_super) {
    tslib_1$6.__extends(RecordBatchFileReaderImpl, _super);
    function RecordBatchFileReaderImpl(source, dictionaries) {
        return _super.call(this, source instanceof file_2.RandomAccessFile ? source : new file_2.RandomAccessFile(source), dictionaries) || this;
    }
    Object.defineProperty(RecordBatchFileReaderImpl.prototype, "footer", {
        get: function () { return this._footer; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RecordBatchFileReaderImpl.prototype, "numDictionaries", {
        get: function () { return this._footer ? this._footer.numDictionaries : 0; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RecordBatchFileReaderImpl.prototype, "numRecordBatches", {
        get: function () { return this._footer ? this._footer.numRecordBatches : 0; },
        enumerable: false,
        configurable: true
    });
    RecordBatchFileReaderImpl.prototype.isSync = function () { return true; };
    RecordBatchFileReaderImpl.prototype.isFile = function () { return true; };
    RecordBatchFileReaderImpl.prototype.open = function (options) {
        var e_1, _a;
        if (!this.closed && !this._footer) {
            this.schema = (this._footer = this._readFooter()).schema;
            try {
                for (var _b = tslib_1$6.__values(this._footer.dictionaryBatches()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var block = _c.value;
                    block && this._readDictionaryBatch(this._dictionaryIndex++);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return _super.prototype.open.call(this, options);
    };
    RecordBatchFileReaderImpl.prototype.readRecordBatch = function (index) {
        if (this.closed) {
            return null;
        }
        if (!this._footer) {
            this.open();
        }
        var block = this._footer && this._footer.getRecordBatch(index);
        if (block && this._handle.seek(block.offset)) {
            var message = this._reader.readMessage(enum_1.MessageHeader.RecordBatch);
            if (message === null || message === void 0 ? void 0 : message.isRecordBatch()) {
                var header = message.header();
                var buffer = this._reader.readMessageBody(message.bodyLength);
                var recordBatch = this._loadRecordBatch(header, buffer);
                return recordBatch;
            }
        }
        return null;
    };
    RecordBatchFileReaderImpl.prototype._readDictionaryBatch = function (index) {
        var block = this._footer && this._footer.getDictionaryBatch(index);
        if (block && this._handle.seek(block.offset)) {
            var message = this._reader.readMessage(enum_1.MessageHeader.DictionaryBatch);
            if (message === null || message === void 0 ? void 0 : message.isDictionaryBatch()) {
                var header = message.header();
                var buffer = this._reader.readMessageBody(message.bodyLength);
                var vector = this._loadDictionaryBatch(header, buffer);
                this.dictionaries.set(header.id, vector);
            }
        }
    };
    RecordBatchFileReaderImpl.prototype._readFooter = function () {
        var _handle = this._handle;
        var offset = _handle.size - message_1.magicAndPadding;
        var length = _handle.readInt32(offset);
        var buffer = _handle.readAt(offset - length, length);
        return file_1.Footer.decode(buffer);
    };
    RecordBatchFileReaderImpl.prototype._readNextMessageAndValidate = function (type) {
        if (!this._footer) {
            this.open();
        }
        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {
            var block = this._footer && this._footer.getRecordBatch(this._recordBatchIndex);
            if (block && this._handle.seek(block.offset)) {
                return this._reader.readMessage(type);
            }
        }
        return null;
    };
    return RecordBatchFileReaderImpl;
}(RecordBatchStreamReaderImpl));
/** @ignore */
var AsyncRecordBatchFileReaderImpl = /** @class */ (function (_super) {
    tslib_1$6.__extends(AsyncRecordBatchFileReaderImpl, _super);
    function AsyncRecordBatchFileReaderImpl(source) {
        var rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            rest[_i - 1] = arguments[_i];
        }
        var _this = this;
        var byteLength = typeof rest[0] !== 'number' ? rest.shift() : undefined;
        var dictionaries = rest[0] instanceof Map ? rest.shift() : undefined;
        _this = _super.call(this, source instanceof file_2.AsyncRandomAccessFile ? source : new file_2.AsyncRandomAccessFile(source, byteLength), dictionaries) || this;
        return _this;
    }
    Object.defineProperty(AsyncRecordBatchFileReaderImpl.prototype, "footer", {
        get: function () { return this._footer; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AsyncRecordBatchFileReaderImpl.prototype, "numDictionaries", {
        get: function () { return this._footer ? this._footer.numDictionaries : 0; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AsyncRecordBatchFileReaderImpl.prototype, "numRecordBatches", {
        get: function () { return this._footer ? this._footer.numRecordBatches : 0; },
        enumerable: false,
        configurable: true
    });
    AsyncRecordBatchFileReaderImpl.prototype.isFile = function () { return true; };
    AsyncRecordBatchFileReaderImpl.prototype.isAsync = function () { return true; };
    AsyncRecordBatchFileReaderImpl.prototype.open = function (options) {
        return tslib_1$6.__awaiter(this, void 0, void 0, function () {
            var _a, _b, _c, _d, block, _e, e_2_1;
            var e_2, _f;
            return tslib_1$6.__generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        if (!(!this.closed && !this._footer)) return [3 /*break*/, 10];
                        _a = this;
                        _b = this;
                        return [4 /*yield*/, this._readFooter()];
                    case 1:
                        _a.schema = (_b._footer = _g.sent()).schema;
                        _g.label = 2;
                    case 2:
                        _g.trys.push([2, 8, 9, 10]);
                        _c = tslib_1$6.__values(this._footer.dictionaryBatches()), _d = _c.next();
                        _g.label = 3;
                    case 3:
                        if (!!_d.done) return [3 /*break*/, 7];
                        block = _d.value;
                        _e = block;
                        if (!_e) return [3 /*break*/, 5];
                        return [4 /*yield*/, this._readDictionaryBatch(this._dictionaryIndex++)];
                    case 4:
                        _e = (_g.sent());
                        _g.label = 5;
                    case 5:
                        _g.label = 6;
                    case 6:
                        _d = _c.next();
                        return [3 /*break*/, 3];
                    case 7: return [3 /*break*/, 10];
                    case 8:
                        e_2_1 = _g.sent();
                        e_2 = { error: e_2_1 };
                        return [3 /*break*/, 10];
                    case 9:
                        try {
                            if (_d && !_d.done && (_f = _c.return)) _f.call(_c);
                        }
                        finally { if (e_2) throw e_2.error; }
                        return [7 /*endfinally*/];
                    case 10: return [4 /*yield*/, _super.prototype.open.call(this, options)];
                    case 11: return [2 /*return*/, _g.sent()];
                }
            });
        });
    };
    AsyncRecordBatchFileReaderImpl.prototype.readRecordBatch = function (index) {
        return tslib_1$6.__awaiter(this, void 0, void 0, function () {
            var block, _a, message, header, buffer, recordBatch;
            return tslib_1$6.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this.closed) {
                            return [2 /*return*/, null];
                        }
                        if (!!this._footer) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.open()];
                    case 1:
                        _b.sent();
                        _b.label = 2;
                    case 2:
                        block = this._footer && this._footer.getRecordBatch(index);
                        _a = block;
                        if (!_a) return [3 /*break*/, 4];
                        return [4 /*yield*/, this._handle.seek(block.offset)];
                    case 3:
                        _a = (_b.sent());
                        _b.label = 4;
                    case 4:
                        if (!_a) return [3 /*break*/, 7];
                        return [4 /*yield*/, this._reader.readMessage(enum_1.MessageHeader.RecordBatch)];
                    case 5:
                        message = _b.sent();
                        if (!(message === null || message === void 0 ? void 0 : message.isRecordBatch())) return [3 /*break*/, 7];
                        header = message.header();
                        return [4 /*yield*/, this._reader.readMessageBody(message.bodyLength)];
                    case 6:
                        buffer = _b.sent();
                        recordBatch = this._loadRecordBatch(header, buffer);
                        return [2 /*return*/, recordBatch];
                    case 7: return [2 /*return*/, null];
                }
            });
        });
    };
    AsyncRecordBatchFileReaderImpl.prototype._readDictionaryBatch = function (index) {
        return tslib_1$6.__awaiter(this, void 0, void 0, function () {
            var block, _a, message, header, buffer, vector;
            return tslib_1$6.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        block = this._footer && this._footer.getDictionaryBatch(index);
                        _a = block;
                        if (!_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, this._handle.seek(block.offset)];
                    case 1:
                        _a = (_b.sent());
                        _b.label = 2;
                    case 2:
                        if (!_a) return [3 /*break*/, 5];
                        return [4 /*yield*/, this._reader.readMessage(enum_1.MessageHeader.DictionaryBatch)];
                    case 3:
                        message = _b.sent();
                        if (!(message === null || message === void 0 ? void 0 : message.isDictionaryBatch())) return [3 /*break*/, 5];
                        header = message.header();
                        return [4 /*yield*/, this._reader.readMessageBody(message.bodyLength)];
                    case 4:
                        buffer = _b.sent();
                        vector = this._loadDictionaryBatch(header, buffer);
                        this.dictionaries.set(header.id, vector);
                        _b.label = 5;
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    AsyncRecordBatchFileReaderImpl.prototype._readFooter = function () {
        return tslib_1$6.__awaiter(this, void 0, void 0, function () {
            var _handle, _a, offset, length, buffer;
            return tslib_1$6.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _handle = this._handle;
                        _a = _handle._pending;
                        if (!_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, _handle._pending];
                    case 1:
                        _a = (_b.sent());
                        _b.label = 2;
                    case 2:
                        offset = _handle.size - message_1.magicAndPadding;
                        return [4 /*yield*/, _handle.readInt32(offset)];
                    case 3:
                        length = _b.sent();
                        return [4 /*yield*/, _handle.readAt(offset - length, length)];
                    case 4:
                        buffer = _b.sent();
                        return [2 /*return*/, file_1.Footer.decode(buffer)];
                }
            });
        });
    };
    AsyncRecordBatchFileReaderImpl.prototype._readNextMessageAndValidate = function (type) {
        return tslib_1$6.__awaiter(this, void 0, void 0, function () {
            var block, _a;
            return tslib_1$6.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!!this._footer) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.open()];
                    case 1:
                        _b.sent();
                        _b.label = 2;
                    case 2:
                        if (!(this._footer && this._recordBatchIndex < this.numRecordBatches)) return [3 /*break*/, 6];
                        block = this._footer.getRecordBatch(this._recordBatchIndex);
                        _a = block;
                        if (!_a) return [3 /*break*/, 4];
                        return [4 /*yield*/, this._handle.seek(block.offset)];
                    case 3:
                        _a = (_b.sent());
                        _b.label = 4;
                    case 4:
                        if (!_a) return [3 /*break*/, 6];
                        return [4 /*yield*/, this._reader.readMessage(type)];
                    case 5: return [2 /*return*/, _b.sent()];
                    case 6: return [2 /*return*/, null];
                }
            });
        });
    };
    return AsyncRecordBatchFileReaderImpl;
}(AsyncRecordBatchStreamReaderImpl));
/** @ignore */
var RecordBatchJSONReaderImpl = /** @class */ (function (_super) {
    tslib_1$6.__extends(RecordBatchJSONReaderImpl, _super);
    function RecordBatchJSONReaderImpl(source, dictionaries) {
        return _super.call(this, source, dictionaries) || this;
    }
    RecordBatchJSONReaderImpl.prototype._loadVectors = function (header, body, types) {
        return new vectorloader_1.JSONVectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);
    };
    return RecordBatchJSONReaderImpl;
}(RecordBatchStreamReaderImpl));
//
// Define some helper functions and static implementations down here. There's
// a bit of branching in the static methods that can lead to the same routines
// being executed, so we've broken those out here for readability.
//
/** @ignore */
function shouldAutoDestroy(self, options) {
    return options && (typeof options['autoDestroy'] === 'boolean') ? options['autoDestroy'] : self['autoDestroy'];
}
/** @ignore */
function readAllSync(source) {
    var reader;
    return tslib_1$6.__generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                reader = RecordBatchReader.from(source);
                _a.label = 1;
            case 1:
                _a.trys.push([1, , 6, 7]);
                if (!!reader.open({ autoDestroy: false }).closed) return [3 /*break*/, 5];
                _a.label = 2;
            case 2: return [4 /*yield*/, reader];
            case 3:
                _a.sent();
                _a.label = 4;
            case 4:
                if (!(reader.reset().open()).closed) return [3 /*break*/, 2];
                _a.label = 5;
            case 5: return [3 /*break*/, 7];
            case 6:
                reader.cancel();
                return [7 /*endfinally*/];
            case 7: return [2 /*return*/];
        }
    });
}
/** @ignore */
function readAllAsync(source) {
    return tslib_1$6.__asyncGenerator(this, arguments, function readAllAsync_1() {
        var reader;
        return tslib_1$6.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, tslib_1$6.__await(RecordBatchReader.from(source))];
                case 1:
                    reader = _a.sent();
                    _a.label = 2;
                case 2:
                    _a.trys.push([2, , 10, 12]);
                    return [4 /*yield*/, tslib_1$6.__await(reader.open({ autoDestroy: false }))];
                case 3:
                    if (!!(_a.sent()).closed) return [3 /*break*/, 9];
                    _a.label = 4;
                case 4: return [4 /*yield*/, tslib_1$6.__await(reader)];
                case 5: return [4 /*yield*/, _a.sent()];
                case 6:
                    _a.sent();
                    _a.label = 7;
                case 7: return [4 /*yield*/, tslib_1$6.__await(reader.reset().open())];
                case 8:
                    if (!(_a.sent()).closed) return [3 /*break*/, 4];
                    _a.label = 9;
                case 9: return [3 /*break*/, 12];
                case 10: return [4 /*yield*/, tslib_1$6.__await(reader.cancel())];
                case 11:
                    _a.sent();
                    return [7 /*endfinally*/];
                case 12: return [2 /*return*/];
            }
        });
    });
}
/** @ignore */
function fromArrowJSON(source) {
    return new RecordBatchStreamReader(new RecordBatchJSONReaderImpl(source));
}
/** @ignore */
function fromByteStream(source) {
    var bytes = source.peek((message_1.magicLength + 7) & ~7);
    return bytes && bytes.byteLength >= 4 ? !message_1.checkForMagicArrowString(bytes)
        ? new RecordBatchStreamReader(new RecordBatchStreamReaderImpl(source))
        : new RecordBatchFileReader(new RecordBatchFileReaderImpl(source.read()))
        : new RecordBatchStreamReader(new RecordBatchStreamReaderImpl(function () { return tslib_1$6.__generator(this, function (_a) {
            return [2 /*return*/];
        }); }()));
}
/** @ignore */
function fromAsyncByteStream(source) {
    return tslib_1$6.__awaiter(this, void 0, void 0, function () {
        var bytes, _a, _b, _c, _d;
        return tslib_1$6.__generator(this, function (_e) {
            switch (_e.label) {
                case 0: return [4 /*yield*/, source.peek((message_1.magicLength + 7) & ~7)];
                case 1:
                    bytes = _e.sent();
                    if (!(bytes && bytes.byteLength >= 4)) return [3 /*break*/, 5];
                    if (!!message_1.checkForMagicArrowString(bytes)) return [3 /*break*/, 2];
                    _b = new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl(source));
                    return [3 /*break*/, 4];
                case 2:
                    _c = RecordBatchFileReader.bind;
                    _d = RecordBatchFileReaderImpl.bind;
                    return [4 /*yield*/, source.read()];
                case 3:
                    _b = new (_c.apply(RecordBatchFileReader, [void 0, new (_d.apply(RecordBatchFileReaderImpl, [void 0, _e.sent()]))()]))();
                    _e.label = 4;
                case 4:
                    _a = _b;
                    return [3 /*break*/, 6];
                case 5:
                    _a = new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl(function () { return tslib_1$6.__asyncGenerator(this, arguments, function () { return tslib_1$6.__generator(this, function (_a) {
                        return [2 /*return*/];
                    }); }); }()));
                    _e.label = 6;
                case 6: return [2 /*return*/, _a];
            }
        });
    });
}
/** @ignore */
function fromFileHandle(source) {
    return tslib_1$6.__awaiter(this, void 0, void 0, function () {
        var size, file, _a;
        return tslib_1$6.__generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, source.stat()];
                case 1:
                    size = (_b.sent()).size;
                    file = new file_2.AsyncRandomAccessFile(source, size);
                    if (!(size >= message_1.magicX2AndPadding)) return [3 /*break*/, 3];
                    _a = message_1.checkForMagicArrowString;
                    return [4 /*yield*/, file.readAt(0, (message_1.magicLength + 7) & ~7)];
                case 2:
                    if (_a.apply(void 0, [_b.sent()])) {
                        return [2 /*return*/, new AsyncRecordBatchFileReader(new AsyncRecordBatchFileReaderImpl(file))];
                    }
                    _b.label = 3;
                case 3: return [2 /*return*/, new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl(file))];
            }
        });
    });
}

var iterable = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(iterable, "__esModule", { value: true });
iterable.toDOMStream = void 0;
var tslib_1$5 = tslib.exports;
var buffer_1 = buffer$1;
var compat_1 = compat;
/** @ignore */
function toDOMStream(source, options) {
    if (compat_1.isAsyncIterable(source)) {
        return asyncIterableAsReadableDOMStream(source, options);
    }
    if (compat_1.isIterable(source)) {
        return iterableAsReadableDOMStream(source, options);
    }
    /* istanbul ignore next */
    throw new Error("toDOMStream() must be called with an Iterable or AsyncIterable");
}
iterable.toDOMStream = toDOMStream;
/** @ignore */
function iterableAsReadableDOMStream(source, options) {
    var it = null;
    var bm = ((options === null || options === void 0 ? void 0 : options.type) === 'bytes') || false;
    var hwm = (options === null || options === void 0 ? void 0 : options.highWaterMark) || (Math.pow(2, 24));
    return new ReadableStream(tslib_1$5.__assign(tslib_1$5.__assign({}, options), { start: function (controller) { next(controller, it || (it = source[Symbol.iterator]())); },
        pull: function (controller) { it ? (next(controller, it)) : controller.close(); },
        cancel: function () { ((it === null || it === void 0 ? void 0 : it.return) && it.return() || true) && (it = null); } }), tslib_1$5.__assign({ highWaterMark: bm ? hwm : undefined }, options));
    function next(controller, it) {
        var buf;
        var r = null;
        var size = controller.desiredSize || null;
        while (!(r = it.next(bm ? size : null)).done) {
            if (ArrayBuffer.isView(r.value) && (buf = buffer_1.toUint8Array(r.value))) {
                size != null && bm && (size = size - buf.byteLength + 1);
                r.value = buf;
            }
            controller.enqueue(r.value);
            if (size != null && --size <= 0) {
                return;
            }
        }
        controller.close();
    }
}
/** @ignore */
function asyncIterableAsReadableDOMStream(source, options) {
    var it = null;
    var bm = ((options === null || options === void 0 ? void 0 : options.type) === 'bytes') || false;
    var hwm = (options === null || options === void 0 ? void 0 : options.highWaterMark) || (Math.pow(2, 24));
    return new ReadableStream(tslib_1$5.__assign(tslib_1$5.__assign({}, options), { start: function (controller) {
            return tslib_1$5.__awaiter(this, void 0, void 0, function () { return tslib_1$5.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, next(controller, it || (it = source[Symbol.asyncIterator]()))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            }); });
        },
        pull: function (controller) {
            return tslib_1$5.__awaiter(this, void 0, void 0, function () { return tslib_1$5.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!it) return [3 /*break*/, 2];
                        return [4 /*yield*/, next(controller, it)];
                    case 1:
                        (_b.sent());
                        return [3 /*break*/, 3];
                    case 2:
                        controller.close();
                        _b.label = 3;
                    case 3:
                        return [2 /*return*/];
                }
            }); });
        },
        cancel: function () {
            return tslib_1$5.__awaiter(this, void 0, void 0, function () { var _a; return tslib_1$5.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = (it === null || it === void 0 ? void 0 : it.return);
                        if (!_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, it.return()];
                    case 1:
                        _a = (_b.sent());
                        _b.label = 2;
                    case 2:
                        (_a || true) && (it = null);
                        return [2 /*return*/];
                }
            }); });
        } }), tslib_1$5.__assign({ highWaterMark: bm ? hwm : undefined }, options));
    function next(controller, it) {
        return tslib_1$5.__awaiter(this, void 0, void 0, function () {
            var buf, r, size;
            return tslib_1$5.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        r = null;
                        size = controller.desiredSize || null;
                        _a.label = 1;
                    case 1: return [4 /*yield*/, it.next(bm ? size : null)];
                    case 2:
                        if (!!(r = _a.sent()).done) return [3 /*break*/, 3];
                        if (ArrayBuffer.isView(r.value) && (buf = buffer_1.toUint8Array(r.value))) {
                            size != null && bm && (size = size - buf.byteLength + 1);
                            r.value = buf;
                        }
                        controller.enqueue(r.value);
                        if (size != null && --size <= 0) {
                            return [2 /*return*/];
                        }
                        return [3 /*break*/, 1];
                    case 3:
                        controller.close();
                        return [2 /*return*/];
                }
            });
        });
    }
}

var builder = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(builder, "__esModule", { value: true });
builder.BuilderTransform = builder.builderThroughDOMStream = void 0;
var tslib_1$4 = tslib.exports;
var index_1 = builder$2;
/** @ignore */
function builderThroughDOMStream(options) {
    return new BuilderTransform(options);
}
builder.builderThroughDOMStream = builderThroughDOMStream;
/** @ignore */
var BuilderTransform = /** @class */ (function () {
    function BuilderTransform(options) {
        // Access properties by string indexers to defeat closure compiler
        var _a, _b;
        var _this = this;
        this._numChunks = 0;
        this._finished = false;
        this._bufferedSize = 0;
        var readableStrategy = options["readableStrategy"], writableStrategy = options["writableStrategy"], _c = options["queueingStrategy"], queueingStrategy = _c === void 0 ? 'count' : _c, builderOptions = tslib_1$4.__rest(options, ['readableStrategy', 'writableStrategy', 'queueingStrategy']);
        this._controller = null;
        this._builder = index_1.Builder.new(builderOptions);
        this._getSize = queueingStrategy !== 'bytes' ? chunkLength : chunkByteLength;
        var _d = tslib_1$4.__assign({}, readableStrategy)["highWaterMark"], readableHighWaterMark = _d === void 0 ? queueingStrategy === 'bytes' ? Math.pow(2, 14) : 1000 : _d;
        var _e = tslib_1$4.__assign({}, writableStrategy)["highWaterMark"], writableHighWaterMark = _e === void 0 ? queueingStrategy === 'bytes' ? Math.pow(2, 14) : 1000 : _e;
        this['readable'] = new ReadableStream((_a = {},
            _a['cancel'] = function () { _this._builder.clear(); },
            _a['pull'] = function (c) { _this._maybeFlush(_this._builder, _this._controller = c); },
            _a['start'] = function (c) { _this._maybeFlush(_this._builder, _this._controller = c); },
            _a), {
            'highWaterMark': readableHighWaterMark,
            'size': queueingStrategy !== 'bytes' ? chunkLength : chunkByteLength,
        });
        this['writable'] = new WritableStream((_b = {},
            _b['abort'] = function () { _this._builder.clear(); },
            _b['write'] = function () { _this._maybeFlush(_this._builder, _this._controller); },
            _b['close'] = function () { _this._maybeFlush(_this._builder.finish(), _this._controller); },
            _b), {
            'highWaterMark': writableHighWaterMark,
            'size': function (value) { return _this._writeValueAndReturnChunkSize(value); },
        });
    }
    BuilderTransform.prototype._writeValueAndReturnChunkSize = function (value) {
        var bufferedSize = this._bufferedSize;
        this._bufferedSize = this._getSize(this._builder.append(value));
        return this._bufferedSize - bufferedSize;
    };
    BuilderTransform.prototype._maybeFlush = function (builder, controller) {
        if (controller === null) {
            return;
        }
        if (this._bufferedSize >= controller.desiredSize) {
            ++this._numChunks && this._enqueue(controller, builder.toVector());
        }
        if (builder.finished) {
            if (builder.length > 0 || this._numChunks === 0) {
                ++this._numChunks && this._enqueue(controller, builder.toVector());
            }
            if (!this._finished && (this._finished = true)) {
                this._enqueue(controller, null);
            }
        }
    };
    BuilderTransform.prototype._enqueue = function (controller, chunk) {
        this._bufferedSize = 0;
        this._controller = null;
        chunk === null ? controller.close() : controller.enqueue(chunk);
    };
    return BuilderTransform;
}());
builder.BuilderTransform = BuilderTransform;
/** @ignore */ var chunkLength = function (chunk) { return chunk.length; };
/** @ignore */ var chunkByteLength = function (chunk) { return chunk.byteLength; };

var reader = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(reader, "__esModule", { value: true });
reader.recordBatchReaderThroughDOMStream = void 0;
var tslib_1$3 = tslib.exports;
var stream_1$1 = stream;
var reader_1 = reader$1;
/** @ignore */
function recordBatchReaderThroughDOMStream(writableStrategy, readableStrategy) {
    var queue = new stream_1$1.AsyncByteQueue();
    var reader = null;
    var readable = new ReadableStream({
        cancel: function () {
            return tslib_1$3.__awaiter(this, void 0, void 0, function () { return tslib_1$3.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, queue.close()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            }); });
        },
        start: function (controller) {
            return tslib_1$3.__awaiter(this, void 0, void 0, function () { var _a, _b, _c; return tslib_1$3.__generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _a = next;
                        _b = [controller];
                        _c = reader;
                        if (_c) return [3 /*break*/, 2];
                        return [4 /*yield*/, open()];
                    case 1:
                        _c = (reader = _d.sent());
                        _d.label = 2;
                    case 2: return [4 /*yield*/, _a.apply(void 0, _b.concat([_c]))];
                    case 3:
                        _d.sent();
                        return [2 /*return*/];
                }
            }); });
        },
        pull: function (controller) {
            return tslib_1$3.__awaiter(this, void 0, void 0, function () { return tslib_1$3.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!reader) return [3 /*break*/, 2];
                        return [4 /*yield*/, next(controller, reader)];
                    case 1:
                        _b.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        controller.close();
                        _b.label = 3;
                    case 3:
                        return [2 /*return*/];
                }
            }); });
        }
    });
    return { writable: new WritableStream(queue, tslib_1$3.__assign({ 'highWaterMark': Math.pow(2, 14) }, writableStrategy)), readable: readable };
    function open() {
        return tslib_1$3.__awaiter(this, void 0, void 0, function () {
            return tslib_1$3.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, reader_1.RecordBatchReader.from(queue)];
                    case 1: return [4 /*yield*/, (_a.sent()).open(readableStrategy)];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    }
    function next(controller, reader) {
        return tslib_1$3.__awaiter(this, void 0, void 0, function () {
            var size, r;
            return tslib_1$3.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        size = controller.desiredSize;
                        r = null;
                        _a.label = 1;
                    case 1: return [4 /*yield*/, reader.next()];
                    case 2:
                        if (!!(r = _a.sent()).done) return [3 /*break*/, 3];
                        controller.enqueue(r.value);
                        if (size != null && --size <= 0) {
                            return [2 /*return*/];
                        }
                        return [3 /*break*/, 1];
                    case 3:
                        controller.close();
                        return [2 /*return*/];
                }
            });
        });
    }
}
reader.recordBatchReaderThroughDOMStream = recordBatchReaderThroughDOMStream;

var writer = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(writer, "__esModule", { value: true });
writer.recordBatchWriterThroughDOMStream = void 0;
var tslib_1$2 = tslib.exports;
var stream_1 = stream;
/** @ignore */
function recordBatchWriterThroughDOMStream(writableStrategy, readableStrategy) {
    var writer = new this(writableStrategy);
    var reader = new stream_1.AsyncByteStream(writer);
    var readable = new ReadableStream({
        type: 'bytes',
        cancel: function () {
            return tslib_1$2.__awaiter(this, void 0, void 0, function () { return tslib_1$2.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, reader.cancel()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            }); });
        },
        pull: function (controller) {
            return tslib_1$2.__awaiter(this, void 0, void 0, function () { return tslib_1$2.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, next(controller)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            }); });
        },
        start: function (controller) {
            return tslib_1$2.__awaiter(this, void 0, void 0, function () { return tslib_1$2.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, next(controller)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            }); });
        },
    }, tslib_1$2.__assign({ 'highWaterMark': Math.pow(2, 14) }, readableStrategy));
    return { writable: new WritableStream(writer, writableStrategy), readable: readable };
    function next(controller) {
        return tslib_1$2.__awaiter(this, void 0, void 0, function () {
            var buf, size;
            return tslib_1$2.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        buf = null;
                        size = controller.desiredSize;
                        _a.label = 1;
                    case 1: return [4 /*yield*/, reader.read(size || null)];
                    case 2:
                        if (!(buf = _a.sent())) return [3 /*break*/, 3];
                        controller.enqueue(buf);
                        if (size != null && (size -= buf.byteLength) <= 0) {
                            return [2 /*return*/];
                        }
                        return [3 /*break*/, 1];
                    case 3:
                        controller.close();
                        return [2 /*return*/];
                }
            });
        });
    }
}
writer.recordBatchWriterThroughDOMStream = recordBatchWriterThroughDOMStream;

var Arrow = {};

var dataframe = {};

var predicate = {};

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(predicate, "__esModule", { value: true });
predicate.custom = predicate.or = predicate.and = predicate.col = predicate.lit = predicate.CustomPredicate = predicate.Not = predicate.GTeq = predicate.LTeq = predicate.Equals = predicate.Or = predicate.And = predicate.CombinationPredicate = predicate.ComparisonPredicate = predicate.Predicate = predicate.Col = predicate.Literal = predicate.Value = void 0;
var tslib_1$1 = tslib.exports;
var dictionary_1 = dictionary;
/** @ignore */
var Value = /** @class */ (function () {
    function Value() {
    }
    Value.prototype.eq = function (other) {
        if (!(other instanceof Value)) {
            other = new Literal(other);
        }
        return new Equals(this, other);
    };
    Value.prototype.le = function (other) {
        if (!(other instanceof Value)) {
            other = new Literal(other);
        }
        return new LTeq(this, other);
    };
    Value.prototype.ge = function (other) {
        if (!(other instanceof Value)) {
            other = new Literal(other);
        }
        return new GTeq(this, other);
    };
    Value.prototype.lt = function (other) {
        return new Not(this.ge(other));
    };
    Value.prototype.gt = function (other) {
        return new Not(this.le(other));
    };
    Value.prototype.ne = function (other) {
        return new Not(this.eq(other));
    };
    return Value;
}());
predicate.Value = Value;
/** @ignore */
var Literal = /** @class */ (function (_super) {
    tslib_1$1.__extends(Literal, _super);
    function Literal(v) {
        var _this = _super.call(this) || this;
        _this.v = v;
        return _this;
    }
    return Literal;
}(Value));
predicate.Literal = Literal;
/** @ignore */
var Col = /** @class */ (function (_super) {
    tslib_1$1.__extends(Col, _super);
    function Col(name) {
        var _this = _super.call(this) || this;
        _this.name = name;
        return _this;
    }
    Col.prototype.bind = function (batch) {
        if (!this.colidx) {
            // Assume column index doesn't change between calls to bind
            //this.colidx = cols.findIndex(v => v.name.indexOf(this.name) != -1);
            this.colidx = -1;
            var fields = batch.schema.fields;
            for (var idx = -1; ++idx < fields.length;) {
                if (fields[idx].name === this.name) {
                    this.colidx = idx;
                    break;
                }
            }
            if (this.colidx < 0) {
                throw new Error("Failed to bind Col \"" + this.name + "\"");
            }
        }
        var vec = this.vector = batch.getChildAt(this.colidx);
        return function (idx) { return vec.get(idx); };
    };
    return Col;
}(Value));
predicate.Col = Col;
/** @ignore */
var Predicate = /** @class */ (function () {
    function Predicate() {
    }
    Predicate.prototype.and = function () {
        var expr = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            expr[_i] = arguments[_i];
        }
        return new (And.bind.apply(And, tslib_1$1.__spread([void 0, this], expr)))();
    };
    Predicate.prototype.or = function () {
        var expr = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            expr[_i] = arguments[_i];
        }
        return new (Or.bind.apply(Or, tslib_1$1.__spread([void 0, this], expr)))();
    };
    Predicate.prototype.not = function () { return new Not(this); };
    return Predicate;
}());
predicate.Predicate = Predicate;
/** @ignore */
var ComparisonPredicate = /** @class */ (function (_super) {
    tslib_1$1.__extends(ComparisonPredicate, _super);
    function ComparisonPredicate(left, right) {
        var _this = _super.call(this) || this;
        _this.left = left;
        _this.right = right;
        return _this;
    }
    ComparisonPredicate.prototype.bind = function (batch) {
        if (this.left instanceof Literal) {
            if (this.right instanceof Literal) {
                return this._bindLitLit(batch, this.left, this.right);
            }
            else { // right is a Col
                return this._bindLitCol(batch, this.left, this.right);
            }
        }
        else { // left is a Col
            if (this.right instanceof Literal) {
                return this._bindColLit(batch, this.left, this.right);
            }
            else { // right is a Col
                return this._bindColCol(batch, this.left, this.right);
            }
        }
    };
    return ComparisonPredicate;
}(Predicate));
predicate.ComparisonPredicate = ComparisonPredicate;
/** @ignore */
var CombinationPredicate = /** @class */ (function (_super) {
    tslib_1$1.__extends(CombinationPredicate, _super);
    function CombinationPredicate() {
        var children = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            children[_i] = arguments[_i];
        }
        var _this = _super.call(this) || this;
        _this.children = children;
        return _this;
    }
    return CombinationPredicate;
}(Predicate));
predicate.CombinationPredicate = CombinationPredicate;
// add children to prototype so it doesn't get mangled in es2015/umd
CombinationPredicate.prototype.children = Object.freeze([]); // freeze for safety
/** @ignore */
var And = /** @class */ (function (_super) {
    tslib_1$1.__extends(And, _super);
    function And() {
        var children = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            children[_i] = arguments[_i];
        }
        var _this = this;
        // Flatten any Ands
        children = children.reduce(function (accum, p) {
            return accum.concat(p instanceof And ? p.children : p);
        }, []);
        _this = _super.apply(this, tslib_1$1.__spread(children)) || this;
        return _this;
    }
    And.prototype.bind = function (batch) {
        var bound = this.children.map(function (p) { return p.bind(batch); });
        return function (idx, batch) { return bound.every(function (p) { return p(idx, batch); }); };
    };
    return And;
}(CombinationPredicate));
predicate.And = And;
/** @ignore */
var Or = /** @class */ (function (_super) {
    tslib_1$1.__extends(Or, _super);
    function Or() {
        var children = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            children[_i] = arguments[_i];
        }
        var _this = this;
        // Flatten any Ors
        children = children.reduce(function (accum, p) {
            return accum.concat(p instanceof Or ? p.children : p);
        }, []);
        _this = _super.apply(this, tslib_1$1.__spread(children)) || this;
        return _this;
    }
    Or.prototype.bind = function (batch) {
        var bound = this.children.map(function (p) { return p.bind(batch); });
        return function (idx, batch) { return bound.some(function (p) { return p(idx, batch); }); };
    };
    return Or;
}(CombinationPredicate));
predicate.Or = Or;
/** @ignore */
var Equals = /** @class */ (function (_super) {
    tslib_1$1.__extends(Equals, _super);
    function Equals() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Equals.prototype._bindLitLit = function (_batch, left, right) {
        var rtrn = left.v == right.v;
        return function () { return rtrn; };
    };
    Equals.prototype._bindColCol = function (batch, left, right) {
        var left_func = left.bind(batch);
        var right_func = right.bind(batch);
        return function (idx, batch) { return left_func(idx, batch) == right_func(idx, batch); };
    };
    Equals.prototype._bindColLit = function (batch, col, lit) {
        var col_func = col.bind(batch);
        if (col.vector instanceof dictionary_1.DictionaryVector) {
            var key_1;
            var vector_1 = col.vector;
            if (vector_1.dictionary !== this.lastDictionary) {
                key_1 = vector_1.reverseLookup(lit.v);
                this.lastDictionary = vector_1.dictionary;
                this.lastKey = key_1;
            }
            else {
                key_1 = this.lastKey;
            }
            if (key_1 === -1) {
                // the value doesn't exist in the dictionary - always return
                // false
                // TODO: special-case of PredicateFunc that encapsulates this
                // "always false" behavior. That way filtering operations don't
                // have to bother checking
                return function () { return false; };
            }
            else {
                return function (idx) {
                    return vector_1.getKey(idx) === key_1;
                };
            }
        }
        else {
            return function (idx, cols) { return col_func(idx, cols) == lit.v; };
        }
    };
    Equals.prototype._bindLitCol = function (batch, lit, col) {
        // Equals is commutative
        return this._bindColLit(batch, col, lit);
    };
    return Equals;
}(ComparisonPredicate));
predicate.Equals = Equals;
/** @ignore */
var LTeq = /** @class */ (function (_super) {
    tslib_1$1.__extends(LTeq, _super);
    function LTeq() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LTeq.prototype._bindLitLit = function (_batch, left, right) {
        var rtrn = left.v <= right.v;
        return function () { return rtrn; };
    };
    LTeq.prototype._bindColCol = function (batch, left, right) {
        var left_func = left.bind(batch);
        var right_func = right.bind(batch);
        return function (idx, cols) { return left_func(idx, cols) <= right_func(idx, cols); };
    };
    LTeq.prototype._bindColLit = function (batch, col, lit) {
        var col_func = col.bind(batch);
        return function (idx, cols) { return col_func(idx, cols) <= lit.v; };
    };
    LTeq.prototype._bindLitCol = function (batch, lit, col) {
        var col_func = col.bind(batch);
        return function (idx, cols) { return lit.v <= col_func(idx, cols); };
    };
    return LTeq;
}(ComparisonPredicate));
predicate.LTeq = LTeq;
/** @ignore */
var GTeq = /** @class */ (function (_super) {
    tslib_1$1.__extends(GTeq, _super);
    function GTeq() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GTeq.prototype._bindLitLit = function (_batch, left, right) {
        var rtrn = left.v >= right.v;
        return function () { return rtrn; };
    };
    GTeq.prototype._bindColCol = function (batch, left, right) {
        var left_func = left.bind(batch);
        var right_func = right.bind(batch);
        return function (idx, cols) { return left_func(idx, cols) >= right_func(idx, cols); };
    };
    GTeq.prototype._bindColLit = function (batch, col, lit) {
        var col_func = col.bind(batch);
        return function (idx, cols) { return col_func(idx, cols) >= lit.v; };
    };
    GTeq.prototype._bindLitCol = function (batch, lit, col) {
        var col_func = col.bind(batch);
        return function (idx, cols) { return lit.v >= col_func(idx, cols); };
    };
    return GTeq;
}(ComparisonPredicate));
predicate.GTeq = GTeq;
/** @ignore */
var Not = /** @class */ (function (_super) {
    tslib_1$1.__extends(Not, _super);
    function Not(child) {
        var _this = _super.call(this) || this;
        _this.child = child;
        return _this;
    }
    Not.prototype.bind = function (batch) {
        var func = this.child.bind(batch);
        return function (idx, batch) { return !func(idx, batch); };
    };
    return Not;
}(Predicate));
predicate.Not = Not;
/** @ignore */
var CustomPredicate = /** @class */ (function (_super) {
    tslib_1$1.__extends(CustomPredicate, _super);
    function CustomPredicate(next, bind_) {
        var _this = _super.call(this) || this;
        _this.next = next;
        _this.bind_ = bind_;
        return _this;
    }
    CustomPredicate.prototype.bind = function (batch) {
        this.bind_(batch);
        return this.next;
    };
    return CustomPredicate;
}(Predicate));
predicate.CustomPredicate = CustomPredicate;
function lit(v) { return new Literal(v); }
predicate.lit = lit;
function col(n) { return new Col(n); }
predicate.col = col;
function and() {
    var p = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        p[_i] = arguments[_i];
    }
    return new (And.bind.apply(And, tslib_1$1.__spread([void 0], p)))();
}
predicate.and = and;
function or() {
    var p = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        p[_i] = arguments[_i];
    }
    return new (Or.bind.apply(Or, tslib_1$1.__spread([void 0], p)))();
}
predicate.or = or;
function custom(next, bind) {
    return new CustomPredicate(next, bind);
}
predicate.custom = custom;

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(dataframe, "__esModule", { value: true });
dataframe.FilteredDataFrame = dataframe.CountByResult = dataframe.DataFrame = void 0;
var tslib_1 = tslib.exports;
var table_1 = table;
var int_1 = int;
var schema_1 = schema;
var predicate_1 = predicate;
var recordbatch_1 = recordbatch$1;
var type_1 = type;
/**
 * `DataFrame` extends {@link Table} with support for predicate filtering.
 *
 * You can construct `DataFrames` like tables or convert a `Table` to a `DataFrame`
 * with the constructor.
 *
 * ```ts
 * const df = new DataFrame(table);
 * ```
 */
var DataFrame = /** @class */ (function (_super) {
    tslib_1.__extends(DataFrame, _super);
    function DataFrame() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DataFrame.prototype.filter = function (predicate) {
        return new FilteredDataFrame(this.chunks, predicate);
    };
    DataFrame.prototype.scan = function (next, bind) {
        var batches = this.chunks, numBatches = batches.length;
        for (var batchIndex = -1; ++batchIndex < numBatches;) {
            // load batches
            var batch = batches[batchIndex];
            if (bind) {
                bind(batch);
            }
            // yield all indices
            for (var index = -1, numRows = batch.length; ++index < numRows;) {
                next(index, batch);
            }
        }
    };
    DataFrame.prototype.scanReverse = function (next, bind) {
        var batches = this.chunks, numBatches = batches.length;
        for (var batchIndex = numBatches; --batchIndex >= 0;) {
            // load batches
            var batch = batches[batchIndex];
            if (bind) {
                bind(batch);
            }
            // yield all indices
            for (var index = batch.length; --index >= 0;) {
                next(index, batch);
            }
        }
    };
    DataFrame.prototype.countBy = function (name) {
        var batches = this.chunks, numBatches = batches.length;
        var count_by = typeof name === 'string' ? new predicate_1.Col(name) : name;
        // Assume that all dictionary batches are deltas, which means that the
        // last record batch has the most complete dictionary
        count_by.bind(batches[numBatches - 1]);
        var vector = count_by.vector;
        if (!type_1.DataType.isDictionary(vector.type)) {
            throw new Error('countBy currently only supports dictionary-encoded columns');
        }
        var countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));
        var CountsArrayType = countByteLength == 4 ? Uint32Array :
            countByteLength >= 2 ? Uint16Array : Uint8Array;
        var counts = new CountsArrayType(vector.dictionary.length);
        for (var batchIndex = -1; ++batchIndex < numBatches;) {
            // load batches
            var batch = batches[batchIndex];
            // rebind the countBy Col
            count_by.bind(batch);
            var keys = count_by.vector.indices;
            // yield all indices
            for (var index = -1, numRows = batch.length; ++index < numRows;) {
                var key = keys.get(index);
                if (key !== null) {
                    counts[key]++;
                }
            }
        }
        return new CountByResult(vector.dictionary, int_1.IntVector.from(counts));
    };
    return DataFrame;
}(table_1.Table));
dataframe.DataFrame = DataFrame;
/** @ignore */
var CountByResult = /** @class */ (function (_super) {
    tslib_1.__extends(CountByResult, _super);
    function CountByResult(values, counts) {
        var _this = this;
        var schema = new schema_1.Schema([
            new schema_1.Field('values', values.type),
            new schema_1.Field('counts', counts.type)
        ]);
        _this = _super.call(this, new recordbatch_1.RecordBatch(schema, counts.length, [values, counts])) || this;
        return _this;
    }
    CountByResult.prototype.toJSON = function () {
        var values = this.getColumnAt(0);
        var counts = this.getColumnAt(1);
        var result = {};
        for (var i = -1; ++i < this.length;) {
            result[values.get(i)] = counts.get(i);
        }
        return result;
    };
    return CountByResult;
}(table_1.Table));
dataframe.CountByResult = CountByResult;
/** @ignore */
var FilteredBatchIterator = /** @class */ (function () {
    function FilteredBatchIterator(batches, predicate) {
        this.batches = batches;
        this.predicate = predicate;
        this.batchIndex = 0;
        this.index = 0;
        // TODO: bind batches lazily
        // If predicate doesn't match anything in the batch we don't need
        // to bind the callback
        this.batch = this.batches[this.batchIndex];
        this.predicateFunc = this.predicate.bind(this.batch);
    }
    FilteredBatchIterator.prototype.next = function () {
        while (this.batchIndex < this.batches.length) {
            while (this.index < this.batch.length) {
                if (this.predicateFunc(this.index, this.batch)) {
                    return {
                        value: this.batch.get(this.index++),
                    };
                }
                this.index++;
            }
            if (++this.batchIndex < this.batches.length) {
                this.index = 0;
                this.batch = this.batches[this.batchIndex];
                this.predicateFunc = this.predicate.bind(this.batch);
            }
        }
        return { done: true, value: null };
    };
    FilteredBatchIterator.prototype[Symbol.iterator] = function () {
        return this;
    };
    return FilteredBatchIterator;
}());
/** @ignore */
var FilteredDataFrame = /** @class */ (function (_super) {
    tslib_1.__extends(FilteredDataFrame, _super);
    function FilteredDataFrame(batches, predicate) {
        var _this = _super.call(this, batches) || this;
        _this._predicate = predicate;
        return _this;
    }
    FilteredDataFrame.prototype.scan = function (next, bind) {
        // inlined version of this:
        // this.parent.scan((idx, columns) => {
        //     if (this.predicate(idx, columns)) next(idx, columns);
        // });
        var batches = this._chunks;
        var numBatches = batches.length;
        for (var batchIndex = -1; ++batchIndex < numBatches;) {
            // load batches
            var batch = batches[batchIndex];
            var predicate = this._predicate.bind(batch);
            var isBound = false;
            // yield all indices
            for (var index = -1, numRows = batch.length; ++index < numRows;) {
                if (predicate(index, batch)) {
                    // bind batches lazily - if predicate doesn't match anything
                    // in the batch we don't need to call bind on the batch
                    if (bind && !isBound) {
                        bind(batch);
                        isBound = true;
                    }
                    next(index, batch);
                }
            }
        }
    };
    FilteredDataFrame.prototype.scanReverse = function (next, bind) {
        var batches = this._chunks;
        var numBatches = batches.length;
        for (var batchIndex = numBatches; --batchIndex >= 0;) {
            // load batches
            var batch = batches[batchIndex];
            var predicate = this._predicate.bind(batch);
            var isBound = false;
            // yield all indices
            for (var index = batch.length; --index >= 0;) {
                if (predicate(index, batch)) {
                    // bind batches lazily - if predicate doesn't match anything
                    // in the batch we don't need to call bind on the batch
                    if (bind && !isBound) {
                        bind(batch);
                        isBound = true;
                    }
                    next(index, batch);
                }
            }
        }
    };
    FilteredDataFrame.prototype.count = function () {
        // inlined version of this:
        // let sum = 0;
        // this.parent.scan((idx, columns) => {
        //     if (this.predicate(idx, columns)) ++sum;
        // });
        // return sum;
        var sum = 0;
        var batches = this._chunks;
        var numBatches = batches.length;
        for (var batchIndex = -1; ++batchIndex < numBatches;) {
            // load batches
            var batch = batches[batchIndex];
            var predicate = this._predicate.bind(batch);
            for (var index = -1, numRows = batch.length; ++index < numRows;) {
                if (predicate(index, batch)) {
                    ++sum;
                }
            }
        }
        return sum;
    };
    FilteredDataFrame.prototype[Symbol.iterator] = function () {
        // inlined version of this:
        // this.parent.scan((idx, columns) => {
        //     if (this.predicate(idx, columns)) next(idx, columns);
        // });
        return new FilteredBatchIterator(this._chunks, this._predicate);
    };
    FilteredDataFrame.prototype.filter = function (predicate) {
        return new FilteredDataFrame(this._chunks, this._predicate.and(predicate));
    };
    FilteredDataFrame.prototype.countBy = function (name) {
        var batches = this._chunks, numBatches = batches.length;
        var count_by = typeof name === 'string' ? new predicate_1.Col(name) : name;
        // Assume that all dictionary batches are deltas, which means that the
        // last record batch has the most complete dictionary
        count_by.bind(batches[numBatches - 1]);
        var vector = count_by.vector;
        if (!type_1.DataType.isDictionary(vector.type)) {
            throw new Error('countBy currently only supports dictionary-encoded columns');
        }
        var countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));
        var CountsArrayType = countByteLength == 4 ? Uint32Array :
            countByteLength >= 2 ? Uint16Array : Uint8Array;
        var counts = new CountsArrayType(vector.dictionary.length);
        for (var batchIndex = -1; ++batchIndex < numBatches;) {
            // load batches
            var batch = batches[batchIndex];
            var predicate = this._predicate.bind(batch);
            // rebind the countBy Col
            count_by.bind(batch);
            var keys = count_by.vector.indices;
            // yield all indices
            for (var index = -1, numRows = batch.length; ++index < numRows;) {
                var key = keys.get(index);
                if (key !== null && predicate(index, batch)) {
                    counts[key]++;
                }
            }
        }
        return new CountByResult(vector.dictionary, int_1.IntVector.from(counts));
    };
    return FilteredDataFrame;
}(DataFrame));
dataframe.FilteredDataFrame = FilteredDataFrame;

(function (exports) {
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.isTypedArray = exports.util = exports.predicate = exports.CountByResult = exports.FilteredDataFrame = exports.DataFrame = exports.RecordBatch = exports.Message = exports.JSONMessageReader = exports.AsyncMessageReader = exports.MessageReader = exports.RecordBatchJSONWriter = exports.RecordBatchStreamWriter = exports.RecordBatchFileWriter = exports.RecordBatchWriter = exports.AsyncRecordBatchStreamReader = exports.AsyncRecordBatchFileReader = exports.RecordBatchStreamReader = exports.RecordBatchFileReader = exports.RecordBatchReader = exports.AsyncByteQueue = exports.AsyncByteStream = exports.ByteStream = exports.Utf8Builder = exports.SparseUnionBuilder = exports.DenseUnionBuilder = exports.UnionBuilder = exports.TimeNanosecondBuilder = exports.TimeMicrosecondBuilder = exports.TimeMillisecondBuilder = exports.TimeSecondBuilder = exports.TimeBuilder = exports.TimestampNanosecondBuilder = exports.TimestampMicrosecondBuilder = exports.TimestampMillisecondBuilder = exports.TimestampSecondBuilder = exports.TimestampBuilder = exports.StructBuilder = exports.NullBuilder = exports.MapBuilder = exports.ListBuilder = exports.Uint64Builder = exports.Uint32Builder = exports.Uint16Builder = exports.Uint8Builder = exports.Int64Builder = exports.Int32Builder = exports.Int16Builder = exports.Int8Builder = exports.IntBuilder = exports.IntervalYearMonthBuilder = exports.IntervalDayTimeBuilder = exports.IntervalBuilder = exports.Float64Builder = exports.Float32Builder = exports.Float16Builder = exports.FloatBuilder = exports.FixedSizeListBuilder = exports.FixedSizeBinaryBuilder = exports.DictionaryBuilder = exports.DecimalBuilder = exports.DateMillisecondBuilder = exports.DateDayBuilder = exports.DateBuilder = exports.BoolBuilder = exports.BinaryBuilder = exports.Builder = exports.Utf8Vector = exports.SparseUnionVector = exports.DenseUnionVector = exports.UnionVector = exports.TimeNanosecondVector = exports.TimeMicrosecondVector = exports.TimeMillisecondVector = exports.TimeSecondVector = exports.TimeVector = exports.TimestampNanosecondVector = exports.TimestampMicrosecondVector = exports.TimestampMillisecondVector = exports.TimestampSecondVector = exports.TimestampVector = exports.StructVector = exports.NullVector = exports.MapVector = exports.ListVector = exports.Uint64Vector = exports.Uint32Vector = exports.Uint16Vector = exports.Uint8Vector = exports.Int64Vector = exports.Int32Vector = exports.Int16Vector = exports.Int8Vector = exports.IntVector = exports.IntervalYearMonthVector = exports.IntervalDayTimeVector = exports.IntervalVector = exports.Float64Vector = exports.Float32Vector = exports.Float16Vector = exports.FloatVector = exports.FixedSizeListVector = exports.FixedSizeBinaryVector = exports.DictionaryVector = exports.DecimalVector = exports.DateMillisecondVector = exports.DateDayVector = exports.DateVector = exports.Chunked = exports.BoolVector = exports.BinaryVector = exports.BaseVector = exports.Vector = exports.Field = exports.Schema = exports.Visitor = exports.Column = exports.Table = exports.Map_ = exports.FixedSizeList = exports.IntervalYearMonth = exports.IntervalDayTime = exports.Interval = exports.Dictionary = exports.SparseUnion = exports.DenseUnion = exports.Union = exports.Struct = exports.List = exports.Decimal = exports.TimeNanosecond = exports.TimeMicrosecond = exports.TimeMillisecond = exports.TimeSecond = exports.Time = exports.TimestampNanosecond = exports.TimestampMicrosecond = exports.TimestampMillisecond = exports.TimestampSecond = exports.Timestamp = exports.DateMillisecond = exports.DateDay = exports.Date_ = exports.FixedSizeBinary = exports.Binary = exports.Utf8 = exports.Float64 = exports.Float32 = exports.Float16 = exports.Float = exports.Uint64 = exports.Uint32 = exports.Uint16 = exports.Uint8 = exports.Int64 = exports.Int32 = exports.Int16 = exports.Int8 = exports.Int = exports.Bool = exports.Null = exports.DataType = exports.Data = exports.BufferType = exports.Type = exports.MessageHeader = exports.MetadataVersion = exports.IntervalUnit = exports.UnionMode = exports.Precision = exports.TimeUnit = exports.DateUnit = void 0;
var tslib_1 = tslib.exports;
var Schema_1 = Schema$1;
Object.defineProperty(exports, "DateUnit", { enumerable: true, get: function () { return Schema_1.DateUnit; } });
Object.defineProperty(exports, "TimeUnit", { enumerable: true, get: function () { return Schema_1.TimeUnit; } });
Object.defineProperty(exports, "Precision", { enumerable: true, get: function () { return Schema_1.Precision; } });
Object.defineProperty(exports, "UnionMode", { enumerable: true, get: function () { return Schema_1.UnionMode; } });
Object.defineProperty(exports, "IntervalUnit", { enumerable: true, get: function () { return Schema_1.IntervalUnit; } });
Object.defineProperty(exports, "MetadataVersion", { enumerable: true, get: function () { return Schema_1.MetadataVersion; } });
var Message_1 = Message$1;
Object.defineProperty(exports, "MessageHeader", { enumerable: true, get: function () { return Message_1.MessageHeader; } });
var enum_1 = _enum;
Object.defineProperty(exports, "Type", { enumerable: true, get: function () { return enum_1.Type; } });
Object.defineProperty(exports, "BufferType", { enumerable: true, get: function () { return enum_1.BufferType; } });
var data_1 = data$1;
Object.defineProperty(exports, "Data", { enumerable: true, get: function () { return data_1.Data; } });
var type_1 = type;
Object.defineProperty(exports, "DataType", { enumerable: true, get: function () { return type_1.DataType; } });
Object.defineProperty(exports, "Null", { enumerable: true, get: function () { return type_1.Null; } });
Object.defineProperty(exports, "Bool", { enumerable: true, get: function () { return type_1.Bool; } });
Object.defineProperty(exports, "Int", { enumerable: true, get: function () { return type_1.Int; } });
Object.defineProperty(exports, "Int8", { enumerable: true, get: function () { return type_1.Int8; } });
Object.defineProperty(exports, "Int16", { enumerable: true, get: function () { return type_1.Int16; } });
Object.defineProperty(exports, "Int32", { enumerable: true, get: function () { return type_1.Int32; } });
Object.defineProperty(exports, "Int64", { enumerable: true, get: function () { return type_1.Int64; } });
Object.defineProperty(exports, "Uint8", { enumerable: true, get: function () { return type_1.Uint8; } });
Object.defineProperty(exports, "Uint16", { enumerable: true, get: function () { return type_1.Uint16; } });
Object.defineProperty(exports, "Uint32", { enumerable: true, get: function () { return type_1.Uint32; } });
Object.defineProperty(exports, "Uint64", { enumerable: true, get: function () { return type_1.Uint64; } });
Object.defineProperty(exports, "Float", { enumerable: true, get: function () { return type_1.Float; } });
Object.defineProperty(exports, "Float16", { enumerable: true, get: function () { return type_1.Float16; } });
Object.defineProperty(exports, "Float32", { enumerable: true, get: function () { return type_1.Float32; } });
Object.defineProperty(exports, "Float64", { enumerable: true, get: function () { return type_1.Float64; } });
Object.defineProperty(exports, "Utf8", { enumerable: true, get: function () { return type_1.Utf8; } });
Object.defineProperty(exports, "Binary", { enumerable: true, get: function () { return type_1.Binary; } });
Object.defineProperty(exports, "FixedSizeBinary", { enumerable: true, get: function () { return type_1.FixedSizeBinary; } });
Object.defineProperty(exports, "Date_", { enumerable: true, get: function () { return type_1.Date_; } });
Object.defineProperty(exports, "DateDay", { enumerable: true, get: function () { return type_1.DateDay; } });
Object.defineProperty(exports, "DateMillisecond", { enumerable: true, get: function () { return type_1.DateMillisecond; } });
Object.defineProperty(exports, "Timestamp", { enumerable: true, get: function () { return type_1.Timestamp; } });
Object.defineProperty(exports, "TimestampSecond", { enumerable: true, get: function () { return type_1.TimestampSecond; } });
Object.defineProperty(exports, "TimestampMillisecond", { enumerable: true, get: function () { return type_1.TimestampMillisecond; } });
Object.defineProperty(exports, "TimestampMicrosecond", { enumerable: true, get: function () { return type_1.TimestampMicrosecond; } });
Object.defineProperty(exports, "TimestampNanosecond", { enumerable: true, get: function () { return type_1.TimestampNanosecond; } });
Object.defineProperty(exports, "Time", { enumerable: true, get: function () { return type_1.Time; } });
Object.defineProperty(exports, "TimeSecond", { enumerable: true, get: function () { return type_1.TimeSecond; } });
Object.defineProperty(exports, "TimeMillisecond", { enumerable: true, get: function () { return type_1.TimeMillisecond; } });
Object.defineProperty(exports, "TimeMicrosecond", { enumerable: true, get: function () { return type_1.TimeMicrosecond; } });
Object.defineProperty(exports, "TimeNanosecond", { enumerable: true, get: function () { return type_1.TimeNanosecond; } });
Object.defineProperty(exports, "Decimal", { enumerable: true, get: function () { return type_1.Decimal; } });
Object.defineProperty(exports, "List", { enumerable: true, get: function () { return type_1.List; } });
Object.defineProperty(exports, "Struct", { enumerable: true, get: function () { return type_1.Struct; } });
Object.defineProperty(exports, "Union", { enumerable: true, get: function () { return type_1.Union; } });
Object.defineProperty(exports, "DenseUnion", { enumerable: true, get: function () { return type_1.DenseUnion; } });
Object.defineProperty(exports, "SparseUnion", { enumerable: true, get: function () { return type_1.SparseUnion; } });
Object.defineProperty(exports, "Dictionary", { enumerable: true, get: function () { return type_1.Dictionary; } });
Object.defineProperty(exports, "Interval", { enumerable: true, get: function () { return type_1.Interval; } });
Object.defineProperty(exports, "IntervalDayTime", { enumerable: true, get: function () { return type_1.IntervalDayTime; } });
Object.defineProperty(exports, "IntervalYearMonth", { enumerable: true, get: function () { return type_1.IntervalYearMonth; } });
Object.defineProperty(exports, "FixedSizeList", { enumerable: true, get: function () { return type_1.FixedSizeList; } });
Object.defineProperty(exports, "Map_", { enumerable: true, get: function () { return type_1.Map_; } });
var table_1 = table;
Object.defineProperty(exports, "Table", { enumerable: true, get: function () { return table_1.Table; } });
var column_1 = column;
Object.defineProperty(exports, "Column", { enumerable: true, get: function () { return column_1.Column; } });
var visitor_1 = visitor;
Object.defineProperty(exports, "Visitor", { enumerable: true, get: function () { return visitor_1.Visitor; } });
var schema_1 = schema;
Object.defineProperty(exports, "Schema", { enumerable: true, get: function () { return schema_1.Schema; } });
Object.defineProperty(exports, "Field", { enumerable: true, get: function () { return schema_1.Field; } });
var index_1 = vector;
Object.defineProperty(exports, "Vector", { enumerable: true, get: function () { return index_1.Vector; } });
Object.defineProperty(exports, "BaseVector", { enumerable: true, get: function () { return index_1.BaseVector; } });
Object.defineProperty(exports, "BinaryVector", { enumerable: true, get: function () { return index_1.BinaryVector; } });
Object.defineProperty(exports, "BoolVector", { enumerable: true, get: function () { return index_1.BoolVector; } });
Object.defineProperty(exports, "Chunked", { enumerable: true, get: function () { return index_1.Chunked; } });
Object.defineProperty(exports, "DateVector", { enumerable: true, get: function () { return index_1.DateVector; } });
Object.defineProperty(exports, "DateDayVector", { enumerable: true, get: function () { return index_1.DateDayVector; } });
Object.defineProperty(exports, "DateMillisecondVector", { enumerable: true, get: function () { return index_1.DateMillisecondVector; } });
Object.defineProperty(exports, "DecimalVector", { enumerable: true, get: function () { return index_1.DecimalVector; } });
Object.defineProperty(exports, "DictionaryVector", { enumerable: true, get: function () { return index_1.DictionaryVector; } });
Object.defineProperty(exports, "FixedSizeBinaryVector", { enumerable: true, get: function () { return index_1.FixedSizeBinaryVector; } });
Object.defineProperty(exports, "FixedSizeListVector", { enumerable: true, get: function () { return index_1.FixedSizeListVector; } });
Object.defineProperty(exports, "FloatVector", { enumerable: true, get: function () { return index_1.FloatVector; } });
Object.defineProperty(exports, "Float16Vector", { enumerable: true, get: function () { return index_1.Float16Vector; } });
Object.defineProperty(exports, "Float32Vector", { enumerable: true, get: function () { return index_1.Float32Vector; } });
Object.defineProperty(exports, "Float64Vector", { enumerable: true, get: function () { return index_1.Float64Vector; } });
Object.defineProperty(exports, "IntervalVector", { enumerable: true, get: function () { return index_1.IntervalVector; } });
Object.defineProperty(exports, "IntervalDayTimeVector", { enumerable: true, get: function () { return index_1.IntervalDayTimeVector; } });
Object.defineProperty(exports, "IntervalYearMonthVector", { enumerable: true, get: function () { return index_1.IntervalYearMonthVector; } });
Object.defineProperty(exports, "IntVector", { enumerable: true, get: function () { return index_1.IntVector; } });
Object.defineProperty(exports, "Int8Vector", { enumerable: true, get: function () { return index_1.Int8Vector; } });
Object.defineProperty(exports, "Int16Vector", { enumerable: true, get: function () { return index_1.Int16Vector; } });
Object.defineProperty(exports, "Int32Vector", { enumerable: true, get: function () { return index_1.Int32Vector; } });
Object.defineProperty(exports, "Int64Vector", { enumerable: true, get: function () { return index_1.Int64Vector; } });
Object.defineProperty(exports, "Uint8Vector", { enumerable: true, get: function () { return index_1.Uint8Vector; } });
Object.defineProperty(exports, "Uint16Vector", { enumerable: true, get: function () { return index_1.Uint16Vector; } });
Object.defineProperty(exports, "Uint32Vector", { enumerable: true, get: function () { return index_1.Uint32Vector; } });
Object.defineProperty(exports, "Uint64Vector", { enumerable: true, get: function () { return index_1.Uint64Vector; } });
Object.defineProperty(exports, "ListVector", { enumerable: true, get: function () { return index_1.ListVector; } });
Object.defineProperty(exports, "MapVector", { enumerable: true, get: function () { return index_1.MapVector; } });
Object.defineProperty(exports, "NullVector", { enumerable: true, get: function () { return index_1.NullVector; } });
Object.defineProperty(exports, "StructVector", { enumerable: true, get: function () { return index_1.StructVector; } });
Object.defineProperty(exports, "TimestampVector", { enumerable: true, get: function () { return index_1.TimestampVector; } });
Object.defineProperty(exports, "TimestampSecondVector", { enumerable: true, get: function () { return index_1.TimestampSecondVector; } });
Object.defineProperty(exports, "TimestampMillisecondVector", { enumerable: true, get: function () { return index_1.TimestampMillisecondVector; } });
Object.defineProperty(exports, "TimestampMicrosecondVector", { enumerable: true, get: function () { return index_1.TimestampMicrosecondVector; } });
Object.defineProperty(exports, "TimestampNanosecondVector", { enumerable: true, get: function () { return index_1.TimestampNanosecondVector; } });
Object.defineProperty(exports, "TimeVector", { enumerable: true, get: function () { return index_1.TimeVector; } });
Object.defineProperty(exports, "TimeSecondVector", { enumerable: true, get: function () { return index_1.TimeSecondVector; } });
Object.defineProperty(exports, "TimeMillisecondVector", { enumerable: true, get: function () { return index_1.TimeMillisecondVector; } });
Object.defineProperty(exports, "TimeMicrosecondVector", { enumerable: true, get: function () { return index_1.TimeMicrosecondVector; } });
Object.defineProperty(exports, "TimeNanosecondVector", { enumerable: true, get: function () { return index_1.TimeNanosecondVector; } });
Object.defineProperty(exports, "UnionVector", { enumerable: true, get: function () { return index_1.UnionVector; } });
Object.defineProperty(exports, "DenseUnionVector", { enumerable: true, get: function () { return index_1.DenseUnionVector; } });
Object.defineProperty(exports, "SparseUnionVector", { enumerable: true, get: function () { return index_1.SparseUnionVector; } });
Object.defineProperty(exports, "Utf8Vector", { enumerable: true, get: function () { return index_1.Utf8Vector; } });
var index_2 = builder$2;
Object.defineProperty(exports, "Builder", { enumerable: true, get: function () { return index_2.Builder; } });
Object.defineProperty(exports, "BinaryBuilder", { enumerable: true, get: function () { return index_2.BinaryBuilder; } });
Object.defineProperty(exports, "BoolBuilder", { enumerable: true, get: function () { return index_2.BoolBuilder; } });
Object.defineProperty(exports, "DateBuilder", { enumerable: true, get: function () { return index_2.DateBuilder; } });
Object.defineProperty(exports, "DateDayBuilder", { enumerable: true, get: function () { return index_2.DateDayBuilder; } });
Object.defineProperty(exports, "DateMillisecondBuilder", { enumerable: true, get: function () { return index_2.DateMillisecondBuilder; } });
Object.defineProperty(exports, "DecimalBuilder", { enumerable: true, get: function () { return index_2.DecimalBuilder; } });
Object.defineProperty(exports, "DictionaryBuilder", { enumerable: true, get: function () { return index_2.DictionaryBuilder; } });
Object.defineProperty(exports, "FixedSizeBinaryBuilder", { enumerable: true, get: function () { return index_2.FixedSizeBinaryBuilder; } });
Object.defineProperty(exports, "FixedSizeListBuilder", { enumerable: true, get: function () { return index_2.FixedSizeListBuilder; } });
Object.defineProperty(exports, "FloatBuilder", { enumerable: true, get: function () { return index_2.FloatBuilder; } });
Object.defineProperty(exports, "Float16Builder", { enumerable: true, get: function () { return index_2.Float16Builder; } });
Object.defineProperty(exports, "Float32Builder", { enumerable: true, get: function () { return index_2.Float32Builder; } });
Object.defineProperty(exports, "Float64Builder", { enumerable: true, get: function () { return index_2.Float64Builder; } });
Object.defineProperty(exports, "IntervalBuilder", { enumerable: true, get: function () { return index_2.IntervalBuilder; } });
Object.defineProperty(exports, "IntervalDayTimeBuilder", { enumerable: true, get: function () { return index_2.IntervalDayTimeBuilder; } });
Object.defineProperty(exports, "IntervalYearMonthBuilder", { enumerable: true, get: function () { return index_2.IntervalYearMonthBuilder; } });
Object.defineProperty(exports, "IntBuilder", { enumerable: true, get: function () { return index_2.IntBuilder; } });
Object.defineProperty(exports, "Int8Builder", { enumerable: true, get: function () { return index_2.Int8Builder; } });
Object.defineProperty(exports, "Int16Builder", { enumerable: true, get: function () { return index_2.Int16Builder; } });
Object.defineProperty(exports, "Int32Builder", { enumerable: true, get: function () { return index_2.Int32Builder; } });
Object.defineProperty(exports, "Int64Builder", { enumerable: true, get: function () { return index_2.Int64Builder; } });
Object.defineProperty(exports, "Uint8Builder", { enumerable: true, get: function () { return index_2.Uint8Builder; } });
Object.defineProperty(exports, "Uint16Builder", { enumerable: true, get: function () { return index_2.Uint16Builder; } });
Object.defineProperty(exports, "Uint32Builder", { enumerable: true, get: function () { return index_2.Uint32Builder; } });
Object.defineProperty(exports, "Uint64Builder", { enumerable: true, get: function () { return index_2.Uint64Builder; } });
Object.defineProperty(exports, "ListBuilder", { enumerable: true, get: function () { return index_2.ListBuilder; } });
Object.defineProperty(exports, "MapBuilder", { enumerable: true, get: function () { return index_2.MapBuilder; } });
Object.defineProperty(exports, "NullBuilder", { enumerable: true, get: function () { return index_2.NullBuilder; } });
Object.defineProperty(exports, "StructBuilder", { enumerable: true, get: function () { return index_2.StructBuilder; } });
Object.defineProperty(exports, "TimestampBuilder", { enumerable: true, get: function () { return index_2.TimestampBuilder; } });
Object.defineProperty(exports, "TimestampSecondBuilder", { enumerable: true, get: function () { return index_2.TimestampSecondBuilder; } });
Object.defineProperty(exports, "TimestampMillisecondBuilder", { enumerable: true, get: function () { return index_2.TimestampMillisecondBuilder; } });
Object.defineProperty(exports, "TimestampMicrosecondBuilder", { enumerable: true, get: function () { return index_2.TimestampMicrosecondBuilder; } });
Object.defineProperty(exports, "TimestampNanosecondBuilder", { enumerable: true, get: function () { return index_2.TimestampNanosecondBuilder; } });
Object.defineProperty(exports, "TimeBuilder", { enumerable: true, get: function () { return index_2.TimeBuilder; } });
Object.defineProperty(exports, "TimeSecondBuilder", { enumerable: true, get: function () { return index_2.TimeSecondBuilder; } });
Object.defineProperty(exports, "TimeMillisecondBuilder", { enumerable: true, get: function () { return index_2.TimeMillisecondBuilder; } });
Object.defineProperty(exports, "TimeMicrosecondBuilder", { enumerable: true, get: function () { return index_2.TimeMicrosecondBuilder; } });
Object.defineProperty(exports, "TimeNanosecondBuilder", { enumerable: true, get: function () { return index_2.TimeNanosecondBuilder; } });
Object.defineProperty(exports, "UnionBuilder", { enumerable: true, get: function () { return index_2.UnionBuilder; } });
Object.defineProperty(exports, "DenseUnionBuilder", { enumerable: true, get: function () { return index_2.DenseUnionBuilder; } });
Object.defineProperty(exports, "SparseUnionBuilder", { enumerable: true, get: function () { return index_2.SparseUnionBuilder; } });
Object.defineProperty(exports, "Utf8Builder", { enumerable: true, get: function () { return index_2.Utf8Builder; } });
var stream_1 = stream;
Object.defineProperty(exports, "ByteStream", { enumerable: true, get: function () { return stream_1.ByteStream; } });
Object.defineProperty(exports, "AsyncByteStream", { enumerable: true, get: function () { return stream_1.AsyncByteStream; } });
Object.defineProperty(exports, "AsyncByteQueue", { enumerable: true, get: function () { return stream_1.AsyncByteQueue; } });
var reader_1 = reader$1;
Object.defineProperty(exports, "RecordBatchReader", { enumerable: true, get: function () { return reader_1.RecordBatchReader; } });
Object.defineProperty(exports, "RecordBatchFileReader", { enumerable: true, get: function () { return reader_1.RecordBatchFileReader; } });
Object.defineProperty(exports, "RecordBatchStreamReader", { enumerable: true, get: function () { return reader_1.RecordBatchStreamReader; } });
Object.defineProperty(exports, "AsyncRecordBatchFileReader", { enumerable: true, get: function () { return reader_1.AsyncRecordBatchFileReader; } });
Object.defineProperty(exports, "AsyncRecordBatchStreamReader", { enumerable: true, get: function () { return reader_1.AsyncRecordBatchStreamReader; } });
var writer_1 = writer$1;
Object.defineProperty(exports, "RecordBatchWriter", { enumerable: true, get: function () { return writer_1.RecordBatchWriter; } });
Object.defineProperty(exports, "RecordBatchFileWriter", { enumerable: true, get: function () { return writer_1.RecordBatchFileWriter; } });
Object.defineProperty(exports, "RecordBatchStreamWriter", { enumerable: true, get: function () { return writer_1.RecordBatchStreamWriter; } });
Object.defineProperty(exports, "RecordBatchJSONWriter", { enumerable: true, get: function () { return writer_1.RecordBatchJSONWriter; } });
var message_1 = message$1;
Object.defineProperty(exports, "MessageReader", { enumerable: true, get: function () { return message_1.MessageReader; } });
Object.defineProperty(exports, "AsyncMessageReader", { enumerable: true, get: function () { return message_1.AsyncMessageReader; } });
Object.defineProperty(exports, "JSONMessageReader", { enumerable: true, get: function () { return message_1.JSONMessageReader; } });
var message_2 = message;
Object.defineProperty(exports, "Message", { enumerable: true, get: function () { return message_2.Message; } });
var recordbatch_1 = recordbatch$1;
Object.defineProperty(exports, "RecordBatch", { enumerable: true, get: function () { return recordbatch_1.RecordBatch; } });
var dataframe_1 = dataframe;
Object.defineProperty(exports, "DataFrame", { enumerable: true, get: function () { return dataframe_1.DataFrame; } });
Object.defineProperty(exports, "FilteredDataFrame", { enumerable: true, get: function () { return dataframe_1.FilteredDataFrame; } });
Object.defineProperty(exports, "CountByResult", { enumerable: true, get: function () { return dataframe_1.CountByResult; } });
var util_bn_ = bn;
var util_int_ = int$1;
var util_bit_ = bit;
var util_math_ = math;
var util_buffer_ = buffer$1;
var util_vector_ = vector$1;
var predicate$1 = predicate;
exports.predicate = predicate$1;
var typecomparator_1 = typecomparator;
/** @ignore */
exports.util = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, util_bn_), util_int_), util_bit_), util_math_), util_buffer_), util_vector_), { compareSchemas: typecomparator_1.compareSchemas,
    compareFields: typecomparator_1.compareFields,
    compareTypes: typecomparator_1.compareTypes });
var args_1 = args;
Object.defineProperty(exports, "isTypedArray", { enumerable: true, get: function () { return args_1.isTypedArray; } });


}(Arrow));

(function (exports) {
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.isTypedArray = exports.Utf8Builder = exports.SparseUnionBuilder = exports.DenseUnionBuilder = exports.UnionBuilder = exports.TimeNanosecondBuilder = exports.TimeMicrosecondBuilder = exports.TimeMillisecondBuilder = exports.TimeSecondBuilder = exports.TimeBuilder = exports.TimestampNanosecondBuilder = exports.TimestampMicrosecondBuilder = exports.TimestampMillisecondBuilder = exports.TimestampSecondBuilder = exports.TimestampBuilder = exports.StructBuilder = exports.NullBuilder = exports.MapBuilder = exports.ListBuilder = exports.Uint64Builder = exports.Uint32Builder = exports.Uint16Builder = exports.Uint8Builder = exports.Int64Builder = exports.Int32Builder = exports.Int16Builder = exports.Int8Builder = exports.IntBuilder = exports.IntervalYearMonthBuilder = exports.IntervalDayTimeBuilder = exports.IntervalBuilder = exports.Float64Builder = exports.Float32Builder = exports.Float16Builder = exports.FloatBuilder = exports.FixedSizeListBuilder = exports.FixedSizeBinaryBuilder = exports.DictionaryBuilder = exports.DecimalBuilder = exports.DateMillisecondBuilder = exports.DateDayBuilder = exports.DateBuilder = exports.BoolBuilder = exports.BinaryBuilder = exports.Builder = exports.util = exports.predicate = exports.CountByResult = exports.FilteredDataFrame = exports.DataFrame = exports.RecordBatch = exports.Message = exports.JSONMessageReader = exports.AsyncMessageReader = exports.MessageReader = exports.RecordBatchJSONWriter = exports.RecordBatchStreamWriter = exports.RecordBatchFileWriter = exports.RecordBatchWriter = exports.AsyncRecordBatchStreamReader = exports.AsyncRecordBatchFileReader = exports.RecordBatchStreamReader = exports.RecordBatchFileReader = exports.RecordBatchReader = exports.AsyncByteQueue = exports.AsyncByteStream = exports.ByteStream = exports.Utf8Vector = exports.SparseUnionVector = exports.DenseUnionVector = exports.UnionVector = exports.TimeNanosecondVector = exports.TimeMicrosecondVector = exports.TimeMillisecondVector = exports.TimeSecondVector = exports.TimeVector = exports.TimestampNanosecondVector = exports.TimestampMicrosecondVector = exports.TimestampMillisecondVector = exports.TimestampSecondVector = exports.TimestampVector = exports.StructVector = exports.NullVector = exports.MapVector = exports.ListVector = exports.Uint64Vector = exports.Uint32Vector = exports.Uint16Vector = exports.Uint8Vector = exports.Int64Vector = exports.Int32Vector = exports.Int16Vector = exports.Int8Vector = exports.IntVector = exports.IntervalYearMonthVector = exports.IntervalDayTimeVector = exports.IntervalVector = exports.Float64Vector = exports.Float32Vector = exports.Float16Vector = exports.FloatVector = exports.FixedSizeListVector = exports.FixedSizeBinaryVector = exports.DictionaryVector = exports.DecimalVector = exports.DateMillisecondVector = exports.DateDayVector = exports.DateVector = exports.Chunked = exports.BoolVector = exports.BinaryVector = exports.BaseVector = exports.Vector = exports.Visitor = exports.Field = exports.Schema = exports.Column = exports.Table = exports.Map_ = exports.FixedSizeList = exports.IntervalYearMonth = exports.IntervalDayTime = exports.Interval = exports.Dictionary = exports.SparseUnion = exports.DenseUnion = exports.Union = exports.Struct = exports.List = exports.Decimal = exports.TimeNanosecond = exports.TimeMicrosecond = exports.TimeMillisecond = exports.TimeSecond = exports.Time = exports.TimestampNanosecond = exports.TimestampMicrosecond = exports.TimestampMillisecond = exports.TimestampSecond = exports.Timestamp = exports.DateMillisecond = exports.DateDay = exports.Date_ = exports.FixedSizeBinary = exports.Binary = exports.Utf8 = exports.Float64 = exports.Float32 = exports.Float16 = exports.Float = exports.Uint64 = exports.Uint32 = exports.Uint16 = exports.Uint8 = exports.Int64 = exports.Int32 = exports.Int16 = exports.Int8 = exports.Int = exports.Bool = exports.Null = exports.DataType = exports.Data = exports.BufferType = exports.UnionMode = exports.Type = exports.TimeUnit = exports.Precision = exports.MetadataVersion = exports.MessageHeader = exports.IntervalUnit = exports.DateUnit = void 0;
var adapters_1 = adapters;
var index_1 = builder$2;
var reader_1 = reader$1;
var writer_1 = writer$1;
var iterable_1 = iterable;
var builder_1 = builder;
var reader_2 = reader;
var writer_2 = writer;
adapters_1.default.toDOMStream = iterable_1.toDOMStream;
index_1.Builder['throughDOM'] = builder_1.builderThroughDOMStream;
reader_1.RecordBatchReader['throughDOM'] = reader_2.recordBatchReaderThroughDOMStream;
reader_1.RecordBatchFileReader['throughDOM'] = reader_2.recordBatchReaderThroughDOMStream;
reader_1.RecordBatchStreamReader['throughDOM'] = reader_2.recordBatchReaderThroughDOMStream;
writer_1.RecordBatchWriter['throughDOM'] = writer_2.recordBatchWriterThroughDOMStream;
writer_1.RecordBatchFileWriter['throughDOM'] = writer_2.recordBatchWriterThroughDOMStream;
writer_1.RecordBatchStreamWriter['throughDOM'] = writer_2.recordBatchWriterThroughDOMStream;
var Arrow_1 = Arrow;
Object.defineProperty(exports, "DateUnit", { enumerable: true, get: function () { return Arrow_1.DateUnit; } });
Object.defineProperty(exports, "IntervalUnit", { enumerable: true, get: function () { return Arrow_1.IntervalUnit; } });
Object.defineProperty(exports, "MessageHeader", { enumerable: true, get: function () { return Arrow_1.MessageHeader; } });
Object.defineProperty(exports, "MetadataVersion", { enumerable: true, get: function () { return Arrow_1.MetadataVersion; } });
Object.defineProperty(exports, "Precision", { enumerable: true, get: function () { return Arrow_1.Precision; } });
Object.defineProperty(exports, "TimeUnit", { enumerable: true, get: function () { return Arrow_1.TimeUnit; } });
Object.defineProperty(exports, "Type", { enumerable: true, get: function () { return Arrow_1.Type; } });
Object.defineProperty(exports, "UnionMode", { enumerable: true, get: function () { return Arrow_1.UnionMode; } });
Object.defineProperty(exports, "BufferType", { enumerable: true, get: function () { return Arrow_1.BufferType; } });
Object.defineProperty(exports, "Data", { enumerable: true, get: function () { return Arrow_1.Data; } });
Object.defineProperty(exports, "DataType", { enumerable: true, get: function () { return Arrow_1.DataType; } });
Object.defineProperty(exports, "Null", { enumerable: true, get: function () { return Arrow_1.Null; } });
Object.defineProperty(exports, "Bool", { enumerable: true, get: function () { return Arrow_1.Bool; } });
Object.defineProperty(exports, "Int", { enumerable: true, get: function () { return Arrow_1.Int; } });
Object.defineProperty(exports, "Int8", { enumerable: true, get: function () { return Arrow_1.Int8; } });
Object.defineProperty(exports, "Int16", { enumerable: true, get: function () { return Arrow_1.Int16; } });
Object.defineProperty(exports, "Int32", { enumerable: true, get: function () { return Arrow_1.Int32; } });
Object.defineProperty(exports, "Int64", { enumerable: true, get: function () { return Arrow_1.Int64; } });
Object.defineProperty(exports, "Uint8", { enumerable: true, get: function () { return Arrow_1.Uint8; } });
Object.defineProperty(exports, "Uint16", { enumerable: true, get: function () { return Arrow_1.Uint16; } });
Object.defineProperty(exports, "Uint32", { enumerable: true, get: function () { return Arrow_1.Uint32; } });
Object.defineProperty(exports, "Uint64", { enumerable: true, get: function () { return Arrow_1.Uint64; } });
Object.defineProperty(exports, "Float", { enumerable: true, get: function () { return Arrow_1.Float; } });
Object.defineProperty(exports, "Float16", { enumerable: true, get: function () { return Arrow_1.Float16; } });
Object.defineProperty(exports, "Float32", { enumerable: true, get: function () { return Arrow_1.Float32; } });
Object.defineProperty(exports, "Float64", { enumerable: true, get: function () { return Arrow_1.Float64; } });
Object.defineProperty(exports, "Utf8", { enumerable: true, get: function () { return Arrow_1.Utf8; } });
Object.defineProperty(exports, "Binary", { enumerable: true, get: function () { return Arrow_1.Binary; } });
Object.defineProperty(exports, "FixedSizeBinary", { enumerable: true, get: function () { return Arrow_1.FixedSizeBinary; } });
Object.defineProperty(exports, "Date_", { enumerable: true, get: function () { return Arrow_1.Date_; } });
Object.defineProperty(exports, "DateDay", { enumerable: true, get: function () { return Arrow_1.DateDay; } });
Object.defineProperty(exports, "DateMillisecond", { enumerable: true, get: function () { return Arrow_1.DateMillisecond; } });
Object.defineProperty(exports, "Timestamp", { enumerable: true, get: function () { return Arrow_1.Timestamp; } });
Object.defineProperty(exports, "TimestampSecond", { enumerable: true, get: function () { return Arrow_1.TimestampSecond; } });
Object.defineProperty(exports, "TimestampMillisecond", { enumerable: true, get: function () { return Arrow_1.TimestampMillisecond; } });
Object.defineProperty(exports, "TimestampMicrosecond", { enumerable: true, get: function () { return Arrow_1.TimestampMicrosecond; } });
Object.defineProperty(exports, "TimestampNanosecond", { enumerable: true, get: function () { return Arrow_1.TimestampNanosecond; } });
Object.defineProperty(exports, "Time", { enumerable: true, get: function () { return Arrow_1.Time; } });
Object.defineProperty(exports, "TimeSecond", { enumerable: true, get: function () { return Arrow_1.TimeSecond; } });
Object.defineProperty(exports, "TimeMillisecond", { enumerable: true, get: function () { return Arrow_1.TimeMillisecond; } });
Object.defineProperty(exports, "TimeMicrosecond", { enumerable: true, get: function () { return Arrow_1.TimeMicrosecond; } });
Object.defineProperty(exports, "TimeNanosecond", { enumerable: true, get: function () { return Arrow_1.TimeNanosecond; } });
Object.defineProperty(exports, "Decimal", { enumerable: true, get: function () { return Arrow_1.Decimal; } });
Object.defineProperty(exports, "List", { enumerable: true, get: function () { return Arrow_1.List; } });
Object.defineProperty(exports, "Struct", { enumerable: true, get: function () { return Arrow_1.Struct; } });
Object.defineProperty(exports, "Union", { enumerable: true, get: function () { return Arrow_1.Union; } });
Object.defineProperty(exports, "DenseUnion", { enumerable: true, get: function () { return Arrow_1.DenseUnion; } });
Object.defineProperty(exports, "SparseUnion", { enumerable: true, get: function () { return Arrow_1.SparseUnion; } });
Object.defineProperty(exports, "Dictionary", { enumerable: true, get: function () { return Arrow_1.Dictionary; } });
Object.defineProperty(exports, "Interval", { enumerable: true, get: function () { return Arrow_1.Interval; } });
Object.defineProperty(exports, "IntervalDayTime", { enumerable: true, get: function () { return Arrow_1.IntervalDayTime; } });
Object.defineProperty(exports, "IntervalYearMonth", { enumerable: true, get: function () { return Arrow_1.IntervalYearMonth; } });
Object.defineProperty(exports, "FixedSizeList", { enumerable: true, get: function () { return Arrow_1.FixedSizeList; } });
Object.defineProperty(exports, "Map_", { enumerable: true, get: function () { return Arrow_1.Map_; } });
Object.defineProperty(exports, "Table", { enumerable: true, get: function () { return Arrow_1.Table; } });
Object.defineProperty(exports, "Column", { enumerable: true, get: function () { return Arrow_1.Column; } });
Object.defineProperty(exports, "Schema", { enumerable: true, get: function () { return Arrow_1.Schema; } });
Object.defineProperty(exports, "Field", { enumerable: true, get: function () { return Arrow_1.Field; } });
Object.defineProperty(exports, "Visitor", { enumerable: true, get: function () { return Arrow_1.Visitor; } });
Object.defineProperty(exports, "Vector", { enumerable: true, get: function () { return Arrow_1.Vector; } });
Object.defineProperty(exports, "BaseVector", { enumerable: true, get: function () { return Arrow_1.BaseVector; } });
Object.defineProperty(exports, "BinaryVector", { enumerable: true, get: function () { return Arrow_1.BinaryVector; } });
Object.defineProperty(exports, "BoolVector", { enumerable: true, get: function () { return Arrow_1.BoolVector; } });
Object.defineProperty(exports, "Chunked", { enumerable: true, get: function () { return Arrow_1.Chunked; } });
Object.defineProperty(exports, "DateVector", { enumerable: true, get: function () { return Arrow_1.DateVector; } });
Object.defineProperty(exports, "DateDayVector", { enumerable: true, get: function () { return Arrow_1.DateDayVector; } });
Object.defineProperty(exports, "DateMillisecondVector", { enumerable: true, get: function () { return Arrow_1.DateMillisecondVector; } });
Object.defineProperty(exports, "DecimalVector", { enumerable: true, get: function () { return Arrow_1.DecimalVector; } });
Object.defineProperty(exports, "DictionaryVector", { enumerable: true, get: function () { return Arrow_1.DictionaryVector; } });
Object.defineProperty(exports, "FixedSizeBinaryVector", { enumerable: true, get: function () { return Arrow_1.FixedSizeBinaryVector; } });
Object.defineProperty(exports, "FixedSizeListVector", { enumerable: true, get: function () { return Arrow_1.FixedSizeListVector; } });
Object.defineProperty(exports, "FloatVector", { enumerable: true, get: function () { return Arrow_1.FloatVector; } });
Object.defineProperty(exports, "Float16Vector", { enumerable: true, get: function () { return Arrow_1.Float16Vector; } });
Object.defineProperty(exports, "Float32Vector", { enumerable: true, get: function () { return Arrow_1.Float32Vector; } });
Object.defineProperty(exports, "Float64Vector", { enumerable: true, get: function () { return Arrow_1.Float64Vector; } });
Object.defineProperty(exports, "IntervalVector", { enumerable: true, get: function () { return Arrow_1.IntervalVector; } });
Object.defineProperty(exports, "IntervalDayTimeVector", { enumerable: true, get: function () { return Arrow_1.IntervalDayTimeVector; } });
Object.defineProperty(exports, "IntervalYearMonthVector", { enumerable: true, get: function () { return Arrow_1.IntervalYearMonthVector; } });
Object.defineProperty(exports, "IntVector", { enumerable: true, get: function () { return Arrow_1.IntVector; } });
Object.defineProperty(exports, "Int8Vector", { enumerable: true, get: function () { return Arrow_1.Int8Vector; } });
Object.defineProperty(exports, "Int16Vector", { enumerable: true, get: function () { return Arrow_1.Int16Vector; } });
Object.defineProperty(exports, "Int32Vector", { enumerable: true, get: function () { return Arrow_1.Int32Vector; } });
Object.defineProperty(exports, "Int64Vector", { enumerable: true, get: function () { return Arrow_1.Int64Vector; } });
Object.defineProperty(exports, "Uint8Vector", { enumerable: true, get: function () { return Arrow_1.Uint8Vector; } });
Object.defineProperty(exports, "Uint16Vector", { enumerable: true, get: function () { return Arrow_1.Uint16Vector; } });
Object.defineProperty(exports, "Uint32Vector", { enumerable: true, get: function () { return Arrow_1.Uint32Vector; } });
Object.defineProperty(exports, "Uint64Vector", { enumerable: true, get: function () { return Arrow_1.Uint64Vector; } });
Object.defineProperty(exports, "ListVector", { enumerable: true, get: function () { return Arrow_1.ListVector; } });
Object.defineProperty(exports, "MapVector", { enumerable: true, get: function () { return Arrow_1.MapVector; } });
Object.defineProperty(exports, "NullVector", { enumerable: true, get: function () { return Arrow_1.NullVector; } });
Object.defineProperty(exports, "StructVector", { enumerable: true, get: function () { return Arrow_1.StructVector; } });
Object.defineProperty(exports, "TimestampVector", { enumerable: true, get: function () { return Arrow_1.TimestampVector; } });
Object.defineProperty(exports, "TimestampSecondVector", { enumerable: true, get: function () { return Arrow_1.TimestampSecondVector; } });
Object.defineProperty(exports, "TimestampMillisecondVector", { enumerable: true, get: function () { return Arrow_1.TimestampMillisecondVector; } });
Object.defineProperty(exports, "TimestampMicrosecondVector", { enumerable: true, get: function () { return Arrow_1.TimestampMicrosecondVector; } });
Object.defineProperty(exports, "TimestampNanosecondVector", { enumerable: true, get: function () { return Arrow_1.TimestampNanosecondVector; } });
Object.defineProperty(exports, "TimeVector", { enumerable: true, get: function () { return Arrow_1.TimeVector; } });
Object.defineProperty(exports, "TimeSecondVector", { enumerable: true, get: function () { return Arrow_1.TimeSecondVector; } });
Object.defineProperty(exports, "TimeMillisecondVector", { enumerable: true, get: function () { return Arrow_1.TimeMillisecondVector; } });
Object.defineProperty(exports, "TimeMicrosecondVector", { enumerable: true, get: function () { return Arrow_1.TimeMicrosecondVector; } });
Object.defineProperty(exports, "TimeNanosecondVector", { enumerable: true, get: function () { return Arrow_1.TimeNanosecondVector; } });
Object.defineProperty(exports, "UnionVector", { enumerable: true, get: function () { return Arrow_1.UnionVector; } });
Object.defineProperty(exports, "DenseUnionVector", { enumerable: true, get: function () { return Arrow_1.DenseUnionVector; } });
Object.defineProperty(exports, "SparseUnionVector", { enumerable: true, get: function () { return Arrow_1.SparseUnionVector; } });
Object.defineProperty(exports, "Utf8Vector", { enumerable: true, get: function () { return Arrow_1.Utf8Vector; } });
Object.defineProperty(exports, "ByteStream", { enumerable: true, get: function () { return Arrow_1.ByteStream; } });
Object.defineProperty(exports, "AsyncByteStream", { enumerable: true, get: function () { return Arrow_1.AsyncByteStream; } });
Object.defineProperty(exports, "AsyncByteQueue", { enumerable: true, get: function () { return Arrow_1.AsyncByteQueue; } });
Object.defineProperty(exports, "RecordBatchReader", { enumerable: true, get: function () { return Arrow_1.RecordBatchReader; } });
Object.defineProperty(exports, "RecordBatchFileReader", { enumerable: true, get: function () { return Arrow_1.RecordBatchFileReader; } });
Object.defineProperty(exports, "RecordBatchStreamReader", { enumerable: true, get: function () { return Arrow_1.RecordBatchStreamReader; } });
Object.defineProperty(exports, "AsyncRecordBatchFileReader", { enumerable: true, get: function () { return Arrow_1.AsyncRecordBatchFileReader; } });
Object.defineProperty(exports, "AsyncRecordBatchStreamReader", { enumerable: true, get: function () { return Arrow_1.AsyncRecordBatchStreamReader; } });
Object.defineProperty(exports, "RecordBatchWriter", { enumerable: true, get: function () { return Arrow_1.RecordBatchWriter; } });
Object.defineProperty(exports, "RecordBatchFileWriter", { enumerable: true, get: function () { return Arrow_1.RecordBatchFileWriter; } });
Object.defineProperty(exports, "RecordBatchStreamWriter", { enumerable: true, get: function () { return Arrow_1.RecordBatchStreamWriter; } });
Object.defineProperty(exports, "RecordBatchJSONWriter", { enumerable: true, get: function () { return Arrow_1.RecordBatchJSONWriter; } });
Object.defineProperty(exports, "MessageReader", { enumerable: true, get: function () { return Arrow_1.MessageReader; } });
Object.defineProperty(exports, "AsyncMessageReader", { enumerable: true, get: function () { return Arrow_1.AsyncMessageReader; } });
Object.defineProperty(exports, "JSONMessageReader", { enumerable: true, get: function () { return Arrow_1.JSONMessageReader; } });
Object.defineProperty(exports, "Message", { enumerable: true, get: function () { return Arrow_1.Message; } });
Object.defineProperty(exports, "RecordBatch", { enumerable: true, get: function () { return Arrow_1.RecordBatch; } });
Object.defineProperty(exports, "DataFrame", { enumerable: true, get: function () { return Arrow_1.DataFrame; } });
Object.defineProperty(exports, "FilteredDataFrame", { enumerable: true, get: function () { return Arrow_1.FilteredDataFrame; } });
Object.defineProperty(exports, "CountByResult", { enumerable: true, get: function () { return Arrow_1.CountByResult; } });
Object.defineProperty(exports, "predicate", { enumerable: true, get: function () { return Arrow_1.predicate; } });
Object.defineProperty(exports, "util", { enumerable: true, get: function () { return Arrow_1.util; } });
Object.defineProperty(exports, "Builder", { enumerable: true, get: function () { return Arrow_1.Builder; } });
Object.defineProperty(exports, "BinaryBuilder", { enumerable: true, get: function () { return Arrow_1.BinaryBuilder; } });
Object.defineProperty(exports, "BoolBuilder", { enumerable: true, get: function () { return Arrow_1.BoolBuilder; } });
Object.defineProperty(exports, "DateBuilder", { enumerable: true, get: function () { return Arrow_1.DateBuilder; } });
Object.defineProperty(exports, "DateDayBuilder", { enumerable: true, get: function () { return Arrow_1.DateDayBuilder; } });
Object.defineProperty(exports, "DateMillisecondBuilder", { enumerable: true, get: function () { return Arrow_1.DateMillisecondBuilder; } });
Object.defineProperty(exports, "DecimalBuilder", { enumerable: true, get: function () { return Arrow_1.DecimalBuilder; } });
Object.defineProperty(exports, "DictionaryBuilder", { enumerable: true, get: function () { return Arrow_1.DictionaryBuilder; } });
Object.defineProperty(exports, "FixedSizeBinaryBuilder", { enumerable: true, get: function () { return Arrow_1.FixedSizeBinaryBuilder; } });
Object.defineProperty(exports, "FixedSizeListBuilder", { enumerable: true, get: function () { return Arrow_1.FixedSizeListBuilder; } });
Object.defineProperty(exports, "FloatBuilder", { enumerable: true, get: function () { return Arrow_1.FloatBuilder; } });
Object.defineProperty(exports, "Float16Builder", { enumerable: true, get: function () { return Arrow_1.Float16Builder; } });
Object.defineProperty(exports, "Float32Builder", { enumerable: true, get: function () { return Arrow_1.Float32Builder; } });
Object.defineProperty(exports, "Float64Builder", { enumerable: true, get: function () { return Arrow_1.Float64Builder; } });
Object.defineProperty(exports, "IntervalBuilder", { enumerable: true, get: function () { return Arrow_1.IntervalBuilder; } });
Object.defineProperty(exports, "IntervalDayTimeBuilder", { enumerable: true, get: function () { return Arrow_1.IntervalDayTimeBuilder; } });
Object.defineProperty(exports, "IntervalYearMonthBuilder", { enumerable: true, get: function () { return Arrow_1.IntervalYearMonthBuilder; } });
Object.defineProperty(exports, "IntBuilder", { enumerable: true, get: function () { return Arrow_1.IntBuilder; } });
Object.defineProperty(exports, "Int8Builder", { enumerable: true, get: function () { return Arrow_1.Int8Builder; } });
Object.defineProperty(exports, "Int16Builder", { enumerable: true, get: function () { return Arrow_1.Int16Builder; } });
Object.defineProperty(exports, "Int32Builder", { enumerable: true, get: function () { return Arrow_1.Int32Builder; } });
Object.defineProperty(exports, "Int64Builder", { enumerable: true, get: function () { return Arrow_1.Int64Builder; } });
Object.defineProperty(exports, "Uint8Builder", { enumerable: true, get: function () { return Arrow_1.Uint8Builder; } });
Object.defineProperty(exports, "Uint16Builder", { enumerable: true, get: function () { return Arrow_1.Uint16Builder; } });
Object.defineProperty(exports, "Uint32Builder", { enumerable: true, get: function () { return Arrow_1.Uint32Builder; } });
Object.defineProperty(exports, "Uint64Builder", { enumerable: true, get: function () { return Arrow_1.Uint64Builder; } });
Object.defineProperty(exports, "ListBuilder", { enumerable: true, get: function () { return Arrow_1.ListBuilder; } });
Object.defineProperty(exports, "MapBuilder", { enumerable: true, get: function () { return Arrow_1.MapBuilder; } });
Object.defineProperty(exports, "NullBuilder", { enumerable: true, get: function () { return Arrow_1.NullBuilder; } });
Object.defineProperty(exports, "StructBuilder", { enumerable: true, get: function () { return Arrow_1.StructBuilder; } });
Object.defineProperty(exports, "TimestampBuilder", { enumerable: true, get: function () { return Arrow_1.TimestampBuilder; } });
Object.defineProperty(exports, "TimestampSecondBuilder", { enumerable: true, get: function () { return Arrow_1.TimestampSecondBuilder; } });
Object.defineProperty(exports, "TimestampMillisecondBuilder", { enumerable: true, get: function () { return Arrow_1.TimestampMillisecondBuilder; } });
Object.defineProperty(exports, "TimestampMicrosecondBuilder", { enumerable: true, get: function () { return Arrow_1.TimestampMicrosecondBuilder; } });
Object.defineProperty(exports, "TimestampNanosecondBuilder", { enumerable: true, get: function () { return Arrow_1.TimestampNanosecondBuilder; } });
Object.defineProperty(exports, "TimeBuilder", { enumerable: true, get: function () { return Arrow_1.TimeBuilder; } });
Object.defineProperty(exports, "TimeSecondBuilder", { enumerable: true, get: function () { return Arrow_1.TimeSecondBuilder; } });
Object.defineProperty(exports, "TimeMillisecondBuilder", { enumerable: true, get: function () { return Arrow_1.TimeMillisecondBuilder; } });
Object.defineProperty(exports, "TimeMicrosecondBuilder", { enumerable: true, get: function () { return Arrow_1.TimeMicrosecondBuilder; } });
Object.defineProperty(exports, "TimeNanosecondBuilder", { enumerable: true, get: function () { return Arrow_1.TimeNanosecondBuilder; } });
Object.defineProperty(exports, "UnionBuilder", { enumerable: true, get: function () { return Arrow_1.UnionBuilder; } });
Object.defineProperty(exports, "DenseUnionBuilder", { enumerable: true, get: function () { return Arrow_1.DenseUnionBuilder; } });
Object.defineProperty(exports, "SparseUnionBuilder", { enumerable: true, get: function () { return Arrow_1.SparseUnionBuilder; } });
Object.defineProperty(exports, "Utf8Builder", { enumerable: true, get: function () { return Arrow_1.Utf8Builder; } });
Object.defineProperty(exports, "isTypedArray", { enumerable: true, get: function () { return Arrow_1.isTypedArray; } });


}(Arrow_dom));

/**
 * Copyright 2019 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const proxyMarker = Symbol("Comlink.proxy");
const createEndpoint = Symbol("Comlink.endpoint");
const releaseProxy = Symbol("Comlink.releaseProxy");
const throwMarker = Symbol("Comlink.thrown");
const isObject = (val) => (typeof val === "object" && val !== null) || typeof val === "function";
/**
 * Internal transfer handle to handle objects marked to proxy.
 */
const proxyTransferHandler = {
    canHandle: (val) => isObject(val) && val[proxyMarker],
    serialize(obj) {
        const { port1, port2 } = new MessageChannel();
        expose(obj, port1);
        return [port2, [port2]];
    },
    deserialize(port) {
        port.start();
        return wrap(port);
    },
};
/**
 * Internal transfer handler to handle thrown exceptions.
 */
const throwTransferHandler = {
    canHandle: (value) => isObject(value) && throwMarker in value,
    serialize({ value }) {
        let serialized;
        if (value instanceof Error) {
            serialized = {
                isError: true,
                value: {
                    message: value.message,
                    name: value.name,
                    stack: value.stack,
                },
            };
        }
        else {
            serialized = { isError: false, value };
        }
        return [serialized, []];
    },
    deserialize(serialized) {
        if (serialized.isError) {
            throw Object.assign(new Error(serialized.value.message), serialized.value);
        }
        throw serialized.value;
    },
};
/**
 * Allows customizing the serialization of certain values.
 */
const transferHandlers = new Map([
    ["proxy", proxyTransferHandler],
    ["throw", throwTransferHandler],
]);
function expose(obj, ep = self) {
    ep.addEventListener("message", function callback(ev) {
        if (!ev || !ev.data) {
            return;
        }
        const { id, type, path } = Object.assign({ path: [] }, ev.data);
        const argumentList = (ev.data.argumentList || []).map(fromWireValue);
        let returnValue;
        try {
            const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);
            const rawValue = path.reduce((obj, prop) => obj[prop], obj);
            switch (type) {
                case "GET" /* GET */:
                    {
                        returnValue = rawValue;
                    }
                    break;
                case "SET" /* SET */:
                    {
                        parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);
                        returnValue = true;
                    }
                    break;
                case "APPLY" /* APPLY */:
                    {
                        returnValue = rawValue.apply(parent, argumentList);
                    }
                    break;
                case "CONSTRUCT" /* CONSTRUCT */:
                    {
                        const value = new rawValue(...argumentList);
                        returnValue = proxy(value);
                    }
                    break;
                case "ENDPOINT" /* ENDPOINT */:
                    {
                        const { port1, port2 } = new MessageChannel();
                        expose(obj, port2);
                        returnValue = transfer(port1, [port1]);
                    }
                    break;
                case "RELEASE" /* RELEASE */:
                    {
                        returnValue = undefined;
                    }
                    break;
                default:
                    return;
            }
        }
        catch (value) {
            returnValue = { value, [throwMarker]: 0 };
        }
        Promise.resolve(returnValue)
            .catch((value) => {
            return { value, [throwMarker]: 0 };
        })
            .then((returnValue) => {
            const [wireValue, transferables] = toWireValue(returnValue);
            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);
            if (type === "RELEASE" /* RELEASE */) {
                // detach and deactive after sending release response above.
                ep.removeEventListener("message", callback);
                closeEndPoint(ep);
            }
        });
    });
    if (ep.start) {
        ep.start();
    }
}
function isMessagePort(endpoint) {
    return endpoint.constructor.name === "MessagePort";
}
function closeEndPoint(endpoint) {
    if (isMessagePort(endpoint))
        endpoint.close();
}
function wrap(ep, target) {
    return createProxy(ep, [], target);
}
function throwIfProxyReleased(isReleased) {
    if (isReleased) {
        throw new Error("Proxy has been released and is not useable");
    }
}
function createProxy(ep, path = [], target = function () { }) {
    let isProxyReleased = false;
    const proxy = new Proxy(target, {
        get(_target, prop) {
            throwIfProxyReleased(isProxyReleased);
            if (prop === releaseProxy) {
                return () => {
                    return requestResponseMessage(ep, {
                        type: "RELEASE" /* RELEASE */,
                        path: path.map((p) => p.toString()),
                    }).then(() => {
                        closeEndPoint(ep);
                        isProxyReleased = true;
                    });
                };
            }
            if (prop === "then") {
                if (path.length === 0) {
                    return { then: () => proxy };
                }
                const r = requestResponseMessage(ep, {
                    type: "GET" /* GET */,
                    path: path.map((p) => p.toString()),
                }).then(fromWireValue);
                return r.then.bind(r);
            }
            return createProxy(ep, [...path, prop]);
        },
        set(_target, prop, rawValue) {
            throwIfProxyReleased(isProxyReleased);
            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a
            // boolean. To show good will, we return true asynchronously ¯\_(ツ)_/¯
            const [value, transferables] = toWireValue(rawValue);
            return requestResponseMessage(ep, {
                type: "SET" /* SET */,
                path: [...path, prop].map((p) => p.toString()),
                value,
            }, transferables).then(fromWireValue);
        },
        apply(_target, _thisArg, rawArgumentList) {
            throwIfProxyReleased(isProxyReleased);
            const last = path[path.length - 1];
            if (last === createEndpoint) {
                return requestResponseMessage(ep, {
                    type: "ENDPOINT" /* ENDPOINT */,
                }).then(fromWireValue);
            }
            // We just pretend that `bind()` didn’t happen.
            if (last === "bind") {
                return createProxy(ep, path.slice(0, -1));
            }
            const [argumentList, transferables] = processArguments(rawArgumentList);
            return requestResponseMessage(ep, {
                type: "APPLY" /* APPLY */,
                path: path.map((p) => p.toString()),
                argumentList,
            }, transferables).then(fromWireValue);
        },
        construct(_target, rawArgumentList) {
            throwIfProxyReleased(isProxyReleased);
            const [argumentList, transferables] = processArguments(rawArgumentList);
            return requestResponseMessage(ep, {
                type: "CONSTRUCT" /* CONSTRUCT */,
                path: path.map((p) => p.toString()),
                argumentList,
            }, transferables).then(fromWireValue);
        },
    });
    return proxy;
}
function myFlat(arr) {
    return Array.prototype.concat.apply([], arr);
}
function processArguments(argumentList) {
    const processed = argumentList.map(toWireValue);
    return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];
}
const transferCache = new WeakMap();
function transfer(obj, transfers) {
    transferCache.set(obj, transfers);
    return obj;
}
function proxy(obj) {
    return Object.assign(obj, { [proxyMarker]: true });
}
function toWireValue(value) {
    for (const [name, handler] of transferHandlers) {
        if (handler.canHandle(value)) {
            const [serializedValue, transferables] = handler.serialize(value);
            return [
                {
                    type: "HANDLER" /* HANDLER */,
                    name,
                    value: serializedValue,
                },
                transferables,
            ];
        }
    }
    return [
        {
            type: "RAW" /* RAW */,
            value,
        },
        transferCache.get(value) || [],
    ];
}
function fromWireValue(value) {
    switch (value.type) {
        case "HANDLER" /* HANDLER */:
            return transferHandlers.get(value.name).deserialize(value.value);
        case "RAW" /* RAW */:
            return value.value;
    }
}
function requestResponseMessage(ep, msg, transfers) {
    return new Promise((resolve) => {
        const id = generateUUID();
        ep.addEventListener("message", function l(ev) {
            if (!ev.data || !ev.data.id || ev.data.id !== id) {
                return;
            }
            ep.removeEventListener("message", l);
            resolve(ev.data);
        });
        if (ep.start) {
            ep.start();
        }
        ep.postMessage(Object.assign({ id }, msg), transfers);
    });
}
function generateUUID() {
    return new Array(4)
        .fill(0)
        .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))
        .join("-");
}

class Counter extends Map {
  // A counter that allows arbitrary-length keys.

  get_count(x) {
    return super.get(x) || 0
  }

  get_counter(x) {
    const current = super.get(x);
    if (current) {return current} else {
      super.set(x, new Counter());
      return super.get(x)
    }
  }

  merge(counter) {
   // increment w/ values from another counter. Could be faster if it didn't
   // re-descend on every pair.
   for (let row of counter.value_iter()) {
     this.add(...row);
   }
  }

  inc(...values) {
   // Increment by 1.
   this.add(1, ...values);
  }

  add(i, ...values) {
    if (values.length === 1) {
      this.set(values[0], this.get_count(values[0]) + i);
    }
    else {
      const child = this.get_counter(values[0]);
      child.add(i, ...values.slice(1));
    }
  }

  is_counter() {

  }

  values() {
   return Array.from(this.value_iter())
  }

  *value_iter() {
   for (let [k, v] of this.entries()) {
     if (v.is_counter) {
       for (let row of v.value_iter()) {
         yield [row[0], k, ...row.slice(1)];
       }
     } else {
       yield [v, k];
     }
   }
  }
}

const encodedJs = "";
            const blob = typeof window !== "undefined" && window.Blob && new Blob([atob(encodedJs)], { type: "text/javascript;charset=utf-8" });
            function WorkerWrapper() {
              const objURL = blob && (window.URL || window.webkitURL).createObjectURL(blob);
              try {
                return objURL ? new Worker(objURL) : new Worker("data:application/javascript;base64," + encodedJs, {type: "module"});
              } finally {
                objURL && (window.URL || window.webkitURL).revokeObjectURL(objURL);
              }
            }

class Batch {
  download_to_depth() {
  }
}
class Tile extends Batch {
  constructor() {
    super();
    this.max_ix = void 0;
    this.promise = Promise.resolve();
    this.download_state = "Unattempted";
  }
  get dictionary_lookups() {
    return this.parent.dictionary_lookups;
  }
  is_visible(max_ix, viewport_limits) {
    if (this.min_ix > max_ix) {
      return false;
    }
    if (viewport_limits === void 0) {
      return false;
    }
    const c = this.extent;
    return !(c.x[0] > viewport_limits.x[1] || c.x[1] < viewport_limits.x[0] || c.y[0] > viewport_limits.y[1] || c.y[1] < viewport_limits.y[0]);
  }
  get tileWorker() {
    return this.parent.tileWorker;
  }
  get needed_mutations() {
    this._current_mutations = this._current_mutations || {};
    const needed = {};
    for (const [k, v] of Object.entries(this.mutations)) {
      const current = this._current_mutations[k];
      if (v !== current) {
        needed[k] = v;
      }
    }
    return needed;
  }
  apply_mutations_once() {
    const { needed_mutations } = this;
    if (Object.keys(needed_mutations).length === 0) {
      return Promise.resolve("complete");
    }
    if (needed_mutations === void 0) {
      return Promise.resolve("deferred");
    }
    return this.extend_promise(() => {
      this._table = void 0;
      return this.tileWorker.run_transforms(needed_mutations, transfer(this._table_buffer, [this._table_buffer])).then(([buffer, codes]) => {
        this._table_buffer = buffer;
        Object.assign(this._current_mutations, needed_mutations);
        this.local_dictionary_lookups = codes;
        this.update_master_dictionary_lookups();
        return "changed";
      });
    });
  }
  *points(bounding = void 0, sorted = false) {
    if (!this.is_visible(1e100, bounding)) {
      return;
    }
    for (const p of this) {
      if (p_in_rect$1([p.x, p.y], bounding)) {
        yield p;
      }
    }
    if (sorted == false) {
      for (const child of this.children) {
        if (!child.ready) {
          continue;
        }
        for (const p of child.points(bounding, sorted)) {
          if (p_in_rect$1([p.x, p.y], bounding)) {
            yield p;
          }
        }
      }
    } else {
      let children = this.children.map((tile) => {
        const f = {
          t: tile,
          iterator: tile.points(bounding, sorted),
          next: void 0
        };
        f.next = f.iterator.next();
        return f;
      });
      children = children.filter((d) => d.next.value);
      while (children.length > 0) {
        let mindex = 0;
        for (let i = 1; i < children.length; i++) {
          if (children[i].next.value.ix < children[mindex].next.value.ix) {
            mindex = i;
          }
        }
        yield children[mindex].next.value;
        children[mindex].next = children[mindex].iterator.next();
        if (children[mindex].next.done) {
          children = children.splice(mindex, 1);
        }
      }
    }
  }
  forEach(callback) {
    for (const p of this.points()) {
      if (p === void 0) {
        continue;
      }
      callback(p);
    }
  }
  set highest_known_ix(val) {
    if (this._highest_known_ix == void 0 || this._highest_known_ix < val) {
      this._highest_known_ix = val;
      if (this.parent) {
        this.parent.highest_known_ix = val;
      }
    }
  }
  get highest_known_ix() {
    return this._highest_known_ix;
  }
  get table() {
    if (this._table) {
      return this._table;
    }
    if (this._table_buffer && this._table_buffer.byteLength > 0) {
      console.log("BYTES", this._table_buffer.byteLength);
      return this._table = Arrow_dom.Table.from(this._table_buffer);
    }
    return void 0;
  }
  get min_ix() {
    if (this._min_ix !== void 0) {
      return this._min_ix;
    }
    if (this.parent) {
      return this.parent.max_ix + 1;
    }
    return void 0;
  }
  get schema() {
    return this.download().then((results) => this._schema);
  }
  extend_promise(callback) {
    this.promise = this.promise.then(() => callback());
    return this.promise;
  }
  get ready() {
    return this._table_buffer && this._table_buffer.byteLength > 0;
  }
  get _schema() {
    if (this.__schema) {
      return this.__schema;
    }
    const attributes = [];
    for (const field of this.table.schema.fields) {
      const { name, type, nullable } = field;
      if (type && type.typeId == 5) {
        attributes.push({
          name,
          type: "string"
        });
      }
      if (type && type.dictionary) {
        attributes.push({
          name,
          type: "dictionary",
          keys: this.table.getColumn(name).data.dictionary.toArray(),
          extent: [-2047, this.table.getColumn(name).data.dictionary.length - 2047]
        });
      }
      if (type && type.typeId == 8) {
        attributes.push({
          name,
          type: "date",
          extent: extent(this.table.getColumn(name).data.values)
        });
      }
      if (type && type.typeId == 3) {
        attributes.push({
          name,
          type: "float",
          extent: extent(this.table.getColumn(name).data.values)
        });
      }
    }
    this.__schema = attributes;
    return attributes;
  }
  *yielder() {
    for (const row of this.table) {
      if (row) {
        yield row;
      }
    }
  }
  update_master_dictionary_lookups() {
    const fields = this.local_dictionary_lookups;
    for (const [fieldname, dictionary] of Object.entries(fields)) {
      this.dictionary_lookups[fieldname] = this.dictionary_lookups[fieldname] || new Map();
      const map = this.dictionary_lookups[fieldname];
      let ix = 0;
      for (const [index, textvalue] of dictionary.entries()) {
        if (!map.has(textvalue)) {
          ix = map.size / 2;
          map.set(ix, textvalue);
          map.set(textvalue, ix);
        }
        this.dictionary_lookups[fieldname];
      }
    }
    this.dictionary_lookups;
  }
  get theoretical_extent() {
    const base = this.root_extent;
    const [z, x, y] = this.codes;
    const x_step = base.x[1] - base.x[0];
    const each_x = x_step / 2 ** z;
    const y_step = base.y[1] - base.y[0];
    const each_y = y_step / 2 ** z;
    return {
      x: [base.x[0] + x * each_x, base.x[0] + (x + 1) * each_x],
      y: [base.y[0] + y * each_y, base.y[0] + (y + 1) * each_y]
    };
  }
  get extent() {
    if (this._extent) {
      return this._extent;
    }
    return this.theoretical_extent;
  }
  get mutations() {
    return this.parent.mutations;
  }
  [Symbol.iterator]() {
    return this.yielder();
  }
  count(...category_names) {
    const cols = [];
    for (const k of category_names) {
      cols.push(this.table.getColumn(k));
    }
    const counts = new Counter();
    for (let i = 0; i < this.table.length; i++) {
      const k = cols.map((d) => d.get(i));
      counts.inc(...k);
    }
    return counts;
  }
  get root_extent() {
    return this.parent.root_extent;
  }
}
class QuadTile extends Tile {
  constructor(base_url, key, parent = void 0, prefs) {
    super();
    this.url = base_url;
    this.parent = parent;
    if (parent === void 0) {
      this._mutations = prefs.mutate;
    }
    this.key = key;
    const [z, x, y] = key.split("/").map((d) => parseInt(d));
    this.codes = [z, x, y];
    this.class = new.target;
  }
  download_to_depth(depth, corners = { x: [-1, 1], y: [-1, 1] }, recurse = false) {
    if (this.max_ix < depth && this.is_visible(depth, corners) && !recurse) {
      const promises = this.children.map((child) => child.download());
      if (this._children) {
        for (const child of this._children) {
          promises.concat(child.download_to_depth(depth, corners, false));
        }
      }
      return Promise.all(promises);
    }
    return this.download().then(() => {
      if (this.max_ix < depth && this.is_visible(depth, corners) && recurse) {
        const child_processes = this.children.map((child) => child.download_to_depth(depth, corners));
        return Promise.all(child_processes).then((d) => this);
      }
      return this;
    });
  }
  download() {
    if (this._download) {
      return this._download;
    }
    if (this._already_called) {
      throw "Illegally attempting to download twice";
    }
    this._already_called = true;
    const url = this.url.match("//") ? `${this.url}/${this.key}.feather` : `${window.location.origin}/${this.url}/${this.key}.feather`;
    this.download_state = "In progress";
    this._download = this.tileWorker.fetch(url, this.needed_mutations).catch((err) => {
      this.download_state = "Errored";
      throw err;
    }).then(([buffer, metadata, codes]) => {
      this.download_state = "Complete";
      this._current_mutations = JSON.parse(JSON.stringify(this.needed_mutations));
      this._table_buffer = buffer;
      this._table = Arrow_dom.Table.from(buffer);
      this._extent = JSON.parse(metadata.get("extent"));
      this.child_locations = JSON.parse(metadata.get("children"));
      this._min_ix = this.table.getColumn("ix").get(0);
      this.max_ix = this.table.getColumn("ix").get(this.table.length - 1);
      this.highest_known_ix = this.max_ix;
      this._current_mutations = JSON.parse(JSON.stringify(this.needed_mutations));
      this.local_dictionary_lookups = codes;
      this.update_master_dictionary_lookups();
      return this.table;
    });
    return this._download;
  }
  get children() {
    if (this._children !== void 0) {
      return this._children;
    }
    if (this.download_state !== "Complete") {
      return [];
    }
    this._children = [];
    for (const key of this.child_locations) {
      this._children.push(new this.class(this.url, key, this));
    }
    return this._children;
  }
}
class RootTile extends QuadTile {
  constructor(base_url, prefs = {}) {
    let key;
    if (base_url.match(/(\/[0-9]+){3}/)) {
      const sections = base_url.split("/");
      base_url = sections.slice(0, -3).join("/");
      key = sections.slice(-3).join("/");
    } else {
      key = "0/0/0";
    }
    super(base_url, key, void 0, prefs);
    this.extend_promise(() => this.download());
    this._min_ix = 1;
  }
  get root_extent() {
    if (this._extent) {
      return this._extent;
    }
    return void 0;
  }
  log_tiles(depth = 1, f = (tile) => `${tile.children.length}`) {
    const array = [];
    const w = range(2 ** depth);
    for (const i of w) {
      array[i] = [];
      for (const j of w) {
        array[i][j] = " ";
      }
      array[i][2 ** depth] = "|";
    }
    array[2 ** depth] = Array(2 ** depth + 1).fill("-");
    this.visit((tile) => {
      const [z, x, y] = tile.key.split("/").map((d) => +d);
      if (z === depth) {
        array[y][x] = "_";
        array[y][x] = f(tile);
      }
    });
    array.map((a) => a.join(""));
  }
  download_most_needed_tiles(bbox, max_ix, queue_length = 4) {
    if (!this._download_queue) {
      this._download_queue = new Set();
    }
    const queue = this._download_queue;
    if (queue.size >= queue_length) {
      return;
    }
    const scores = [];
    const callback = (tile) => {
      const distance = check_overlap(tile, bbox);
      scores.push([distance, tile, bbox, tile.download_state]);
    };
    this.visit(callback);
    scores.sort((a, b) => a[0] - b[0]);
    for (const [d, t, bb, state] of scores) {
    }
    while (scores.length && queue.size < queue_length) {
      const [distance, tile, bbox2, _] = scores.pop();
      if (tile.min_ix > max_ix || distance < 0) {
        continue;
      }
      if (tile.download_state !== "Unattempted") {
        continue;
      }
      queue.add(tile.key);
      tile.download().catch((err) => {
        console.warn("Error on", tile.key);
        queue.delete(tile.key);
        throw err;
      }).then(() => queue.delete(tile.key));
    }
  }
  get children() {
    if (this._children !== void 0) {
      return this._children;
    }
    if (this.download_state !== "Complete") {
      return [];
    }
    this._children = [];
    for (const key of this.child_locations) {
      this._children.push(new QuadTile(this.url, key, this));
    }
    return this._children;
  }
  get mutations() {
    return this._mutations ? this._mutations : this._mutations = {};
  }
  findPoint(ix) {
    return this.map((t) => t).filter((t) => t.table && t.min_ix <= ix && t.max_ix >= ix).map((t) => {
      const mid = bisectLeft(t.table.getColumn("ix").data.values, ix);
      if (t.table.get(mid) && t.table.get(mid).ix === ix) {
        return t.table.get(mid);
      }
      return null;
    }).filter((d) => d);
  }
  apply_mutations(function_map, synchronous = false) {
    Object.assign(this.mutations, function_map);
    const all = this.map((tile) => tile.apply_mutations_once(function_map));
    if (synchronous) {
      return all;
    }
    return Promise.all(all);
  }
  get dictionary_lookups() {
    return this._dictionary_lookups ? this._dictionary_lookups : this._dictionary_lookups = {};
  }
  get tileWorker() {
    const NUM_WORKERS = 8;
    if (this._tileWorkers !== void 0) {
      this._tileWorkers.unshift(this._tileWorkers.pop());
      return this._tileWorkers[0];
    }
    this._tileWorkers = [];
    for (const i of range(NUM_WORKERS)) {
      console.log(`Allocating worker ${i}`);
      this._tileWorkers.push(wrap(new WorkerWrapper()));
    }
    return this._tileWorkers[0];
  }
  map(callback, after = false) {
    const q = [];
    this.visit((d) => {
      q.push(callback(d));
    }, after = after);
    return q;
  }
  visit(callback, after = false, filter = () => true) {
    const stack = [this];
    const after_stack = [];
    let current;
    while (current = stack.shift()) {
      if (!after) {
        callback(current);
      } else {
        after_stack.push(current);
      }
      if (!filter(current)) {
        continue;
      }
      if (current.download_state == "Complete") {
        stack.push(...current.children);
      }
    }
    if (after) {
      while (current = after_stack.pop()) {
        callback(current);
      }
    }
  }
}
function p_in_rect$1(p, rect) {
  if (rect === void 0) {
    return true;
  }
  return p[0] < rect.x[1] && p[0] > rect.x[0] && p[1] < rect.y[1] && p[1] > rect.y[0];
}
function area(rect) {
  return (rect.x[1] - rect.x[0]) * (rect.y[1] - rect.y[0]);
}
function check_overlap(tile, bbox) {
  const c = tile.extent;
  if (c.x[0] > bbox.x[1] || c.x[1] < bbox.x[0] || c.y[0] > bbox.y[1] || c.y[1] < bbox.y[0]) ;
  const intersection = {
    x: [
      max([bbox.x[0], c.x[0]]),
      min([bbox.x[1], c.x[1]])
    ],
    y: [
      max([bbox.y[0], c.y[0]]),
      min([bbox.y[1], c.y[1]])
    ]
  };
  const { x, y } = intersection;
  let disqualify = 0;
  if (x[0] > x[1]) {
    disqualify -= 1;
  }
  if (y[0] > y[1]) {
    disqualify -= 2;
  }
  if (disqualify < 0) {
    return disqualify;
  }
  return area(intersection) / area(bbox);
}

const base_elements = [
  {
    id: "canvas-2d-background",
    nodetype: "canvas"
  },
  {
    id: "webgl-canvas",
    nodetype: "canvas"
  },
  {
    id: "canvas-2d",
    nodetype: "canvas"
  },
  {
    id: "deepscatter-svg",
    nodetype: "svg"
  }
];
class Scatterplot {
  constructor(selector, width, height) {
    this.bound = false;
    if (selector !== void 0) {
      this.bind(selector, width, height);
    }
    this.d3 = { select };
  }
  bind(selector, width, height) {
    this.width = width;
    this.height = height;
    this.div = select(selector).selectAll("div.deepscatter_container").data([1]).join("div").attr("class", "deepscatter_container").style("width", width + "px").style("height", height + "px");
    if (this.div.empty()) {
      console.error(selector);
      throw "Must pass a valid div selector";
    }
    this.elements = [];
    this.prefs = {
      zoom_balance: 0.35,
      duration: 2,
      point_size: 1,
      alpha: 0.4,
      click_function: "alert(`You clicked on a point with data ${JSON.stringify(datum)}`)"
    };
    for (const d of base_elements) {
      const container = this.div.append("div").attr("id", `container-for-${d.id}`).style("position", "absolute").style("top", 0).style("left", 0).style("pointer-events", d.id === "deepscatter-svg" ? "auto" : "none");
      container.append(d.nodetype).attr("id", d.id).attr("width", width || window.innerWidth).attr("height", height || window.innerHeight);
      this.elements.push(container);
    }
    this.bound = true;
  }
  async reinitialize() {
    const { prefs } = this;
    this._root = new RootTile(this.source_url, prefs);
    await this._root.download();
    this._renderer = new ReglRenderer("#container-for-webgl-canvas", this._root, this);
    this._zoom = new Zoom("#deepscatter-svg", this.prefs);
    this._zoom.attach_tiles(this._root);
    this._zoom.attach_renderer("regl", this._renderer);
    this._zoom.initialize_zoom();
    this._zoom._tooltip_html = prefs.tooltip_html;
    const bkgd = select("#container-for-canvas-2d-background").select("canvas");
    const ctx = bkgd.node().getContext("2d");
    ctx.fillStyle = prefs.background_color || "rgba(133, 133, 111, .8)";
    ctx.fillRect(0, 0, window.innerWidth * 2, window.innerHeight * 2);
    this._renderer.initialize();
    return this._root.promise;
  }
  visualize_tiles() {
    const map = this;
    const ctx = map.elements[2].selectAll("canvas").node().getContext("2d");
    ctx.clearRect(0, 0, 1e4, 1e4);
    const { x_, y_ } = map._zoom.scales();
    ctx.strokeStyle = "#888888";
    const tiles = map._root.map((t) => t);
    for (const i of range(13)) {
      setTimeout(() => {
        for (const tile of tiles) {
          if (tile.codes[0] != i) {
            continue;
          }
          if (!tile.extent) {
            continue;
          }
          const [x1, x2] = tile.extent.x.map((x) => x_(x));
          const [y1, y2] = tile.extent.y.map((y) => y_(y));
          const depth = tile.codes[0];
          ctx.lineWidth = 8 / Math.sqrt(depth);
          ctx.globalAlpha = 0.33;
          ctx.strokeRect(x1, y1, x2 - x1, y2 - y1);
          if (tile.download_state !== "Unattempted") {
            ctx.fillRect(x1, y1, x2 - x1, y2 - y1);
          }
          ctx.globalAlpha = 1;
        }
      }, i * 400);
    }
  }
  update_prefs(prefs) {
    if (prefs.encoding && prefs.encoding.alpha) {
      console.warn("Setting alpha through encoding--deprecated.");
      prefs.alpha = prefs.encoding.alpha;
    }
    if (prefs.jitter) {
      console.warn("Setting jitter type through base argument--deprectated");
      if (typeof prefs.encoding.jitter_radius === "number") {
        prefs.encoding.jitter_radius = {
          constant: prefs.encoding.jitter_radius
        };
      }
      prefs.encoding.jitter_radius.method = prefs.jitter;
    }
    for (const k in ["jitter", "alpha", "max_points"]) {
      prefs[`last_${k}`] = this.prefs[k] || void 0;
    }
    if (this.prefs.encoding && prefs.encoding) {
      for (const k of Object.keys(this.prefs.encoding)) {
        if (prefs.encoding[k]) {
          this.prefs.encoding[k] = prefs.encoding[k];
        }
      }
    }
    merge(this.prefs, prefs);
  }
  set tooltip_html(func) {
    this._tooltip_html = func;
    this._zoom._tooltip_html = func;
  }
  get tooltip_html() {
    return this._tooltip_html;
  }
  async plotAPI(prefs = {}) {
    if (prefs === void 0 || prefs === null) {
      return Promise.resolve(1);
    }
    this.update_prefs(prefs);
    if (prefs.lookup_tables) {
      const table_loads = [];
      this.lookup_promises = this.lookup_promises || new Map();
      for (const table of prefs.lookup_tables) {
        if (!this.lookup_promises.get(table)) {
          table_loads.push(this.load_lookup_table(table));
        }
      }
      await Promise.all(table_loads);
    }
    if (prefs.source_url && prefs.source_url !== this.source_url) {
      this.source_url = prefs.source_url;
      await this.reinitialize();
    }
    if (prefs.basemap_gleofeather) {
      prefs.polygons = [{ file: prefs.basemap_gleofeather }];
    }
    await this._root.promise;
    if (prefs.mutate) {
      this._root.apply_mutations(prefs.mutate);
    }
    const { width, height } = this;
    this.update_prefs(prefs);
    if (prefs.zoom !== void 0) {
      if (prefs.zoom === null) {
        this._zoom.zoom_to(1, width / 2, height / 2);
        prefs.zoom = void 0;
      } else if (prefs.zoom.bbox) {
        this._zoom.zoom_to_bbox(prefs.zoom.bbox, prefs.duration);
      }
    }
    this._renderer.most_recent_restart = Date.now();
    this._renderer.aes.apply_encoding(prefs.encoding);
    if (this._renderer.apply_webgl_scale) {
      this._renderer.apply_webgl_scale(prefs);
    }
    if (this._renderer.reglframe) {
      this._renderer.reglframe.cancel();
    }
    this._renderer.reglframe = this._renderer.regl.frame(() => {
      this._renderer.tick("Basic");
    });
    this._zoom.restart_timer(6e4);
  }
  async root_table() {
    if (!this._root) {
      return false;
    }
    return this._root.table;
  }
  get query() {
    const p = JSON.parse(JSON.stringify(this.prefs));
    p.zoom = { bbox: this._renderer.zoom.current_corners() };
    return p;
  }
  top_n_points(n = 20) {
    const { _root, _renderer } = this;
    const current_corners = _renderer.zoom.current_corners();
    const output = [];
    const filter1 = _renderer.aes.filter1.current.get_function();
    const filter2 = _renderer.aes.filter2.current.get_function();
    for (const p of _root.points(current_corners, true)) {
      if (filter1(p) && filter2(p)) {
        output.push(p);
      }
      if (output.length >= n) {
        return output;
      }
    }
    return output;
  }
  drawContours(contours, drawTo) {
    const drawTwo = drawTo || select("body");
    const canvas = drawTwo.select("#canvas-2d");
    const ctx = canvas.node().getContext("2d");
    for (const contour of contours) {
      ctx.fillStyle = "rgba(25, 25, 29, 1)";
      ctx.fillRect(0, 0, window.innerWidth * 2, window.innerHeight * 2);
      ctx.strokeStyle = "#8a0303";
      ctx.fillStyle = "rgba(30, 30, 34, 1)";
      ctx.lineWidth = max([0.45, 0.25 * Math.exp(Math.log(this._zoom.transform.k / 2))]);
      const path = geoPath(geoIdentity().scale(this._zoom.transform.k).translate([this._zoom.transform.x, this._zoom.transform.y]), ctx);
      ctx.beginPath(), path(contour), ctx.fill();
    }
  }
  contours(aes) {
    const data = this._renderer.calculate_contours(aes);
    const {
      x,
      y,
      x_,
      y_
    } = this._zoom.scales();
    function fix_point(p) {
      if (!p) {
        return;
      }
      if (p.coordinates) {
        return fix_point(p.coordinates);
      }
      if (!p.length) {
        return;
      }
      if (p[0].length) {
        return p.map(fix_point);
      }
      p[0] = x(x_.invert(p[0]));
      p[1] = y(y_.invert(p[1]));
    }
    fix_point(data);
    this.drawContours(data);
  }
}

export { Scatterplot as default };
